
F429ZI_FRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7ac  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  0800a95c  0800a95c  0001a95c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800abac  0800abac  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800abac  0800abac  0001abac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800abb4  0800abb4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800abb4  0800abb4  0001abb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800abb8  0800abb8  0001abb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800abbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          0000447c  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000c00  200044f0  200044f0  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d62f  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e87  00000000  00000000  0003d6d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001938  00000000  00000000  00041560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000017c8  00000000  00000000  00042e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000289d2  00000000  00000000  00044660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d8c6  00000000  00000000  0006d032  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f132d  00000000  00000000  0008a8f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0017bc25  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007200  00000000  00000000  0017bc78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a944 	.word	0x0800a944

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	0800a944 	.word	0x0800a944

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	4a06      	ldr	r2, [pc, #24]	; (80005c4 <vApplicationGetIdleTaskMemory+0x30>)
 80005aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2280      	movs	r2, #128	; 0x80
 80005b0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005b2:	bf00      	nop
 80005b4:	3714      	adds	r7, #20
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	20000090 	.word	0x20000090
 80005c4:	200000e4 	.word	0x200000e4

080005c8 <__io_putchar>:
	/******************************************************************
	  * @name   PUTCHAR_PROTOTYPE
	  * @brief  Retargets the C library printf function to the USART.
	  *****************************************************************/
	PUTCHAR_PROTOTYPE
	{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
		HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);				//Use USART3
 80005d0:	1d39      	adds	r1, r7, #4
 80005d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005d6:	2201      	movs	r2, #1
 80005d8:	4803      	ldr	r0, [pc, #12]	; (80005e8 <__io_putchar+0x20>)
 80005da:	f005 f864 	bl	80056a6 <HAL_UART_Transmit>
		return ch;
 80005de:	687b      	ldr	r3, [r7, #4]
	}
 80005e0:	4618      	mov	r0, r3
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	200005d8 	.word	0x200005d8

080005ec <main>:
/************************************************************
  * @brief  The application entry point.
  * @retval int
  ***********************************************************/
int main(void)
{
 80005ec:	b5b0      	push	{r4, r5, r7, lr}
 80005ee:	b09a      	sub	sp, #104	; 0x68
 80005f0:	af02      	add	r7, sp, #8
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f2:	f001 f8c3 	bl	800177c <HAL_Init>

  /* Configure the system clock (HSE- PLL 180 MHz) */
  SystemClock_Config();
 80005f6:	f000 f9af 	bl	8000958 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fa:	f000 fb21 	bl	8000c40 <MX_GPIO_Init>
  MX_DMA_Init();
 80005fe:	f000 fad9 	bl	8000bb4 <MX_DMA_Init>
  MX_CRC_Init();
 8000602:	f000 fa19 	bl	8000a38 <MX_CRC_Init>
  MX_I2C1_Init();
 8000606:	f000 fa2b 	bl	8000a60 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 800060a:	f000 fa9b 	bl	8000b44 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 800060e:	f000 fa67 	bl	8000ae0 <MX_SPI1_Init>

  printf("\r\nHW Initialization OK\r\n");
 8000612:	4843      	ldr	r0, [pc, #268]	; (8000720 <main+0x134>)
 8000614:	f009 fa18 	bl	8009a48 <puts>

  /* Event Group */

  xEventGroup = xEventGroupCreate();
 8000618:	f006 fb90 	bl	8006d3c <xEventGroupCreate>
 800061c:	4603      	mov	r3, r0
 800061e:	4a41      	ldr	r2, [pc, #260]	; (8000724 <main+0x138>)
 8000620:	6013      	str	r3, [r2, #0]
  if( xEventGroup == NULL )
 8000622:	4b40      	ldr	r3, [pc, #256]	; (8000724 <main+0x138>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d102      	bne.n	8000630 <main+0x44>
  {
	  printf("Event Group Fail!!!\r\n");
 800062a:	483f      	ldr	r0, [pc, #252]	; (8000728 <main+0x13c>)
 800062c:	f009 fa0c 	bl	8009a48 <puts>
  }

  /* RTOS_SEMAPHORES */
  osSemaphoreDef(SEM);
 8000630:	2300      	movs	r3, #0
 8000632:	65bb      	str	r3, [r7, #88]	; 0x58
 8000634:	2300      	movs	r3, #0
 8000636:	65fb      	str	r3, [r7, #92]	; 0x5c
  osSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1);
 8000638:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800063c:	2101      	movs	r1, #1
 800063e:	4618      	mov	r0, r3
 8000640:	f006 fafb 	bl	8006c3a <osSemaphoreCreate>
 8000644:	4603      	mov	r3, r0
 8000646:	4a39      	ldr	r2, [pc, #228]	; (800072c <main+0x140>)
 8000648:	6013      	str	r3, [r2, #0]

  /* RTOS_QUEUE */
  delay_queue 	= xQueueCreate(delay_queue_len, sizeof(PrintMessage));
 800064a:	2305      	movs	r3, #5
 800064c:	2200      	movs	r2, #0
 800064e:	2118      	movs	r1, #24
 8000650:	4618      	mov	r0, r3
 8000652:	f006 fed5 	bl	8007400 <xQueueGenericCreate>
 8000656:	4603      	mov	r3, r0
 8000658:	4a35      	ldr	r2, [pc, #212]	; (8000730 <main+0x144>)
 800065a:	6013      	str	r3, [r2, #0]
  msg_queue 	= xQueueCreate(msg_queue_len, sizeof(PrintMessage));
 800065c:	2305      	movs	r3, #5
 800065e:	2200      	movs	r2, #0
 8000660:	2118      	movs	r1, #24
 8000662:	4618      	mov	r0, r3
 8000664:	f006 fecc 	bl	8007400 <xQueueGenericCreate>
 8000668:	4603      	mov	r3, r0
 800066a:	4a32      	ldr	r2, [pc, #200]	; (8000734 <main+0x148>)
 800066c:	6013      	str	r3, [r2, #0]
  if( ( delay_queue == NULL ) || ( msg_queue == NULL ) )
 800066e:	4b30      	ldr	r3, [pc, #192]	; (8000730 <main+0x144>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d003      	beq.n	800067e <main+0x92>
 8000676:	4b2f      	ldr	r3, [pc, #188]	; (8000734 <main+0x148>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d103      	bne.n	8000686 <main+0x9a>
  {
	  printf("Queue creation Fail!!!\r\n");
 800067e:	482e      	ldr	r0, [pc, #184]	; (8000738 <main+0x14c>)
 8000680:	f009 f9e2 	bl	8009a48 <puts>
 8000684:	e002      	b.n	800068c <main+0xa0>
  }else{
	  printf("Queue creation OK\r\n");
 8000686:	482d      	ldr	r0, [pc, #180]	; (800073c <main+0x150>)
 8000688:	f009 f9de 	bl	8009a48 <puts>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */


  /* RTOS TASKS */
  xTaskCreate(Default_Thread, "DEFAULT_TASK", 128, NULL, osPriorityBelowNormal, &defaultThreadHandle);
 800068c:	4b2c      	ldr	r3, [pc, #176]	; (8000740 <main+0x154>)
 800068e:	9301      	str	r3, [sp, #4]
 8000690:	f04f 33ff 	mov.w	r3, #4294967295
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	2300      	movs	r3, #0
 8000698:	2280      	movs	r2, #128	; 0x80
 800069a:	492a      	ldr	r1, [pc, #168]	; (8000744 <main+0x158>)
 800069c:	482a      	ldr	r0, [pc, #168]	; (8000748 <main+0x15c>)
 800069e:	f007 fc94 	bl	8007fca <xTaskCreate>

  /* LED Thread definition */
  osThreadDef(LEDTask, LED_Thread, osPriorityHigh, 0, configMINIMAL_STACK_SIZE);
 80006a2:	4b2a      	ldr	r3, [pc, #168]	; (800074c <main+0x160>)
 80006a4:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80006a8:	461d      	mov	r5, r3
 80006aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LEDThreadHandle = osThreadCreate (osThread(LEDTask), (void *) osSemaphore);
 80006b6:	4b1d      	ldr	r3, [pc, #116]	; (800072c <main+0x140>)
 80006b8:	681a      	ldr	r2, [r3, #0]
 80006ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80006be:	4611      	mov	r1, r2
 80006c0:	4618      	mov	r0, r3
 80006c2:	f006 fa5a 	bl	8006b7a <osThreadCreate>
 80006c6:	4603      	mov	r3, r0
 80006c8:	4a21      	ldr	r2, [pc, #132]	; (8000750 <main+0x164>)
 80006ca:	6013      	str	r3, [r2, #0]

  /* UART Thread definition */
  osThreadDef(UARTTask, UART_Thread,  osPriorityAboveNormal, 0, configMINIMAL_STACK_SIZE);
 80006cc:	4b21      	ldr	r3, [pc, #132]	; (8000754 <main+0x168>)
 80006ce:	f107 0420 	add.w	r4, r7, #32
 80006d2:	461d      	mov	r5, r3
 80006d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UARTThreadHandle = osThreadCreate (osThread(UARTTask), NULL);
 80006e0:	f107 0320 	add.w	r3, r7, #32
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f006 fa47 	bl	8006b7a <osThreadCreate>
 80006ec:	4603      	mov	r3, r0
 80006ee:	4a1a      	ldr	r2, [pc, #104]	; (8000758 <main+0x16c>)
 80006f0:	6013      	str	r3, [r2, #0]

  /* Button Thread definition */
  osThreadDef(ButtonTask, Button_Thread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);
 80006f2:	4b1a      	ldr	r3, [pc, #104]	; (800075c <main+0x170>)
 80006f4:	1d3c      	adds	r4, r7, #4
 80006f6:	461d      	mov	r5, r3
 80006f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000700:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ButtonThreadHandle = osThreadCreate (osThread(ButtonTask), (void *) osSemaphore);
 8000704:	4b09      	ldr	r3, [pc, #36]	; (800072c <main+0x140>)
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	4611      	mov	r1, r2
 800070c:	4618      	mov	r0, r3
 800070e:	f006 fa34 	bl	8006b7a <osThreadCreate>
 8000712:	4603      	mov	r3, r0
 8000714:	4a12      	ldr	r2, [pc, #72]	; (8000760 <main+0x174>)
 8000716:	6013      	str	r3, [r2, #0]

  /* Start scheduler */
  osKernelStart();
 8000718:	f006 fa28 	bl	8006b6c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  while (1)
 800071c:	e7fe      	b.n	800071c <main+0x130>
 800071e:	bf00      	nop
 8000720:	0800a97c 	.word	0x0800a97c
 8000724:	20000738 	.word	0x20000738
 8000728:	0800a994 	.word	0x0800a994
 800072c:	20000734 	.word	0x20000734
 8000730:	2000072c 	.word	0x2000072c
 8000734:	20000730 	.word	0x20000730
 8000738:	0800a9ac 	.word	0x0800a9ac
 800073c:	0800a9c4 	.word	0x0800a9c4
 8000740:	2000071c 	.word	0x2000071c
 8000744:	0800a9d8 	.word	0x0800a9d8
 8000748:	08000949 	.word	0x08000949
 800074c:	0800a9e8 	.word	0x0800a9e8
 8000750:	20000728 	.word	0x20000728
 8000754:	0800aa04 	.word	0x0800aa04
 8000758:	20000724 	.word	0x20000724
 800075c:	0800aa20 	.word	0x0800aa20
 8000760:	20000720 	.word	0x20000720

08000764 <UART_Thread>:
  * @brief  LED thread
  * @param  semaphore
  * @retval None
  ************************************************************/
void UART_Thread(void const *argument)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b08a      	sub	sp, #40	; 0x28
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
	struct PrintMessage rcv_msg;
	uint32_t TickDelay = pdMS_TO_TICKS(3000);
 800076c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000770:	627b      	str	r3, [r7, #36]	; 0x24

	for(;;)
	{
		// See if there's a message in the queue
		if (xQueueReceive(msg_queue, (void *)&rcv_msg, portMAX_DELAY) != pdTRUE) {
 8000772:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <UART_Thread+0x44>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f107 010c 	add.w	r1, r7, #12
 800077a:	f04f 32ff 	mov.w	r2, #4294967295
 800077e:	4618      	mov	r0, r3
 8000780:	f007 f832 	bl	80077e8 <xQueueReceive>
 8000784:	4603      	mov	r3, r0
 8000786:	2b01      	cmp	r3, #1
 8000788:	d003      	beq.n	8000792 <UART_Thread+0x2e>
			printf("Error in Receiving from Queue\r\n\n");
 800078a:	4808      	ldr	r0, [pc, #32]	; (80007ac <UART_Thread+0x48>)
 800078c:	f009 f95c 	bl	8009a48 <puts>
 8000790:	e005      	b.n	800079e <UART_Thread+0x3a>

		}else{

			printf("UART Thread RUN from %s\r\n\n",rcv_msg.body);
 8000792:	f107 030c 	add.w	r3, r7, #12
 8000796:	4619      	mov	r1, r3
 8000798:	4805      	ldr	r0, [pc, #20]	; (80007b0 <UART_Thread+0x4c>)
 800079a:	f009 f8cf 	bl	800993c <iprintf>
		}

		vTaskDelay(TickDelay);
 800079e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80007a0:	f007 fd4a 	bl	8008238 <vTaskDelay>
		if (xQueueReceive(msg_queue, (void *)&rcv_msg, portMAX_DELAY) != pdTRUE) {
 80007a4:	e7e5      	b.n	8000772 <UART_Thread+0xe>
 80007a6:	bf00      	nop
 80007a8:	20000730 	.word	0x20000730
 80007ac:	0800aa3c 	.word	0x0800aa3c
 80007b0:	0800aa5c 	.word	0x0800aa5c

080007b4 <LED_Thread>:
  * @brief  LED thread
  * @param  semaphore
  * @retval None
  ************************************************************/
void LED_Thread(void const *argument)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08e      	sub	sp, #56	; 0x38
 80007b8:	af02      	add	r7, sp, #8
 80007ba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80007bc:	2300      	movs	r3, #0
 80007be:	62fb      	str	r3, [r7, #44]	; 0x2c
  //osSemaphoreId semaphore = (osSemaphoreId) argument;

  const TickType_t xTicksToWait = 100 / portTICK_PERIOD_MS;
 80007c0:	2364      	movs	r3, #100	; 0x64
 80007c2:	62bb      	str	r3, [r7, #40]	; 0x28
  EventBits_t uxBits;

  for(;;)
  {
    count = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	62fb      	str	r3, [r7, #44]	; 0x2c

    //printf("blink LED1 for 2S \r\n");
    while (count <= 20)
 80007c8:	e009      	b.n	80007de <LED_Thread+0x2a>
    {
    	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80007ca:	2101      	movs	r1, #1
 80007cc:	484c      	ldr	r0, [pc, #304]	; (8000900 <LED_Thread+0x14c>)
 80007ce:	f001 feea 	bl	80025a6 <HAL_GPIO_TogglePin>
    	osDelay(200);
 80007d2:	20c8      	movs	r0, #200	; 0xc8
 80007d4:	f006 fa1d 	bl	8006c12 <osDelay>
    	count++;
 80007d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007da:	3301      	adds	r3, #1
 80007dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (count <= 20)
 80007de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007e0:	2b14      	cmp	r3, #20
 80007e2:	d9f2      	bls.n	80007ca <LED_Thread+0x16>
    }

    /* Turn off LED */
    //printf("turn off LEDS for 2S \r\n");
    HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	2101      	movs	r1, #1
 80007e8:	4845      	ldr	r0, [pc, #276]	; (8000900 <LED_Thread+0x14c>)
 80007ea:	f001 fec3 	bl	8002574 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2180      	movs	r1, #128	; 0x80
 80007f2:	4843      	ldr	r0, [pc, #268]	; (8000900 <LED_Thread+0x14c>)
 80007f4:	f001 febe 	bl	8002574 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80007f8:	2200      	movs	r2, #0
 80007fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007fe:	4840      	ldr	r0, [pc, #256]	; (8000900 <LED_Thread+0x14c>)
 8000800:	f001 feb8 	bl	8002574 <HAL_GPIO_WritePin>


    /* Release the semaphore */
    //osSemaphoreRelease(semaphore);

    vTaskDelay(2000);
 8000804:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000808:	f007 fd16 	bl	8008238 <vTaskDelay>


    /* Wait a maximum of 100ms for either bit 0,4 or bit 5 in event group.  Clear the bits before exiting. */
	uxBits = xEventGroupWaitBits(
 800080c:	4b3d      	ldr	r3, [pc, #244]	; (8000904 <LED_Thread+0x150>)
 800080e:	6818      	ldr	r0, [r3, #0]
 8000810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000812:	9300      	str	r3, [sp, #0]
 8000814:	2300      	movs	r3, #0
 8000816:	2200      	movs	r2, #0
 8000818:	2111      	movs	r1, #17
 800081a:	f006 faa9 	bl	8006d70 <xEventGroupWaitBits>
 800081e:	6278      	str	r0, [r7, #36]	; 0x24
			BIT_0 | BIT_4, 		/* The bits within the event group to wait for. */
			pdFALSE,        	/* BIT_0 & BIT_4 not cleared before returning. */
			pdFALSE,       		/* Don't wait for both bits, either bit will do. */
			xTicksToWait );		/* Wait a maximum of 100ms for either bit to be set. */

	if( uxBits  == ( BIT_0 | BIT_4 ) )
 8000820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000822:	2b11      	cmp	r3, #17
 8000824:	d13c      	bne.n	80008a0 <LED_Thread+0xec>
	{
		/*both bits were set. */
		//printf("Both set (LED2 ON)\r\n\n\n");
		count = 0;
 8000826:	2300      	movs	r3, #0
 8000828:	62fb      	str	r3, [r7, #44]	; 0x2c
		while (count <= 10)
 800082a:	e009      	b.n	8000840 <LED_Thread+0x8c>
		{
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800082c:	2180      	movs	r1, #128	; 0x80
 800082e:	4834      	ldr	r0, [pc, #208]	; (8000900 <LED_Thread+0x14c>)
 8000830:	f001 feb9 	bl	80025a6 <HAL_GPIO_TogglePin>
			vTaskDelay(200);
 8000834:	20c8      	movs	r0, #200	; 0xc8
 8000836:	f007 fcff 	bl	8008238 <vTaskDelay>
			count++;
 800083a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800083c:	3301      	adds	r3, #1
 800083e:	62fb      	str	r3, [r7, #44]	; 0x2c
		while (count <= 10)
 8000840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000842:	2b0a      	cmp	r3, #10
 8000844:	d9f2      	bls.n	800082c <LED_Thread+0x78>
		}

		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	2180      	movs	r1, #128	; 0x80
 800084a:	482d      	ldr	r0, [pc, #180]	; (8000900 <LED_Thread+0x14c>)
 800084c:	f001 fe92 	bl	8002574 <HAL_GPIO_WritePin>
		uxBits = xEventGroupClearBits( xEventGroup,  BIT_0 | BIT_4 );
 8000850:	4b2c      	ldr	r3, [pc, #176]	; (8000904 <LED_Thread+0x150>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	2111      	movs	r1, #17
 8000856:	4618      	mov	r0, r3
 8000858:	f006 fb58 	bl	8006f0c <xEventGroupClearBits>
 800085c:	6278      	str	r0, [r7, #36]	; 0x24

		// Construct message and send
		PrintMessage msg;
		strcpy(msg.body, "LED Thread");
 800085e:	f107 0308 	add.w	r3, r7, #8
 8000862:	4a29      	ldr	r2, [pc, #164]	; (8000908 <LED_Thread+0x154>)
 8000864:	ca07      	ldmia	r2, {r0, r1, r2}
 8000866:	c303      	stmia	r3!, {r0, r1}
 8000868:	801a      	strh	r2, [r3, #0]
 800086a:	3302      	adds	r3, #2
 800086c:	0c12      	lsrs	r2, r2, #16
 800086e:	701a      	strb	r2, [r3, #0]
		msg.count = 1;
 8000870:	2301      	movs	r3, #1
 8000872:	61fb      	str	r3, [r7, #28]

		if (xQueueSend(msg_queue, &msg, portMAX_DELAY) == pdPASS){
 8000874:	4b25      	ldr	r3, [pc, #148]	; (800090c <LED_Thread+0x158>)
 8000876:	6818      	ldr	r0, [r3, #0]
 8000878:	f107 0108 	add.w	r1, r7, #8
 800087c:	2300      	movs	r3, #0
 800087e:	f04f 32ff 	mov.w	r2, #4294967295
 8000882:	f006 fe17 	bl	80074b4 <xQueueGenericSend>
 8000886:	4603      	mov	r3, r0
 8000888:	2b01      	cmp	r3, #1
 800088a:	d102      	bne.n	8000892 <LED_Thread+0xde>
			printf("\r\n\nsent msg queue\r\n");
 800088c:	4820      	ldr	r0, [pc, #128]	; (8000910 <LED_Thread+0x15c>)
 800088e:	f009 f8db 	bl	8009a48 <puts>
		}

		uint32_t TickDelay = pdMS_TO_TICKS(2000);
 8000892:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000896:	623b      	str	r3, [r7, #32]
		vTaskDelay(TickDelay);
 8000898:	6a38      	ldr	r0, [r7, #32]
 800089a:	f007 fccd 	bl	8008238 <vTaskDelay>
 800089e:	e791      	b.n	80007c4 <LED_Thread+0x10>

	}
	else if( ( uxBits & BIT_0 ) != 0 )
 80008a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d007      	beq.n	80008ba <LED_Thread+0x106>
	{
		/* BIT_0 was set. */
		uxBits = xEventGroupSetBits(xEventGroup,BIT_4);
 80008aa:	4b16      	ldr	r3, [pc, #88]	; (8000904 <LED_Thread+0x150>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	2110      	movs	r1, #16
 80008b0:	4618      	mov	r0, r3
 80008b2:	f006 fb63 	bl	8006f7c <xEventGroupSetBits>
 80008b6:	6278      	str	r0, [r7, #36]	; 0x24
 80008b8:	e784      	b.n	80007c4 <LED_Thread+0x10>
		//printf("BIT0 set \r\n\n\n");
	}
	else if( ( uxBits & BIT_4 ) != 0 )
 80008ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008bc:	f003 0310 	and.w	r3, r3, #16
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d007      	beq.n	80008d4 <LED_Thread+0x120>
	{
		/* BIT_4 was set. */
		uxBits = xEventGroupSetBits(xEventGroup,BIT_0);
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <LED_Thread+0x150>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	2101      	movs	r1, #1
 80008ca:	4618      	mov	r0, r3
 80008cc:	f006 fb56 	bl	8006f7c <xEventGroupSetBits>
 80008d0:	6278      	str	r0, [r7, #36]	; 0x24
 80008d2:	e777      	b.n	80007c4 <LED_Thread+0x10>
		//printf("BIT4 set \r\n\n\n");
	}
	else if( ( uxBits & BIT_5 ) != 0 )
 80008d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d6:	f003 0320 	and.w	r3, r3, #32
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d007      	beq.n	80008ee <LED_Thread+0x13a>
	{
		/* BIT_5 was set. */
		//printf("BIT5 set, (LED3 ON) \r\n\n\n");
		uxBits = xEventGroupClearBits( xEventGroup,  BIT_5);
 80008de:	4b09      	ldr	r3, [pc, #36]	; (8000904 <LED_Thread+0x150>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	2120      	movs	r1, #32
 80008e4:	4618      	mov	r0, r3
 80008e6:	f006 fb11 	bl	8006f0c <xEventGroupClearBits>
 80008ea:	6278      	str	r0, [r7, #36]	; 0x24
 80008ec:	e76a      	b.n	80007c4 <LED_Thread+0x10>
	}
	else
	{
		/* Timeout */
		//printf("timeout xEventGroup\r\n\n\n");
		uxBits = xEventGroupSetBits(
 80008ee:	4b05      	ldr	r3, [pc, #20]	; (8000904 <LED_Thread+0x150>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	2101      	movs	r1, #1
 80008f4:	4618      	mov	r0, r3
 80008f6:	f006 fb41 	bl	8006f7c <xEventGroupSetBits>
 80008fa:	6278      	str	r0, [r7, #36]	; 0x24
    count = 0;
 80008fc:	e762      	b.n	80007c4 <LED_Thread+0x10>
 80008fe:	bf00      	nop
 8000900:	40020400 	.word	0x40020400
 8000904:	20000738 	.word	0x20000738
 8000908:	0800aa78 	.word	0x0800aa78
 800090c:	20000730 	.word	0x20000730
 8000910:	0800aa84 	.word	0x0800aa84

08000914 <Button_Thread>:
  * @brief  Button thread
  * @param  semaphore
  * @retval None
  ************************************************************/
void Button_Thread(void const *argument)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]

  osSemaphoreId semaphore = (osSemaphoreId) argument;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
	if (semaphore != NULL)
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d0fc      	beq.n	8000920 <Button_Thread+0xc>
	{
		/* Try to obtain the semaphore. */
		if(osSemaphoreWait(semaphore , portMAX_DELAY) == osOK){
 8000926:	f04f 31ff 	mov.w	r1, #4294967295
 800092a:	68f8      	ldr	r0, [r7, #12]
 800092c:	f006 f9b8 	bl	8006ca0 <osSemaphoreWait>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d1f4      	bne.n	8000920 <Button_Thread+0xc>
			//printf("run button interrupt\r\n");
			xEventGroupSetBits(xEventGroup,BIT_5);
 8000936:	4b03      	ldr	r3, [pc, #12]	; (8000944 <Button_Thread+0x30>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	2120      	movs	r1, #32
 800093c:	4618      	mov	r0, r3
 800093e:	f006 fb1d 	bl	8006f7c <xEventGroupSetBits>
	if (semaphore != NULL)
 8000942:	e7ed      	b.n	8000920 <Button_Thread+0xc>
 8000944:	20000738 	.word	0x20000738

08000948 <Default_Thread>:
  * @param  argument: Not used
  * @retval None
  ***********************************************************/

void Default_Thread(void * argument)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8000950:	2064      	movs	r0, #100	; 0x64
 8000952:	f006 f95e 	bl	8006c12 <osDelay>
 8000956:	e7fb      	b.n	8000950 <Default_Thread+0x8>

08000958 <SystemClock_Config>:
/************************************************************
  * @brief System Clock Configuration
  * @retval None
  ************************************************************/
void SystemClock_Config(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b094      	sub	sp, #80	; 0x50
 800095c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800095e:	f107 0320 	add.w	r3, r7, #32
 8000962:	2230      	movs	r2, #48	; 0x30
 8000964:	2100      	movs	r1, #0
 8000966:	4618      	mov	r0, r3
 8000968:	f008 ffe0 	bl	800992c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800096c:	f107 030c 	add.w	r3, r7, #12
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
 800097a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage*/
  __HAL_RCC_PWR_CLK_ENABLE();
 800097c:	2300      	movs	r3, #0
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	4b2b      	ldr	r3, [pc, #172]	; (8000a30 <SystemClock_Config+0xd8>)
 8000982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000984:	4a2a      	ldr	r2, [pc, #168]	; (8000a30 <SystemClock_Config+0xd8>)
 8000986:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800098a:	6413      	str	r3, [r2, #64]	; 0x40
 800098c:	4b28      	ldr	r3, [pc, #160]	; (8000a30 <SystemClock_Config+0xd8>)
 800098e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000994:	60bb      	str	r3, [r7, #8]
 8000996:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000998:	2300      	movs	r3, #0
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	4b25      	ldr	r3, [pc, #148]	; (8000a34 <SystemClock_Config+0xdc>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a24      	ldr	r2, [pc, #144]	; (8000a34 <SystemClock_Config+0xdc>)
 80009a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009a6:	6013      	str	r3, [r2, #0]
 80009a8:	4b22      	ldr	r3, [pc, #136]	; (8000a34 <SystemClock_Config+0xdc>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators */
  RCC_OscInitStruct.OscillatorType 	= RCC_OSCILLATORTYPE_HSE;
 80009b4:	2301      	movs	r3, #1
 80009b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState 		= RCC_HSE_BYPASS;
 80009b8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState	= RCC_PLL_ON;
 80009be:	2302      	movs	r3, #2
 80009c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource 	= RCC_PLLSOURCE_HSE;
 80009c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM 		= 4;
 80009c8:	2304      	movs	r3, #4
 80009ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN 		= 180;
 80009cc:	23b4      	movs	r3, #180	; 0xb4
 80009ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP 		= RCC_PLLP_DIV2;
 80009d0:	2302      	movs	r3, #2
 80009d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ 		= 7;
 80009d4:	2307      	movs	r3, #7
 80009d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d8:	f107 0320 	add.w	r3, r7, #32
 80009dc:	4618      	mov	r0, r3
 80009de:	f003 fcf5 	bl	80043cc <HAL_RCC_OscConfig>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009e8:	f000 fa1a 	bl	8000e20 <Error_Handler>
  }

  /** Activate the Over-Drive mode */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009ec:	f003 fc9e 	bl	800432c <HAL_PWREx_EnableOverDrive>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80009f6:	f000 fa13 	bl	8000e20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocksm */
  RCC_ClkInitStruct.ClockType 		= RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009fa:	230f      	movs	r3, #15
 80009fc:	60fb      	str	r3, [r7, #12]
                              	  	  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource 	= RCC_SYSCLKSOURCE_PLLCLK;
 80009fe:	2302      	movs	r3, #2
 8000a00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider 	= RCC_SYSCLK_DIV1;
 8000a02:	2300      	movs	r3, #0
 8000a04:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider 	= RCC_HCLK_DIV4;
 8000a06:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a0a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider 	= RCC_HCLK_DIV2;
 8000a0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a10:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a12:	f107 030c 	add.w	r3, r7, #12
 8000a16:	2105      	movs	r1, #5
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f003 ff4f 	bl	80048bc <HAL_RCC_ClockConfig>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000a24:	f000 f9fc 	bl	8000e20 <Error_Handler>
  }
}
 8000a28:	bf00      	nop
 8000a2a:	3750      	adds	r7, #80	; 0x50
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40023800 	.word	0x40023800
 8000a34:	40007000 	.word	0x40007000

08000a38 <MX_CRC_Init>:
  * @brief 	CRC Initialization Function
  * @param 	None
  * @retval None
  ************************************************************/
static void MX_CRC_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  hcrc.Instance = CRC;
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <MX_CRC_Init+0x20>)
 8000a3e:	4a07      	ldr	r2, [pc, #28]	; (8000a5c <MX_CRC_Init+0x24>)
 8000a40:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000a42:	4805      	ldr	r0, [pc, #20]	; (8000a58 <MX_CRC_Init+0x20>)
 8000a44:	f000 ffbe 	bl	80019c4 <HAL_CRC_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000a4e:	f000 f9e7 	bl	8000e20 <Error_Handler>
  }
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	200002e4 	.word	0x200002e4
 8000a5c:	40023000 	.word	0x40023000

08000a60 <MX_I2C1_Init>:
  * @brief 	I2C1 Initialization Function
  * @param 	None
  * @retval None
  ************************************************************/
static void MX_I2C1_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  hi2c1.Instance 				= I2C1;
 8000a64:	4b1b      	ldr	r3, [pc, #108]	; (8000ad4 <MX_I2C1_Init+0x74>)
 8000a66:	4a1c      	ldr	r2, [pc, #112]	; (8000ad8 <MX_I2C1_Init+0x78>)
 8000a68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed 		= 100000;
 8000a6a:	4b1a      	ldr	r3, [pc, #104]	; (8000ad4 <MX_I2C1_Init+0x74>)
 8000a6c:	4a1b      	ldr	r2, [pc, #108]	; (8000adc <MX_I2C1_Init+0x7c>)
 8000a6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle 			= I2C_DUTYCYCLE_2;
 8000a70:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <MX_I2C1_Init+0x74>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 		= 0;
 8000a76:	4b17      	ldr	r3, [pc, #92]	; (8000ad4 <MX_I2C1_Init+0x74>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode 	= I2C_ADDRESSINGMODE_7BIT;
 8000a7c:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <MX_I2C1_Init+0x74>)
 8000a7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a82:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode 	= I2C_DUALADDRESS_DISABLE;
 8000a84:	4b13      	ldr	r3, [pc, #76]	; (8000ad4 <MX_I2C1_Init+0x74>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 		= 0;
 8000a8a:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <MX_I2C1_Init+0x74>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode 	= I2C_GENERALCALL_DISABLE;
 8000a90:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <MX_I2C1_Init+0x74>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode 		= I2C_NOSTRETCH_DISABLE;
 8000a96:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <MX_I2C1_Init+0x74>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a9c:	480d      	ldr	r0, [pc, #52]	; (8000ad4 <MX_I2C1_Init+0x74>)
 8000a9e:	f001 fdb5 	bl	800260c <HAL_I2C_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000aa8:	f000 f9ba 	bl	8000e20 <Error_Handler>
  }

  /** Configure Analogue filter*/
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aac:	2100      	movs	r1, #0
 8000aae:	4809      	ldr	r0, [pc, #36]	; (8000ad4 <MX_I2C1_Init+0x74>)
 8000ab0:	f003 fbc1 	bl	8004236 <HAL_I2CEx_ConfigAnalogFilter>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000aba:	f000 f9b1 	bl	8000e20 <Error_Handler>
  }

  /** Configure Digital filter*/
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000abe:	2100      	movs	r1, #0
 8000ac0:	4804      	ldr	r0, [pc, #16]	; (8000ad4 <MX_I2C1_Init+0x74>)
 8000ac2:	f003 fbf4 	bl	80042ae <HAL_I2CEx_ConfigDigitalFilter>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000acc:	f000 f9a8 	bl	8000e20 <Error_Handler>
  }
}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	200002ec 	.word	0x200002ec
 8000ad8:	40005400 	.word	0x40005400
 8000adc:	000186a0 	.word	0x000186a0

08000ae0 <MX_SPI1_Init>:
  * @brief 	SPI1 Initialization Function
  * @param 	None
  * @retval None
  ************************************************************/
static void MX_SPI1_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* SPI1 parameter configuration*/
  hspi1.Instance 					= SPI1;
 8000ae4:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <MX_SPI1_Init+0x5c>)
 8000ae6:	4a16      	ldr	r2, [pc, #88]	; (8000b40 <MX_SPI1_Init+0x60>)
 8000ae8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode 					= SPI_MODE_SLAVE;
 8000aea:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <MX_SPI1_Init+0x5c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction 				= SPI_DIRECTION_2LINES;
 8000af0:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <MX_SPI1_Init+0x5c>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize 				= SPI_DATASIZE_8BIT;
 8000af6:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <MX_SPI1_Init+0x5c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity 			= SPI_POLARITY_LOW;
 8000afc:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <MX_SPI1_Init+0x5c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase 				= SPI_PHASE_1EDGE;
 8000b02:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <MX_SPI1_Init+0x5c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS 					= SPI_NSS_SOFT;
 8000b08:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <MX_SPI1_Init+0x5c>)
 8000b0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b0e:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit 				= SPI_FIRSTBIT_MSB;
 8000b10:	4b0a      	ldr	r3, [pc, #40]	; (8000b3c <MX_SPI1_Init+0x5c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode 				= SPI_TIMODE_DISABLE;
 8000b16:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <MX_SPI1_Init+0x5c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation 		= SPI_CRCCALCULATION_DISABLE;
 8000b1c:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <MX_SPI1_Init+0x5c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial 			= 10;
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <MX_SPI1_Init+0x5c>)
 8000b24:	220a      	movs	r2, #10
 8000b26:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b28:	4804      	ldr	r0, [pc, #16]	; (8000b3c <MX_SPI1_Init+0x5c>)
 8000b2a:	f004 f919 	bl	8004d60 <HAL_SPI_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 8000b34:	f000 f974 	bl	8000e20 <Error_Handler>
  }
}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000400 	.word	0x20000400
 8000b40:	40013000 	.word	0x40013000

08000b44 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  ************************************************************/
static void MX_USART3_UART_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  huart3.Instance 				= USART3;
 8000b48:	4b17      	ldr	r3, [pc, #92]	; (8000ba8 <MX_USART3_UART_Init+0x64>)
 8000b4a:	4a18      	ldr	r2, [pc, #96]	; (8000bac <MX_USART3_UART_Init+0x68>)
 8000b4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate 			= 115200;
 8000b4e:	4b16      	ldr	r3, [pc, #88]	; (8000ba8 <MX_USART3_UART_Init+0x64>)
 8000b50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength 		= UART_WORDLENGTH_8B;
 8000b56:	4b14      	ldr	r3, [pc, #80]	; (8000ba8 <MX_USART3_UART_Init+0x64>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits 			= UART_STOPBITS_1;
 8000b5c:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <MX_USART3_UART_Init+0x64>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity 			= UART_PARITY_NONE;
 8000b62:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <MX_USART3_UART_Init+0x64>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode 				= UART_MODE_TX_RX;
 8000b68:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <MX_USART3_UART_Init+0x64>)
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl 		= UART_HWCONTROL_NONE;
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <MX_USART3_UART_Init+0x64>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling 		= UART_OVERSAMPLING_16;
 8000b74:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <MX_USART3_UART_Init+0x64>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b7a:	480b      	ldr	r0, [pc, #44]	; (8000ba8 <MX_USART3_UART_Init+0x64>)
 8000b7c:	f004 fd46 	bl	800560c <HAL_UART_Init>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b86:	f000 f94b 	bl	8000e20 <Error_Handler>
  }

  __HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);
 8000b8a:	4b07      	ldr	r3, [pc, #28]	; (8000ba8 <MX_USART3_UART_Init+0x64>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	68da      	ldr	r2, [r3, #12]
 8000b90:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <MX_USART3_UART_Init+0x64>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f042 0210 	orr.w	r2, r2, #16
 8000b98:	60da      	str	r2, [r3, #12]
  HAL_UART_Receive_DMA(&huart3, (uint8_t*)uart3Rcv_buff, UART3_RX_BUFFER_SIZE);
 8000b9a:	22ff      	movs	r2, #255	; 0xff
 8000b9c:	4904      	ldr	r1, [pc, #16]	; (8000bb0 <MX_USART3_UART_Init+0x6c>)
 8000b9e:	4802      	ldr	r0, [pc, #8]	; (8000ba8 <MX_USART3_UART_Init+0x64>)
 8000ba0:	f004 fe13 	bl	80057ca <HAL_UART_Receive_DMA>
}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	200005d8 	.word	0x200005d8
 8000bac:	40004800 	.word	0x40004800
 8000bb0:	2000061c 	.word	0x2000061c

08000bb4 <MX_DMA_Init>:

/************************************************************
  * Enable DMA controller clock
  ************************************************************/
static void MX_DMA_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	607b      	str	r3, [r7, #4]
 8000bbe:	4b1f      	ldr	r3, [pc, #124]	; (8000c3c <MX_DMA_Init+0x88>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a1e      	ldr	r2, [pc, #120]	; (8000c3c <MX_DMA_Init+0x88>)
 8000bc4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b1c      	ldr	r3, [pc, #112]	; (8000c3c <MX_DMA_Init+0x88>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	603b      	str	r3, [r7, #0]
 8000bda:	4b18      	ldr	r3, [pc, #96]	; (8000c3c <MX_DMA_Init+0x88>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a17      	ldr	r2, [pc, #92]	; (8000c3c <MX_DMA_Init+0x88>)
 8000be0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
 8000be6:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <MX_DMA_Init+0x88>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bee:	603b      	str	r3, [r7, #0]
 8000bf0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2105      	movs	r1, #5
 8000bf6:	200b      	movs	r0, #11
 8000bf8:	f000 feba 	bl	8001970 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000bfc:	200b      	movs	r0, #11
 8000bfe:	f000 fed3 	bl	80019a8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2105      	movs	r1, #5
 8000c06:	2011      	movs	r0, #17
 8000c08:	f000 feb2 	bl	8001970 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000c0c:	2011      	movs	r0, #17
 8000c0e:	f000 fecb 	bl	80019a8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2105      	movs	r1, #5
 8000c16:	2038      	movs	r0, #56	; 0x38
 8000c18:	f000 feaa 	bl	8001970 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c1c:	2038      	movs	r0, #56	; 0x38
 8000c1e:	f000 fec3 	bl	80019a8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2105      	movs	r1, #5
 8000c26:	203b      	movs	r0, #59	; 0x3b
 8000c28:	f000 fea2 	bl	8001970 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000c2c:	203b      	movs	r0, #59	; 0x3b
 8000c2e:	f000 febb 	bl	80019a8 <HAL_NVIC_EnableIRQ>

}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40023800 	.word	0x40023800

08000c40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  ************************************************************/
static void MX_GPIO_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08c      	sub	sp, #48	; 0x30
 8000c44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c46:	f107 031c 	add.w	r3, r7, #28
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
 8000c54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	61bb      	str	r3, [r7, #24]
 8000c5a:	4b48      	ldr	r3, [pc, #288]	; (8000d7c <MX_GPIO_Init+0x13c>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a47      	ldr	r2, [pc, #284]	; (8000d7c <MX_GPIO_Init+0x13c>)
 8000c60:	f043 0304 	orr.w	r3, r3, #4
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b45      	ldr	r3, [pc, #276]	; (8000d7c <MX_GPIO_Init+0x13c>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0304 	and.w	r3, r3, #4
 8000c6e:	61bb      	str	r3, [r7, #24]
 8000c70:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	617b      	str	r3, [r7, #20]
 8000c76:	4b41      	ldr	r3, [pc, #260]	; (8000d7c <MX_GPIO_Init+0x13c>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a40      	ldr	r2, [pc, #256]	; (8000d7c <MX_GPIO_Init+0x13c>)
 8000c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b3e      	ldr	r3, [pc, #248]	; (8000d7c <MX_GPIO_Init+0x13c>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c8a:	617b      	str	r3, [r7, #20]
 8000c8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	613b      	str	r3, [r7, #16]
 8000c92:	4b3a      	ldr	r3, [pc, #232]	; (8000d7c <MX_GPIO_Init+0x13c>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	4a39      	ldr	r2, [pc, #228]	; (8000d7c <MX_GPIO_Init+0x13c>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9e:	4b37      	ldr	r3, [pc, #220]	; (8000d7c <MX_GPIO_Init+0x13c>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	613b      	str	r3, [r7, #16]
 8000ca8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	4b33      	ldr	r3, [pc, #204]	; (8000d7c <MX_GPIO_Init+0x13c>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	4a32      	ldr	r2, [pc, #200]	; (8000d7c <MX_GPIO_Init+0x13c>)
 8000cb4:	f043 0302 	orr.w	r3, r3, #2
 8000cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cba:	4b30      	ldr	r3, [pc, #192]	; (8000d7c <MX_GPIO_Init+0x13c>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	f003 0302 	and.w	r3, r3, #2
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60bb      	str	r3, [r7, #8]
 8000cca:	4b2c      	ldr	r3, [pc, #176]	; (8000d7c <MX_GPIO_Init+0x13c>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	4a2b      	ldr	r2, [pc, #172]	; (8000d7c <MX_GPIO_Init+0x13c>)
 8000cd0:	f043 0308 	orr.w	r3, r3, #8
 8000cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd6:	4b29      	ldr	r3, [pc, #164]	; (8000d7c <MX_GPIO_Init+0x13c>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	f003 0308 	and.w	r3, r3, #8
 8000cde:	60bb      	str	r3, [r7, #8]
 8000ce0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	607b      	str	r3, [r7, #4]
 8000ce6:	4b25      	ldr	r3, [pc, #148]	; (8000d7c <MX_GPIO_Init+0x13c>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	4a24      	ldr	r2, [pc, #144]	; (8000d7c <MX_GPIO_Init+0x13c>)
 8000cec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf2:	4b22      	ldr	r3, [pc, #136]	; (8000d7c <MX_GPIO_Init+0x13c>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f244 0181 	movw	r1, #16513	; 0x4081
 8000d04:	481e      	ldr	r0, [pc, #120]	; (8000d80 <MX_GPIO_Init+0x140>)
 8000d06:	f001 fc35 	bl	8002574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin 	= USER_Btn_Pin;
 8000d0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode 	= GPIO_MODE_IT_RISING;
 8000d10:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000d1a:	f107 031c 	add.w	r3, r7, #28
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4818      	ldr	r0, [pc, #96]	; (8000d84 <MX_GPIO_Init+0x144>)
 8000d22:	f001 fa7b 	bl	800221c <HAL_GPIO_Init>

  /* Enable and set EXTI lines 15 to 10 Interrupt */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 15, 0);
 8000d26:	2200      	movs	r2, #0
 8000d28:	210f      	movs	r1, #15
 8000d2a:	2028      	movs	r0, #40	; 0x28
 8000d2c:	f000 fe20 	bl	8001970 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d30:	2028      	movs	r0, #40	; 0x28
 8000d32:	f000 fe39 	bl	80019a8 <HAL_NVIC_EnableIRQ>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin 	= LD1_Pin|LD3_Pin|LD2_Pin;
 8000d36:	f244 0381 	movw	r3, #16513	; 0x4081
 8000d3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d44:	2300      	movs	r3, #0
 8000d46:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d48:	f107 031c 	add.w	r3, r7, #28
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	480c      	ldr	r0, [pc, #48]	; (8000d80 <MX_GPIO_Init+0x140>)
 8000d50:	f001 fa64 	bl	800221c <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000d54:	2200      	movs	r2, #0
 8000d56:	2101      	movs	r1, #1
 8000d58:	4809      	ldr	r0, [pc, #36]	; (8000d80 <MX_GPIO_Init+0x140>)
 8000d5a:	f001 fc0b 	bl	8002574 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2180      	movs	r1, #128	; 0x80
 8000d62:	4807      	ldr	r0, [pc, #28]	; (8000d80 <MX_GPIO_Init+0x140>)
 8000d64:	f001 fc06 	bl	8002574 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d6e:	4804      	ldr	r0, [pc, #16]	; (8000d80 <MX_GPIO_Init+0x140>)
 8000d70:	f001 fc00 	bl	8002574 <HAL_GPIO_WritePin>

}
 8000d74:	bf00      	nop
 8000d76:	3730      	adds	r7, #48	; 0x30
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	40020400 	.word	0x40020400
 8000d84:	40020800 	.word	0x40020800

08000d88 <HAL_GPIO_EXTI_Callback>:
  * @brief EXTI line detection callbacks
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  ***********************************************************/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08a      	sub	sp, #40	; 0x28
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == USER_Btn_Pin)
 8000d92:	88fb      	ldrh	r3, [r7, #6]
 8000d94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d98:	d123      	bne.n	8000de2 <HAL_GPIO_EXTI_Callback+0x5a>
	  /*******************************************************************************
	   * The xHigherPriorityTaskWoken parameter must be initialized to pdFALSE as
	   * it will get set to pdTRUE inside the interrupt safe API function if a
	   * context switch is required.
	   *******************************************************************************/
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	627b      	str	r3, [r7, #36]	; 0x24

		// Construct message and send
		PrintMessage msg;
		strcpy(msg.body, "GPIO INT");
 8000d9e:	f107 030c 	add.w	r3, r7, #12
 8000da2:	4a12      	ldr	r2, [pc, #72]	; (8000dec <HAL_GPIO_EXTI_Callback+0x64>)
 8000da4:	ca07      	ldmia	r2, {r0, r1, r2}
 8000da6:	c303      	stmia	r3!, {r0, r1}
 8000da8:	701a      	strb	r2, [r3, #0]
		msg.count = 1;
 8000daa:	2301      	movs	r3, #1
 8000dac:	623b      	str	r3, [r7, #32]

		if (xQueueSendToFrontFromISR(msg_queue, &msg, &xHigherPriorityTaskWoken) == pdPASS)
 8000dae:	4b10      	ldr	r3, [pc, #64]	; (8000df0 <HAL_GPIO_EXTI_Callback+0x68>)
 8000db0:	6818      	ldr	r0, [r3, #0]
 8000db2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000db6:	f107 010c 	add.w	r1, r7, #12
 8000dba:	2301      	movs	r3, #1
 8000dbc:	f006 fc78 	bl	80076b0 <xQueueGenericSendFromISR>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d102      	bne.n	8000dcc <HAL_GPIO_EXTI_Callback+0x44>
		{
			printf("INT Handler queue sent\r\n\n");
 8000dc6:	480b      	ldr	r0, [pc, #44]	; (8000df4 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000dc8:	f008 fe3e 	bl	8009a48 <puts>
		 * then calling portEND_SWITCHING_ISR() will request a context switch. If
		 * xHigherPriorityTaskWoken is still pdFALSE then calling
		 * portEND_SWITCHING_ISR() will have no effect
		 *****************************************************************************/

		portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8000dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d007      	beq.n	8000de2 <HAL_GPIO_EXTI_Callback+0x5a>
 8000dd2:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <HAL_GPIO_EXTI_Callback+0x70>)
 8000dd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	f3bf 8f4f 	dsb	sy
 8000dde:	f3bf 8f6f 	isb	sy
  }
}
 8000de2:	bf00      	nop
 8000de4:	3728      	adds	r7, #40	; 0x28
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	0800aa98 	.word	0x0800aa98
 8000df0:	20000730 	.word	0x20000730
 8000df4:	0800aaa4 	.word	0x0800aaa4
 8000df8:	e000ed04 	.word	0xe000ed04

08000dfc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  ************************************************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) {
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a04      	ldr	r2, [pc, #16]	; (8000e1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d101      	bne.n	8000e12 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e0e:	f000 fcd7 	bl	80017c0 <HAL_IncTick>
  }
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40010000 	.word	0x40010000

08000e20 <Error_Handler>:
/************************************************************
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  ************************************************************/
void Error_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e24:	b672      	cpsid	i
}
 8000e26:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e28:	e7fe      	b.n	8000e28 <Error_Handler+0x8>
	...

08000e2c <HAL_MspInit>:

/********************************************************
  * Initializes the Global MSP.
  *******************************************************/
void HAL_MspInit(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	607b      	str	r3, [r7, #4]
 8000e36:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <HAL_MspInit+0x54>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3a:	4a11      	ldr	r2, [pc, #68]	; (8000e80 <HAL_MspInit+0x54>)
 8000e3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e40:	6453      	str	r3, [r2, #68]	; 0x44
 8000e42:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <HAL_MspInit+0x54>)
 8000e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e4a:	607b      	str	r3, [r7, #4]
 8000e4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	603b      	str	r3, [r7, #0]
 8000e52:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <HAL_MspInit+0x54>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e56:	4a0a      	ldr	r2, [pc, #40]	; (8000e80 <HAL_MspInit+0x54>)
 8000e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e5e:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <HAL_MspInit+0x54>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e66:	603b      	str	r3, [r7, #0]
 8000e68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	210f      	movs	r1, #15
 8000e6e:	f06f 0001 	mvn.w	r0, #1
 8000e72:	f000 fd7d 	bl	8001970 <HAL_NVIC_SetPriority>
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40023800 	.word	0x40023800

08000e84 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*******************************************************/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a0b      	ldr	r2, [pc, #44]	; (8000ec0 <HAL_CRC_MspInit+0x3c>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d10d      	bne.n	8000eb2 <HAL_CRC_MspInit+0x2e>
  {
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <HAL_CRC_MspInit+0x40>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	4a09      	ldr	r2, [pc, #36]	; (8000ec4 <HAL_CRC_MspInit+0x40>)
 8000ea0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea6:	4b07      	ldr	r3, [pc, #28]	; (8000ec4 <HAL_CRC_MspInit+0x40>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
  }

}
 8000eb2:	bf00      	nop
 8000eb4:	3714      	adds	r7, #20
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	40023000 	.word	0x40023000
 8000ec4:	40023800 	.word	0x40023800

08000ec8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*******************************************************/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08a      	sub	sp, #40	; 0x28
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a50      	ldr	r2, [pc, #320]	; (8001028 <HAL_I2C_MspInit+0x160>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	f040 8099 	bne.w	800101e <HAL_I2C_MspInit+0x156>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eec:	2300      	movs	r3, #0
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	4b4e      	ldr	r3, [pc, #312]	; (800102c <HAL_I2C_MspInit+0x164>)
 8000ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef4:	4a4d      	ldr	r2, [pc, #308]	; (800102c <HAL_I2C_MspInit+0x164>)
 8000ef6:	f043 0302 	orr.w	r3, r3, #2
 8000efa:	6313      	str	r3, [r2, #48]	; 0x30
 8000efc:	4b4b      	ldr	r3, [pc, #300]	; (800102c <HAL_I2C_MspInit+0x164>)
 8000efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f00:	f003 0302 	and.w	r3, r3, #2
 8000f04:	613b      	str	r3, [r7, #16]
 8000f06:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin 		= GPIO_PIN_6|GPIO_PIN_9;
 8000f08:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000f0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode 		= GPIO_MODE_AF_OD;
 8000f0e:	2312      	movs	r3, #18
 8000f10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_VERY_HIGH;
 8000f16:	2303      	movs	r3, #3
 8000f18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate 	= GPIO_AF4_I2C1;
 8000f1a:	2304      	movs	r3, #4
 8000f1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1e:	f107 0314 	add.w	r3, r7, #20
 8000f22:	4619      	mov	r1, r3
 8000f24:	4842      	ldr	r0, [pc, #264]	; (8001030 <HAL_I2C_MspInit+0x168>)
 8000f26:	f001 f979 	bl	800221c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	4b3f      	ldr	r3, [pc, #252]	; (800102c <HAL_I2C_MspInit+0x164>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	4a3e      	ldr	r2, [pc, #248]	; (800102c <HAL_I2C_MspInit+0x164>)
 8000f34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f38:	6413      	str	r3, [r2, #64]	; 0x40
 8000f3a:	4b3c      	ldr	r3, [pc, #240]	; (800102c <HAL_I2C_MspInit+0x164>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance 					= DMA1_Stream0;
 8000f46:	4b3b      	ldr	r3, [pc, #236]	; (8001034 <HAL_I2C_MspInit+0x16c>)
 8000f48:	4a3b      	ldr	r2, [pc, #236]	; (8001038 <HAL_I2C_MspInit+0x170>)
 8000f4a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel 				= DMA_CHANNEL_1;
 8000f4c:	4b39      	ldr	r3, [pc, #228]	; (8001034 <HAL_I2C_MspInit+0x16c>)
 8000f4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000f52:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction 			= DMA_PERIPH_TO_MEMORY;
 8000f54:	4b37      	ldr	r3, [pc, #220]	; (8001034 <HAL_I2C_MspInit+0x16c>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc 			= DMA_PINC_DISABLE;
 8000f5a:	4b36      	ldr	r3, [pc, #216]	; (8001034 <HAL_I2C_MspInit+0x16c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc 				= DMA_MINC_ENABLE;
 8000f60:	4b34      	ldr	r3, [pc, #208]	; (8001034 <HAL_I2C_MspInit+0x16c>)
 8000f62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f66:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 8000f68:	4b32      	ldr	r3, [pc, #200]	; (8001034 <HAL_I2C_MspInit+0x16c>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment 		= DMA_MDATAALIGN_BYTE;
 8000f6e:	4b31      	ldr	r3, [pc, #196]	; (8001034 <HAL_I2C_MspInit+0x16c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode 					= DMA_NORMAL;
 8000f74:	4b2f      	ldr	r3, [pc, #188]	; (8001034 <HAL_I2C_MspInit+0x16c>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority 				= DMA_PRIORITY_LOW;
 8000f7a:	4b2e      	ldr	r3, [pc, #184]	; (8001034 <HAL_I2C_MspInit+0x16c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode 				= DMA_FIFOMODE_DISABLE;
 8000f80:	4b2c      	ldr	r3, [pc, #176]	; (8001034 <HAL_I2C_MspInit+0x16c>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000f86:	482b      	ldr	r0, [pc, #172]	; (8001034 <HAL_I2C_MspInit+0x16c>)
 8000f88:	f000 fd38 	bl	80019fc <HAL_DMA_Init>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8000f92:	f7ff ff45 	bl	8000e20 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a26      	ldr	r2, [pc, #152]	; (8001034 <HAL_I2C_MspInit+0x16c>)
 8000f9a:	639a      	str	r2, [r3, #56]	; 0x38
 8000f9c:	4a25      	ldr	r2, [pc, #148]	; (8001034 <HAL_I2C_MspInit+0x16c>)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance 					= DMA1_Stream6;
 8000fa2:	4b26      	ldr	r3, [pc, #152]	; (800103c <HAL_I2C_MspInit+0x174>)
 8000fa4:	4a26      	ldr	r2, [pc, #152]	; (8001040 <HAL_I2C_MspInit+0x178>)
 8000fa6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel 				= DMA_CHANNEL_1;
 8000fa8:	4b24      	ldr	r3, [pc, #144]	; (800103c <HAL_I2C_MspInit+0x174>)
 8000faa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000fae:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction 			= DMA_MEMORY_TO_PERIPH;
 8000fb0:	4b22      	ldr	r3, [pc, #136]	; (800103c <HAL_I2C_MspInit+0x174>)
 8000fb2:	2240      	movs	r2, #64	; 0x40
 8000fb4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc 			= DMA_PINC_DISABLE;
 8000fb6:	4b21      	ldr	r3, [pc, #132]	; (800103c <HAL_I2C_MspInit+0x174>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc 				= DMA_MINC_ENABLE;
 8000fbc:	4b1f      	ldr	r3, [pc, #124]	; (800103c <HAL_I2C_MspInit+0x174>)
 8000fbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fc2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 8000fc4:	4b1d      	ldr	r3, [pc, #116]	; (800103c <HAL_I2C_MspInit+0x174>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment 		= DMA_MDATAALIGN_BYTE;
 8000fca:	4b1c      	ldr	r3, [pc, #112]	; (800103c <HAL_I2C_MspInit+0x174>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode 					= DMA_NORMAL;
 8000fd0:	4b1a      	ldr	r3, [pc, #104]	; (800103c <HAL_I2C_MspInit+0x174>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority 				= DMA_PRIORITY_LOW;
 8000fd6:	4b19      	ldr	r3, [pc, #100]	; (800103c <HAL_I2C_MspInit+0x174>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode 				= DMA_FIFOMODE_DISABLE;
 8000fdc:	4b17      	ldr	r3, [pc, #92]	; (800103c <HAL_I2C_MspInit+0x174>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000fe2:	4816      	ldr	r0, [pc, #88]	; (800103c <HAL_I2C_MspInit+0x174>)
 8000fe4:	f000 fd0a 	bl	80019fc <HAL_DMA_Init>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 8000fee:	f7ff ff17 	bl	8000e20 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a11      	ldr	r2, [pc, #68]	; (800103c <HAL_I2C_MspInit+0x174>)
 8000ff6:	635a      	str	r2, [r3, #52]	; 0x34
 8000ff8:	4a10      	ldr	r2, [pc, #64]	; (800103c <HAL_I2C_MspInit+0x174>)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2105      	movs	r1, #5
 8001002:	201f      	movs	r0, #31
 8001004:	f000 fcb4 	bl	8001970 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001008:	201f      	movs	r0, #31
 800100a:	f000 fccd 	bl	80019a8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 800100e:	2200      	movs	r2, #0
 8001010:	2105      	movs	r1, #5
 8001012:	2020      	movs	r0, #32
 8001014:	f000 fcac 	bl	8001970 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001018:	2020      	movs	r0, #32
 800101a:	f000 fcc5 	bl	80019a8 <HAL_NVIC_EnableIRQ>
  }

}
 800101e:	bf00      	nop
 8001020:	3728      	adds	r7, #40	; 0x28
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40005400 	.word	0x40005400
 800102c:	40023800 	.word	0x40023800
 8001030:	40020400 	.word	0x40020400
 8001034:	20000340 	.word	0x20000340
 8001038:	40026010 	.word	0x40026010
 800103c:	200003a0 	.word	0x200003a0
 8001040:	400260a0 	.word	0x400260a0

08001044 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*******************************************************/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08a      	sub	sp, #40	; 0x28
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a5b      	ldr	r2, [pc, #364]	; (80011d0 <HAL_SPI_MspInit+0x18c>)
 8001062:	4293      	cmp	r3, r2
 8001064:	f040 80b0 	bne.w	80011c8 <HAL_SPI_MspInit+0x184>
  {
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001068:	2300      	movs	r3, #0
 800106a:	613b      	str	r3, [r7, #16]
 800106c:	4b59      	ldr	r3, [pc, #356]	; (80011d4 <HAL_SPI_MspInit+0x190>)
 800106e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001070:	4a58      	ldr	r2, [pc, #352]	; (80011d4 <HAL_SPI_MspInit+0x190>)
 8001072:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001076:	6453      	str	r3, [r2, #68]	; 0x44
 8001078:	4b56      	ldr	r3, [pc, #344]	; (80011d4 <HAL_SPI_MspInit+0x190>)
 800107a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001080:	613b      	str	r3, [r7, #16]
 8001082:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001084:	2300      	movs	r3, #0
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	4b52      	ldr	r3, [pc, #328]	; (80011d4 <HAL_SPI_MspInit+0x190>)
 800108a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108c:	4a51      	ldr	r2, [pc, #324]	; (80011d4 <HAL_SPI_MspInit+0x190>)
 800108e:	f043 0301 	orr.w	r3, r3, #1
 8001092:	6313      	str	r3, [r2, #48]	; 0x30
 8001094:	4b4f      	ldr	r3, [pc, #316]	; (80011d4 <HAL_SPI_MspInit+0x190>)
 8001096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001098:	f003 0301 	and.w	r3, r3, #1
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a0:	2300      	movs	r3, #0
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	4b4b      	ldr	r3, [pc, #300]	; (80011d4 <HAL_SPI_MspInit+0x190>)
 80010a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a8:	4a4a      	ldr	r2, [pc, #296]	; (80011d4 <HAL_SPI_MspInit+0x190>)
 80010aa:	f043 0302 	orr.w	r3, r3, #2
 80010ae:	6313      	str	r3, [r2, #48]	; 0x30
 80010b0:	4b48      	ldr	r3, [pc, #288]	; (80011d4 <HAL_SPI_MspInit+0x190>)
 80010b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b4:	f003 0302 	and.w	r3, r3, #2
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin 		= GPIO_PIN_5|GPIO_PIN_6;
 80010bc:	2360      	movs	r3, #96	; 0x60
 80010be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode 		= GPIO_MODE_AF_PP;
 80010c0:	2302      	movs	r3, #2
 80010c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_VERY_HIGH;
 80010c8:	2303      	movs	r3, #3
 80010ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate 	= GPIO_AF5_SPI1;
 80010cc:	2305      	movs	r3, #5
 80010ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	4619      	mov	r1, r3
 80010d6:	4840      	ldr	r0, [pc, #256]	; (80011d8 <HAL_SPI_MspInit+0x194>)
 80010d8:	f001 f8a0 	bl	800221c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin 		= GPIO_PIN_5;
 80010dc:	2320      	movs	r3, #32
 80010de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode 		= GPIO_MODE_AF_PP;
 80010e0:	2302      	movs	r3, #2
 80010e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_VERY_HIGH;
 80010e8:	2303      	movs	r3, #3
 80010ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate 	= GPIO_AF5_SPI1;
 80010ec:	2305      	movs	r3, #5
 80010ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	4619      	mov	r1, r3
 80010f6:	4839      	ldr	r0, [pc, #228]	; (80011dc <HAL_SPI_MspInit+0x198>)
 80010f8:	f001 f890 	bl	800221c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance 					= DMA2_Stream0;
 80010fc:	4b38      	ldr	r3, [pc, #224]	; (80011e0 <HAL_SPI_MspInit+0x19c>)
 80010fe:	4a39      	ldr	r2, [pc, #228]	; (80011e4 <HAL_SPI_MspInit+0x1a0>)
 8001100:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel 				= DMA_CHANNEL_3;
 8001102:	4b37      	ldr	r3, [pc, #220]	; (80011e0 <HAL_SPI_MspInit+0x19c>)
 8001104:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001108:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction 			= DMA_PERIPH_TO_MEMORY;
 800110a:	4b35      	ldr	r3, [pc, #212]	; (80011e0 <HAL_SPI_MspInit+0x19c>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc 			= DMA_PINC_DISABLE;
 8001110:	4b33      	ldr	r3, [pc, #204]	; (80011e0 <HAL_SPI_MspInit+0x19c>)
 8001112:	2200      	movs	r2, #0
 8001114:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc 				= DMA_MINC_ENABLE;
 8001116:	4b32      	ldr	r3, [pc, #200]	; (80011e0 <HAL_SPI_MspInit+0x19c>)
 8001118:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800111c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 800111e:	4b30      	ldr	r3, [pc, #192]	; (80011e0 <HAL_SPI_MspInit+0x19c>)
 8001120:	2200      	movs	r2, #0
 8001122:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment 		= DMA_MDATAALIGN_BYTE;
 8001124:	4b2e      	ldr	r3, [pc, #184]	; (80011e0 <HAL_SPI_MspInit+0x19c>)
 8001126:	2200      	movs	r2, #0
 8001128:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode 					= DMA_CIRCULAR;
 800112a:	4b2d      	ldr	r3, [pc, #180]	; (80011e0 <HAL_SPI_MspInit+0x19c>)
 800112c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001130:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority 				= DMA_PRIORITY_LOW;
 8001132:	4b2b      	ldr	r3, [pc, #172]	; (80011e0 <HAL_SPI_MspInit+0x19c>)
 8001134:	2200      	movs	r2, #0
 8001136:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode 				= DMA_FIFOMODE_DISABLE;
 8001138:	4b29      	ldr	r3, [pc, #164]	; (80011e0 <HAL_SPI_MspInit+0x19c>)
 800113a:	2200      	movs	r2, #0
 800113c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800113e:	4828      	ldr	r0, [pc, #160]	; (80011e0 <HAL_SPI_MspInit+0x19c>)
 8001140:	f000 fc5c 	bl	80019fc <HAL_DMA_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <HAL_SPI_MspInit+0x10a>
    {
      Error_Handler();
 800114a:	f7ff fe69 	bl	8000e20 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a23      	ldr	r2, [pc, #140]	; (80011e0 <HAL_SPI_MspInit+0x19c>)
 8001152:	64da      	str	r2, [r3, #76]	; 0x4c
 8001154:	4a22      	ldr	r2, [pc, #136]	; (80011e0 <HAL_SPI_MspInit+0x19c>)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance 					= DMA2_Stream3;
 800115a:	4b23      	ldr	r3, [pc, #140]	; (80011e8 <HAL_SPI_MspInit+0x1a4>)
 800115c:	4a23      	ldr	r2, [pc, #140]	; (80011ec <HAL_SPI_MspInit+0x1a8>)
 800115e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel 				= DMA_CHANNEL_3;
 8001160:	4b21      	ldr	r3, [pc, #132]	; (80011e8 <HAL_SPI_MspInit+0x1a4>)
 8001162:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001166:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction 			= DMA_MEMORY_TO_PERIPH;
 8001168:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <HAL_SPI_MspInit+0x1a4>)
 800116a:	2240      	movs	r2, #64	; 0x40
 800116c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc 			= DMA_PINC_DISABLE;
 800116e:	4b1e      	ldr	r3, [pc, #120]	; (80011e8 <HAL_SPI_MspInit+0x1a4>)
 8001170:	2200      	movs	r2, #0
 8001172:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc 				= DMA_MINC_ENABLE;
 8001174:	4b1c      	ldr	r3, [pc, #112]	; (80011e8 <HAL_SPI_MspInit+0x1a4>)
 8001176:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800117a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 800117c:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <HAL_SPI_MspInit+0x1a4>)
 800117e:	2200      	movs	r2, #0
 8001180:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment 		= DMA_MDATAALIGN_BYTE;
 8001182:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <HAL_SPI_MspInit+0x1a4>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode 					= DMA_CIRCULAR;
 8001188:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <HAL_SPI_MspInit+0x1a4>)
 800118a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800118e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority 				= DMA_PRIORITY_LOW;
 8001190:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <HAL_SPI_MspInit+0x1a4>)
 8001192:	2200      	movs	r2, #0
 8001194:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode 				= DMA_FIFOMODE_DISABLE;
 8001196:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <HAL_SPI_MspInit+0x1a4>)
 8001198:	2200      	movs	r2, #0
 800119a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800119c:	4812      	ldr	r0, [pc, #72]	; (80011e8 <HAL_SPI_MspInit+0x1a4>)
 800119e:	f000 fc2d 	bl	80019fc <HAL_DMA_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <HAL_SPI_MspInit+0x168>
    {
      Error_Handler();
 80011a8:	f7ff fe3a 	bl	8000e20 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4a0e      	ldr	r2, [pc, #56]	; (80011e8 <HAL_SPI_MspInit+0x1a4>)
 80011b0:	649a      	str	r2, [r3, #72]	; 0x48
 80011b2:	4a0d      	ldr	r2, [pc, #52]	; (80011e8 <HAL_SPI_MspInit+0x1a4>)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80011b8:	2200      	movs	r2, #0
 80011ba:	2105      	movs	r1, #5
 80011bc:	2023      	movs	r0, #35	; 0x23
 80011be:	f000 fbd7 	bl	8001970 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80011c2:	2023      	movs	r0, #35	; 0x23
 80011c4:	f000 fbf0 	bl	80019a8 <HAL_NVIC_EnableIRQ>
  }

}
 80011c8:	bf00      	nop
 80011ca:	3728      	adds	r7, #40	; 0x28
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40013000 	.word	0x40013000
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40020000 	.word	0x40020000
 80011dc:	40020400 	.word	0x40020400
 80011e0:	20000458 	.word	0x20000458
 80011e4:	40026410 	.word	0x40026410
 80011e8:	200004b8 	.word	0x200004b8
 80011ec:	40026458 	.word	0x40026458

080011f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*******************************************************/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08a      	sub	sp, #40	; 0x28
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a4c      	ldr	r2, [pc, #304]	; (8001340 <HAL_UART_MspInit+0x150>)
 800120e:	4293      	cmp	r3, r2
 8001210:	f040 8091 	bne.w	8001336 <HAL_UART_MspInit+0x146>
  {
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001214:	2300      	movs	r3, #0
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	4b4a      	ldr	r3, [pc, #296]	; (8001344 <HAL_UART_MspInit+0x154>)
 800121a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121c:	4a49      	ldr	r2, [pc, #292]	; (8001344 <HAL_UART_MspInit+0x154>)
 800121e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001222:	6413      	str	r3, [r2, #64]	; 0x40
 8001224:	4b47      	ldr	r3, [pc, #284]	; (8001344 <HAL_UART_MspInit+0x154>)
 8001226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001228:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800122c:	613b      	str	r3, [r7, #16]
 800122e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001230:	2300      	movs	r3, #0
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	4b43      	ldr	r3, [pc, #268]	; (8001344 <HAL_UART_MspInit+0x154>)
 8001236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001238:	4a42      	ldr	r2, [pc, #264]	; (8001344 <HAL_UART_MspInit+0x154>)
 800123a:	f043 0308 	orr.w	r3, r3, #8
 800123e:	6313      	str	r3, [r2, #48]	; 0x30
 8001240:	4b40      	ldr	r3, [pc, #256]	; (8001344 <HAL_UART_MspInit+0x154>)
 8001242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001244:	f003 0308 	and.w	r3, r3, #8
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin 		= STLK_RX_Pin|STLK_TX_Pin;
 800124c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001250:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode 		= GPIO_MODE_AF_PP;
 8001252:	2302      	movs	r3, #2
 8001254:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_VERY_HIGH;
 800125a:	2303      	movs	r3, #3
 800125c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate 	= GPIO_AF7_USART3;
 800125e:	2307      	movs	r3, #7
 8001260:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001262:	f107 0314 	add.w	r3, r7, #20
 8001266:	4619      	mov	r1, r3
 8001268:	4837      	ldr	r0, [pc, #220]	; (8001348 <HAL_UART_MspInit+0x158>)
 800126a:	f000 ffd7 	bl	800221c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance 		= DMA1_Stream1;
 800126e:	4b37      	ldr	r3, [pc, #220]	; (800134c <HAL_UART_MspInit+0x15c>)
 8001270:	4a37      	ldr	r2, [pc, #220]	; (8001350 <HAL_UART_MspInit+0x160>)
 8001272:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel 	= DMA_CHANNEL_4;
 8001274:	4b35      	ldr	r3, [pc, #212]	; (800134c <HAL_UART_MspInit+0x15c>)
 8001276:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800127a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction 	= DMA_PERIPH_TO_MEMORY;
 800127c:	4b33      	ldr	r3, [pc, #204]	; (800134c <HAL_UART_MspInit+0x15c>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc 	= DMA_PINC_DISABLE;
 8001282:	4b32      	ldr	r3, [pc, #200]	; (800134c <HAL_UART_MspInit+0x15c>)
 8001284:	2200      	movs	r2, #0
 8001286:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc 		= DMA_MINC_ENABLE;
 8001288:	4b30      	ldr	r3, [pc, #192]	; (800134c <HAL_UART_MspInit+0x15c>)
 800128a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800128e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001290:	4b2e      	ldr	r3, [pc, #184]	; (800134c <HAL_UART_MspInit+0x15c>)
 8001292:	2200      	movs	r2, #0
 8001294:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 8001296:	4b2d      	ldr	r3, [pc, #180]	; (800134c <HAL_UART_MspInit+0x15c>)
 8001298:	2200      	movs	r2, #0
 800129a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode 		= DMA_NORMAL;
 800129c:	4b2b      	ldr	r3, [pc, #172]	; (800134c <HAL_UART_MspInit+0x15c>)
 800129e:	2200      	movs	r2, #0
 80012a0:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority 	= DMA_PRIORITY_LOW;
 80012a2:	4b2a      	ldr	r3, [pc, #168]	; (800134c <HAL_UART_MspInit+0x15c>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode 	= DMA_FIFOMODE_DISABLE;
 80012a8:	4b28      	ldr	r3, [pc, #160]	; (800134c <HAL_UART_MspInit+0x15c>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80012ae:	4827      	ldr	r0, [pc, #156]	; (800134c <HAL_UART_MspInit+0x15c>)
 80012b0:	f000 fba4 	bl	80019fc <HAL_DMA_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80012ba:	f7ff fdb1 	bl	8000e20 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a22      	ldr	r2, [pc, #136]	; (800134c <HAL_UART_MspInit+0x15c>)
 80012c2:	639a      	str	r2, [r3, #56]	; 0x38
 80012c4:	4a21      	ldr	r2, [pc, #132]	; (800134c <HAL_UART_MspInit+0x15c>)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance 		= DMA1_Stream3;
 80012ca:	4b22      	ldr	r3, [pc, #136]	; (8001354 <HAL_UART_MspInit+0x164>)
 80012cc:	4a22      	ldr	r2, [pc, #136]	; (8001358 <HAL_UART_MspInit+0x168>)
 80012ce:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel 	= DMA_CHANNEL_4;
 80012d0:	4b20      	ldr	r3, [pc, #128]	; (8001354 <HAL_UART_MspInit+0x164>)
 80012d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012d6:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction 	= DMA_MEMORY_TO_PERIPH;
 80012d8:	4b1e      	ldr	r3, [pc, #120]	; (8001354 <HAL_UART_MspInit+0x164>)
 80012da:	2240      	movs	r2, #64	; 0x40
 80012dc:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc 	= DMA_PINC_DISABLE;
 80012de:	4b1d      	ldr	r3, [pc, #116]	; (8001354 <HAL_UART_MspInit+0x164>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc 		= DMA_MINC_ENABLE;
 80012e4:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <HAL_UART_MspInit+0x164>)
 80012e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012ea:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012ec:	4b19      	ldr	r3, [pc, #100]	; (8001354 <HAL_UART_MspInit+0x164>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 80012f2:	4b18      	ldr	r3, [pc, #96]	; (8001354 <HAL_UART_MspInit+0x164>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode 		= DMA_NORMAL;
 80012f8:	4b16      	ldr	r3, [pc, #88]	; (8001354 <HAL_UART_MspInit+0x164>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority 	= DMA_PRIORITY_LOW;
 80012fe:	4b15      	ldr	r3, [pc, #84]	; (8001354 <HAL_UART_MspInit+0x164>)
 8001300:	2200      	movs	r2, #0
 8001302:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode 	= DMA_FIFOMODE_DISABLE;
 8001304:	4b13      	ldr	r3, [pc, #76]	; (8001354 <HAL_UART_MspInit+0x164>)
 8001306:	2200      	movs	r2, #0
 8001308:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800130a:	4812      	ldr	r0, [pc, #72]	; (8001354 <HAL_UART_MspInit+0x164>)
 800130c:	f000 fb76 	bl	80019fc <HAL_DMA_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8001316:	f7ff fd83 	bl	8000e20 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a0d      	ldr	r2, [pc, #52]	; (8001354 <HAL_UART_MspInit+0x164>)
 800131e:	635a      	str	r2, [r3, #52]	; 0x34
 8001320:	4a0c      	ldr	r2, [pc, #48]	; (8001354 <HAL_UART_MspInit+0x164>)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6393      	str	r3, [r2, #56]	; 0x38


	/* UART2 interrupt Init */
	HAL_NVIC_SetPriority(USART3_IRQn, 15, 0);
 8001326:	2200      	movs	r2, #0
 8001328:	210f      	movs	r1, #15
 800132a:	2027      	movs	r0, #39	; 0x27
 800132c:	f000 fb20 	bl	8001970 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001330:	2027      	movs	r0, #39	; 0x27
 8001332:	f000 fb39 	bl	80019a8 <HAL_NVIC_EnableIRQ>
  }

}
 8001336:	bf00      	nop
 8001338:	3728      	adds	r7, #40	; 0x28
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40004800 	.word	0x40004800
 8001344:	40023800 	.word	0x40023800
 8001348:	40020c00 	.word	0x40020c00
 800134c:	20000578 	.word	0x20000578
 8001350:	40026028 	.word	0x40026028
 8001354:	20000518 	.word	0x20000518
 8001358:	40026058 	.word	0x40026058

0800135c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08c      	sub	sp, #48	; 0x30
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800136c:	2200      	movs	r2, #0
 800136e:	6879      	ldr	r1, [r7, #4]
 8001370:	2019      	movs	r0, #25
 8001372:	f000 fafd 	bl	8001970 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001376:	2019      	movs	r0, #25
 8001378:	f000 fb16 	bl	80019a8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800137c:	2300      	movs	r3, #0
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	4b1f      	ldr	r3, [pc, #124]	; (8001400 <HAL_InitTick+0xa4>)
 8001382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001384:	4a1e      	ldr	r2, [pc, #120]	; (8001400 <HAL_InitTick+0xa4>)
 8001386:	f043 0301 	orr.w	r3, r3, #1
 800138a:	6453      	str	r3, [r2, #68]	; 0x44
 800138c:	4b1c      	ldr	r3, [pc, #112]	; (8001400 <HAL_InitTick+0xa4>)
 800138e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001398:	f107 0210 	add.w	r2, r7, #16
 800139c:	f107 0314 	add.w	r3, r7, #20
 80013a0:	4611      	mov	r1, r2
 80013a2:	4618      	mov	r0, r3
 80013a4:	f003 fcaa 	bl	8004cfc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80013a8:	f003 fc94 	bl	8004cd4 <HAL_RCC_GetPCLK2Freq>
 80013ac:	4603      	mov	r3, r0
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013b4:	4a13      	ldr	r2, [pc, #76]	; (8001404 <HAL_InitTick+0xa8>)
 80013b6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ba:	0c9b      	lsrs	r3, r3, #18
 80013bc:	3b01      	subs	r3, #1
 80013be:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80013c0:	4b11      	ldr	r3, [pc, #68]	; (8001408 <HAL_InitTick+0xac>)
 80013c2:	4a12      	ldr	r2, [pc, #72]	; (800140c <HAL_InitTick+0xb0>)
 80013c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80013c6:	4b10      	ldr	r3, [pc, #64]	; (8001408 <HAL_InitTick+0xac>)
 80013c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013cc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80013ce:	4a0e      	ldr	r2, [pc, #56]	; (8001408 <HAL_InitTick+0xac>)
 80013d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013d2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80013d4:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <HAL_InitTick+0xac>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013da:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <HAL_InitTick+0xac>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80013e0:	4809      	ldr	r0, [pc, #36]	; (8001408 <HAL_InitTick+0xac>)
 80013e2:	f003 fe65 	bl	80050b0 <HAL_TIM_Base_Init>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d104      	bne.n	80013f6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80013ec:	4806      	ldr	r0, [pc, #24]	; (8001408 <HAL_InitTick+0xac>)
 80013ee:	f003 feb9 	bl	8005164 <HAL_TIM_Base_Start_IT>
 80013f2:	4603      	mov	r3, r0
 80013f4:	e000      	b.n	80013f8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3730      	adds	r7, #48	; 0x30
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40023800 	.word	0x40023800
 8001404:	431bde83 	.word	0x431bde83
 8001408:	2000073c 	.word	0x2000073c
 800140c:	40010000 	.word	0x40010000

08001410 <NMI_Handler>:
/******************************************************************************/
/************************************************************
  * @brief This function handles Non maskable interrupt.
  ***********************************************************/
void NMI_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  while (1)
 8001414:	e7fe      	b.n	8001414 <NMI_Handler+0x4>

08001416 <HardFault_Handler>:

/************************************************************
  * @brief This function handles Hard fault interrupt.
  ***********************************************************/
void HardFault_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0
  while (1)
 800141a:	e7fe      	b.n	800141a <HardFault_Handler+0x4>

0800141c <MemManage_Handler>:

/************************************************************
  * @brief This function handles Memory management fault.
  ***********************************************************/
void MemManage_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  while (1)
 8001420:	e7fe      	b.n	8001420 <MemManage_Handler+0x4>

08001422 <BusFault_Handler>:

/************************************************************
  * @brief This function handles Pre-fetch fault, memory access fault.
  ***********************************************************/
void BusFault_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0
  while (1)
 8001426:	e7fe      	b.n	8001426 <BusFault_Handler+0x4>

08001428 <UsageFault_Handler>:

/************************************************************
  * @brief This function handles Undefined instruction or illegal state.
  ***********************************************************/
void UsageFault_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  while (1)
 800142c:	e7fe      	b.n	800142c <UsageFault_Handler+0x4>

0800142e <DebugMon_Handler>:

/************************************************************
  * @brief This function handles Debug monitor.
  ***********************************************************/
void DebugMon_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0

}
 8001432:	bf00      	nop
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <EXTI15_10_IRQHandler>:
  * @brief  This function handles external lines 15 to 10 interrupt request.
  * @param  None
  * @retval None
  *****************************************************************************/
void EXTI15_10_IRQHandler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001440:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001444:	f001 f8ca 	bl	80025dc <HAL_GPIO_EXTI_IRQHandler>
}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}

0800144c <DMA1_Stream0_IRQHandler>:

/************************************************************
  * @brief This function handles DMA1 stream0 global interrupt.
  ************************************************************/
void DMA1_Stream0_IRQHandler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001450:	4802      	ldr	r0, [pc, #8]	; (800145c <DMA1_Stream0_IRQHandler+0x10>)
 8001452:	f000 fc6b 	bl	8001d2c <HAL_DMA_IRQHandler>
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000340 	.word	0x20000340

08001460 <DMA1_Stream6_IRQHandler>:

/*************************************************************
  * @brief This function handles DMA1 stream6 global interrupt.
  ************************************************************/
void DMA1_Stream6_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001464:	4802      	ldr	r0, [pc, #8]	; (8001470 <DMA1_Stream6_IRQHandler+0x10>)
 8001466:	f000 fc61 	bl	8001d2c <HAL_DMA_IRQHandler>
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	200003a0 	.word	0x200003a0

08001474 <TIM1_UP_TIM10_IRQHandler>:

/*************************************************************
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  ************************************************************/
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim1);
 8001478:	4802      	ldr	r0, [pc, #8]	; (8001484 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800147a:	f003 fee3 	bl	8005244 <HAL_TIM_IRQHandler>
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	2000073c 	.word	0x2000073c

08001488 <I2C1_EV_IRQHandler>:

/**************************************************************
  * @brief This function handles I2C1 event interrupt.
  *************************************************************/
void I2C1_EV_IRQHandler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800148c:	4802      	ldr	r0, [pc, #8]	; (8001498 <I2C1_EV_IRQHandler+0x10>)
 800148e:	f001 fa01 	bl	8002894 <HAL_I2C_EV_IRQHandler>
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	200002ec 	.word	0x200002ec

0800149c <I2C1_ER_IRQHandler>:

/**************************************************************
  * @brief This function handles I2C1 error interrupt.
  *************************************************************/
void I2C1_ER_IRQHandler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80014a0:	4802      	ldr	r0, [pc, #8]	; (80014ac <I2C1_ER_IRQHandler+0x10>)
 80014a2:	f001 fb68 	bl	8002b76 <HAL_I2C_ER_IRQHandler>
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	200002ec 	.word	0x200002ec

080014b0 <SPI1_IRQHandler>:

/**************************************************************
  * @brief This function handles SPI1 global interrupt.
  *************************************************************/
void SPI1_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi1);
 80014b4:	4802      	ldr	r0, [pc, #8]	; (80014c0 <SPI1_IRQHandler+0x10>)
 80014b6:	f003 fcdd 	bl	8004e74 <HAL_SPI_IRQHandler>
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000400 	.word	0x20000400

080014c4 <DMA2_Stream0_IRQHandler>:

/**************************************************************
  * @brief This function handles DMA2 stream0 global interrupt.
  *************************************************************/
void DMA2_Stream0_IRQHandler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80014c8:	4802      	ldr	r0, [pc, #8]	; (80014d4 <DMA2_Stream0_IRQHandler+0x10>)
 80014ca:	f000 fc2f 	bl	8001d2c <HAL_DMA_IRQHandler>
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000458 	.word	0x20000458

080014d8 <DMA2_Stream3_IRQHandler>:

/**************************************************************
  * @brief This function handles DMA2 stream3 global interrupt.
  *************************************************************/
void DMA2_Stream3_IRQHandler(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80014dc:	4802      	ldr	r0, [pc, #8]	; (80014e8 <DMA2_Stream3_IRQHandler+0x10>)
 80014de:	f000 fc25 	bl	8001d2c <HAL_DMA_IRQHandler>
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	200004b8 	.word	0x200004b8

080014ec <DMA1_Stream1_IRQHandler>:
  * @brief This function handles DMA1 stream1 global interrupt.
  * @param  None
  * @retval None
  **************************************************************/
void DMA1_Stream1_IRQHandler(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80014f0:	4802      	ldr	r0, [pc, #8]	; (80014fc <DMA1_Stream1_IRQHandler+0x10>)
 80014f2:	f000 fc1b 	bl	8001d2c <HAL_DMA_IRQHandler>
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20000578 	.word	0x20000578

08001500 <USART3_IRQHandler>:

/********************************************************
  * @brief This function handles USART3 interrupt.
  ******************************************************/
void USART3_IRQHandler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart3);
 8001506:	4826      	ldr	r0, [pc, #152]	; (80015a0 <USART3_IRQHandler+0xa0>)
 8001508:	f004 fa0e 	bl	8005928 <HAL_UART_IRQHandler>

	if(RESET != __HAL_UART_GET_FLAG(&huart3, UART_FLAG_IDLE))   //Judging whether it is idle interruption
 800150c:	4b24      	ldr	r3, [pc, #144]	; (80015a0 <USART3_IRQHandler+0xa0>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0310 	and.w	r3, r3, #16
 8001516:	2b10      	cmp	r3, #16
 8001518:	d13d      	bne.n	8001596 <USART3_IRQHandler+0x96>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart3);                     //Clear idle interrupt sign (otherwise it will continue to enter interrupt)
 800151a:	2300      	movs	r3, #0
 800151c:	603b      	str	r3, [r7, #0]
 800151e:	4b20      	ldr	r3, [pc, #128]	; (80015a0 <USART3_IRQHandler+0xa0>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	603b      	str	r3, [r7, #0]
 8001526:	4b1e      	ldr	r3, [pc, #120]	; (80015a0 <USART3_IRQHandler+0xa0>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	603b      	str	r3, [r7, #0]
 800152e:	683b      	ldr	r3, [r7, #0]

		//Stop this DMA transmission
		HAL_UART_DMAStop(&huart3);
 8001530:	481b      	ldr	r0, [pc, #108]	; (80015a0 <USART3_IRQHandler+0xa0>)
 8001532:	f004 f97a 	bl	800582a <HAL_UART_DMAStop>

		//Calculate the length of the received data
		uint8_t data_length  = 255 - __HAL_DMA_GET_COUNTER(&hdma_usart3_rx);
 8001536:	4b1b      	ldr	r3, [pc, #108]	; (80015a4 <USART3_IRQHandler+0xa4>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	b2db      	uxtb	r3, r3
 800153e:	43db      	mvns	r3, r3
 8001540:	71bb      	strb	r3, [r7, #6]


#if 1
		printf("UART3 Receive (%d) \r\n",data_length);
 8001542:	79bb      	ldrb	r3, [r7, #6]
 8001544:	4619      	mov	r1, r3
 8001546:	4818      	ldr	r0, [pc, #96]	; (80015a8 <USART3_IRQHandler+0xa8>)
 8001548:	f008 f9f8 	bl	800993c <iprintf>
		for(uint8_t i = 0; i < uart3_buff_len;i++)
 800154c:	2300      	movs	r3, #0
 800154e:	71fb      	strb	r3, [r7, #7]
 8001550:	e00a      	b.n	8001568 <USART3_IRQHandler+0x68>
			printf("[%d] : %c \r\n",i,uart3Rcv_buff[i]);
 8001552:	79f9      	ldrb	r1, [r7, #7]
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	4a15      	ldr	r2, [pc, #84]	; (80015ac <USART3_IRQHandler+0xac>)
 8001558:	5cd3      	ldrb	r3, [r2, r3]
 800155a:	461a      	mov	r2, r3
 800155c:	4814      	ldr	r0, [pc, #80]	; (80015b0 <USART3_IRQHandler+0xb0>)
 800155e:	f008 f9ed 	bl	800993c <iprintf>
		for(uint8_t i = 0; i < uart3_buff_len;i++)
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	3301      	adds	r3, #1
 8001566:	71fb      	strb	r3, [r7, #7]
 8001568:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <USART3_IRQHandler+0xb4>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	79fa      	ldrb	r2, [r7, #7]
 800156e:	429a      	cmp	r2, r3
 8001570:	d3ef      	bcc.n	8001552 <USART3_IRQHandler+0x52>
		printf("\r\n");
 8001572:	4811      	ldr	r0, [pc, #68]	; (80015b8 <USART3_IRQHandler+0xb8>)
 8001574:	f008 fa68 	bl	8009a48 <puts>
		  //tinysh_char_in((unsigned char)single_char);
		}
#endif

		//Zero Receiving Buffer
		memset(uart3Rcv_buff, '\0', sizeof(uart3Rcv_buff));
 8001578:	22ff      	movs	r2, #255	; 0xff
 800157a:	2100      	movs	r1, #0
 800157c:	480b      	ldr	r0, [pc, #44]	; (80015ac <USART3_IRQHandler+0xac>)
 800157e:	f008 f9d5 	bl	800992c <memset>
		uart3_buff_len = data_length;
 8001582:	4a0c      	ldr	r2, [pc, #48]	; (80015b4 <USART3_IRQHandler+0xb4>)
 8001584:	79bb      	ldrb	r3, [r7, #6]
 8001586:	7013      	strb	r3, [r2, #0]
		data_length = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	71bb      	strb	r3, [r7, #6]


		//Restart to start DMA transmission of 255 bytes of data at a time
		HAL_UART_Receive_DMA(&huart3, (uint8_t*)uart3Rcv_buff, UART3_RX_BUFFER_SIZE);
 800158c:	22ff      	movs	r2, #255	; 0xff
 800158e:	4907      	ldr	r1, [pc, #28]	; (80015ac <USART3_IRQHandler+0xac>)
 8001590:	4803      	ldr	r0, [pc, #12]	; (80015a0 <USART3_IRQHandler+0xa0>)
 8001592:	f004 f91a 	bl	80057ca <HAL_UART_Receive_DMA>
	}
}
 8001596:	bf00      	nop
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	200005d8 	.word	0x200005d8
 80015a4:	20000578 	.word	0x20000578
 80015a8:	0800aac0 	.word	0x0800aac0
 80015ac:	2000061c 	.word	0x2000061c
 80015b0:	0800aad8 	.word	0x0800aad8
 80015b4:	2000071b 	.word	0x2000071b
 80015b8:	0800aae8 	.word	0x0800aae8

080015bc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]
 80015cc:	e00a      	b.n	80015e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015ce:	f3af 8000 	nop.w
 80015d2:	4601      	mov	r1, r0
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	1c5a      	adds	r2, r3, #1
 80015d8:	60ba      	str	r2, [r7, #8]
 80015da:	b2ca      	uxtb	r2, r1
 80015dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	3301      	adds	r3, #1
 80015e2:	617b      	str	r3, [r7, #20]
 80015e4:	697a      	ldr	r2, [r7, #20]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	dbf0      	blt.n	80015ce <_read+0x12>
	}

return len;
 80015ec:	687b      	ldr	r3, [r7, #4]
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3718      	adds	r7, #24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b086      	sub	sp, #24
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	60f8      	str	r0, [r7, #12]
 80015fe:	60b9      	str	r1, [r7, #8]
 8001600:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001602:	2300      	movs	r3, #0
 8001604:	617b      	str	r3, [r7, #20]
 8001606:	e009      	b.n	800161c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	1c5a      	adds	r2, r3, #1
 800160c:	60ba      	str	r2, [r7, #8]
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f7fe ffd9 	bl	80005c8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	3301      	adds	r3, #1
 800161a:	617b      	str	r3, [r7, #20]
 800161c:	697a      	ldr	r2, [r7, #20]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	429a      	cmp	r2, r3
 8001622:	dbf1      	blt.n	8001608 <_write+0x12>
	}
	return len;
 8001624:	687b      	ldr	r3, [r7, #4]
}
 8001626:	4618      	mov	r0, r3
 8001628:	3718      	adds	r7, #24
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <_close>:

int _close(int file)
{
 800162e:	b480      	push	{r7}
 8001630:	b083      	sub	sp, #12
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
	return -1;
 8001636:	f04f 33ff 	mov.w	r3, #4294967295
}
 800163a:	4618      	mov	r0, r3
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001646:	b480      	push	{r7}
 8001648:	b083      	sub	sp, #12
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
 800164e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001656:	605a      	str	r2, [r3, #4]
	return 0;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <_isatty>:

int _isatty(int file)
{
 8001666:	b480      	push	{r7}
 8001668:	b083      	sub	sp, #12
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
	return 1;
 800166e:	2301      	movs	r3, #1
}
 8001670:	4618      	mov	r0, r3
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
	return 0;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3714      	adds	r7, #20
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
	...

08001698 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016a0:	4a14      	ldr	r2, [pc, #80]	; (80016f4 <_sbrk+0x5c>)
 80016a2:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <_sbrk+0x60>)
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016ac:	4b13      	ldr	r3, [pc, #76]	; (80016fc <_sbrk+0x64>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d102      	bne.n	80016ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016b4:	4b11      	ldr	r3, [pc, #68]	; (80016fc <_sbrk+0x64>)
 80016b6:	4a12      	ldr	r2, [pc, #72]	; (8001700 <_sbrk+0x68>)
 80016b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ba:	4b10      	ldr	r3, [pc, #64]	; (80016fc <_sbrk+0x64>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4413      	add	r3, r2
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d207      	bcs.n	80016d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016c8:	f008 f8f8 	bl	80098bc <__errno>
 80016cc:	4603      	mov	r3, r0
 80016ce:	220c      	movs	r2, #12
 80016d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016d2:	f04f 33ff 	mov.w	r3, #4294967295
 80016d6:	e009      	b.n	80016ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016d8:	4b08      	ldr	r3, [pc, #32]	; (80016fc <_sbrk+0x64>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016de:	4b07      	ldr	r3, [pc, #28]	; (80016fc <_sbrk+0x64>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4413      	add	r3, r2
 80016e6:	4a05      	ldr	r2, [pc, #20]	; (80016fc <_sbrk+0x64>)
 80016e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ea:	68fb      	ldr	r3, [r7, #12]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3718      	adds	r7, #24
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20030000 	.word	0x20030000
 80016f8:	00000600 	.word	0x00000600
 80016fc:	20000784 	.word	0x20000784
 8001700:	200044f0 	.word	0x200044f0

08001704 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001708:	4b06      	ldr	r3, [pc, #24]	; (8001724 <SystemInit+0x20>)
 800170a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800170e:	4a05      	ldr	r2, [pc, #20]	; (8001724 <SystemInit+0x20>)
 8001710:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001714:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001728:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001760 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800172c:	480d      	ldr	r0, [pc, #52]	; (8001764 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800172e:	490e      	ldr	r1, [pc, #56]	; (8001768 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001730:	4a0e      	ldr	r2, [pc, #56]	; (800176c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001732:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001734:	e002      	b.n	800173c <LoopCopyDataInit>

08001736 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001736:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001738:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800173a:	3304      	adds	r3, #4

0800173c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800173c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800173e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001740:	d3f9      	bcc.n	8001736 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001742:	4a0b      	ldr	r2, [pc, #44]	; (8001770 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001744:	4c0b      	ldr	r4, [pc, #44]	; (8001774 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001746:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001748:	e001      	b.n	800174e <LoopFillZerobss>

0800174a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800174a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800174c:	3204      	adds	r2, #4

0800174e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800174e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001750:	d3fb      	bcc.n	800174a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001752:	f7ff ffd7 	bl	8001704 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001756:	f008 f8b7 	bl	80098c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800175a:	f7fe ff47 	bl	80005ec <main>
  bx  lr    
 800175e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001760:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001764:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001768:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800176c:	0800abbc 	.word	0x0800abbc
  ldr r2, =_sbss
 8001770:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001774:	200044f0 	.word	0x200044f0

08001778 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001778:	e7fe      	b.n	8001778 <ADC_IRQHandler>
	...

0800177c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001780:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <HAL_Init+0x40>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a0d      	ldr	r2, [pc, #52]	; (80017bc <HAL_Init+0x40>)
 8001786:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800178a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800178c:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <HAL_Init+0x40>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a0a      	ldr	r2, [pc, #40]	; (80017bc <HAL_Init+0x40>)
 8001792:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001796:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001798:	4b08      	ldr	r3, [pc, #32]	; (80017bc <HAL_Init+0x40>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a07      	ldr	r2, [pc, #28]	; (80017bc <HAL_Init+0x40>)
 800179e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a4:	2003      	movs	r0, #3
 80017a6:	f000 f8d8 	bl	800195a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017aa:	200f      	movs	r0, #15
 80017ac:	f7ff fdd6 	bl	800135c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017b0:	f7ff fb3c 	bl	8000e2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40023c00 	.word	0x40023c00

080017c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017c4:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <HAL_IncTick+0x20>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	461a      	mov	r2, r3
 80017ca:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <HAL_IncTick+0x24>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4413      	add	r3, r2
 80017d0:	4a04      	ldr	r2, [pc, #16]	; (80017e4 <HAL_IncTick+0x24>)
 80017d2:	6013      	str	r3, [r2, #0]
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	20000008 	.word	0x20000008
 80017e4:	20000788 	.word	0x20000788

080017e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  return uwTick;
 80017ec:	4b03      	ldr	r3, [pc, #12]	; (80017fc <HAL_GetTick+0x14>)
 80017ee:	681b      	ldr	r3, [r3, #0]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	20000788 	.word	0x20000788

08001800 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001810:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <__NVIC_SetPriorityGrouping+0x44>)
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001816:	68ba      	ldr	r2, [r7, #8]
 8001818:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800181c:	4013      	ands	r3, r2
 800181e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001828:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800182c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001830:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001832:	4a04      	ldr	r2, [pc, #16]	; (8001844 <__NVIC_SetPriorityGrouping+0x44>)
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	60d3      	str	r3, [r2, #12]
}
 8001838:	bf00      	nop
 800183a:	3714      	adds	r7, #20
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	e000ed00 	.word	0xe000ed00

08001848 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800184c:	4b04      	ldr	r3, [pc, #16]	; (8001860 <__NVIC_GetPriorityGrouping+0x18>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	0a1b      	lsrs	r3, r3, #8
 8001852:	f003 0307 	and.w	r3, r3, #7
}
 8001856:	4618      	mov	r0, r3
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800186e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001872:	2b00      	cmp	r3, #0
 8001874:	db0b      	blt.n	800188e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	f003 021f 	and.w	r2, r3, #31
 800187c:	4907      	ldr	r1, [pc, #28]	; (800189c <__NVIC_EnableIRQ+0x38>)
 800187e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001882:	095b      	lsrs	r3, r3, #5
 8001884:	2001      	movs	r0, #1
 8001886:	fa00 f202 	lsl.w	r2, r0, r2
 800188a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800188e:	bf00      	nop
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	e000e100 	.word	0xe000e100

080018a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	6039      	str	r1, [r7, #0]
 80018aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	db0a      	blt.n	80018ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	b2da      	uxtb	r2, r3
 80018b8:	490c      	ldr	r1, [pc, #48]	; (80018ec <__NVIC_SetPriority+0x4c>)
 80018ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018be:	0112      	lsls	r2, r2, #4
 80018c0:	b2d2      	uxtb	r2, r2
 80018c2:	440b      	add	r3, r1
 80018c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018c8:	e00a      	b.n	80018e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	4908      	ldr	r1, [pc, #32]	; (80018f0 <__NVIC_SetPriority+0x50>)
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	f003 030f 	and.w	r3, r3, #15
 80018d6:	3b04      	subs	r3, #4
 80018d8:	0112      	lsls	r2, r2, #4
 80018da:	b2d2      	uxtb	r2, r2
 80018dc:	440b      	add	r3, r1
 80018de:	761a      	strb	r2, [r3, #24]
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	e000e100 	.word	0xe000e100
 80018f0:	e000ed00 	.word	0xe000ed00

080018f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b089      	sub	sp, #36	; 0x24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	f1c3 0307 	rsb	r3, r3, #7
 800190e:	2b04      	cmp	r3, #4
 8001910:	bf28      	it	cs
 8001912:	2304      	movcs	r3, #4
 8001914:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	3304      	adds	r3, #4
 800191a:	2b06      	cmp	r3, #6
 800191c:	d902      	bls.n	8001924 <NVIC_EncodePriority+0x30>
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	3b03      	subs	r3, #3
 8001922:	e000      	b.n	8001926 <NVIC_EncodePriority+0x32>
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001928:	f04f 32ff 	mov.w	r2, #4294967295
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	43da      	mvns	r2, r3
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	401a      	ands	r2, r3
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800193c:	f04f 31ff 	mov.w	r1, #4294967295
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	fa01 f303 	lsl.w	r3, r1, r3
 8001946:	43d9      	mvns	r1, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800194c:	4313      	orrs	r3, r2
         );
}
 800194e:	4618      	mov	r0, r3
 8001950:	3724      	adds	r7, #36	; 0x24
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b082      	sub	sp, #8
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7ff ff4c 	bl	8001800 <__NVIC_SetPriorityGrouping>
}
 8001968:	bf00      	nop
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
 800197c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800197e:	2300      	movs	r3, #0
 8001980:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001982:	f7ff ff61 	bl	8001848 <__NVIC_GetPriorityGrouping>
 8001986:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	68b9      	ldr	r1, [r7, #8]
 800198c:	6978      	ldr	r0, [r7, #20]
 800198e:	f7ff ffb1 	bl	80018f4 <NVIC_EncodePriority>
 8001992:	4602      	mov	r2, r0
 8001994:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001998:	4611      	mov	r1, r2
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff ff80 	bl	80018a0 <__NVIC_SetPriority>
}
 80019a0:	bf00      	nop
 80019a2:	3718      	adds	r7, #24
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff ff54 	bl	8001864 <__NVIC_EnableIRQ>
}
 80019bc:	bf00      	nop
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e00e      	b.n	80019f4 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	795b      	ldrb	r3, [r3, #5]
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d105      	bne.n	80019ec <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff fa4c 	bl	8000e84 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2201      	movs	r2, #1
 80019f0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80019f2:	2300      	movs	r3, #0
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a08:	f7ff feee 	bl	80017e8 <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d101      	bne.n	8001a18 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e099      	b.n	8001b4c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f022 0201 	bic.w	r2, r2, #1
 8001a36:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a38:	e00f      	b.n	8001a5a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a3a:	f7ff fed5 	bl	80017e8 <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	2b05      	cmp	r3, #5
 8001a46:	d908      	bls.n	8001a5a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2220      	movs	r2, #32
 8001a4c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2203      	movs	r2, #3
 8001a52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e078      	b.n	8001b4c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1e8      	bne.n	8001a3a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a70:	697a      	ldr	r2, [r7, #20]
 8001a72:	4b38      	ldr	r3, [pc, #224]	; (8001b54 <HAL_DMA_Init+0x158>)
 8001a74:	4013      	ands	r3, r2
 8001a76:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685a      	ldr	r2, [r3, #4]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a86:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6a1b      	ldr	r3, [r3, #32]
 8001aa4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001aa6:	697a      	ldr	r2, [r7, #20]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab0:	2b04      	cmp	r3, #4
 8001ab2:	d107      	bne.n	8001ac4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abc:	4313      	orrs	r3, r2
 8001abe:	697a      	ldr	r2, [r7, #20]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	697a      	ldr	r2, [r7, #20]
 8001aca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	695b      	ldr	r3, [r3, #20]
 8001ad2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	f023 0307 	bic.w	r3, r3, #7
 8001ada:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae0:	697a      	ldr	r2, [r7, #20]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aea:	2b04      	cmp	r3, #4
 8001aec:	d117      	bne.n	8001b1e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af2:	697a      	ldr	r2, [r7, #20]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d00e      	beq.n	8001b1e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f000 fb0f 	bl	8002124 <DMA_CheckFifoParam>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d008      	beq.n	8001b1e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2240      	movs	r2, #64	; 0x40
 8001b10:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2201      	movs	r2, #1
 8001b16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e016      	b.n	8001b4c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	697a      	ldr	r2, [r7, #20]
 8001b24:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f000 fac6 	bl	80020b8 <DMA_CalcBaseAndBitshift>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b34:	223f      	movs	r2, #63	; 0x3f
 8001b36:	409a      	lsls	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2201      	movs	r2, #1
 8001b46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3718      	adds	r7, #24
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	f010803f 	.word	0xf010803f

08001b58 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
 8001b64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b66:	2300      	movs	r3, #0
 8001b68:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b6e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d101      	bne.n	8001b7e <HAL_DMA_Start_IT+0x26>
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	e040      	b.n	8001c00 <HAL_DMA_Start_IT+0xa8>
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2201      	movs	r2, #1
 8001b82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d12f      	bne.n	8001bf2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2202      	movs	r2, #2
 8001b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	68b9      	ldr	r1, [r7, #8]
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f000 fa58 	bl	800205c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb0:	223f      	movs	r2, #63	; 0x3f
 8001bb2:	409a      	lsls	r2, r3
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f042 0216 	orr.w	r2, r2, #22
 8001bc6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d007      	beq.n	8001be0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f042 0208 	orr.w	r2, r2, #8
 8001bde:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f042 0201 	orr.w	r2, r2, #1
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	e005      	b.n	8001bfe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001bfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3718      	adds	r7, #24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c14:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c16:	f7ff fde7 	bl	80017e8 <HAL_GetTick>
 8001c1a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d008      	beq.n	8001c3a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2280      	movs	r2, #128	; 0x80
 8001c2c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e052      	b.n	8001ce0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f022 0216 	bic.w	r2, r2, #22
 8001c48:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	695a      	ldr	r2, [r3, #20]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c58:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d103      	bne.n	8001c6a <HAL_DMA_Abort+0x62>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d007      	beq.n	8001c7a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f022 0208 	bic.w	r2, r2, #8
 8001c78:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f022 0201 	bic.w	r2, r2, #1
 8001c88:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c8a:	e013      	b.n	8001cb4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c8c:	f7ff fdac 	bl	80017e8 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b05      	cmp	r3, #5
 8001c98:	d90c      	bls.n	8001cb4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2220      	movs	r2, #32
 8001c9e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2203      	movs	r2, #3
 8001ca4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e015      	b.n	8001ce0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1e4      	bne.n	8001c8c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc6:	223f      	movs	r2, #63	; 0x3f
 8001cc8:	409a      	lsls	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d004      	beq.n	8001d06 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2280      	movs	r2, #128	; 0x80
 8001d00:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e00c      	b.n	8001d20 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2205      	movs	r2, #5
 8001d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f022 0201 	bic.w	r2, r2, #1
 8001d1c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d34:	2300      	movs	r3, #0
 8001d36:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d38:	4b8e      	ldr	r3, [pc, #568]	; (8001f74 <HAL_DMA_IRQHandler+0x248>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a8e      	ldr	r2, [pc, #568]	; (8001f78 <HAL_DMA_IRQHandler+0x24c>)
 8001d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d42:	0a9b      	lsrs	r3, r3, #10
 8001d44:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d56:	2208      	movs	r2, #8
 8001d58:	409a      	lsls	r2, r3
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d01a      	beq.n	8001d98 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0304 	and.w	r3, r3, #4
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d013      	beq.n	8001d98 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f022 0204 	bic.w	r2, r2, #4
 8001d7e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d84:	2208      	movs	r2, #8
 8001d86:	409a      	lsls	r2, r3
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d90:	f043 0201 	orr.w	r2, r3, #1
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	409a      	lsls	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	4013      	ands	r3, r2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d012      	beq.n	8001dce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00b      	beq.n	8001dce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dba:	2201      	movs	r2, #1
 8001dbc:	409a      	lsls	r2, r3
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc6:	f043 0202 	orr.w	r2, r3, #2
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd2:	2204      	movs	r2, #4
 8001dd4:	409a      	lsls	r2, r3
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d012      	beq.n	8001e04 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0302 	and.w	r3, r3, #2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d00b      	beq.n	8001e04 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df0:	2204      	movs	r2, #4
 8001df2:	409a      	lsls	r2, r3
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dfc:	f043 0204 	orr.w	r2, r3, #4
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e08:	2210      	movs	r2, #16
 8001e0a:	409a      	lsls	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d043      	beq.n	8001e9c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0308 	and.w	r3, r3, #8
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d03c      	beq.n	8001e9c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e26:	2210      	movs	r2, #16
 8001e28:	409a      	lsls	r2, r3
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d018      	beq.n	8001e6e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d108      	bne.n	8001e5c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d024      	beq.n	8001e9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	4798      	blx	r3
 8001e5a:	e01f      	b.n	8001e9c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d01b      	beq.n	8001e9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	4798      	blx	r3
 8001e6c:	e016      	b.n	8001e9c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d107      	bne.n	8001e8c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f022 0208 	bic.w	r2, r2, #8
 8001e8a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d003      	beq.n	8001e9c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea0:	2220      	movs	r2, #32
 8001ea2:	409a      	lsls	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f000 808f 	beq.w	8001fcc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0310 	and.w	r3, r3, #16
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f000 8087 	beq.w	8001fcc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec2:	2220      	movs	r2, #32
 8001ec4:	409a      	lsls	r2, r3
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b05      	cmp	r3, #5
 8001ed4:	d136      	bne.n	8001f44 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f022 0216 	bic.w	r2, r2, #22
 8001ee4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	695a      	ldr	r2, [r3, #20]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ef4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d103      	bne.n	8001f06 <HAL_DMA_IRQHandler+0x1da>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d007      	beq.n	8001f16 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f022 0208 	bic.w	r2, r2, #8
 8001f14:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f1a:	223f      	movs	r2, #63	; 0x3f
 8001f1c:	409a      	lsls	r2, r3
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d07e      	beq.n	8002038 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	4798      	blx	r3
        }
        return;
 8001f42:	e079      	b.n	8002038 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d01d      	beq.n	8001f8e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d10d      	bne.n	8001f7c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d031      	beq.n	8001fcc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	4798      	blx	r3
 8001f70:	e02c      	b.n	8001fcc <HAL_DMA_IRQHandler+0x2a0>
 8001f72:	bf00      	nop
 8001f74:	20000000 	.word	0x20000000
 8001f78:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d023      	beq.n	8001fcc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	4798      	blx	r3
 8001f8c:	e01e      	b.n	8001fcc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d10f      	bne.n	8001fbc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f022 0210 	bic.w	r2, r2, #16
 8001faa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d003      	beq.n	8001fcc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d032      	beq.n	800203a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d022      	beq.n	8002026 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2205      	movs	r2, #5
 8001fe4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f022 0201 	bic.w	r2, r2, #1
 8001ff6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	60bb      	str	r3, [r7, #8]
 8001ffe:	697a      	ldr	r2, [r7, #20]
 8002000:	429a      	cmp	r2, r3
 8002002:	d307      	bcc.n	8002014 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1f2      	bne.n	8001ff8 <HAL_DMA_IRQHandler+0x2cc>
 8002012:	e000      	b.n	8002016 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002014:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800202a:	2b00      	cmp	r3, #0
 800202c:	d005      	beq.n	800203a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	4798      	blx	r3
 8002036:	e000      	b.n	800203a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002038:	bf00      	nop
    }
  }
}
 800203a:	3718      	adds	r7, #24
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800204e:	b2db      	uxtb	r3, r3
}
 8002050:	4618      	mov	r0, r3
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
 8002068:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002078:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	2b40      	cmp	r3, #64	; 0x40
 8002088:	d108      	bne.n	800209c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	68ba      	ldr	r2, [r7, #8]
 8002098:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800209a:	e007      	b.n	80020ac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68ba      	ldr	r2, [r7, #8]
 80020a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	60da      	str	r2, [r3, #12]
}
 80020ac:	bf00      	nop
 80020ae:	3714      	adds	r7, #20
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	3b10      	subs	r3, #16
 80020c8:	4a14      	ldr	r2, [pc, #80]	; (800211c <DMA_CalcBaseAndBitshift+0x64>)
 80020ca:	fba2 2303 	umull	r2, r3, r2, r3
 80020ce:	091b      	lsrs	r3, r3, #4
 80020d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020d2:	4a13      	ldr	r2, [pc, #76]	; (8002120 <DMA_CalcBaseAndBitshift+0x68>)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	4413      	add	r3, r2
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	461a      	mov	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2b03      	cmp	r3, #3
 80020e4:	d909      	bls.n	80020fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80020ee:	f023 0303 	bic.w	r3, r3, #3
 80020f2:	1d1a      	adds	r2, r3, #4
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	659a      	str	r2, [r3, #88]	; 0x58
 80020f8:	e007      	b.n	800210a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002102:	f023 0303 	bic.w	r3, r3, #3
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800210e:	4618      	mov	r0, r3
 8002110:	3714      	adds	r7, #20
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	aaaaaaab 	.word	0xaaaaaaab
 8002120:	0800ab0c 	.word	0x0800ab0c

08002124 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800212c:	2300      	movs	r3, #0
 800212e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002134:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d11f      	bne.n	800217e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	2b03      	cmp	r3, #3
 8002142:	d856      	bhi.n	80021f2 <DMA_CheckFifoParam+0xce>
 8002144:	a201      	add	r2, pc, #4	; (adr r2, 800214c <DMA_CheckFifoParam+0x28>)
 8002146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800214a:	bf00      	nop
 800214c:	0800215d 	.word	0x0800215d
 8002150:	0800216f 	.word	0x0800216f
 8002154:	0800215d 	.word	0x0800215d
 8002158:	080021f3 	.word	0x080021f3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002160:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d046      	beq.n	80021f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800216c:	e043      	b.n	80021f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002172:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002176:	d140      	bne.n	80021fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800217c:	e03d      	b.n	80021fa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002186:	d121      	bne.n	80021cc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	2b03      	cmp	r3, #3
 800218c:	d837      	bhi.n	80021fe <DMA_CheckFifoParam+0xda>
 800218e:	a201      	add	r2, pc, #4	; (adr r2, 8002194 <DMA_CheckFifoParam+0x70>)
 8002190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002194:	080021a5 	.word	0x080021a5
 8002198:	080021ab 	.word	0x080021ab
 800219c:	080021a5 	.word	0x080021a5
 80021a0:	080021bd 	.word	0x080021bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	73fb      	strb	r3, [r7, #15]
      break;
 80021a8:	e030      	b.n	800220c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d025      	beq.n	8002202 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021ba:	e022      	b.n	8002202 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021c4:	d11f      	bne.n	8002206 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80021ca:	e01c      	b.n	8002206 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d903      	bls.n	80021da <DMA_CheckFifoParam+0xb6>
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	2b03      	cmp	r3, #3
 80021d6:	d003      	beq.n	80021e0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80021d8:	e018      	b.n	800220c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	73fb      	strb	r3, [r7, #15]
      break;
 80021de:	e015      	b.n	800220c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d00e      	beq.n	800220a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	73fb      	strb	r3, [r7, #15]
      break;
 80021f0:	e00b      	b.n	800220a <DMA_CheckFifoParam+0xe6>
      break;
 80021f2:	bf00      	nop
 80021f4:	e00a      	b.n	800220c <DMA_CheckFifoParam+0xe8>
      break;
 80021f6:	bf00      	nop
 80021f8:	e008      	b.n	800220c <DMA_CheckFifoParam+0xe8>
      break;
 80021fa:	bf00      	nop
 80021fc:	e006      	b.n	800220c <DMA_CheckFifoParam+0xe8>
      break;
 80021fe:	bf00      	nop
 8002200:	e004      	b.n	800220c <DMA_CheckFifoParam+0xe8>
      break;
 8002202:	bf00      	nop
 8002204:	e002      	b.n	800220c <DMA_CheckFifoParam+0xe8>
      break;   
 8002206:	bf00      	nop
 8002208:	e000      	b.n	800220c <DMA_CheckFifoParam+0xe8>
      break;
 800220a:	bf00      	nop
    }
  } 
  
  return status; 
 800220c:	7bfb      	ldrb	r3, [r7, #15]
}
 800220e:	4618      	mov	r0, r3
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop

0800221c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800221c:	b480      	push	{r7}
 800221e:	b089      	sub	sp, #36	; 0x24
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002226:	2300      	movs	r3, #0
 8002228:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800222a:	2300      	movs	r3, #0
 800222c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800222e:	2300      	movs	r3, #0
 8002230:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002232:	2300      	movs	r3, #0
 8002234:	61fb      	str	r3, [r7, #28]
 8002236:	e177      	b.n	8002528 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002238:	2201      	movs	r2, #1
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	4013      	ands	r3, r2
 800224a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	429a      	cmp	r2, r3
 8002252:	f040 8166 	bne.w	8002522 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f003 0303 	and.w	r3, r3, #3
 800225e:	2b01      	cmp	r3, #1
 8002260:	d005      	beq.n	800226e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800226a:	2b02      	cmp	r3, #2
 800226c:	d130      	bne.n	80022d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	2203      	movs	r2, #3
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	43db      	mvns	r3, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4013      	ands	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	68da      	ldr	r2, [r3, #12]
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4313      	orrs	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022a4:	2201      	movs	r2, #1
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	43db      	mvns	r3, r3
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4013      	ands	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	091b      	lsrs	r3, r3, #4
 80022ba:	f003 0201 	and.w	r2, r3, #1
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f003 0303 	and.w	r3, r3, #3
 80022d8:	2b03      	cmp	r3, #3
 80022da:	d017      	beq.n	800230c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	2203      	movs	r2, #3
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	43db      	mvns	r3, r3
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4013      	ands	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4313      	orrs	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f003 0303 	and.w	r3, r3, #3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d123      	bne.n	8002360 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	08da      	lsrs	r2, r3, #3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	3208      	adds	r2, #8
 8002320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002324:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	220f      	movs	r2, #15
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	43db      	mvns	r3, r3
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4013      	ands	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	691a      	ldr	r2, [r3, #16]
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4313      	orrs	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	08da      	lsrs	r2, r3, #3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	3208      	adds	r2, #8
 800235a:	69b9      	ldr	r1, [r7, #24]
 800235c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	2203      	movs	r2, #3
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	43db      	mvns	r3, r3
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	4013      	ands	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f003 0203 	and.w	r2, r3, #3
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4313      	orrs	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800239c:	2b00      	cmp	r3, #0
 800239e:	f000 80c0 	beq.w	8002522 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023a2:	2300      	movs	r3, #0
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	4b66      	ldr	r3, [pc, #408]	; (8002540 <HAL_GPIO_Init+0x324>)
 80023a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023aa:	4a65      	ldr	r2, [pc, #404]	; (8002540 <HAL_GPIO_Init+0x324>)
 80023ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023b0:	6453      	str	r3, [r2, #68]	; 0x44
 80023b2:	4b63      	ldr	r3, [pc, #396]	; (8002540 <HAL_GPIO_Init+0x324>)
 80023b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023be:	4a61      	ldr	r2, [pc, #388]	; (8002544 <HAL_GPIO_Init+0x328>)
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	089b      	lsrs	r3, r3, #2
 80023c4:	3302      	adds	r3, #2
 80023c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	f003 0303 	and.w	r3, r3, #3
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	220f      	movs	r2, #15
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	43db      	mvns	r3, r3
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	4013      	ands	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a58      	ldr	r2, [pc, #352]	; (8002548 <HAL_GPIO_Init+0x32c>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d037      	beq.n	800245a <HAL_GPIO_Init+0x23e>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a57      	ldr	r2, [pc, #348]	; (800254c <HAL_GPIO_Init+0x330>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d031      	beq.n	8002456 <HAL_GPIO_Init+0x23a>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a56      	ldr	r2, [pc, #344]	; (8002550 <HAL_GPIO_Init+0x334>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d02b      	beq.n	8002452 <HAL_GPIO_Init+0x236>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a55      	ldr	r2, [pc, #340]	; (8002554 <HAL_GPIO_Init+0x338>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d025      	beq.n	800244e <HAL_GPIO_Init+0x232>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a54      	ldr	r2, [pc, #336]	; (8002558 <HAL_GPIO_Init+0x33c>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d01f      	beq.n	800244a <HAL_GPIO_Init+0x22e>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a53      	ldr	r2, [pc, #332]	; (800255c <HAL_GPIO_Init+0x340>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d019      	beq.n	8002446 <HAL_GPIO_Init+0x22a>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a52      	ldr	r2, [pc, #328]	; (8002560 <HAL_GPIO_Init+0x344>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d013      	beq.n	8002442 <HAL_GPIO_Init+0x226>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a51      	ldr	r2, [pc, #324]	; (8002564 <HAL_GPIO_Init+0x348>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d00d      	beq.n	800243e <HAL_GPIO_Init+0x222>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a50      	ldr	r2, [pc, #320]	; (8002568 <HAL_GPIO_Init+0x34c>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d007      	beq.n	800243a <HAL_GPIO_Init+0x21e>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a4f      	ldr	r2, [pc, #316]	; (800256c <HAL_GPIO_Init+0x350>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d101      	bne.n	8002436 <HAL_GPIO_Init+0x21a>
 8002432:	2309      	movs	r3, #9
 8002434:	e012      	b.n	800245c <HAL_GPIO_Init+0x240>
 8002436:	230a      	movs	r3, #10
 8002438:	e010      	b.n	800245c <HAL_GPIO_Init+0x240>
 800243a:	2308      	movs	r3, #8
 800243c:	e00e      	b.n	800245c <HAL_GPIO_Init+0x240>
 800243e:	2307      	movs	r3, #7
 8002440:	e00c      	b.n	800245c <HAL_GPIO_Init+0x240>
 8002442:	2306      	movs	r3, #6
 8002444:	e00a      	b.n	800245c <HAL_GPIO_Init+0x240>
 8002446:	2305      	movs	r3, #5
 8002448:	e008      	b.n	800245c <HAL_GPIO_Init+0x240>
 800244a:	2304      	movs	r3, #4
 800244c:	e006      	b.n	800245c <HAL_GPIO_Init+0x240>
 800244e:	2303      	movs	r3, #3
 8002450:	e004      	b.n	800245c <HAL_GPIO_Init+0x240>
 8002452:	2302      	movs	r3, #2
 8002454:	e002      	b.n	800245c <HAL_GPIO_Init+0x240>
 8002456:	2301      	movs	r3, #1
 8002458:	e000      	b.n	800245c <HAL_GPIO_Init+0x240>
 800245a:	2300      	movs	r3, #0
 800245c:	69fa      	ldr	r2, [r7, #28]
 800245e:	f002 0203 	and.w	r2, r2, #3
 8002462:	0092      	lsls	r2, r2, #2
 8002464:	4093      	lsls	r3, r2
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4313      	orrs	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800246c:	4935      	ldr	r1, [pc, #212]	; (8002544 <HAL_GPIO_Init+0x328>)
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	089b      	lsrs	r3, r3, #2
 8002472:	3302      	adds	r3, #2
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800247a:	4b3d      	ldr	r3, [pc, #244]	; (8002570 <HAL_GPIO_Init+0x354>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	43db      	mvns	r3, r3
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	4013      	ands	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	4313      	orrs	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800249e:	4a34      	ldr	r2, [pc, #208]	; (8002570 <HAL_GPIO_Init+0x354>)
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80024a4:	4b32      	ldr	r3, [pc, #200]	; (8002570 <HAL_GPIO_Init+0x354>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	43db      	mvns	r3, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4013      	ands	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d003      	beq.n	80024c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024c8:	4a29      	ldr	r2, [pc, #164]	; (8002570 <HAL_GPIO_Init+0x354>)
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024ce:	4b28      	ldr	r3, [pc, #160]	; (8002570 <HAL_GPIO_Init+0x354>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	43db      	mvns	r3, r3
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	4013      	ands	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024f2:	4a1f      	ldr	r2, [pc, #124]	; (8002570 <HAL_GPIO_Init+0x354>)
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024f8:	4b1d      	ldr	r3, [pc, #116]	; (8002570 <HAL_GPIO_Init+0x354>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	43db      	mvns	r3, r3
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4013      	ands	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d003      	beq.n	800251c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	4313      	orrs	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800251c:	4a14      	ldr	r2, [pc, #80]	; (8002570 <HAL_GPIO_Init+0x354>)
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	3301      	adds	r3, #1
 8002526:	61fb      	str	r3, [r7, #28]
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	2b0f      	cmp	r3, #15
 800252c:	f67f ae84 	bls.w	8002238 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002530:	bf00      	nop
 8002532:	bf00      	nop
 8002534:	3724      	adds	r7, #36	; 0x24
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	40023800 	.word	0x40023800
 8002544:	40013800 	.word	0x40013800
 8002548:	40020000 	.word	0x40020000
 800254c:	40020400 	.word	0x40020400
 8002550:	40020800 	.word	0x40020800
 8002554:	40020c00 	.word	0x40020c00
 8002558:	40021000 	.word	0x40021000
 800255c:	40021400 	.word	0x40021400
 8002560:	40021800 	.word	0x40021800
 8002564:	40021c00 	.word	0x40021c00
 8002568:	40022000 	.word	0x40022000
 800256c:	40022400 	.word	0x40022400
 8002570:	40013c00 	.word	0x40013c00

08002574 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	460b      	mov	r3, r1
 800257e:	807b      	strh	r3, [r7, #2]
 8002580:	4613      	mov	r3, r2
 8002582:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002584:	787b      	ldrb	r3, [r7, #1]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800258a:	887a      	ldrh	r2, [r7, #2]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002590:	e003      	b.n	800259a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002592:	887b      	ldrh	r3, [r7, #2]
 8002594:	041a      	lsls	r2, r3, #16
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	619a      	str	r2, [r3, #24]
}
 800259a:	bf00      	nop
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr

080025a6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b085      	sub	sp, #20
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
 80025ae:	460b      	mov	r3, r1
 80025b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025b8:	887a      	ldrh	r2, [r7, #2]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	4013      	ands	r3, r2
 80025be:	041a      	lsls	r2, r3, #16
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	43d9      	mvns	r1, r3
 80025c4:	887b      	ldrh	r3, [r7, #2]
 80025c6:	400b      	ands	r3, r1
 80025c8:	431a      	orrs	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	619a      	str	r2, [r3, #24]
}
 80025ce:	bf00      	nop
 80025d0:	3714      	adds	r7, #20
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
	...

080025dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80025e6:	4b08      	ldr	r3, [pc, #32]	; (8002608 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025e8:	695a      	ldr	r2, [r3, #20]
 80025ea:	88fb      	ldrh	r3, [r7, #6]
 80025ec:	4013      	ands	r3, r2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d006      	beq.n	8002600 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025f2:	4a05      	ldr	r2, [pc, #20]	; (8002608 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025f4:	88fb      	ldrh	r3, [r7, #6]
 80025f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025f8:	88fb      	ldrh	r3, [r7, #6]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7fe fbc4 	bl	8000d88 <HAL_GPIO_EXTI_Callback>
  }
}
 8002600:	bf00      	nop
 8002602:	3708      	adds	r7, #8
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40013c00 	.word	0x40013c00

0800260c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e12b      	b.n	8002876 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d106      	bne.n	8002638 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7fe fc48 	bl	8000ec8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2224      	movs	r2, #36	; 0x24
 800263c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f022 0201 	bic.w	r2, r2, #1
 800264e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800265e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800266e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002670:	f002 fb1c 	bl	8004cac <HAL_RCC_GetPCLK1Freq>
 8002674:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	4a81      	ldr	r2, [pc, #516]	; (8002880 <HAL_I2C_Init+0x274>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d807      	bhi.n	8002690 <HAL_I2C_Init+0x84>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	4a80      	ldr	r2, [pc, #512]	; (8002884 <HAL_I2C_Init+0x278>)
 8002684:	4293      	cmp	r3, r2
 8002686:	bf94      	ite	ls
 8002688:	2301      	movls	r3, #1
 800268a:	2300      	movhi	r3, #0
 800268c:	b2db      	uxtb	r3, r3
 800268e:	e006      	b.n	800269e <HAL_I2C_Init+0x92>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	4a7d      	ldr	r2, [pc, #500]	; (8002888 <HAL_I2C_Init+0x27c>)
 8002694:	4293      	cmp	r3, r2
 8002696:	bf94      	ite	ls
 8002698:	2301      	movls	r3, #1
 800269a:	2300      	movhi	r3, #0
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e0e7      	b.n	8002876 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	4a78      	ldr	r2, [pc, #480]	; (800288c <HAL_I2C_Init+0x280>)
 80026aa:	fba2 2303 	umull	r2, r3, r2, r3
 80026ae:	0c9b      	lsrs	r3, r3, #18
 80026b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68ba      	ldr	r2, [r7, #8]
 80026c2:	430a      	orrs	r2, r1
 80026c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	4a6a      	ldr	r2, [pc, #424]	; (8002880 <HAL_I2C_Init+0x274>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d802      	bhi.n	80026e0 <HAL_I2C_Init+0xd4>
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	3301      	adds	r3, #1
 80026de:	e009      	b.n	80026f4 <HAL_I2C_Init+0xe8>
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026e6:	fb02 f303 	mul.w	r3, r2, r3
 80026ea:	4a69      	ldr	r2, [pc, #420]	; (8002890 <HAL_I2C_Init+0x284>)
 80026ec:	fba2 2303 	umull	r2, r3, r2, r3
 80026f0:	099b      	lsrs	r3, r3, #6
 80026f2:	3301      	adds	r3, #1
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	6812      	ldr	r2, [r2, #0]
 80026f8:	430b      	orrs	r3, r1
 80026fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	69db      	ldr	r3, [r3, #28]
 8002702:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002706:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	495c      	ldr	r1, [pc, #368]	; (8002880 <HAL_I2C_Init+0x274>)
 8002710:	428b      	cmp	r3, r1
 8002712:	d819      	bhi.n	8002748 <HAL_I2C_Init+0x13c>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	1e59      	subs	r1, r3, #1
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002722:	1c59      	adds	r1, r3, #1
 8002724:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002728:	400b      	ands	r3, r1
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00a      	beq.n	8002744 <HAL_I2C_Init+0x138>
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	1e59      	subs	r1, r3, #1
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	fbb1 f3f3 	udiv	r3, r1, r3
 800273c:	3301      	adds	r3, #1
 800273e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002742:	e051      	b.n	80027e8 <HAL_I2C_Init+0x1dc>
 8002744:	2304      	movs	r3, #4
 8002746:	e04f      	b.n	80027e8 <HAL_I2C_Init+0x1dc>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d111      	bne.n	8002774 <HAL_I2C_Init+0x168>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	1e58      	subs	r0, r3, #1
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6859      	ldr	r1, [r3, #4]
 8002758:	460b      	mov	r3, r1
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	440b      	add	r3, r1
 800275e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002762:	3301      	adds	r3, #1
 8002764:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002768:	2b00      	cmp	r3, #0
 800276a:	bf0c      	ite	eq
 800276c:	2301      	moveq	r3, #1
 800276e:	2300      	movne	r3, #0
 8002770:	b2db      	uxtb	r3, r3
 8002772:	e012      	b.n	800279a <HAL_I2C_Init+0x18e>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	1e58      	subs	r0, r3, #1
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6859      	ldr	r1, [r3, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	440b      	add	r3, r1
 8002782:	0099      	lsls	r1, r3, #2
 8002784:	440b      	add	r3, r1
 8002786:	fbb0 f3f3 	udiv	r3, r0, r3
 800278a:	3301      	adds	r3, #1
 800278c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002790:	2b00      	cmp	r3, #0
 8002792:	bf0c      	ite	eq
 8002794:	2301      	moveq	r3, #1
 8002796:	2300      	movne	r3, #0
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <HAL_I2C_Init+0x196>
 800279e:	2301      	movs	r3, #1
 80027a0:	e022      	b.n	80027e8 <HAL_I2C_Init+0x1dc>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d10e      	bne.n	80027c8 <HAL_I2C_Init+0x1bc>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	1e58      	subs	r0, r3, #1
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6859      	ldr	r1, [r3, #4]
 80027b2:	460b      	mov	r3, r1
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	440b      	add	r3, r1
 80027b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80027bc:	3301      	adds	r3, #1
 80027be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027c6:	e00f      	b.n	80027e8 <HAL_I2C_Init+0x1dc>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	1e58      	subs	r0, r3, #1
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6859      	ldr	r1, [r3, #4]
 80027d0:	460b      	mov	r3, r1
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	440b      	add	r3, r1
 80027d6:	0099      	lsls	r1, r3, #2
 80027d8:	440b      	add	r3, r1
 80027da:	fbb0 f3f3 	udiv	r3, r0, r3
 80027de:	3301      	adds	r3, #1
 80027e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027e8:	6879      	ldr	r1, [r7, #4]
 80027ea:	6809      	ldr	r1, [r1, #0]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	69da      	ldr	r2, [r3, #28]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	431a      	orrs	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	430a      	orrs	r2, r1
 800280a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002816:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	6911      	ldr	r1, [r2, #16]
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	68d2      	ldr	r2, [r2, #12]
 8002822:	4311      	orrs	r1, r2
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	6812      	ldr	r2, [r2, #0]
 8002828:	430b      	orrs	r3, r1
 800282a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	695a      	ldr	r2, [r3, #20]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	431a      	orrs	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	430a      	orrs	r2, r1
 8002846:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f042 0201 	orr.w	r2, r2, #1
 8002856:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2220      	movs	r2, #32
 8002862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	000186a0 	.word	0x000186a0
 8002884:	001e847f 	.word	0x001e847f
 8002888:	003d08ff 	.word	0x003d08ff
 800288c:	431bde83 	.word	0x431bde83
 8002890:	10624dd3 	.word	0x10624dd3

08002894 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b088      	sub	sp, #32
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800289c:	2300      	movs	r3, #0
 800289e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ac:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028b4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028bc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80028be:	7bfb      	ldrb	r3, [r7, #15]
 80028c0:	2b10      	cmp	r3, #16
 80028c2:	d003      	beq.n	80028cc <HAL_I2C_EV_IRQHandler+0x38>
 80028c4:	7bfb      	ldrb	r3, [r7, #15]
 80028c6:	2b40      	cmp	r3, #64	; 0x40
 80028c8:	f040 80c1 	bne.w	8002a4e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10d      	bne.n	8002902 <HAL_I2C_EV_IRQHandler+0x6e>
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80028ec:	d003      	beq.n	80028f6 <HAL_I2C_EV_IRQHandler+0x62>
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80028f4:	d101      	bne.n	80028fa <HAL_I2C_EV_IRQHandler+0x66>
 80028f6:	2301      	movs	r3, #1
 80028f8:	e000      	b.n	80028fc <HAL_I2C_EV_IRQHandler+0x68>
 80028fa:	2300      	movs	r3, #0
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	f000 8132 	beq.w	8002b66 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00c      	beq.n	8002926 <HAL_I2C_EV_IRQHandler+0x92>
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	0a5b      	lsrs	r3, r3, #9
 8002910:	f003 0301 	and.w	r3, r3, #1
 8002914:	2b00      	cmp	r3, #0
 8002916:	d006      	beq.n	8002926 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f001 fc71 	bl	8004200 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 fd79 	bl	8003416 <I2C_Master_SB>
 8002924:	e092      	b.n	8002a4c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	08db      	lsrs	r3, r3, #3
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	2b00      	cmp	r3, #0
 8002930:	d009      	beq.n	8002946 <HAL_I2C_EV_IRQHandler+0xb2>
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	0a5b      	lsrs	r3, r3, #9
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 fdef 	bl	8003522 <I2C_Master_ADD10>
 8002944:	e082      	b.n	8002a4c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	085b      	lsrs	r3, r3, #1
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b00      	cmp	r3, #0
 8002950:	d009      	beq.n	8002966 <HAL_I2C_EV_IRQHandler+0xd2>
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	0a5b      	lsrs	r3, r3, #9
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 fe09 	bl	8003576 <I2C_Master_ADDR>
 8002964:	e072      	b.n	8002a4c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	089b      	lsrs	r3, r3, #2
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b00      	cmp	r3, #0
 8002970:	d03b      	beq.n	80029ea <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800297c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002980:	f000 80f3 	beq.w	8002b6a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	09db      	lsrs	r3, r3, #7
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	2b00      	cmp	r3, #0
 800298e:	d00f      	beq.n	80029b0 <HAL_I2C_EV_IRQHandler+0x11c>
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	0a9b      	lsrs	r3, r3, #10
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	2b00      	cmp	r3, #0
 800299a:	d009      	beq.n	80029b0 <HAL_I2C_EV_IRQHandler+0x11c>
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	089b      	lsrs	r3, r3, #2
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d103      	bne.n	80029b0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f000 f9f3 	bl	8002d94 <I2C_MasterTransmit_TXE>
 80029ae:	e04d      	b.n	8002a4c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	089b      	lsrs	r3, r3, #2
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 80d6 	beq.w	8002b6a <HAL_I2C_EV_IRQHandler+0x2d6>
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	0a5b      	lsrs	r3, r3, #9
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	f000 80cf 	beq.w	8002b6a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80029cc:	7bbb      	ldrb	r3, [r7, #14]
 80029ce:	2b21      	cmp	r3, #33	; 0x21
 80029d0:	d103      	bne.n	80029da <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 fa7a 	bl	8002ecc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029d8:	e0c7      	b.n	8002b6a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80029da:	7bfb      	ldrb	r3, [r7, #15]
 80029dc:	2b40      	cmp	r3, #64	; 0x40
 80029de:	f040 80c4 	bne.w	8002b6a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 fae8 	bl	8002fb8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029e8:	e0bf      	b.n	8002b6a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029f8:	f000 80b7 	beq.w	8002b6a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	099b      	lsrs	r3, r3, #6
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00f      	beq.n	8002a28 <HAL_I2C_EV_IRQHandler+0x194>
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	0a9b      	lsrs	r3, r3, #10
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d009      	beq.n	8002a28 <HAL_I2C_EV_IRQHandler+0x194>
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	089b      	lsrs	r3, r3, #2
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d103      	bne.n	8002a28 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f000 fb5d 	bl	80030e0 <I2C_MasterReceive_RXNE>
 8002a26:	e011      	b.n	8002a4c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	089b      	lsrs	r3, r3, #2
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f000 809a 	beq.w	8002b6a <HAL_I2C_EV_IRQHandler+0x2d6>
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	0a5b      	lsrs	r3, r3, #9
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f000 8093 	beq.w	8002b6a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f000 fbfc 	bl	8003242 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a4a:	e08e      	b.n	8002b6a <HAL_I2C_EV_IRQHandler+0x2d6>
 8002a4c:	e08d      	b.n	8002b6a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d004      	beq.n	8002a60 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	695b      	ldr	r3, [r3, #20]
 8002a5c:	61fb      	str	r3, [r7, #28]
 8002a5e:	e007      	b.n	8002a70 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	085b      	lsrs	r3, r3, #1
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d012      	beq.n	8002aa2 <HAL_I2C_EV_IRQHandler+0x20e>
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	0a5b      	lsrs	r3, r3, #9
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00c      	beq.n	8002aa2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d003      	beq.n	8002a98 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002a98:	69b9      	ldr	r1, [r7, #24]
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 ffba 	bl	8003a14 <I2C_Slave_ADDR>
 8002aa0:	e066      	b.n	8002b70 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	091b      	lsrs	r3, r3, #4
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d009      	beq.n	8002ac2 <HAL_I2C_EV_IRQHandler+0x22e>
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	0a5b      	lsrs	r3, r3, #9
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 fff4 	bl	8003aa8 <I2C_Slave_STOPF>
 8002ac0:	e056      	b.n	8002b70 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002ac2:	7bbb      	ldrb	r3, [r7, #14]
 8002ac4:	2b21      	cmp	r3, #33	; 0x21
 8002ac6:	d002      	beq.n	8002ace <HAL_I2C_EV_IRQHandler+0x23a>
 8002ac8:	7bbb      	ldrb	r3, [r7, #14]
 8002aca:	2b29      	cmp	r3, #41	; 0x29
 8002acc:	d125      	bne.n	8002b1a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	09db      	lsrs	r3, r3, #7
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00f      	beq.n	8002afa <HAL_I2C_EV_IRQHandler+0x266>
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	0a9b      	lsrs	r3, r3, #10
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d009      	beq.n	8002afa <HAL_I2C_EV_IRQHandler+0x266>
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	089b      	lsrs	r3, r3, #2
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d103      	bne.n	8002afa <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 fed0 	bl	8003898 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002af8:	e039      	b.n	8002b6e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	089b      	lsrs	r3, r3, #2
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d033      	beq.n	8002b6e <HAL_I2C_EV_IRQHandler+0x2da>
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	0a5b      	lsrs	r3, r3, #9
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d02d      	beq.n	8002b6e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 fefd 	bl	8003912 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b18:	e029      	b.n	8002b6e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	099b      	lsrs	r3, r3, #6
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00f      	beq.n	8002b46 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	0a9b      	lsrs	r3, r3, #10
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d009      	beq.n	8002b46 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	089b      	lsrs	r3, r3, #2
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d103      	bne.n	8002b46 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 ff08 	bl	8003954 <I2C_SlaveReceive_RXNE>
 8002b44:	e014      	b.n	8002b70 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	089b      	lsrs	r3, r3, #2
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00e      	beq.n	8002b70 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	0a5b      	lsrs	r3, r3, #9
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d008      	beq.n	8002b70 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 ff36 	bl	80039d0 <I2C_SlaveReceive_BTF>
 8002b64:	e004      	b.n	8002b70 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002b66:	bf00      	nop
 8002b68:	e002      	b.n	8002b70 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b6a:	bf00      	nop
 8002b6c:	e000      	b.n	8002b70 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b6e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002b70:	3720      	adds	r7, #32
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b08a      	sub	sp, #40	; 0x28
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b98:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002b9a:	6a3b      	ldr	r3, [r7, #32]
 8002b9c:	0a1b      	lsrs	r3, r3, #8
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00e      	beq.n	8002bc4 <HAL_I2C_ER_IRQHandler+0x4e>
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	0a1b      	lsrs	r3, r3, #8
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d008      	beq.n	8002bc4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb4:	f043 0301 	orr.w	r3, r3, #1
 8002bb8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002bc2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002bc4:	6a3b      	ldr	r3, [r7, #32]
 8002bc6:	0a5b      	lsrs	r3, r3, #9
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00e      	beq.n	8002bee <HAL_I2C_ER_IRQHandler+0x78>
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	0a1b      	lsrs	r3, r3, #8
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d008      	beq.n	8002bee <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bde:	f043 0302 	orr.w	r3, r3, #2
 8002be2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002bec:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002bee:	6a3b      	ldr	r3, [r7, #32]
 8002bf0:	0a9b      	lsrs	r3, r3, #10
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d03f      	beq.n	8002c7a <HAL_I2C_ER_IRQHandler+0x104>
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	0a1b      	lsrs	r3, r3, #8
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d039      	beq.n	8002c7a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8002c06:	7efb      	ldrb	r3, [r7, #27]
 8002c08:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c18:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002c20:	7ebb      	ldrb	r3, [r7, #26]
 8002c22:	2b20      	cmp	r3, #32
 8002c24:	d112      	bne.n	8002c4c <HAL_I2C_ER_IRQHandler+0xd6>
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d10f      	bne.n	8002c4c <HAL_I2C_ER_IRQHandler+0xd6>
 8002c2c:	7cfb      	ldrb	r3, [r7, #19]
 8002c2e:	2b21      	cmp	r3, #33	; 0x21
 8002c30:	d008      	beq.n	8002c44 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002c32:	7cfb      	ldrb	r3, [r7, #19]
 8002c34:	2b29      	cmp	r3, #41	; 0x29
 8002c36:	d005      	beq.n	8002c44 <HAL_I2C_ER_IRQHandler+0xce>
 8002c38:	7cfb      	ldrb	r3, [r7, #19]
 8002c3a:	2b28      	cmp	r3, #40	; 0x28
 8002c3c:	d106      	bne.n	8002c4c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2b21      	cmp	r3, #33	; 0x21
 8002c42:	d103      	bne.n	8002c4c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f001 f85f 	bl	8003d08 <I2C_Slave_AF>
 8002c4a:	e016      	b.n	8002c7a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c54:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	f043 0304 	orr.w	r3, r3, #4
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002c5e:	7efb      	ldrb	r3, [r7, #27]
 8002c60:	2b10      	cmp	r3, #16
 8002c62:	d002      	beq.n	8002c6a <HAL_I2C_ER_IRQHandler+0xf4>
 8002c64:	7efb      	ldrb	r3, [r7, #27]
 8002c66:	2b40      	cmp	r3, #64	; 0x40
 8002c68:	d107      	bne.n	8002c7a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c78:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002c7a:	6a3b      	ldr	r3, [r7, #32]
 8002c7c:	0adb      	lsrs	r3, r3, #11
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00e      	beq.n	8002ca4 <HAL_I2C_ER_IRQHandler+0x12e>
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	0a1b      	lsrs	r3, r3, #8
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d008      	beq.n	8002ca4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c94:	f043 0308 	orr.w	r3, r3, #8
 8002c98:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002ca2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d008      	beq.n	8002cbc <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb0:	431a      	orrs	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f001 f896 	bl	8003de8 <I2C_ITError>
  }
}
 8002cbc:	bf00      	nop
 8002cbe:	3728      	adds	r7, #40	; 0x28
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	70fb      	strb	r3, [r7, #3]
 8002d20:	4613      	mov	r3, r2
 8002d22:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002da2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002daa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d150      	bne.n	8002e5c <I2C_MasterTransmit_TXE+0xc8>
 8002dba:	7bfb      	ldrb	r3, [r7, #15]
 8002dbc:	2b21      	cmp	r3, #33	; 0x21
 8002dbe:	d14d      	bne.n	8002e5c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	2b08      	cmp	r3, #8
 8002dc4:	d01d      	beq.n	8002e02 <I2C_MasterTransmit_TXE+0x6e>
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	2b20      	cmp	r3, #32
 8002dca:	d01a      	beq.n	8002e02 <I2C_MasterTransmit_TXE+0x6e>
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002dd2:	d016      	beq.n	8002e02 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	685a      	ldr	r2, [r3, #4]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002de2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2211      	movs	r2, #17
 8002de8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2220      	movs	r2, #32
 8002df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7ff ff62 	bl	8002cc4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e00:	e060      	b.n	8002ec4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e10:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e20:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2220      	movs	r2, #32
 8002e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2b40      	cmp	r3, #64	; 0x40
 8002e3a:	d107      	bne.n	8002e4c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f7ff ff7d 	bl	8002d44 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e4a:	e03b      	b.n	8002ec4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f7ff ff35 	bl	8002cc4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e5a:	e033      	b.n	8002ec4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002e5c:	7bfb      	ldrb	r3, [r7, #15]
 8002e5e:	2b21      	cmp	r3, #33	; 0x21
 8002e60:	d005      	beq.n	8002e6e <I2C_MasterTransmit_TXE+0xda>
 8002e62:	7bbb      	ldrb	r3, [r7, #14]
 8002e64:	2b40      	cmp	r3, #64	; 0x40
 8002e66:	d12d      	bne.n	8002ec4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002e68:	7bfb      	ldrb	r3, [r7, #15]
 8002e6a:	2b22      	cmp	r3, #34	; 0x22
 8002e6c:	d12a      	bne.n	8002ec4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d108      	bne.n	8002e8a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	685a      	ldr	r2, [r3, #4]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e86:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002e88:	e01c      	b.n	8002ec4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b40      	cmp	r3, #64	; 0x40
 8002e94:	d103      	bne.n	8002e9e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 f88e 	bl	8002fb8 <I2C_MemoryTransmit_TXE_BTF>
}
 8002e9c:	e012      	b.n	8002ec4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea2:	781a      	ldrb	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eae:	1c5a      	adds	r2, r3, #1
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002ec2:	e7ff      	b.n	8002ec4 <I2C_MasterTransmit_TXE+0x130>
 8002ec4:	bf00      	nop
 8002ec6:	3710      	adds	r7, #16
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b21      	cmp	r3, #33	; 0x21
 8002ee4:	d164      	bne.n	8002fb0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d012      	beq.n	8002f16 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef4:	781a      	ldrb	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f00:	1c5a      	adds	r2, r3, #1
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002f14:	e04c      	b.n	8002fb0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2b08      	cmp	r3, #8
 8002f1a:	d01d      	beq.n	8002f58 <I2C_MasterTransmit_BTF+0x8c>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2b20      	cmp	r3, #32
 8002f20:	d01a      	beq.n	8002f58 <I2C_MasterTransmit_BTF+0x8c>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f28:	d016      	beq.n	8002f58 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f38:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2211      	movs	r2, #17
 8002f3e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f7ff feb7 	bl	8002cc4 <HAL_I2C_MasterTxCpltCallback>
}
 8002f56:	e02b      	b.n	8002fb0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f66:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f76:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2220      	movs	r2, #32
 8002f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b40      	cmp	r3, #64	; 0x40
 8002f90:	d107      	bne.n	8002fa2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f7ff fed2 	bl	8002d44 <HAL_I2C_MemTxCpltCallback>
}
 8002fa0:	e006      	b.n	8002fb0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7ff fe8a 	bl	8002cc4 <HAL_I2C_MasterTxCpltCallback>
}
 8002fb0:	bf00      	nop
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fc6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d11d      	bne.n	800300c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d10b      	bne.n	8002ff0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fdc:	b2da      	uxtb	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fe8:	1c9a      	adds	r2, r3, #2
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002fee:	e073      	b.n	80030d8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	121b      	asrs	r3, r3, #8
 8002ff8:	b2da      	uxtb	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003004:	1c5a      	adds	r2, r3, #1
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	651a      	str	r2, [r3, #80]	; 0x50
}
 800300a:	e065      	b.n	80030d8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003010:	2b01      	cmp	r3, #1
 8003012:	d10b      	bne.n	800302c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003018:	b2da      	uxtb	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003024:	1c5a      	adds	r2, r3, #1
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	651a      	str	r2, [r3, #80]	; 0x50
}
 800302a:	e055      	b.n	80030d8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003030:	2b02      	cmp	r3, #2
 8003032:	d151      	bne.n	80030d8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003034:	7bfb      	ldrb	r3, [r7, #15]
 8003036:	2b22      	cmp	r3, #34	; 0x22
 8003038:	d10d      	bne.n	8003056 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003048:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800304e:	1c5a      	adds	r2, r3, #1
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003054:	e040      	b.n	80030d8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800305a:	b29b      	uxth	r3, r3
 800305c:	2b00      	cmp	r3, #0
 800305e:	d015      	beq.n	800308c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003060:	7bfb      	ldrb	r3, [r7, #15]
 8003062:	2b21      	cmp	r3, #33	; 0x21
 8003064:	d112      	bne.n	800308c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306a:	781a      	ldrb	r2, [r3, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003076:	1c5a      	adds	r2, r3, #1
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003080:	b29b      	uxth	r3, r3
 8003082:	3b01      	subs	r3, #1
 8003084:	b29a      	uxth	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800308a:	e025      	b.n	80030d8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003090:	b29b      	uxth	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d120      	bne.n	80030d8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003096:	7bfb      	ldrb	r3, [r7, #15]
 8003098:	2b21      	cmp	r3, #33	; 0x21
 800309a:	d11d      	bne.n	80030d8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	685a      	ldr	r2, [r3, #4]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80030aa:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ba:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2220      	movs	r2, #32
 80030c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7ff fe36 	bl	8002d44 <HAL_I2C_MemTxCpltCallback>
}
 80030d8:	bf00      	nop
 80030da:	3710      	adds	r7, #16
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2b22      	cmp	r3, #34	; 0x22
 80030f2:	f040 80a2 	bne.w	800323a <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2b03      	cmp	r3, #3
 8003102:	d921      	bls.n	8003148 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	691a      	ldr	r2, [r3, #16]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310e:	b2d2      	uxtb	r2, r2
 8003110:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	1c5a      	adds	r2, r3, #1
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003120:	b29b      	uxth	r3, r3
 8003122:	3b01      	subs	r3, #1
 8003124:	b29a      	uxth	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800312e:	b29b      	uxth	r3, r3
 8003130:	2b03      	cmp	r3, #3
 8003132:	f040 8082 	bne.w	800323a <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003144:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003146:	e078      	b.n	800323a <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314c:	2b02      	cmp	r3, #2
 800314e:	d074      	beq.n	800323a <I2C_MasterReceive_RXNE+0x15a>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d002      	beq.n	800315c <I2C_MasterReceive_RXNE+0x7c>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d16e      	bne.n	800323a <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f001 f81d 	bl	800419c <I2C_WaitOnSTOPRequestThroughIT>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d142      	bne.n	80031ee <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003176:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	685a      	ldr	r2, [r3, #4]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003186:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	691a      	ldr	r2, [r3, #16]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003192:	b2d2      	uxtb	r2, r2
 8003194:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319a:	1c5a      	adds	r2, r3, #1
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	3b01      	subs	r3, #1
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2220      	movs	r2, #32
 80031b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b40      	cmp	r3, #64	; 0x40
 80031c0:	d10a      	bne.n	80031d8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f7ff fdc1 	bl	8002d58 <HAL_I2C_MemRxCpltCallback>
}
 80031d6:	e030      	b.n	800323a <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2212      	movs	r2, #18
 80031e4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f7ff fd76 	bl	8002cd8 <HAL_I2C_MasterRxCpltCallback>
}
 80031ec:	e025      	b.n	800323a <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	685a      	ldr	r2, [r3, #4]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80031fc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	691a      	ldr	r2, [r3, #16]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003208:	b2d2      	uxtb	r2, r2
 800320a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003210:	1c5a      	adds	r2, r3, #1
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800321a:	b29b      	uxth	r3, r3
 800321c:	3b01      	subs	r3, #1
 800321e:	b29a      	uxth	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2220      	movs	r2, #32
 8003228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f7ff fd99 	bl	8002d6c <HAL_I2C_ErrorCallback>
}
 800323a:	bf00      	nop
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b084      	sub	sp, #16
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003254:	b29b      	uxth	r3, r3
 8003256:	2b04      	cmp	r3, #4
 8003258:	d11b      	bne.n	8003292 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003268:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	691a      	ldr	r2, [r3, #16]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003274:	b2d2      	uxtb	r2, r2
 8003276:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327c:	1c5a      	adds	r2, r3, #1
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003286:	b29b      	uxth	r3, r3
 8003288:	3b01      	subs	r3, #1
 800328a:	b29a      	uxth	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003290:	e0bd      	b.n	800340e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003296:	b29b      	uxth	r3, r3
 8003298:	2b03      	cmp	r3, #3
 800329a:	d129      	bne.n	80032f0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685a      	ldr	r2, [r3, #4]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032aa:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2b04      	cmp	r3, #4
 80032b0:	d00a      	beq.n	80032c8 <I2C_MasterReceive_BTF+0x86>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d007      	beq.n	80032c8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032c6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	691a      	ldr	r2, [r3, #16]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d2:	b2d2      	uxtb	r2, r2
 80032d4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032da:	1c5a      	adds	r2, r3, #1
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	3b01      	subs	r3, #1
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80032ee:	e08e      	b.n	800340e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d176      	bne.n	80033e8 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d002      	beq.n	8003306 <I2C_MasterReceive_BTF+0xc4>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2b10      	cmp	r3, #16
 8003304:	d108      	bne.n	8003318 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003314:	601a      	str	r2, [r3, #0]
 8003316:	e019      	b.n	800334c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2b04      	cmp	r3, #4
 800331c:	d002      	beq.n	8003324 <I2C_MasterReceive_BTF+0xe2>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2b02      	cmp	r3, #2
 8003322:	d108      	bne.n	8003336 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	e00a      	b.n	800334c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2b10      	cmp	r3, #16
 800333a:	d007      	beq.n	800334c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800334a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	691a      	ldr	r2, [r3, #16]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003356:	b2d2      	uxtb	r2, r2
 8003358:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335e:	1c5a      	adds	r2, r3, #1
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003368:	b29b      	uxth	r3, r3
 800336a:	3b01      	subs	r3, #1
 800336c:	b29a      	uxth	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	691a      	ldr	r2, [r3, #16]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337c:	b2d2      	uxtb	r2, r2
 800337e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003384:	1c5a      	adds	r2, r3, #1
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800338e:	b29b      	uxth	r3, r3
 8003390:	3b01      	subs	r3, #1
 8003392:	b29a      	uxth	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	685a      	ldr	r2, [r3, #4]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80033a6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2220      	movs	r2, #32
 80033ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	2b40      	cmp	r3, #64	; 0x40
 80033ba:	d10a      	bne.n	80033d2 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f7ff fcc4 	bl	8002d58 <HAL_I2C_MemRxCpltCallback>
}
 80033d0:	e01d      	b.n	800340e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2212      	movs	r2, #18
 80033de:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f7ff fc79 	bl	8002cd8 <HAL_I2C_MasterRxCpltCallback>
}
 80033e6:	e012      	b.n	800340e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	691a      	ldr	r2, [r3, #16]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f2:	b2d2      	uxtb	r2, r2
 80033f4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fa:	1c5a      	adds	r2, r3, #1
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003404:	b29b      	uxth	r3, r3
 8003406:	3b01      	subs	r3, #1
 8003408:	b29a      	uxth	r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800340e:	bf00      	nop
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003416:	b480      	push	{r7}
 8003418:	b083      	sub	sp, #12
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b40      	cmp	r3, #64	; 0x40
 8003428:	d117      	bne.n	800345a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800342e:	2b00      	cmp	r3, #0
 8003430:	d109      	bne.n	8003446 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003436:	b2db      	uxtb	r3, r3
 8003438:	461a      	mov	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003442:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003444:	e067      	b.n	8003516 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344a:	b2db      	uxtb	r3, r3
 800344c:	f043 0301 	orr.w	r3, r3, #1
 8003450:	b2da      	uxtb	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	611a      	str	r2, [r3, #16]
}
 8003458:	e05d      	b.n	8003516 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003462:	d133      	bne.n	80034cc <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b21      	cmp	r3, #33	; 0x21
 800346e:	d109      	bne.n	8003484 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003474:	b2db      	uxtb	r3, r3
 8003476:	461a      	mov	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003480:	611a      	str	r2, [r3, #16]
 8003482:	e008      	b.n	8003496 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003488:	b2db      	uxtb	r3, r3
 800348a:	f043 0301 	orr.w	r3, r3, #1
 800348e:	b2da      	uxtb	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800349a:	2b00      	cmp	r3, #0
 800349c:	d004      	beq.n	80034a8 <I2C_Master_SB+0x92>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d108      	bne.n	80034ba <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d032      	beq.n	8003516 <I2C_Master_SB+0x100>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d02d      	beq.n	8003516 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	685a      	ldr	r2, [r3, #4]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034c8:	605a      	str	r2, [r3, #4]
}
 80034ca:	e024      	b.n	8003516 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d10e      	bne.n	80034f2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d8:	b29b      	uxth	r3, r3
 80034da:	11db      	asrs	r3, r3, #7
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	f003 0306 	and.w	r3, r3, #6
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	f063 030f 	orn	r3, r3, #15
 80034e8:	b2da      	uxtb	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	611a      	str	r2, [r3, #16]
}
 80034f0:	e011      	b.n	8003516 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d10d      	bne.n	8003516 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fe:	b29b      	uxth	r3, r3
 8003500:	11db      	asrs	r3, r3, #7
 8003502:	b2db      	uxtb	r3, r3
 8003504:	f003 0306 	and.w	r3, r3, #6
 8003508:	b2db      	uxtb	r3, r3
 800350a:	f063 030e 	orn	r3, r3, #14
 800350e:	b2da      	uxtb	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	611a      	str	r2, [r3, #16]
}
 8003516:	bf00      	nop
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003522:	b480      	push	{r7}
 8003524:	b083      	sub	sp, #12
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352e:	b2da      	uxtb	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800353a:	2b00      	cmp	r3, #0
 800353c:	d004      	beq.n	8003548 <I2C_Master_ADD10+0x26>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003544:	2b00      	cmp	r3, #0
 8003546:	d108      	bne.n	800355a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00c      	beq.n	800356a <I2C_Master_ADD10+0x48>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003556:	2b00      	cmp	r3, #0
 8003558:	d007      	beq.n	800356a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	685a      	ldr	r2, [r3, #4]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003568:	605a      	str	r2, [r3, #4]
  }
}
 800356a:	bf00      	nop
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr

08003576 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003576:	b480      	push	{r7}
 8003578:	b091      	sub	sp, #68	; 0x44
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003584:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003592:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800359a:	b2db      	uxtb	r3, r3
 800359c:	2b22      	cmp	r3, #34	; 0x22
 800359e:	f040 8169 	bne.w	8003874 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10f      	bne.n	80035ca <I2C_Master_ADDR+0x54>
 80035aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80035ae:	2b40      	cmp	r3, #64	; 0x40
 80035b0:	d10b      	bne.n	80035ca <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035b2:	2300      	movs	r3, #0
 80035b4:	633b      	str	r3, [r7, #48]	; 0x30
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	695b      	ldr	r3, [r3, #20]
 80035bc:	633b      	str	r3, [r7, #48]	; 0x30
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	633b      	str	r3, [r7, #48]	; 0x30
 80035c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c8:	e160      	b.n	800388c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d11d      	bne.n	800360e <I2C_Master_ADDR+0x98>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80035da:	d118      	bne.n	800360e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035dc:	2300      	movs	r3, #0
 80035de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003600:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003606:	1c5a      	adds	r2, r3, #1
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	651a      	str	r2, [r3, #80]	; 0x50
 800360c:	e13e      	b.n	800388c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003612:	b29b      	uxth	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	d113      	bne.n	8003640 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003618:	2300      	movs	r3, #0
 800361a:	62bb      	str	r3, [r7, #40]	; 0x28
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	62bb      	str	r3, [r7, #40]	; 0x28
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	62bb      	str	r3, [r7, #40]	; 0x28
 800362c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800363c:	601a      	str	r2, [r3, #0]
 800363e:	e115      	b.n	800386c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003644:	b29b      	uxth	r3, r3
 8003646:	2b01      	cmp	r3, #1
 8003648:	f040 808a 	bne.w	8003760 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800364c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800364e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003652:	d137      	bne.n	80036c4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003662:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800366e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003672:	d113      	bne.n	800369c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003682:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003684:	2300      	movs	r3, #0
 8003686:	627b      	str	r3, [r7, #36]	; 0x24
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	627b      	str	r3, [r7, #36]	; 0x24
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	627b      	str	r3, [r7, #36]	; 0x24
 8003698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369a:	e0e7      	b.n	800386c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800369c:	2300      	movs	r3, #0
 800369e:	623b      	str	r3, [r7, #32]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	623b      	str	r3, [r7, #32]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	623b      	str	r3, [r7, #32]
 80036b0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036c0:	601a      	str	r2, [r3, #0]
 80036c2:	e0d3      	b.n	800386c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80036c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036c6:	2b08      	cmp	r3, #8
 80036c8:	d02e      	beq.n	8003728 <I2C_Master_ADDR+0x1b2>
 80036ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036cc:	2b20      	cmp	r3, #32
 80036ce:	d02b      	beq.n	8003728 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80036d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036d2:	2b12      	cmp	r3, #18
 80036d4:	d102      	bne.n	80036dc <I2C_Master_ADDR+0x166>
 80036d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d125      	bne.n	8003728 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80036dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036de:	2b04      	cmp	r3, #4
 80036e0:	d00e      	beq.n	8003700 <I2C_Master_ADDR+0x18a>
 80036e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d00b      	beq.n	8003700 <I2C_Master_ADDR+0x18a>
 80036e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ea:	2b10      	cmp	r3, #16
 80036ec:	d008      	beq.n	8003700 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036fc:	601a      	str	r2, [r3, #0]
 80036fe:	e007      	b.n	8003710 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800370e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003710:	2300      	movs	r3, #0
 8003712:	61fb      	str	r3, [r7, #28]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	61fb      	str	r3, [r7, #28]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	61fb      	str	r3, [r7, #28]
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	e0a1      	b.n	800386c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003736:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003738:	2300      	movs	r3, #0
 800373a:	61bb      	str	r3, [r7, #24]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	61bb      	str	r3, [r7, #24]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	61bb      	str	r3, [r7, #24]
 800374c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800375c:	601a      	str	r2, [r3, #0]
 800375e:	e085      	b.n	800386c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003764:	b29b      	uxth	r3, r3
 8003766:	2b02      	cmp	r3, #2
 8003768:	d14d      	bne.n	8003806 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800376a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800376c:	2b04      	cmp	r3, #4
 800376e:	d016      	beq.n	800379e <I2C_Master_ADDR+0x228>
 8003770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003772:	2b02      	cmp	r3, #2
 8003774:	d013      	beq.n	800379e <I2C_Master_ADDR+0x228>
 8003776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003778:	2b10      	cmp	r3, #16
 800377a:	d010      	beq.n	800379e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800378a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800379a:	601a      	str	r2, [r3, #0]
 800379c:	e007      	b.n	80037ae <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037ac:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037bc:	d117      	bne.n	80037ee <I2C_Master_ADDR+0x278>
 80037be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037c4:	d00b      	beq.n	80037de <I2C_Master_ADDR+0x268>
 80037c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d008      	beq.n	80037de <I2C_Master_ADDR+0x268>
 80037cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ce:	2b08      	cmp	r3, #8
 80037d0:	d005      	beq.n	80037de <I2C_Master_ADDR+0x268>
 80037d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d4:	2b10      	cmp	r3, #16
 80037d6:	d002      	beq.n	80037de <I2C_Master_ADDR+0x268>
 80037d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037da:	2b20      	cmp	r3, #32
 80037dc:	d107      	bne.n	80037ee <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	685a      	ldr	r2, [r3, #4]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80037ec:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037ee:	2300      	movs	r3, #0
 80037f0:	617b      	str	r3, [r7, #20]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	695b      	ldr	r3, [r3, #20]
 80037f8:	617b      	str	r3, [r7, #20]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	617b      	str	r3, [r7, #20]
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	e032      	b.n	800386c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003814:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003820:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003824:	d117      	bne.n	8003856 <I2C_Master_ADDR+0x2e0>
 8003826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003828:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800382c:	d00b      	beq.n	8003846 <I2C_Master_ADDR+0x2d0>
 800382e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003830:	2b01      	cmp	r3, #1
 8003832:	d008      	beq.n	8003846 <I2C_Master_ADDR+0x2d0>
 8003834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003836:	2b08      	cmp	r3, #8
 8003838:	d005      	beq.n	8003846 <I2C_Master_ADDR+0x2d0>
 800383a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800383c:	2b10      	cmp	r3, #16
 800383e:	d002      	beq.n	8003846 <I2C_Master_ADDR+0x2d0>
 8003840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003842:	2b20      	cmp	r3, #32
 8003844:	d107      	bne.n	8003856 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	685a      	ldr	r2, [r3, #4]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003854:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003856:	2300      	movs	r3, #0
 8003858:	613b      	str	r3, [r7, #16]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	695b      	ldr	r3, [r3, #20]
 8003860:	613b      	str	r3, [r7, #16]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	613b      	str	r3, [r7, #16]
 800386a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003872:	e00b      	b.n	800388c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003874:	2300      	movs	r3, #0
 8003876:	60fb      	str	r3, [r7, #12]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	60fb      	str	r3, [r7, #12]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	60fb      	str	r3, [r7, #12]
 8003888:	68fb      	ldr	r3, [r7, #12]
}
 800388a:	e7ff      	b.n	800388c <I2C_Master_ADDR+0x316>
 800388c:	bf00      	nop
 800388e:	3744      	adds	r7, #68	; 0x44
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038a6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d02b      	beq.n	800390a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b6:	781a      	ldrb	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c2:	1c5a      	adds	r2, r3, #1
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	3b01      	subs	r3, #1
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038da:	b29b      	uxth	r3, r3
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d114      	bne.n	800390a <I2C_SlaveTransmit_TXE+0x72>
 80038e0:	7bfb      	ldrb	r3, [r7, #15]
 80038e2:	2b29      	cmp	r3, #41	; 0x29
 80038e4:	d111      	bne.n	800390a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	685a      	ldr	r2, [r3, #4]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038f4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2221      	movs	r2, #33	; 0x21
 80038fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2228      	movs	r2, #40	; 0x28
 8003900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f7ff f9f1 	bl	8002cec <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800390a:	bf00      	nop
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003912:	b480      	push	{r7}
 8003914:	b083      	sub	sp, #12
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391e:	b29b      	uxth	r3, r3
 8003920:	2b00      	cmp	r3, #0
 8003922:	d011      	beq.n	8003948 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	781a      	ldrb	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003934:	1c5a      	adds	r2, r3, #1
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800393e:	b29b      	uxth	r3, r3
 8003940:	3b01      	subs	r3, #1
 8003942:	b29a      	uxth	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003962:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003968:	b29b      	uxth	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d02c      	beq.n	80039c8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	691a      	ldr	r2, [r3, #16]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003978:	b2d2      	uxtb	r2, r2
 800397a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003980:	1c5a      	adds	r2, r3, #1
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800398a:	b29b      	uxth	r3, r3
 800398c:	3b01      	subs	r3, #1
 800398e:	b29a      	uxth	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003998:	b29b      	uxth	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d114      	bne.n	80039c8 <I2C_SlaveReceive_RXNE+0x74>
 800399e:	7bfb      	ldrb	r3, [r7, #15]
 80039a0:	2b2a      	cmp	r3, #42	; 0x2a
 80039a2:	d111      	bne.n	80039c8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	685a      	ldr	r2, [r3, #4]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039b2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2222      	movs	r2, #34	; 0x22
 80039b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2228      	movs	r2, #40	; 0x28
 80039be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7ff f99c 	bl	8002d00 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80039c8:	bf00      	nop
 80039ca:	3710      	adds	r7, #16
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039dc:	b29b      	uxth	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d012      	beq.n	8003a08 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	691a      	ldr	r2, [r3, #16]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ec:	b2d2      	uxtb	r2, r2
 80039ee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f4:	1c5a      	adds	r2, r3, #1
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	3b01      	subs	r3, #1
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003a2e:	2b28      	cmp	r3, #40	; 0x28
 8003a30:	d127      	bne.n	8003a82 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a40:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	089b      	lsrs	r3, r3, #2
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	09db      	lsrs	r3, r3, #7
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d103      	bne.n	8003a66 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	81bb      	strh	r3, [r7, #12]
 8003a64:	e002      	b.n	8003a6c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	699b      	ldr	r3, [r3, #24]
 8003a6a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003a74:	89ba      	ldrh	r2, [r7, #12]
 8003a76:	7bfb      	ldrb	r3, [r7, #15]
 8003a78:	4619      	mov	r1, r3
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f7ff f94a 	bl	8002d14 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003a80:	e00e      	b.n	8003aa0 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a82:	2300      	movs	r3, #0
 8003a84:	60bb      	str	r3, [r7, #8]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	60bb      	str	r3, [r7, #8]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	60bb      	str	r3, [r7, #8]
 8003a96:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003aa0:	bf00      	nop
 8003aa2:	3710      	adds	r7, #16
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ab6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ac6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003ac8:	2300      	movs	r3, #0
 8003aca:	60bb      	str	r3, [r7, #8]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	60bb      	str	r3, [r7, #8]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f042 0201 	orr.w	r2, r2, #1
 8003ae2:	601a      	str	r2, [r3, #0]
 8003ae4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003af4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b04:	d172      	bne.n	8003bec <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003b06:	7bfb      	ldrb	r3, [r7, #15]
 8003b08:	2b22      	cmp	r3, #34	; 0x22
 8003b0a:	d002      	beq.n	8003b12 <I2C_Slave_STOPF+0x6a>
 8003b0c:	7bfb      	ldrb	r3, [r7, #15]
 8003b0e:	2b2a      	cmp	r3, #42	; 0x2a
 8003b10:	d135      	bne.n	8003b7e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d005      	beq.n	8003b36 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	f043 0204 	orr.w	r2, r3, #4
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	685a      	ldr	r2, [r3, #4]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b44:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7fe fa78 	bl	8002040 <HAL_DMA_GetState>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d049      	beq.n	8003bea <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5a:	4a69      	ldr	r2, [pc, #420]	; (8003d00 <I2C_Slave_STOPF+0x258>)
 8003b5c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7fe f8c0 	bl	8001ce8 <HAL_DMA_Abort_IT>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d03d      	beq.n	8003bea <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b78:	4610      	mov	r0, r2
 8003b7a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003b7c:	e035      	b.n	8003bea <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d005      	beq.n	8003ba2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	f043 0204 	orr.w	r2, r3, #4
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	685a      	ldr	r2, [r3, #4]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bb0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7fe fa42 	bl	8002040 <HAL_DMA_GetState>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d014      	beq.n	8003bec <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bc6:	4a4e      	ldr	r2, [pc, #312]	; (8003d00 <I2C_Slave_STOPF+0x258>)
 8003bc8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7fe f88a 	bl	8001ce8 <HAL_DMA_Abort_IT>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d008      	beq.n	8003bec <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003be4:	4610      	mov	r0, r2
 8003be6:	4798      	blx	r3
 8003be8:	e000      	b.n	8003bec <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003bea:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d03e      	beq.n	8003c74 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	695b      	ldr	r3, [r3, #20]
 8003bfc:	f003 0304 	and.w	r3, r3, #4
 8003c00:	2b04      	cmp	r3, #4
 8003c02:	d112      	bne.n	8003c2a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	691a      	ldr	r2, [r3, #16]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0e:	b2d2      	uxtb	r2, r2
 8003c10:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c16:	1c5a      	adds	r2, r3, #1
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	3b01      	subs	r3, #1
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c34:	2b40      	cmp	r3, #64	; 0x40
 8003c36:	d112      	bne.n	8003c5e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	691a      	ldr	r2, [r3, #16]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	b2d2      	uxtb	r2, r2
 8003c44:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4a:	1c5a      	adds	r2, r3, #1
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	3b01      	subs	r3, #1
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d005      	beq.n	8003c74 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6c:	f043 0204 	orr.w	r2, r3, #4
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d003      	beq.n	8003c84 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 f8b3 	bl	8003de8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003c82:	e039      	b.n	8003cf8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003c84:	7bfb      	ldrb	r3, [r7, #15]
 8003c86:	2b2a      	cmp	r3, #42	; 0x2a
 8003c88:	d109      	bne.n	8003c9e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2228      	movs	r2, #40	; 0x28
 8003c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f7ff f831 	bl	8002d00 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2b28      	cmp	r3, #40	; 0x28
 8003ca8:	d111      	bne.n	8003cce <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a15      	ldr	r2, [pc, #84]	; (8003d04 <I2C_Slave_STOPF+0x25c>)
 8003cae:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2220      	movs	r2, #32
 8003cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f7ff f832 	bl	8002d30 <HAL_I2C_ListenCpltCallback>
}
 8003ccc:	e014      	b.n	8003cf8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd2:	2b22      	cmp	r3, #34	; 0x22
 8003cd4:	d002      	beq.n	8003cdc <I2C_Slave_STOPF+0x234>
 8003cd6:	7bfb      	ldrb	r3, [r7, #15]
 8003cd8:	2b22      	cmp	r3, #34	; 0x22
 8003cda:	d10d      	bne.n	8003cf8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2220      	movs	r2, #32
 8003ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f7ff f804 	bl	8002d00 <HAL_I2C_SlaveRxCpltCallback>
}
 8003cf8:	bf00      	nop
 8003cfa:	3710      	adds	r7, #16
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	0800404d 	.word	0x0800404d
 8003d04:	ffff0000 	.word	0xffff0000

08003d08 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d16:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	2b08      	cmp	r3, #8
 8003d22:	d002      	beq.n	8003d2a <I2C_Slave_AF+0x22>
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	2b20      	cmp	r3, #32
 8003d28:	d129      	bne.n	8003d7e <I2C_Slave_AF+0x76>
 8003d2a:	7bfb      	ldrb	r3, [r7, #15]
 8003d2c:	2b28      	cmp	r3, #40	; 0x28
 8003d2e:	d126      	bne.n	8003d7e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a2c      	ldr	r2, [pc, #176]	; (8003de4 <I2C_Slave_AF+0xdc>)
 8003d34:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	685a      	ldr	r2, [r3, #4]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d44:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d4e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d5e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2220      	movs	r2, #32
 8003d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f7fe ffda 	bl	8002d30 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003d7c:	e02e      	b.n	8003ddc <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003d7e:	7bfb      	ldrb	r3, [r7, #15]
 8003d80:	2b21      	cmp	r3, #33	; 0x21
 8003d82:	d126      	bne.n	8003dd2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a17      	ldr	r2, [pc, #92]	; (8003de4 <I2C_Slave_AF+0xdc>)
 8003d88:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2221      	movs	r2, #33	; 0x21
 8003d8e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2220      	movs	r2, #32
 8003d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	685a      	ldr	r2, [r3, #4]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003dae:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003db8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dc8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7fe ff8e 	bl	8002cec <HAL_I2C_SlaveTxCpltCallback>
}
 8003dd0:	e004      	b.n	8003ddc <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003dda:	615a      	str	r2, [r3, #20]
}
 8003ddc:	bf00      	nop
 8003dde:	3710      	adds	r7, #16
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	ffff0000 	.word	0xffff0000

08003de8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003df6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dfe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003e00:	7bbb      	ldrb	r3, [r7, #14]
 8003e02:	2b10      	cmp	r3, #16
 8003e04:	d002      	beq.n	8003e0c <I2C_ITError+0x24>
 8003e06:	7bbb      	ldrb	r3, [r7, #14]
 8003e08:	2b40      	cmp	r3, #64	; 0x40
 8003e0a:	d10a      	bne.n	8003e22 <I2C_ITError+0x3a>
 8003e0c:	7bfb      	ldrb	r3, [r7, #15]
 8003e0e:	2b22      	cmp	r3, #34	; 0x22
 8003e10:	d107      	bne.n	8003e22 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e20:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003e22:	7bfb      	ldrb	r3, [r7, #15]
 8003e24:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003e28:	2b28      	cmp	r3, #40	; 0x28
 8003e2a:	d107      	bne.n	8003e3c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2228      	movs	r2, #40	; 0x28
 8003e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003e3a:	e015      	b.n	8003e68 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e4a:	d00a      	beq.n	8003e62 <I2C_ITError+0x7a>
 8003e4c:	7bfb      	ldrb	r3, [r7, #15]
 8003e4e:	2b60      	cmp	r3, #96	; 0x60
 8003e50:	d007      	beq.n	8003e62 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2220      	movs	r2, #32
 8003e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e76:	d162      	bne.n	8003f3e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	685a      	ldr	r2, [r3, #4]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e86:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d020      	beq.n	8003ed8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e9a:	4a6a      	ldr	r2, [pc, #424]	; (8004044 <I2C_ITError+0x25c>)
 8003e9c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7fd ff20 	bl	8001ce8 <HAL_DMA_Abort_IT>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	f000 8089 	beq.w	8003fc2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f022 0201 	bic.w	r2, r2, #1
 8003ebe:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2220      	movs	r2, #32
 8003ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ecc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ed2:	4610      	mov	r0, r2
 8003ed4:	4798      	blx	r3
 8003ed6:	e074      	b.n	8003fc2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003edc:	4a59      	ldr	r2, [pc, #356]	; (8004044 <I2C_ITError+0x25c>)
 8003ede:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7fd feff 	bl	8001ce8 <HAL_DMA_Abort_IT>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d068      	beq.n	8003fc2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003efa:	2b40      	cmp	r3, #64	; 0x40
 8003efc:	d10b      	bne.n	8003f16 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	691a      	ldr	r2, [r3, #16]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f08:	b2d2      	uxtb	r2, r2
 8003f0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f10:	1c5a      	adds	r2, r3, #1
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 0201 	bic.w	r2, r2, #1
 8003f24:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2220      	movs	r2, #32
 8003f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f38:	4610      	mov	r0, r2
 8003f3a:	4798      	blx	r3
 8003f3c:	e041      	b.n	8003fc2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b60      	cmp	r3, #96	; 0x60
 8003f48:	d125      	bne.n	8003f96 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2220      	movs	r2, #32
 8003f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f62:	2b40      	cmp	r3, #64	; 0x40
 8003f64:	d10b      	bne.n	8003f7e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	691a      	ldr	r2, [r3, #16]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f70:	b2d2      	uxtb	r2, r2
 8003f72:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f78:	1c5a      	adds	r2, r3, #1
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f022 0201 	bic.w	r2, r2, #1
 8003f8c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7fe fef6 	bl	8002d80 <HAL_I2C_AbortCpltCallback>
 8003f94:	e015      	b.n	8003fc2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	695b      	ldr	r3, [r3, #20]
 8003f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa0:	2b40      	cmp	r3, #64	; 0x40
 8003fa2:	d10b      	bne.n	8003fbc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	691a      	ldr	r2, [r3, #16]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fae:	b2d2      	uxtb	r2, r2
 8003fb0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb6:	1c5a      	adds	r2, r3, #1
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f7fe fed5 	bl	8002d6c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10e      	bne.n	8003ff0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d109      	bne.n	8003ff0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d104      	bne.n	8003ff0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d007      	beq.n	8004000 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	685a      	ldr	r2, [r3, #4]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ffe:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004006:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400c:	f003 0304 	and.w	r3, r3, #4
 8004010:	2b04      	cmp	r3, #4
 8004012:	d113      	bne.n	800403c <I2C_ITError+0x254>
 8004014:	7bfb      	ldrb	r3, [r7, #15]
 8004016:	2b28      	cmp	r3, #40	; 0x28
 8004018:	d110      	bne.n	800403c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a0a      	ldr	r2, [pc, #40]	; (8004048 <I2C_ITError+0x260>)
 800401e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2220      	movs	r2, #32
 800402a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f7fe fe7a 	bl	8002d30 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800403c:	bf00      	nop
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	0800404d 	.word	0x0800404d
 8004048:	ffff0000 	.word	0xffff0000

0800404c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b086      	sub	sp, #24
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004054:	2300      	movs	r3, #0
 8004056:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004064:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004066:	4b4b      	ldr	r3, [pc, #300]	; (8004194 <I2C_DMAAbort+0x148>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	08db      	lsrs	r3, r3, #3
 800406c:	4a4a      	ldr	r2, [pc, #296]	; (8004198 <I2C_DMAAbort+0x14c>)
 800406e:	fba2 2303 	umull	r2, r3, r2, r3
 8004072:	0a1a      	lsrs	r2, r3, #8
 8004074:	4613      	mov	r3, r2
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	4413      	add	r3, r2
 800407a:	00da      	lsls	r2, r3, #3
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d106      	bne.n	8004094 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408a:	f043 0220 	orr.w	r2, r3, #32
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004092:	e00a      	b.n	80040aa <I2C_DMAAbort+0x5e>
    }
    count--;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	3b01      	subs	r3, #1
 8004098:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040a8:	d0ea      	beq.n	8004080 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d003      	beq.n	80040ba <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040b6:	2200      	movs	r2, #0
 80040b8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c6:	2200      	movs	r2, #0
 80040c8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040d8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	2200      	movs	r2, #0
 80040de:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d003      	beq.n	80040f0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ec:	2200      	movs	r2, #0
 80040ee:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d003      	beq.n	8004100 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fc:	2200      	movs	r2, #0
 80040fe:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f022 0201 	bic.w	r2, r2, #1
 800410e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004116:	b2db      	uxtb	r3, r3
 8004118:	2b60      	cmp	r3, #96	; 0x60
 800411a:	d10e      	bne.n	800413a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	2220      	movs	r2, #32
 8004120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	2200      	movs	r2, #0
 8004130:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004132:	6978      	ldr	r0, [r7, #20]
 8004134:	f7fe fe24 	bl	8002d80 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004138:	e027      	b.n	800418a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800413a:	7cfb      	ldrb	r3, [r7, #19]
 800413c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004140:	2b28      	cmp	r3, #40	; 0x28
 8004142:	d117      	bne.n	8004174 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f042 0201 	orr.w	r2, r2, #1
 8004152:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004162:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	2200      	movs	r2, #0
 8004168:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	2228      	movs	r2, #40	; 0x28
 800416e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004172:	e007      	b.n	8004184 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	2220      	movs	r2, #32
 8004178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004184:	6978      	ldr	r0, [r7, #20]
 8004186:	f7fe fdf1 	bl	8002d6c <HAL_I2C_ErrorCallback>
}
 800418a:	bf00      	nop
 800418c:	3718      	adds	r7, #24
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	20000000 	.word	0x20000000
 8004198:	14f8b589 	.word	0x14f8b589

0800419c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80041a4:	2300      	movs	r3, #0
 80041a6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80041a8:	4b13      	ldr	r3, [pc, #76]	; (80041f8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	08db      	lsrs	r3, r3, #3
 80041ae:	4a13      	ldr	r2, [pc, #76]	; (80041fc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80041b0:	fba2 2303 	umull	r2, r3, r2, r3
 80041b4:	0a1a      	lsrs	r2, r3, #8
 80041b6:	4613      	mov	r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	4413      	add	r3, r2
 80041bc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	3b01      	subs	r3, #1
 80041c2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d107      	bne.n	80041da <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	f043 0220 	orr.w	r2, r3, #32
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e008      	b.n	80041ec <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041e8:	d0e9      	beq.n	80041be <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3714      	adds	r7, #20
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr
 80041f8:	20000000 	.word	0x20000000
 80041fc:	14f8b589 	.word	0x14f8b589

08004200 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004210:	d103      	bne.n	800421a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2201      	movs	r2, #1
 8004216:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004218:	e007      	b.n	800422a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004222:	d102      	bne.n	800422a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2208      	movs	r2, #8
 8004228:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800422a:	bf00      	nop
 800422c:	370c      	adds	r7, #12
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr

08004236 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004236:	b480      	push	{r7}
 8004238:	b083      	sub	sp, #12
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
 800423e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004246:	b2db      	uxtb	r3, r3
 8004248:	2b20      	cmp	r3, #32
 800424a:	d129      	bne.n	80042a0 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2224      	movs	r2, #36	; 0x24
 8004250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f022 0201 	bic.w	r2, r2, #1
 8004262:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 0210 	bic.w	r2, r2, #16
 8004272:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	683a      	ldr	r2, [r7, #0]
 8004280:	430a      	orrs	r2, r1
 8004282:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f042 0201 	orr.w	r2, r2, #1
 8004292:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2220      	movs	r2, #32
 8004298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800429c:	2300      	movs	r3, #0
 800429e:	e000      	b.n	80042a2 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80042a0:	2302      	movs	r3, #2
  }
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr

080042ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80042ae:	b480      	push	{r7}
 80042b0:	b085      	sub	sp, #20
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
 80042b6:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80042b8:	2300      	movs	r3, #0
 80042ba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	2b20      	cmp	r3, #32
 80042c6:	d12a      	bne.n	800431e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2224      	movs	r2, #36	; 0x24
 80042cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f022 0201 	bic.w	r2, r2, #1
 80042de:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e6:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80042e8:	89fb      	ldrh	r3, [r7, #14]
 80042ea:	f023 030f 	bic.w	r3, r3, #15
 80042ee:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	89fb      	ldrh	r3, [r7, #14]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	89fa      	ldrh	r2, [r7, #14]
 8004300:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f042 0201 	orr.w	r2, r2, #1
 8004310:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2220      	movs	r2, #32
 8004316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800431a:	2300      	movs	r3, #0
 800431c:	e000      	b.n	8004320 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800431e:	2302      	movs	r3, #2
  }
}
 8004320:	4618      	mov	r0, r3
 8004322:	3714      	adds	r7, #20
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004332:	2300      	movs	r3, #0
 8004334:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004336:	2300      	movs	r3, #0
 8004338:	603b      	str	r3, [r7, #0]
 800433a:	4b20      	ldr	r3, [pc, #128]	; (80043bc <HAL_PWREx_EnableOverDrive+0x90>)
 800433c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433e:	4a1f      	ldr	r2, [pc, #124]	; (80043bc <HAL_PWREx_EnableOverDrive+0x90>)
 8004340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004344:	6413      	str	r3, [r2, #64]	; 0x40
 8004346:	4b1d      	ldr	r3, [pc, #116]	; (80043bc <HAL_PWREx_EnableOverDrive+0x90>)
 8004348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800434e:	603b      	str	r3, [r7, #0]
 8004350:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004352:	4b1b      	ldr	r3, [pc, #108]	; (80043c0 <HAL_PWREx_EnableOverDrive+0x94>)
 8004354:	2201      	movs	r2, #1
 8004356:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004358:	f7fd fa46 	bl	80017e8 <HAL_GetTick>
 800435c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800435e:	e009      	b.n	8004374 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004360:	f7fd fa42 	bl	80017e8 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800436e:	d901      	bls.n	8004374 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e01f      	b.n	80043b4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004374:	4b13      	ldr	r3, [pc, #76]	; (80043c4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800437c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004380:	d1ee      	bne.n	8004360 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004382:	4b11      	ldr	r3, [pc, #68]	; (80043c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004384:	2201      	movs	r2, #1
 8004386:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004388:	f7fd fa2e 	bl	80017e8 <HAL_GetTick>
 800438c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800438e:	e009      	b.n	80043a4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004390:	f7fd fa2a 	bl	80017e8 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800439e:	d901      	bls.n	80043a4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e007      	b.n	80043b4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80043a4:	4b07      	ldr	r3, [pc, #28]	; (80043c4 <HAL_PWREx_EnableOverDrive+0x98>)
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043b0:	d1ee      	bne.n	8004390 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3708      	adds	r7, #8
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	40023800 	.word	0x40023800
 80043c0:	420e0040 	.word	0x420e0040
 80043c4:	40007000 	.word	0x40007000
 80043c8:	420e0044 	.word	0x420e0044

080043cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d101      	bne.n	80043de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e267      	b.n	80048ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d075      	beq.n	80044d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043ea:	4b88      	ldr	r3, [pc, #544]	; (800460c <HAL_RCC_OscConfig+0x240>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f003 030c 	and.w	r3, r3, #12
 80043f2:	2b04      	cmp	r3, #4
 80043f4:	d00c      	beq.n	8004410 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043f6:	4b85      	ldr	r3, [pc, #532]	; (800460c <HAL_RCC_OscConfig+0x240>)
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043fe:	2b08      	cmp	r3, #8
 8004400:	d112      	bne.n	8004428 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004402:	4b82      	ldr	r3, [pc, #520]	; (800460c <HAL_RCC_OscConfig+0x240>)
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800440a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800440e:	d10b      	bne.n	8004428 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004410:	4b7e      	ldr	r3, [pc, #504]	; (800460c <HAL_RCC_OscConfig+0x240>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d05b      	beq.n	80044d4 <HAL_RCC_OscConfig+0x108>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d157      	bne.n	80044d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e242      	b.n	80048ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004430:	d106      	bne.n	8004440 <HAL_RCC_OscConfig+0x74>
 8004432:	4b76      	ldr	r3, [pc, #472]	; (800460c <HAL_RCC_OscConfig+0x240>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a75      	ldr	r2, [pc, #468]	; (800460c <HAL_RCC_OscConfig+0x240>)
 8004438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800443c:	6013      	str	r3, [r2, #0]
 800443e:	e01d      	b.n	800447c <HAL_RCC_OscConfig+0xb0>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004448:	d10c      	bne.n	8004464 <HAL_RCC_OscConfig+0x98>
 800444a:	4b70      	ldr	r3, [pc, #448]	; (800460c <HAL_RCC_OscConfig+0x240>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a6f      	ldr	r2, [pc, #444]	; (800460c <HAL_RCC_OscConfig+0x240>)
 8004450:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004454:	6013      	str	r3, [r2, #0]
 8004456:	4b6d      	ldr	r3, [pc, #436]	; (800460c <HAL_RCC_OscConfig+0x240>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a6c      	ldr	r2, [pc, #432]	; (800460c <HAL_RCC_OscConfig+0x240>)
 800445c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004460:	6013      	str	r3, [r2, #0]
 8004462:	e00b      	b.n	800447c <HAL_RCC_OscConfig+0xb0>
 8004464:	4b69      	ldr	r3, [pc, #420]	; (800460c <HAL_RCC_OscConfig+0x240>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a68      	ldr	r2, [pc, #416]	; (800460c <HAL_RCC_OscConfig+0x240>)
 800446a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800446e:	6013      	str	r3, [r2, #0]
 8004470:	4b66      	ldr	r3, [pc, #408]	; (800460c <HAL_RCC_OscConfig+0x240>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a65      	ldr	r2, [pc, #404]	; (800460c <HAL_RCC_OscConfig+0x240>)
 8004476:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800447a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d013      	beq.n	80044ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004484:	f7fd f9b0 	bl	80017e8 <HAL_GetTick>
 8004488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800448a:	e008      	b.n	800449e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800448c:	f7fd f9ac 	bl	80017e8 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b64      	cmp	r3, #100	; 0x64
 8004498:	d901      	bls.n	800449e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e207      	b.n	80048ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800449e:	4b5b      	ldr	r3, [pc, #364]	; (800460c <HAL_RCC_OscConfig+0x240>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d0f0      	beq.n	800448c <HAL_RCC_OscConfig+0xc0>
 80044aa:	e014      	b.n	80044d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ac:	f7fd f99c 	bl	80017e8 <HAL_GetTick>
 80044b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044b2:	e008      	b.n	80044c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044b4:	f7fd f998 	bl	80017e8 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b64      	cmp	r3, #100	; 0x64
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e1f3      	b.n	80048ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044c6:	4b51      	ldr	r3, [pc, #324]	; (800460c <HAL_RCC_OscConfig+0x240>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1f0      	bne.n	80044b4 <HAL_RCC_OscConfig+0xe8>
 80044d2:	e000      	b.n	80044d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d063      	beq.n	80045aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044e2:	4b4a      	ldr	r3, [pc, #296]	; (800460c <HAL_RCC_OscConfig+0x240>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f003 030c 	and.w	r3, r3, #12
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00b      	beq.n	8004506 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044ee:	4b47      	ldr	r3, [pc, #284]	; (800460c <HAL_RCC_OscConfig+0x240>)
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044f6:	2b08      	cmp	r3, #8
 80044f8:	d11c      	bne.n	8004534 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044fa:	4b44      	ldr	r3, [pc, #272]	; (800460c <HAL_RCC_OscConfig+0x240>)
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d116      	bne.n	8004534 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004506:	4b41      	ldr	r3, [pc, #260]	; (800460c <HAL_RCC_OscConfig+0x240>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0302 	and.w	r3, r3, #2
 800450e:	2b00      	cmp	r3, #0
 8004510:	d005      	beq.n	800451e <HAL_RCC_OscConfig+0x152>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d001      	beq.n	800451e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e1c7      	b.n	80048ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800451e:	4b3b      	ldr	r3, [pc, #236]	; (800460c <HAL_RCC_OscConfig+0x240>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	00db      	lsls	r3, r3, #3
 800452c:	4937      	ldr	r1, [pc, #220]	; (800460c <HAL_RCC_OscConfig+0x240>)
 800452e:	4313      	orrs	r3, r2
 8004530:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004532:	e03a      	b.n	80045aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d020      	beq.n	800457e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800453c:	4b34      	ldr	r3, [pc, #208]	; (8004610 <HAL_RCC_OscConfig+0x244>)
 800453e:	2201      	movs	r2, #1
 8004540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004542:	f7fd f951 	bl	80017e8 <HAL_GetTick>
 8004546:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004548:	e008      	b.n	800455c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800454a:	f7fd f94d 	bl	80017e8 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	2b02      	cmp	r3, #2
 8004556:	d901      	bls.n	800455c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e1a8      	b.n	80048ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800455c:	4b2b      	ldr	r3, [pc, #172]	; (800460c <HAL_RCC_OscConfig+0x240>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	2b00      	cmp	r3, #0
 8004566:	d0f0      	beq.n	800454a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004568:	4b28      	ldr	r3, [pc, #160]	; (800460c <HAL_RCC_OscConfig+0x240>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	00db      	lsls	r3, r3, #3
 8004576:	4925      	ldr	r1, [pc, #148]	; (800460c <HAL_RCC_OscConfig+0x240>)
 8004578:	4313      	orrs	r3, r2
 800457a:	600b      	str	r3, [r1, #0]
 800457c:	e015      	b.n	80045aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800457e:	4b24      	ldr	r3, [pc, #144]	; (8004610 <HAL_RCC_OscConfig+0x244>)
 8004580:	2200      	movs	r2, #0
 8004582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004584:	f7fd f930 	bl	80017e8 <HAL_GetTick>
 8004588:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800458a:	e008      	b.n	800459e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800458c:	f7fd f92c 	bl	80017e8 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	2b02      	cmp	r3, #2
 8004598:	d901      	bls.n	800459e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e187      	b.n	80048ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800459e:	4b1b      	ldr	r3, [pc, #108]	; (800460c <HAL_RCC_OscConfig+0x240>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0302 	and.w	r3, r3, #2
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1f0      	bne.n	800458c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0308 	and.w	r3, r3, #8
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d036      	beq.n	8004624 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d016      	beq.n	80045ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045be:	4b15      	ldr	r3, [pc, #84]	; (8004614 <HAL_RCC_OscConfig+0x248>)
 80045c0:	2201      	movs	r2, #1
 80045c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045c4:	f7fd f910 	bl	80017e8 <HAL_GetTick>
 80045c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045cc:	f7fd f90c 	bl	80017e8 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e167      	b.n	80048ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045de:	4b0b      	ldr	r3, [pc, #44]	; (800460c <HAL_RCC_OscConfig+0x240>)
 80045e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d0f0      	beq.n	80045cc <HAL_RCC_OscConfig+0x200>
 80045ea:	e01b      	b.n	8004624 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045ec:	4b09      	ldr	r3, [pc, #36]	; (8004614 <HAL_RCC_OscConfig+0x248>)
 80045ee:	2200      	movs	r2, #0
 80045f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045f2:	f7fd f8f9 	bl	80017e8 <HAL_GetTick>
 80045f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045f8:	e00e      	b.n	8004618 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045fa:	f7fd f8f5 	bl	80017e8 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	2b02      	cmp	r3, #2
 8004606:	d907      	bls.n	8004618 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e150      	b.n	80048ae <HAL_RCC_OscConfig+0x4e2>
 800460c:	40023800 	.word	0x40023800
 8004610:	42470000 	.word	0x42470000
 8004614:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004618:	4b88      	ldr	r3, [pc, #544]	; (800483c <HAL_RCC_OscConfig+0x470>)
 800461a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800461c:	f003 0302 	and.w	r3, r3, #2
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1ea      	bne.n	80045fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0304 	and.w	r3, r3, #4
 800462c:	2b00      	cmp	r3, #0
 800462e:	f000 8097 	beq.w	8004760 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004632:	2300      	movs	r3, #0
 8004634:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004636:	4b81      	ldr	r3, [pc, #516]	; (800483c <HAL_RCC_OscConfig+0x470>)
 8004638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d10f      	bne.n	8004662 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004642:	2300      	movs	r3, #0
 8004644:	60bb      	str	r3, [r7, #8]
 8004646:	4b7d      	ldr	r3, [pc, #500]	; (800483c <HAL_RCC_OscConfig+0x470>)
 8004648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464a:	4a7c      	ldr	r2, [pc, #496]	; (800483c <HAL_RCC_OscConfig+0x470>)
 800464c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004650:	6413      	str	r3, [r2, #64]	; 0x40
 8004652:	4b7a      	ldr	r3, [pc, #488]	; (800483c <HAL_RCC_OscConfig+0x470>)
 8004654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800465a:	60bb      	str	r3, [r7, #8]
 800465c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800465e:	2301      	movs	r3, #1
 8004660:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004662:	4b77      	ldr	r3, [pc, #476]	; (8004840 <HAL_RCC_OscConfig+0x474>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800466a:	2b00      	cmp	r3, #0
 800466c:	d118      	bne.n	80046a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800466e:	4b74      	ldr	r3, [pc, #464]	; (8004840 <HAL_RCC_OscConfig+0x474>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a73      	ldr	r2, [pc, #460]	; (8004840 <HAL_RCC_OscConfig+0x474>)
 8004674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004678:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800467a:	f7fd f8b5 	bl	80017e8 <HAL_GetTick>
 800467e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004680:	e008      	b.n	8004694 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004682:	f7fd f8b1 	bl	80017e8 <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	2b02      	cmp	r3, #2
 800468e:	d901      	bls.n	8004694 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e10c      	b.n	80048ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004694:	4b6a      	ldr	r3, [pc, #424]	; (8004840 <HAL_RCC_OscConfig+0x474>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800469c:	2b00      	cmp	r3, #0
 800469e:	d0f0      	beq.n	8004682 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d106      	bne.n	80046b6 <HAL_RCC_OscConfig+0x2ea>
 80046a8:	4b64      	ldr	r3, [pc, #400]	; (800483c <HAL_RCC_OscConfig+0x470>)
 80046aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ac:	4a63      	ldr	r2, [pc, #396]	; (800483c <HAL_RCC_OscConfig+0x470>)
 80046ae:	f043 0301 	orr.w	r3, r3, #1
 80046b2:	6713      	str	r3, [r2, #112]	; 0x70
 80046b4:	e01c      	b.n	80046f0 <HAL_RCC_OscConfig+0x324>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	2b05      	cmp	r3, #5
 80046bc:	d10c      	bne.n	80046d8 <HAL_RCC_OscConfig+0x30c>
 80046be:	4b5f      	ldr	r3, [pc, #380]	; (800483c <HAL_RCC_OscConfig+0x470>)
 80046c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c2:	4a5e      	ldr	r2, [pc, #376]	; (800483c <HAL_RCC_OscConfig+0x470>)
 80046c4:	f043 0304 	orr.w	r3, r3, #4
 80046c8:	6713      	str	r3, [r2, #112]	; 0x70
 80046ca:	4b5c      	ldr	r3, [pc, #368]	; (800483c <HAL_RCC_OscConfig+0x470>)
 80046cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ce:	4a5b      	ldr	r2, [pc, #364]	; (800483c <HAL_RCC_OscConfig+0x470>)
 80046d0:	f043 0301 	orr.w	r3, r3, #1
 80046d4:	6713      	str	r3, [r2, #112]	; 0x70
 80046d6:	e00b      	b.n	80046f0 <HAL_RCC_OscConfig+0x324>
 80046d8:	4b58      	ldr	r3, [pc, #352]	; (800483c <HAL_RCC_OscConfig+0x470>)
 80046da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046dc:	4a57      	ldr	r2, [pc, #348]	; (800483c <HAL_RCC_OscConfig+0x470>)
 80046de:	f023 0301 	bic.w	r3, r3, #1
 80046e2:	6713      	str	r3, [r2, #112]	; 0x70
 80046e4:	4b55      	ldr	r3, [pc, #340]	; (800483c <HAL_RCC_OscConfig+0x470>)
 80046e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e8:	4a54      	ldr	r2, [pc, #336]	; (800483c <HAL_RCC_OscConfig+0x470>)
 80046ea:	f023 0304 	bic.w	r3, r3, #4
 80046ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d015      	beq.n	8004724 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046f8:	f7fd f876 	bl	80017e8 <HAL_GetTick>
 80046fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046fe:	e00a      	b.n	8004716 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004700:	f7fd f872 	bl	80017e8 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	f241 3288 	movw	r2, #5000	; 0x1388
 800470e:	4293      	cmp	r3, r2
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e0cb      	b.n	80048ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004716:	4b49      	ldr	r3, [pc, #292]	; (800483c <HAL_RCC_OscConfig+0x470>)
 8004718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b00      	cmp	r3, #0
 8004720:	d0ee      	beq.n	8004700 <HAL_RCC_OscConfig+0x334>
 8004722:	e014      	b.n	800474e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004724:	f7fd f860 	bl	80017e8 <HAL_GetTick>
 8004728:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800472a:	e00a      	b.n	8004742 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800472c:	f7fd f85c 	bl	80017e8 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	f241 3288 	movw	r2, #5000	; 0x1388
 800473a:	4293      	cmp	r3, r2
 800473c:	d901      	bls.n	8004742 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e0b5      	b.n	80048ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004742:	4b3e      	ldr	r3, [pc, #248]	; (800483c <HAL_RCC_OscConfig+0x470>)
 8004744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1ee      	bne.n	800472c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800474e:	7dfb      	ldrb	r3, [r7, #23]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d105      	bne.n	8004760 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004754:	4b39      	ldr	r3, [pc, #228]	; (800483c <HAL_RCC_OscConfig+0x470>)
 8004756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004758:	4a38      	ldr	r2, [pc, #224]	; (800483c <HAL_RCC_OscConfig+0x470>)
 800475a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800475e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	2b00      	cmp	r3, #0
 8004766:	f000 80a1 	beq.w	80048ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800476a:	4b34      	ldr	r3, [pc, #208]	; (800483c <HAL_RCC_OscConfig+0x470>)
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f003 030c 	and.w	r3, r3, #12
 8004772:	2b08      	cmp	r3, #8
 8004774:	d05c      	beq.n	8004830 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	2b02      	cmp	r3, #2
 800477c:	d141      	bne.n	8004802 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800477e:	4b31      	ldr	r3, [pc, #196]	; (8004844 <HAL_RCC_OscConfig+0x478>)
 8004780:	2200      	movs	r2, #0
 8004782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004784:	f7fd f830 	bl	80017e8 <HAL_GetTick>
 8004788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800478a:	e008      	b.n	800479e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800478c:	f7fd f82c 	bl	80017e8 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b02      	cmp	r3, #2
 8004798:	d901      	bls.n	800479e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e087      	b.n	80048ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800479e:	4b27      	ldr	r3, [pc, #156]	; (800483c <HAL_RCC_OscConfig+0x470>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1f0      	bne.n	800478c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	69da      	ldr	r2, [r3, #28]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	431a      	orrs	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b8:	019b      	lsls	r3, r3, #6
 80047ba:	431a      	orrs	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c0:	085b      	lsrs	r3, r3, #1
 80047c2:	3b01      	subs	r3, #1
 80047c4:	041b      	lsls	r3, r3, #16
 80047c6:	431a      	orrs	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047cc:	061b      	lsls	r3, r3, #24
 80047ce:	491b      	ldr	r1, [pc, #108]	; (800483c <HAL_RCC_OscConfig+0x470>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047d4:	4b1b      	ldr	r3, [pc, #108]	; (8004844 <HAL_RCC_OscConfig+0x478>)
 80047d6:	2201      	movs	r2, #1
 80047d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047da:	f7fd f805 	bl	80017e8 <HAL_GetTick>
 80047de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047e0:	e008      	b.n	80047f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047e2:	f7fd f801 	bl	80017e8 <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d901      	bls.n	80047f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e05c      	b.n	80048ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047f4:	4b11      	ldr	r3, [pc, #68]	; (800483c <HAL_RCC_OscConfig+0x470>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d0f0      	beq.n	80047e2 <HAL_RCC_OscConfig+0x416>
 8004800:	e054      	b.n	80048ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004802:	4b10      	ldr	r3, [pc, #64]	; (8004844 <HAL_RCC_OscConfig+0x478>)
 8004804:	2200      	movs	r2, #0
 8004806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004808:	f7fc ffee 	bl	80017e8 <HAL_GetTick>
 800480c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800480e:	e008      	b.n	8004822 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004810:	f7fc ffea 	bl	80017e8 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	2b02      	cmp	r3, #2
 800481c:	d901      	bls.n	8004822 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e045      	b.n	80048ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004822:	4b06      	ldr	r3, [pc, #24]	; (800483c <HAL_RCC_OscConfig+0x470>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1f0      	bne.n	8004810 <HAL_RCC_OscConfig+0x444>
 800482e:	e03d      	b.n	80048ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d107      	bne.n	8004848 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e038      	b.n	80048ae <HAL_RCC_OscConfig+0x4e2>
 800483c:	40023800 	.word	0x40023800
 8004840:	40007000 	.word	0x40007000
 8004844:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004848:	4b1b      	ldr	r3, [pc, #108]	; (80048b8 <HAL_RCC_OscConfig+0x4ec>)
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	2b01      	cmp	r3, #1
 8004854:	d028      	beq.n	80048a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004860:	429a      	cmp	r2, r3
 8004862:	d121      	bne.n	80048a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800486e:	429a      	cmp	r2, r3
 8004870:	d11a      	bne.n	80048a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004878:	4013      	ands	r3, r2
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800487e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004880:	4293      	cmp	r3, r2
 8004882:	d111      	bne.n	80048a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488e:	085b      	lsrs	r3, r3, #1
 8004890:	3b01      	subs	r3, #1
 8004892:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004894:	429a      	cmp	r2, r3
 8004896:	d107      	bne.n	80048a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d001      	beq.n	80048ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e000      	b.n	80048ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3718      	adds	r7, #24
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	40023800 	.word	0x40023800

080048bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d101      	bne.n	80048d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e0cc      	b.n	8004a6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048d0:	4b68      	ldr	r3, [pc, #416]	; (8004a74 <HAL_RCC_ClockConfig+0x1b8>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 030f 	and.w	r3, r3, #15
 80048d8:	683a      	ldr	r2, [r7, #0]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d90c      	bls.n	80048f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048de:	4b65      	ldr	r3, [pc, #404]	; (8004a74 <HAL_RCC_ClockConfig+0x1b8>)
 80048e0:	683a      	ldr	r2, [r7, #0]
 80048e2:	b2d2      	uxtb	r2, r2
 80048e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048e6:	4b63      	ldr	r3, [pc, #396]	; (8004a74 <HAL_RCC_ClockConfig+0x1b8>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 030f 	and.w	r3, r3, #15
 80048ee:	683a      	ldr	r2, [r7, #0]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d001      	beq.n	80048f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e0b8      	b.n	8004a6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0302 	and.w	r3, r3, #2
 8004900:	2b00      	cmp	r3, #0
 8004902:	d020      	beq.n	8004946 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0304 	and.w	r3, r3, #4
 800490c:	2b00      	cmp	r3, #0
 800490e:	d005      	beq.n	800491c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004910:	4b59      	ldr	r3, [pc, #356]	; (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	4a58      	ldr	r2, [pc, #352]	; (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 8004916:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800491a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0308 	and.w	r3, r3, #8
 8004924:	2b00      	cmp	r3, #0
 8004926:	d005      	beq.n	8004934 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004928:	4b53      	ldr	r3, [pc, #332]	; (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	4a52      	ldr	r2, [pc, #328]	; (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 800492e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004932:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004934:	4b50      	ldr	r3, [pc, #320]	; (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	494d      	ldr	r1, [pc, #308]	; (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 8004942:	4313      	orrs	r3, r2
 8004944:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	2b00      	cmp	r3, #0
 8004950:	d044      	beq.n	80049dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d107      	bne.n	800496a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800495a:	4b47      	ldr	r3, [pc, #284]	; (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d119      	bne.n	800499a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e07f      	b.n	8004a6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	2b02      	cmp	r3, #2
 8004970:	d003      	beq.n	800497a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004976:	2b03      	cmp	r3, #3
 8004978:	d107      	bne.n	800498a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800497a:	4b3f      	ldr	r3, [pc, #252]	; (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d109      	bne.n	800499a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e06f      	b.n	8004a6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800498a:	4b3b      	ldr	r3, [pc, #236]	; (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e067      	b.n	8004a6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800499a:	4b37      	ldr	r3, [pc, #220]	; (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f023 0203 	bic.w	r2, r3, #3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	4934      	ldr	r1, [pc, #208]	; (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049ac:	f7fc ff1c 	bl	80017e8 <HAL_GetTick>
 80049b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049b2:	e00a      	b.n	80049ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049b4:	f7fc ff18 	bl	80017e8 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	f241 3288 	movw	r2, #5000	; 0x1388
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d901      	bls.n	80049ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e04f      	b.n	8004a6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ca:	4b2b      	ldr	r3, [pc, #172]	; (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f003 020c 	and.w	r2, r3, #12
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	429a      	cmp	r2, r3
 80049da:	d1eb      	bne.n	80049b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049dc:	4b25      	ldr	r3, [pc, #148]	; (8004a74 <HAL_RCC_ClockConfig+0x1b8>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 030f 	and.w	r3, r3, #15
 80049e4:	683a      	ldr	r2, [r7, #0]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d20c      	bcs.n	8004a04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ea:	4b22      	ldr	r3, [pc, #136]	; (8004a74 <HAL_RCC_ClockConfig+0x1b8>)
 80049ec:	683a      	ldr	r2, [r7, #0]
 80049ee:	b2d2      	uxtb	r2, r2
 80049f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049f2:	4b20      	ldr	r3, [pc, #128]	; (8004a74 <HAL_RCC_ClockConfig+0x1b8>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 030f 	and.w	r3, r3, #15
 80049fa:	683a      	ldr	r2, [r7, #0]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d001      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e032      	b.n	8004a6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0304 	and.w	r3, r3, #4
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d008      	beq.n	8004a22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a10:	4b19      	ldr	r3, [pc, #100]	; (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	4916      	ldr	r1, [pc, #88]	; (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0308 	and.w	r3, r3, #8
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d009      	beq.n	8004a42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a2e:	4b12      	ldr	r3, [pc, #72]	; (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	00db      	lsls	r3, r3, #3
 8004a3c:	490e      	ldr	r1, [pc, #56]	; (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a42:	f000 f821 	bl	8004a88 <HAL_RCC_GetSysClockFreq>
 8004a46:	4602      	mov	r2, r0
 8004a48:	4b0b      	ldr	r3, [pc, #44]	; (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	091b      	lsrs	r3, r3, #4
 8004a4e:	f003 030f 	and.w	r3, r3, #15
 8004a52:	490a      	ldr	r1, [pc, #40]	; (8004a7c <HAL_RCC_ClockConfig+0x1c0>)
 8004a54:	5ccb      	ldrb	r3, [r1, r3]
 8004a56:	fa22 f303 	lsr.w	r3, r2, r3
 8004a5a:	4a09      	ldr	r2, [pc, #36]	; (8004a80 <HAL_RCC_ClockConfig+0x1c4>)
 8004a5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a5e:	4b09      	ldr	r3, [pc, #36]	; (8004a84 <HAL_RCC_ClockConfig+0x1c8>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7fc fc7a 	bl	800135c <HAL_InitTick>

  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	40023c00 	.word	0x40023c00
 8004a78:	40023800 	.word	0x40023800
 8004a7c:	0800aaf4 	.word	0x0800aaf4
 8004a80:	20000000 	.word	0x20000000
 8004a84:	20000004 	.word	0x20000004

08004a88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a8c:	b094      	sub	sp, #80	; 0x50
 8004a8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a90:	2300      	movs	r3, #0
 8004a92:	647b      	str	r3, [r7, #68]	; 0x44
 8004a94:	2300      	movs	r3, #0
 8004a96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a98:	2300      	movs	r3, #0
 8004a9a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004aa0:	4b79      	ldr	r3, [pc, #484]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x200>)
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f003 030c 	and.w	r3, r3, #12
 8004aa8:	2b08      	cmp	r3, #8
 8004aaa:	d00d      	beq.n	8004ac8 <HAL_RCC_GetSysClockFreq+0x40>
 8004aac:	2b08      	cmp	r3, #8
 8004aae:	f200 80e1 	bhi.w	8004c74 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d002      	beq.n	8004abc <HAL_RCC_GetSysClockFreq+0x34>
 8004ab6:	2b04      	cmp	r3, #4
 8004ab8:	d003      	beq.n	8004ac2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004aba:	e0db      	b.n	8004c74 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004abc:	4b73      	ldr	r3, [pc, #460]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x204>)
 8004abe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004ac0:	e0db      	b.n	8004c7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ac2:	4b73      	ldr	r3, [pc, #460]	; (8004c90 <HAL_RCC_GetSysClockFreq+0x208>)
 8004ac4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ac6:	e0d8      	b.n	8004c7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ac8:	4b6f      	ldr	r3, [pc, #444]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x200>)
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ad0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ad2:	4b6d      	ldr	r3, [pc, #436]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d063      	beq.n	8004ba6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ade:	4b6a      	ldr	r3, [pc, #424]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	099b      	lsrs	r3, r3, #6
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ae8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004af0:	633b      	str	r3, [r7, #48]	; 0x30
 8004af2:	2300      	movs	r3, #0
 8004af4:	637b      	str	r3, [r7, #52]	; 0x34
 8004af6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004afa:	4622      	mov	r2, r4
 8004afc:	462b      	mov	r3, r5
 8004afe:	f04f 0000 	mov.w	r0, #0
 8004b02:	f04f 0100 	mov.w	r1, #0
 8004b06:	0159      	lsls	r1, r3, #5
 8004b08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b0c:	0150      	lsls	r0, r2, #5
 8004b0e:	4602      	mov	r2, r0
 8004b10:	460b      	mov	r3, r1
 8004b12:	4621      	mov	r1, r4
 8004b14:	1a51      	subs	r1, r2, r1
 8004b16:	6139      	str	r1, [r7, #16]
 8004b18:	4629      	mov	r1, r5
 8004b1a:	eb63 0301 	sbc.w	r3, r3, r1
 8004b1e:	617b      	str	r3, [r7, #20]
 8004b20:	f04f 0200 	mov.w	r2, #0
 8004b24:	f04f 0300 	mov.w	r3, #0
 8004b28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b2c:	4659      	mov	r1, fp
 8004b2e:	018b      	lsls	r3, r1, #6
 8004b30:	4651      	mov	r1, sl
 8004b32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b36:	4651      	mov	r1, sl
 8004b38:	018a      	lsls	r2, r1, #6
 8004b3a:	4651      	mov	r1, sl
 8004b3c:	ebb2 0801 	subs.w	r8, r2, r1
 8004b40:	4659      	mov	r1, fp
 8004b42:	eb63 0901 	sbc.w	r9, r3, r1
 8004b46:	f04f 0200 	mov.w	r2, #0
 8004b4a:	f04f 0300 	mov.w	r3, #0
 8004b4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b5a:	4690      	mov	r8, r2
 8004b5c:	4699      	mov	r9, r3
 8004b5e:	4623      	mov	r3, r4
 8004b60:	eb18 0303 	adds.w	r3, r8, r3
 8004b64:	60bb      	str	r3, [r7, #8]
 8004b66:	462b      	mov	r3, r5
 8004b68:	eb49 0303 	adc.w	r3, r9, r3
 8004b6c:	60fb      	str	r3, [r7, #12]
 8004b6e:	f04f 0200 	mov.w	r2, #0
 8004b72:	f04f 0300 	mov.w	r3, #0
 8004b76:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b7a:	4629      	mov	r1, r5
 8004b7c:	024b      	lsls	r3, r1, #9
 8004b7e:	4621      	mov	r1, r4
 8004b80:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b84:	4621      	mov	r1, r4
 8004b86:	024a      	lsls	r2, r1, #9
 8004b88:	4610      	mov	r0, r2
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b8e:	2200      	movs	r2, #0
 8004b90:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b98:	f7fb fb7a 	bl	8000290 <__aeabi_uldivmod>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	460b      	mov	r3, r1
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ba4:	e058      	b.n	8004c58 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ba6:	4b38      	ldr	r3, [pc, #224]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	099b      	lsrs	r3, r3, #6
 8004bac:	2200      	movs	r2, #0
 8004bae:	4618      	mov	r0, r3
 8004bb0:	4611      	mov	r1, r2
 8004bb2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004bb6:	623b      	str	r3, [r7, #32]
 8004bb8:	2300      	movs	r3, #0
 8004bba:	627b      	str	r3, [r7, #36]	; 0x24
 8004bbc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004bc0:	4642      	mov	r2, r8
 8004bc2:	464b      	mov	r3, r9
 8004bc4:	f04f 0000 	mov.w	r0, #0
 8004bc8:	f04f 0100 	mov.w	r1, #0
 8004bcc:	0159      	lsls	r1, r3, #5
 8004bce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bd2:	0150      	lsls	r0, r2, #5
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	4641      	mov	r1, r8
 8004bda:	ebb2 0a01 	subs.w	sl, r2, r1
 8004bde:	4649      	mov	r1, r9
 8004be0:	eb63 0b01 	sbc.w	fp, r3, r1
 8004be4:	f04f 0200 	mov.w	r2, #0
 8004be8:	f04f 0300 	mov.w	r3, #0
 8004bec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004bf0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004bf4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004bf8:	ebb2 040a 	subs.w	r4, r2, sl
 8004bfc:	eb63 050b 	sbc.w	r5, r3, fp
 8004c00:	f04f 0200 	mov.w	r2, #0
 8004c04:	f04f 0300 	mov.w	r3, #0
 8004c08:	00eb      	lsls	r3, r5, #3
 8004c0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c0e:	00e2      	lsls	r2, r4, #3
 8004c10:	4614      	mov	r4, r2
 8004c12:	461d      	mov	r5, r3
 8004c14:	4643      	mov	r3, r8
 8004c16:	18e3      	adds	r3, r4, r3
 8004c18:	603b      	str	r3, [r7, #0]
 8004c1a:	464b      	mov	r3, r9
 8004c1c:	eb45 0303 	adc.w	r3, r5, r3
 8004c20:	607b      	str	r3, [r7, #4]
 8004c22:	f04f 0200 	mov.w	r2, #0
 8004c26:	f04f 0300 	mov.w	r3, #0
 8004c2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c2e:	4629      	mov	r1, r5
 8004c30:	028b      	lsls	r3, r1, #10
 8004c32:	4621      	mov	r1, r4
 8004c34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c38:	4621      	mov	r1, r4
 8004c3a:	028a      	lsls	r2, r1, #10
 8004c3c:	4610      	mov	r0, r2
 8004c3e:	4619      	mov	r1, r3
 8004c40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c42:	2200      	movs	r2, #0
 8004c44:	61bb      	str	r3, [r7, #24]
 8004c46:	61fa      	str	r2, [r7, #28]
 8004c48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c4c:	f7fb fb20 	bl	8000290 <__aeabi_uldivmod>
 8004c50:	4602      	mov	r2, r0
 8004c52:	460b      	mov	r3, r1
 8004c54:	4613      	mov	r3, r2
 8004c56:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c58:	4b0b      	ldr	r3, [pc, #44]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	0c1b      	lsrs	r3, r3, #16
 8004c5e:	f003 0303 	and.w	r3, r3, #3
 8004c62:	3301      	adds	r3, #1
 8004c64:	005b      	lsls	r3, r3, #1
 8004c66:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004c68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c70:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c72:	e002      	b.n	8004c7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c74:	4b05      	ldr	r3, [pc, #20]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x204>)
 8004c76:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3750      	adds	r7, #80	; 0x50
 8004c80:	46bd      	mov	sp, r7
 8004c82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c86:	bf00      	nop
 8004c88:	40023800 	.word	0x40023800
 8004c8c:	00f42400 	.word	0x00f42400
 8004c90:	007a1200 	.word	0x007a1200

08004c94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c94:	b480      	push	{r7}
 8004c96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c98:	4b03      	ldr	r3, [pc, #12]	; (8004ca8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop
 8004ca8:	20000000 	.word	0x20000000

08004cac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004cb0:	f7ff fff0 	bl	8004c94 <HAL_RCC_GetHCLKFreq>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	4b05      	ldr	r3, [pc, #20]	; (8004ccc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	0a9b      	lsrs	r3, r3, #10
 8004cbc:	f003 0307 	and.w	r3, r3, #7
 8004cc0:	4903      	ldr	r1, [pc, #12]	; (8004cd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cc2:	5ccb      	ldrb	r3, [r1, r3]
 8004cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	40023800 	.word	0x40023800
 8004cd0:	0800ab04 	.word	0x0800ab04

08004cd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004cd8:	f7ff ffdc 	bl	8004c94 <HAL_RCC_GetHCLKFreq>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	4b05      	ldr	r3, [pc, #20]	; (8004cf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	0b5b      	lsrs	r3, r3, #13
 8004ce4:	f003 0307 	and.w	r3, r3, #7
 8004ce8:	4903      	ldr	r1, [pc, #12]	; (8004cf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cea:	5ccb      	ldrb	r3, [r1, r3]
 8004cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	40023800 	.word	0x40023800
 8004cf8:	0800ab04 	.word	0x0800ab04

08004cfc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	220f      	movs	r2, #15
 8004d0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004d0c:	4b12      	ldr	r3, [pc, #72]	; (8004d58 <HAL_RCC_GetClockConfig+0x5c>)
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	f003 0203 	and.w	r2, r3, #3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004d18:	4b0f      	ldr	r3, [pc, #60]	; (8004d58 <HAL_RCC_GetClockConfig+0x5c>)
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004d24:	4b0c      	ldr	r3, [pc, #48]	; (8004d58 <HAL_RCC_GetClockConfig+0x5c>)
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004d30:	4b09      	ldr	r3, [pc, #36]	; (8004d58 <HAL_RCC_GetClockConfig+0x5c>)
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	08db      	lsrs	r3, r3, #3
 8004d36:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004d3e:	4b07      	ldr	r3, [pc, #28]	; (8004d5c <HAL_RCC_GetClockConfig+0x60>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 020f 	and.w	r2, r3, #15
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	601a      	str	r2, [r3, #0]
}
 8004d4a:	bf00      	nop
 8004d4c:	370c      	adds	r7, #12
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	40023800 	.word	0x40023800
 8004d5c:	40023c00 	.word	0x40023c00

08004d60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d101      	bne.n	8004d72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e07b      	b.n	8004e6a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d108      	bne.n	8004d8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d82:	d009      	beq.n	8004d98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	61da      	str	r2, [r3, #28]
 8004d8a:	e005      	b.n	8004d98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d106      	bne.n	8004db8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f7fc f946 	bl	8001044 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2202      	movs	r2, #2
 8004dbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004de0:	431a      	orrs	r2, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dea:	431a      	orrs	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	f003 0302 	and.w	r3, r3, #2
 8004df4:	431a      	orrs	r2, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	431a      	orrs	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e08:	431a      	orrs	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	69db      	ldr	r3, [r3, #28]
 8004e0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e12:	431a      	orrs	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a1b      	ldr	r3, [r3, #32]
 8004e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e1c:	ea42 0103 	orr.w	r1, r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e24:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	699b      	ldr	r3, [r3, #24]
 8004e34:	0c1b      	lsrs	r3, r3, #16
 8004e36:	f003 0104 	and.w	r1, r3, #4
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3e:	f003 0210 	and.w	r2, r3, #16
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	430a      	orrs	r2, r1
 8004e48:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	69da      	ldr	r2, [r3, #28]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e58:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3708      	adds	r7, #8
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
	...

08004e74 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b088      	sub	sp, #32
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	099b      	lsrs	r3, r3, #6
 8004e90:	f003 0301 	and.w	r3, r3, #1
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d10f      	bne.n	8004eb8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00a      	beq.n	8004eb8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	099b      	lsrs	r3, r3, #6
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d004      	beq.n	8004eb8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	4798      	blx	r3
    return;
 8004eb6:	e0d7      	b.n	8005068 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	085b      	lsrs	r3, r3, #1
 8004ebc:	f003 0301 	and.w	r3, r3, #1
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d00a      	beq.n	8004eda <HAL_SPI_IRQHandler+0x66>
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	09db      	lsrs	r3, r3, #7
 8004ec8:	f003 0301 	and.w	r3, r3, #1
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d004      	beq.n	8004eda <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	4798      	blx	r3
    return;
 8004ed8:	e0c6      	b.n	8005068 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	095b      	lsrs	r3, r3, #5
 8004ede:	f003 0301 	and.w	r3, r3, #1
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d10c      	bne.n	8004f00 <HAL_SPI_IRQHandler+0x8c>
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	099b      	lsrs	r3, r3, #6
 8004eea:	f003 0301 	and.w	r3, r3, #1
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d106      	bne.n	8004f00 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	0a1b      	lsrs	r3, r3, #8
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	f000 80b4 	beq.w	8005068 <HAL_SPI_IRQHandler+0x1f4>
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	095b      	lsrs	r3, r3, #5
 8004f04:	f003 0301 	and.w	r3, r3, #1
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f000 80ad 	beq.w	8005068 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	099b      	lsrs	r3, r3, #6
 8004f12:	f003 0301 	and.w	r3, r3, #1
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d023      	beq.n	8004f62 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	2b03      	cmp	r3, #3
 8004f24:	d011      	beq.n	8004f4a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f2a:	f043 0204 	orr.w	r2, r3, #4
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f32:	2300      	movs	r3, #0
 8004f34:	617b      	str	r3, [r7, #20]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	617b      	str	r3, [r7, #20]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	617b      	str	r3, [r7, #20]
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	e00b      	b.n	8004f62 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	613b      	str	r3, [r7, #16]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	613b      	str	r3, [r7, #16]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	613b      	str	r3, [r7, #16]
 8004f5e:	693b      	ldr	r3, [r7, #16]
        return;
 8004f60:	e082      	b.n	8005068 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	095b      	lsrs	r3, r3, #5
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d014      	beq.n	8004f98 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f72:	f043 0201 	orr.w	r2, r3, #1
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	60fb      	str	r3, [r7, #12]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	60fb      	str	r3, [r7, #12]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f94:	601a      	str	r2, [r3, #0]
 8004f96:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	0a1b      	lsrs	r3, r3, #8
 8004f9c:	f003 0301 	and.w	r3, r3, #1
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d00c      	beq.n	8004fbe <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fa8:	f043 0208 	orr.w	r2, r3, #8
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	60bb      	str	r3, [r7, #8]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	60bb      	str	r3, [r7, #8]
 8004fbc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d04f      	beq.n	8005066 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	685a      	ldr	r2, [r3, #4]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004fd4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	f003 0302 	and.w	r3, r3, #2
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d104      	bne.n	8004ff2 <HAL_SPI_IRQHandler+0x17e>
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	f003 0301 	and.w	r3, r3, #1
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d034      	beq.n	800505c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	685a      	ldr	r2, [r3, #4]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f022 0203 	bic.w	r2, r2, #3
 8005000:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005006:	2b00      	cmp	r3, #0
 8005008:	d011      	beq.n	800502e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800500e:	4a18      	ldr	r2, [pc, #96]	; (8005070 <HAL_SPI_IRQHandler+0x1fc>)
 8005010:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005016:	4618      	mov	r0, r3
 8005018:	f7fc fe66 	bl	8001ce8 <HAL_DMA_Abort_IT>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d005      	beq.n	800502e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005026:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005032:	2b00      	cmp	r3, #0
 8005034:	d016      	beq.n	8005064 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800503a:	4a0d      	ldr	r2, [pc, #52]	; (8005070 <HAL_SPI_IRQHandler+0x1fc>)
 800503c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005042:	4618      	mov	r0, r3
 8005044:	f7fc fe50 	bl	8001ce8 <HAL_DMA_Abort_IT>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00a      	beq.n	8005064 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005052:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800505a:	e003      	b.n	8005064 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 f809 	bl	8005074 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005062:	e000      	b.n	8005066 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005064:	bf00      	nop
    return;
 8005066:	bf00      	nop
  }
}
 8005068:	3720      	adds	r7, #32
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	08005089 	.word	0x08005089

08005074 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800507c:	bf00      	nop
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005094:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80050a2:	68f8      	ldr	r0, [r7, #12]
 80050a4:	f7ff ffe6 	bl	8005074 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80050a8:	bf00      	nop
 80050aa:	3710      	adds	r7, #16
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d101      	bne.n	80050c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e041      	b.n	8005146 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d106      	bne.n	80050dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 f839 	bl	800514e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2202      	movs	r2, #2
 80050e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	3304      	adds	r3, #4
 80050ec:	4619      	mov	r1, r3
 80050ee:	4610      	mov	r0, r2
 80050f0:	f000 f9d8 	bl	80054a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3708      	adds	r7, #8
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800514e:	b480      	push	{r7}
 8005150:	b083      	sub	sp, #12
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005156:	bf00      	nop
 8005158:	370c      	adds	r7, #12
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
	...

08005164 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005172:	b2db      	uxtb	r3, r3
 8005174:	2b01      	cmp	r3, #1
 8005176:	d001      	beq.n	800517c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e04e      	b.n	800521a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2202      	movs	r2, #2
 8005180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68da      	ldr	r2, [r3, #12]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f042 0201 	orr.w	r2, r2, #1
 8005192:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a23      	ldr	r2, [pc, #140]	; (8005228 <HAL_TIM_Base_Start_IT+0xc4>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d022      	beq.n	80051e4 <HAL_TIM_Base_Start_IT+0x80>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051a6:	d01d      	beq.n	80051e4 <HAL_TIM_Base_Start_IT+0x80>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a1f      	ldr	r2, [pc, #124]	; (800522c <HAL_TIM_Base_Start_IT+0xc8>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d018      	beq.n	80051e4 <HAL_TIM_Base_Start_IT+0x80>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a1e      	ldr	r2, [pc, #120]	; (8005230 <HAL_TIM_Base_Start_IT+0xcc>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d013      	beq.n	80051e4 <HAL_TIM_Base_Start_IT+0x80>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a1c      	ldr	r2, [pc, #112]	; (8005234 <HAL_TIM_Base_Start_IT+0xd0>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d00e      	beq.n	80051e4 <HAL_TIM_Base_Start_IT+0x80>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a1b      	ldr	r2, [pc, #108]	; (8005238 <HAL_TIM_Base_Start_IT+0xd4>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d009      	beq.n	80051e4 <HAL_TIM_Base_Start_IT+0x80>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a19      	ldr	r2, [pc, #100]	; (800523c <HAL_TIM_Base_Start_IT+0xd8>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d004      	beq.n	80051e4 <HAL_TIM_Base_Start_IT+0x80>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a18      	ldr	r2, [pc, #96]	; (8005240 <HAL_TIM_Base_Start_IT+0xdc>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d111      	bne.n	8005208 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f003 0307 	and.w	r3, r3, #7
 80051ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2b06      	cmp	r3, #6
 80051f4:	d010      	beq.n	8005218 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f042 0201 	orr.w	r2, r2, #1
 8005204:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005206:	e007      	b.n	8005218 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f042 0201 	orr.w	r2, r2, #1
 8005216:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3714      	adds	r7, #20
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	40010000 	.word	0x40010000
 800522c:	40000400 	.word	0x40000400
 8005230:	40000800 	.word	0x40000800
 8005234:	40000c00 	.word	0x40000c00
 8005238:	40010400 	.word	0x40010400
 800523c:	40014000 	.word	0x40014000
 8005240:	40001800 	.word	0x40001800

08005244 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	f003 0302 	and.w	r3, r3, #2
 8005256:	2b02      	cmp	r3, #2
 8005258:	d122      	bne.n	80052a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	f003 0302 	and.w	r3, r3, #2
 8005264:	2b02      	cmp	r3, #2
 8005266:	d11b      	bne.n	80052a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f06f 0202 	mvn.w	r2, #2
 8005270:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2201      	movs	r2, #1
 8005276:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	f003 0303 	and.w	r3, r3, #3
 8005282:	2b00      	cmp	r3, #0
 8005284:	d003      	beq.n	800528e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 f8ee 	bl	8005468 <HAL_TIM_IC_CaptureCallback>
 800528c:	e005      	b.n	800529a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 f8e0 	bl	8005454 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 f8f1 	bl	800547c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	f003 0304 	and.w	r3, r3, #4
 80052aa:	2b04      	cmp	r3, #4
 80052ac:	d122      	bne.n	80052f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	f003 0304 	and.w	r3, r3, #4
 80052b8:	2b04      	cmp	r3, #4
 80052ba:	d11b      	bne.n	80052f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f06f 0204 	mvn.w	r2, #4
 80052c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2202      	movs	r2, #2
 80052ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	699b      	ldr	r3, [r3, #24]
 80052d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d003      	beq.n	80052e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 f8c4 	bl	8005468 <HAL_TIM_IC_CaptureCallback>
 80052e0:	e005      	b.n	80052ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 f8b6 	bl	8005454 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f000 f8c7 	bl	800547c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	f003 0308 	and.w	r3, r3, #8
 80052fe:	2b08      	cmp	r3, #8
 8005300:	d122      	bne.n	8005348 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	f003 0308 	and.w	r3, r3, #8
 800530c:	2b08      	cmp	r3, #8
 800530e:	d11b      	bne.n	8005348 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f06f 0208 	mvn.w	r2, #8
 8005318:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2204      	movs	r2, #4
 800531e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	69db      	ldr	r3, [r3, #28]
 8005326:	f003 0303 	and.w	r3, r3, #3
 800532a:	2b00      	cmp	r3, #0
 800532c:	d003      	beq.n	8005336 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 f89a 	bl	8005468 <HAL_TIM_IC_CaptureCallback>
 8005334:	e005      	b.n	8005342 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 f88c 	bl	8005454 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 f89d 	bl	800547c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	f003 0310 	and.w	r3, r3, #16
 8005352:	2b10      	cmp	r3, #16
 8005354:	d122      	bne.n	800539c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	f003 0310 	and.w	r3, r3, #16
 8005360:	2b10      	cmp	r3, #16
 8005362:	d11b      	bne.n	800539c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f06f 0210 	mvn.w	r2, #16
 800536c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2208      	movs	r2, #8
 8005372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	69db      	ldr	r3, [r3, #28]
 800537a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800537e:	2b00      	cmp	r3, #0
 8005380:	d003      	beq.n	800538a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 f870 	bl	8005468 <HAL_TIM_IC_CaptureCallback>
 8005388:	e005      	b.n	8005396 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 f862 	bl	8005454 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 f873 	bl	800547c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d10e      	bne.n	80053c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	f003 0301 	and.w	r3, r3, #1
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d107      	bne.n	80053c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f06f 0201 	mvn.w	r2, #1
 80053c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f7fb fd1a 	bl	8000dfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053d2:	2b80      	cmp	r3, #128	; 0x80
 80053d4:	d10e      	bne.n	80053f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053e0:	2b80      	cmp	r3, #128	; 0x80
 80053e2:	d107      	bne.n	80053f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80053ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 f902 	bl	80055f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053fe:	2b40      	cmp	r3, #64	; 0x40
 8005400:	d10e      	bne.n	8005420 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800540c:	2b40      	cmp	r3, #64	; 0x40
 800540e:	d107      	bne.n	8005420 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 f838 	bl	8005490 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	f003 0320 	and.w	r3, r3, #32
 800542a:	2b20      	cmp	r3, #32
 800542c:	d10e      	bne.n	800544c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	f003 0320 	and.w	r3, r3, #32
 8005438:	2b20      	cmp	r3, #32
 800543a:	d107      	bne.n	800544c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f06f 0220 	mvn.w	r2, #32
 8005444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 f8cc 	bl	80055e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800544c:	bf00      	nop
 800544e:	3708      	adds	r7, #8
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800545c:	bf00      	nop
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005470:	bf00      	nop
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005484:	bf00      	nop
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005498:	bf00      	nop
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a40      	ldr	r2, [pc, #256]	; (80055b8 <TIM_Base_SetConfig+0x114>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d013      	beq.n	80054e4 <TIM_Base_SetConfig+0x40>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054c2:	d00f      	beq.n	80054e4 <TIM_Base_SetConfig+0x40>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a3d      	ldr	r2, [pc, #244]	; (80055bc <TIM_Base_SetConfig+0x118>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d00b      	beq.n	80054e4 <TIM_Base_SetConfig+0x40>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a3c      	ldr	r2, [pc, #240]	; (80055c0 <TIM_Base_SetConfig+0x11c>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d007      	beq.n	80054e4 <TIM_Base_SetConfig+0x40>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a3b      	ldr	r2, [pc, #236]	; (80055c4 <TIM_Base_SetConfig+0x120>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d003      	beq.n	80054e4 <TIM_Base_SetConfig+0x40>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a3a      	ldr	r2, [pc, #232]	; (80055c8 <TIM_Base_SetConfig+0x124>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d108      	bne.n	80054f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a2f      	ldr	r2, [pc, #188]	; (80055b8 <TIM_Base_SetConfig+0x114>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d02b      	beq.n	8005556 <TIM_Base_SetConfig+0xb2>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005504:	d027      	beq.n	8005556 <TIM_Base_SetConfig+0xb2>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a2c      	ldr	r2, [pc, #176]	; (80055bc <TIM_Base_SetConfig+0x118>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d023      	beq.n	8005556 <TIM_Base_SetConfig+0xb2>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a2b      	ldr	r2, [pc, #172]	; (80055c0 <TIM_Base_SetConfig+0x11c>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d01f      	beq.n	8005556 <TIM_Base_SetConfig+0xb2>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a2a      	ldr	r2, [pc, #168]	; (80055c4 <TIM_Base_SetConfig+0x120>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d01b      	beq.n	8005556 <TIM_Base_SetConfig+0xb2>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a29      	ldr	r2, [pc, #164]	; (80055c8 <TIM_Base_SetConfig+0x124>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d017      	beq.n	8005556 <TIM_Base_SetConfig+0xb2>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a28      	ldr	r2, [pc, #160]	; (80055cc <TIM_Base_SetConfig+0x128>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d013      	beq.n	8005556 <TIM_Base_SetConfig+0xb2>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a27      	ldr	r2, [pc, #156]	; (80055d0 <TIM_Base_SetConfig+0x12c>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d00f      	beq.n	8005556 <TIM_Base_SetConfig+0xb2>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a26      	ldr	r2, [pc, #152]	; (80055d4 <TIM_Base_SetConfig+0x130>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d00b      	beq.n	8005556 <TIM_Base_SetConfig+0xb2>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a25      	ldr	r2, [pc, #148]	; (80055d8 <TIM_Base_SetConfig+0x134>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d007      	beq.n	8005556 <TIM_Base_SetConfig+0xb2>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a24      	ldr	r2, [pc, #144]	; (80055dc <TIM_Base_SetConfig+0x138>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d003      	beq.n	8005556 <TIM_Base_SetConfig+0xb2>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a23      	ldr	r2, [pc, #140]	; (80055e0 <TIM_Base_SetConfig+0x13c>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d108      	bne.n	8005568 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800555c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	4313      	orrs	r3, r2
 8005566:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	4313      	orrs	r3, r2
 8005574:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	689a      	ldr	r2, [r3, #8]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a0a      	ldr	r2, [pc, #40]	; (80055b8 <TIM_Base_SetConfig+0x114>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d003      	beq.n	800559c <TIM_Base_SetConfig+0xf8>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a0c      	ldr	r2, [pc, #48]	; (80055c8 <TIM_Base_SetConfig+0x124>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d103      	bne.n	80055a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	691a      	ldr	r2, [r3, #16]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	615a      	str	r2, [r3, #20]
}
 80055aa:	bf00      	nop
 80055ac:	3714      	adds	r7, #20
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop
 80055b8:	40010000 	.word	0x40010000
 80055bc:	40000400 	.word	0x40000400
 80055c0:	40000800 	.word	0x40000800
 80055c4:	40000c00 	.word	0x40000c00
 80055c8:	40010400 	.word	0x40010400
 80055cc:	40014000 	.word	0x40014000
 80055d0:	40014400 	.word	0x40014400
 80055d4:	40014800 	.word	0x40014800
 80055d8:	40001800 	.word	0x40001800
 80055dc:	40001c00 	.word	0x40001c00
 80055e0:	40002000 	.word	0x40002000

080055e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055ec:	bf00      	nop
 80055ee:	370c      	adds	r7, #12
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d101      	bne.n	800561e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e03f      	b.n	800569e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b00      	cmp	r3, #0
 8005628:	d106      	bne.n	8005638 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f7fb fddc 	bl	80011f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2224      	movs	r2, #36	; 0x24
 800563c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68da      	ldr	r2, [r3, #12]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800564e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 ffed 	bl	8006630 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	691a      	ldr	r2, [r3, #16]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005664:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	695a      	ldr	r2, [r3, #20]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005674:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68da      	ldr	r2, [r3, #12]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005684:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2220      	movs	r2, #32
 8005690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2220      	movs	r2, #32
 8005698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3708      	adds	r7, #8
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b08a      	sub	sp, #40	; 0x28
 80056aa:	af02      	add	r7, sp, #8
 80056ac:	60f8      	str	r0, [r7, #12]
 80056ae:	60b9      	str	r1, [r7, #8]
 80056b0:	603b      	str	r3, [r7, #0]
 80056b2:	4613      	mov	r3, r2
 80056b4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80056b6:	2300      	movs	r3, #0
 80056b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	2b20      	cmp	r3, #32
 80056c4:	d17c      	bne.n	80057c0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d002      	beq.n	80056d2 <HAL_UART_Transmit+0x2c>
 80056cc:	88fb      	ldrh	r3, [r7, #6]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d101      	bne.n	80056d6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e075      	b.n	80057c2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d101      	bne.n	80056e4 <HAL_UART_Transmit+0x3e>
 80056e0:	2302      	movs	r3, #2
 80056e2:	e06e      	b.n	80057c2 <HAL_UART_Transmit+0x11c>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2221      	movs	r2, #33	; 0x21
 80056f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056fa:	f7fc f875 	bl	80017e8 <HAL_GetTick>
 80056fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	88fa      	ldrh	r2, [r7, #6]
 8005704:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	88fa      	ldrh	r2, [r7, #6]
 800570a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005714:	d108      	bne.n	8005728 <HAL_UART_Transmit+0x82>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d104      	bne.n	8005728 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800571e:	2300      	movs	r3, #0
 8005720:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	61bb      	str	r3, [r7, #24]
 8005726:	e003      	b.n	8005730 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800572c:	2300      	movs	r3, #0
 800572e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2200      	movs	r2, #0
 8005734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005738:	e02a      	b.n	8005790 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	9300      	str	r3, [sp, #0]
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	2200      	movs	r2, #0
 8005742:	2180      	movs	r1, #128	; 0x80
 8005744:	68f8      	ldr	r0, [r7, #12]
 8005746:	f000 fca9 	bl	800609c <UART_WaitOnFlagUntilTimeout>
 800574a:	4603      	mov	r3, r0
 800574c:	2b00      	cmp	r3, #0
 800574e:	d001      	beq.n	8005754 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005750:	2303      	movs	r3, #3
 8005752:	e036      	b.n	80057c2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d10b      	bne.n	8005772 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	881b      	ldrh	r3, [r3, #0]
 800575e:	461a      	mov	r2, r3
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005768:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	3302      	adds	r3, #2
 800576e:	61bb      	str	r3, [r7, #24]
 8005770:	e007      	b.n	8005782 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	781a      	ldrb	r2, [r3, #0]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	3301      	adds	r3, #1
 8005780:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005786:	b29b      	uxth	r3, r3
 8005788:	3b01      	subs	r3, #1
 800578a:	b29a      	uxth	r2, r3
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005794:	b29b      	uxth	r3, r3
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1cf      	bne.n	800573a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	9300      	str	r3, [sp, #0]
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	2200      	movs	r2, #0
 80057a2:	2140      	movs	r1, #64	; 0x40
 80057a4:	68f8      	ldr	r0, [r7, #12]
 80057a6:	f000 fc79 	bl	800609c <UART_WaitOnFlagUntilTimeout>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d001      	beq.n	80057b4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80057b0:	2303      	movs	r3, #3
 80057b2:	e006      	b.n	80057c2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2220      	movs	r2, #32
 80057b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80057bc:	2300      	movs	r3, #0
 80057be:	e000      	b.n	80057c2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80057c0:	2302      	movs	r3, #2
  }
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3720      	adds	r7, #32
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}

080057ca <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b084      	sub	sp, #16
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	60f8      	str	r0, [r7, #12]
 80057d2:	60b9      	str	r1, [r7, #8]
 80057d4:	4613      	mov	r3, r2
 80057d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	2b20      	cmp	r3, #32
 80057e2:	d11d      	bne.n	8005820 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d002      	beq.n	80057f0 <HAL_UART_Receive_DMA+0x26>
 80057ea:	88fb      	ldrh	r3, [r7, #6]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d101      	bne.n	80057f4 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e016      	b.n	8005822 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d101      	bne.n	8005802 <HAL_UART_Receive_DMA+0x38>
 80057fe:	2302      	movs	r3, #2
 8005800:	e00f      	b.n	8005822 <HAL_UART_Receive_DMA+0x58>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005810:	88fb      	ldrh	r3, [r7, #6]
 8005812:	461a      	mov	r2, r3
 8005814:	68b9      	ldr	r1, [r7, #8]
 8005816:	68f8      	ldr	r0, [r7, #12]
 8005818:	f000 fcae 	bl	8006178 <UART_Start_Receive_DMA>
 800581c:	4603      	mov	r3, r0
 800581e:	e000      	b.n	8005822 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005820:	2302      	movs	r3, #2
  }
}
 8005822:	4618      	mov	r0, r3
 8005824:	3710      	adds	r7, #16
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}

0800582a <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800582a:	b580      	push	{r7, lr}
 800582c:	b090      	sub	sp, #64	; 0x40
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005832:	2300      	movs	r3, #0
 8005834:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	695b      	ldr	r3, [r3, #20]
 800583c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005840:	2b80      	cmp	r3, #128	; 0x80
 8005842:	bf0c      	ite	eq
 8005844:	2301      	moveq	r3, #1
 8005846:	2300      	movne	r3, #0
 8005848:	b2db      	uxtb	r3, r3
 800584a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005852:	b2db      	uxtb	r3, r3
 8005854:	2b21      	cmp	r3, #33	; 0x21
 8005856:	d128      	bne.n	80058aa <HAL_UART_DMAStop+0x80>
 8005858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800585a:	2b00      	cmp	r3, #0
 800585c:	d025      	beq.n	80058aa <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	3314      	adds	r3, #20
 8005864:	627b      	str	r3, [r7, #36]	; 0x24
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005868:	e853 3f00 	ldrex	r3, [r3]
 800586c:	623b      	str	r3, [r7, #32]
   return(result);
 800586e:	6a3b      	ldr	r3, [r7, #32]
 8005870:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005874:	63bb      	str	r3, [r7, #56]	; 0x38
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	3314      	adds	r3, #20
 800587c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800587e:	633a      	str	r2, [r7, #48]	; 0x30
 8005880:	62fb      	str	r3, [r7, #44]	; 0x2c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005882:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005884:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005886:	e841 2300 	strex	r3, r2, [r1]
 800588a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800588c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588e:	2b00      	cmp	r3, #0
 8005890:	d1e5      	bne.n	800585e <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005896:	2b00      	cmp	r3, #0
 8005898:	d004      	beq.n	80058a4 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800589e:	4618      	mov	r0, r3
 80058a0:	f7fc f9b2 	bl	8001c08 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 fd01 	bl	80062ac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	695b      	ldr	r3, [r3, #20]
 80058b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b4:	2b40      	cmp	r3, #64	; 0x40
 80058b6:	bf0c      	ite	eq
 80058b8:	2301      	moveq	r3, #1
 80058ba:	2300      	movne	r3, #0
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	2b22      	cmp	r3, #34	; 0x22
 80058ca:	d128      	bne.n	800591e <HAL_UART_DMAStop+0xf4>
 80058cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d025      	beq.n	800591e <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	3314      	adds	r3, #20
 80058d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	e853 3f00 	ldrex	r3, [r3]
 80058e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058e8:	637b      	str	r3, [r7, #52]	; 0x34
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	3314      	adds	r3, #20
 80058f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058f2:	61fa      	str	r2, [r7, #28]
 80058f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f6:	69b9      	ldr	r1, [r7, #24]
 80058f8:	69fa      	ldr	r2, [r7, #28]
 80058fa:	e841 2300 	strex	r3, r2, [r1]
 80058fe:	617b      	str	r3, [r7, #20]
   return(result);
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1e5      	bne.n	80058d2 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800590a:	2b00      	cmp	r3, #0
 800590c:	d004      	beq.n	8005918 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005912:	4618      	mov	r0, r3
 8005914:	f7fc f978 	bl	8001c08 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f000 fcef 	bl	80062fc <UART_EndRxTransfer>
  }

  return HAL_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	3740      	adds	r7, #64	; 0x40
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b0ba      	sub	sp, #232	; 0xe8
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800594e:	2300      	movs	r3, #0
 8005950:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005954:	2300      	movs	r3, #0
 8005956:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800595a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800595e:	f003 030f 	and.w	r3, r3, #15
 8005962:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005966:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800596a:	2b00      	cmp	r3, #0
 800596c:	d10f      	bne.n	800598e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800596e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005972:	f003 0320 	and.w	r3, r3, #32
 8005976:	2b00      	cmp	r3, #0
 8005978:	d009      	beq.n	800598e <HAL_UART_IRQHandler+0x66>
 800597a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800597e:	f003 0320 	and.w	r3, r3, #32
 8005982:	2b00      	cmp	r3, #0
 8005984:	d003      	beq.n	800598e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 fd97 	bl	80064ba <UART_Receive_IT>
      return;
 800598c:	e256      	b.n	8005e3c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800598e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005992:	2b00      	cmp	r3, #0
 8005994:	f000 80de 	beq.w	8005b54 <HAL_UART_IRQHandler+0x22c>
 8005998:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800599c:	f003 0301 	and.w	r3, r3, #1
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d106      	bne.n	80059b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80059a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	f000 80d1 	beq.w	8005b54 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80059b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059b6:	f003 0301 	and.w	r3, r3, #1
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00b      	beq.n	80059d6 <HAL_UART_IRQHandler+0xae>
 80059be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d005      	beq.n	80059d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ce:	f043 0201 	orr.w	r2, r3, #1
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059da:	f003 0304 	and.w	r3, r3, #4
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00b      	beq.n	80059fa <HAL_UART_IRQHandler+0xd2>
 80059e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059e6:	f003 0301 	and.w	r3, r3, #1
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d005      	beq.n	80059fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f2:	f043 0202 	orr.w	r2, r3, #2
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059fe:	f003 0302 	and.w	r3, r3, #2
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00b      	beq.n	8005a1e <HAL_UART_IRQHandler+0xf6>
 8005a06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a0a:	f003 0301 	and.w	r3, r3, #1
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d005      	beq.n	8005a1e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a16:	f043 0204 	orr.w	r2, r3, #4
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a22:	f003 0308 	and.w	r3, r3, #8
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d011      	beq.n	8005a4e <HAL_UART_IRQHandler+0x126>
 8005a2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a2e:	f003 0320 	and.w	r3, r3, #32
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d105      	bne.n	8005a42 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005a36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a3a:	f003 0301 	and.w	r3, r3, #1
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d005      	beq.n	8005a4e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a46:	f043 0208 	orr.w	r2, r3, #8
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	f000 81ed 	beq.w	8005e32 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a5c:	f003 0320 	and.w	r3, r3, #32
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d008      	beq.n	8005a76 <HAL_UART_IRQHandler+0x14e>
 8005a64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a68:	f003 0320 	and.w	r3, r3, #32
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d002      	beq.n	8005a76 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f000 fd22 	bl	80064ba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	695b      	ldr	r3, [r3, #20]
 8005a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a80:	2b40      	cmp	r3, #64	; 0x40
 8005a82:	bf0c      	ite	eq
 8005a84:	2301      	moveq	r3, #1
 8005a86:	2300      	movne	r3, #0
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a92:	f003 0308 	and.w	r3, r3, #8
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d103      	bne.n	8005aa2 <HAL_UART_IRQHandler+0x17a>
 8005a9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d04f      	beq.n	8005b42 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 fc2a 	bl	80062fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	695b      	ldr	r3, [r3, #20]
 8005aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab2:	2b40      	cmp	r3, #64	; 0x40
 8005ab4:	d141      	bne.n	8005b3a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	3314      	adds	r3, #20
 8005abc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ac4:	e853 3f00 	ldrex	r3, [r3]
 8005ac8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005acc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ad0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ad4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	3314      	adds	r3, #20
 8005ade:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005ae2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005ae6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005aee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005af2:	e841 2300 	strex	r3, r2, [r1]
 8005af6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005afa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1d9      	bne.n	8005ab6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d013      	beq.n	8005b32 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b0e:	4a7d      	ldr	r2, [pc, #500]	; (8005d04 <HAL_UART_IRQHandler+0x3dc>)
 8005b10:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b16:	4618      	mov	r0, r3
 8005b18:	f7fc f8e6 	bl	8001ce8 <HAL_DMA_Abort_IT>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d016      	beq.n	8005b50 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b2c:	4610      	mov	r0, r2
 8005b2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b30:	e00e      	b.n	8005b50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 f9a4 	bl	8005e80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b38:	e00a      	b.n	8005b50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 f9a0 	bl	8005e80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b40:	e006      	b.n	8005b50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 f99c 	bl	8005e80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005b4e:	e170      	b.n	8005e32 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b50:	bf00      	nop
    return;
 8005b52:	e16e      	b.n	8005e32 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	f040 814a 	bne.w	8005df2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b62:	f003 0310 	and.w	r3, r3, #16
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	f000 8143 	beq.w	8005df2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b70:	f003 0310 	and.w	r3, r3, #16
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f000 813c 	beq.w	8005df2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	60bb      	str	r3, [r7, #8]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	60bb      	str	r3, [r7, #8]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	60bb      	str	r3, [r7, #8]
 8005b8e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	695b      	ldr	r3, [r3, #20]
 8005b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b9a:	2b40      	cmp	r3, #64	; 0x40
 8005b9c:	f040 80b4 	bne.w	8005d08 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005bac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	f000 8140 	beq.w	8005e36 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005bba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	f080 8139 	bcs.w	8005e36 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005bca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd0:	69db      	ldr	r3, [r3, #28]
 8005bd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bd6:	f000 8088 	beq.w	8005cea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	330c      	adds	r3, #12
 8005be0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005be8:	e853 3f00 	ldrex	r3, [r3]
 8005bec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005bf0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005bf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bf8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	330c      	adds	r3, #12
 8005c02:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005c06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005c0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005c12:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c16:	e841 2300 	strex	r3, r2, [r1]
 8005c1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005c1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1d9      	bne.n	8005bda <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	3314      	adds	r3, #20
 8005c2c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c30:	e853 3f00 	ldrex	r3, [r3]
 8005c34:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005c36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c38:	f023 0301 	bic.w	r3, r3, #1
 8005c3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	3314      	adds	r3, #20
 8005c46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c4a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c4e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c50:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c52:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c56:	e841 2300 	strex	r3, r2, [r1]
 8005c5a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005c5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d1e1      	bne.n	8005c26 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	3314      	adds	r3, #20
 8005c68:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c6c:	e853 3f00 	ldrex	r3, [r3]
 8005c70:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005c72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	3314      	adds	r3, #20
 8005c82:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005c86:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c88:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c8a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c8c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c8e:	e841 2300 	strex	r3, r2, [r1]
 8005c92:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005c94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1e3      	bne.n	8005c62 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2220      	movs	r2, #32
 8005c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	330c      	adds	r3, #12
 8005cae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cb2:	e853 3f00 	ldrex	r3, [r3]
 8005cb6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005cb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cba:	f023 0310 	bic.w	r3, r3, #16
 8005cbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	330c      	adds	r3, #12
 8005cc8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005ccc:	65ba      	str	r2, [r7, #88]	; 0x58
 8005cce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005cd2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005cd4:	e841 2300 	strex	r3, r2, [r1]
 8005cd8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005cda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d1e3      	bne.n	8005ca8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f7fb ff8f 	bl	8001c08 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 f8ca 	bl	8005e94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d00:	e099      	b.n	8005e36 <HAL_UART_IRQHandler+0x50e>
 8005d02:	bf00      	nop
 8005d04:	080063c3 	.word	0x080063c3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	f000 808b 	beq.w	8005e3a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005d24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	f000 8086 	beq.w	8005e3a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	330c      	adds	r3, #12
 8005d34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d38:	e853 3f00 	ldrex	r3, [r3]
 8005d3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	330c      	adds	r3, #12
 8005d4e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005d52:	647a      	str	r2, [r7, #68]	; 0x44
 8005d54:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d5a:	e841 2300 	strex	r3, r2, [r1]
 8005d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d1e3      	bne.n	8005d2e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	3314      	adds	r3, #20
 8005d6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d70:	e853 3f00 	ldrex	r3, [r3]
 8005d74:	623b      	str	r3, [r7, #32]
   return(result);
 8005d76:	6a3b      	ldr	r3, [r7, #32]
 8005d78:	f023 0301 	bic.w	r3, r3, #1
 8005d7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	3314      	adds	r3, #20
 8005d86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005d8a:	633a      	str	r2, [r7, #48]	; 0x30
 8005d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d92:	e841 2300 	strex	r3, r2, [r1]
 8005d96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1e3      	bne.n	8005d66 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2220      	movs	r2, #32
 8005da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	330c      	adds	r3, #12
 8005db2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	e853 3f00 	ldrex	r3, [r3]
 8005dba:	60fb      	str	r3, [r7, #12]
   return(result);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f023 0310 	bic.w	r3, r3, #16
 8005dc2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	330c      	adds	r3, #12
 8005dcc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005dd0:	61fa      	str	r2, [r7, #28]
 8005dd2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd4:	69b9      	ldr	r1, [r7, #24]
 8005dd6:	69fa      	ldr	r2, [r7, #28]
 8005dd8:	e841 2300 	strex	r3, r2, [r1]
 8005ddc:	617b      	str	r3, [r7, #20]
   return(result);
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d1e3      	bne.n	8005dac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005de4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005de8:	4619      	mov	r1, r3
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 f852 	bl	8005e94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005df0:	e023      	b.n	8005e3a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d009      	beq.n	8005e12 <HAL_UART_IRQHandler+0x4ea>
 8005dfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d003      	beq.n	8005e12 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 faed 	bl	80063ea <UART_Transmit_IT>
    return;
 8005e10:	e014      	b.n	8005e3c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00e      	beq.n	8005e3c <HAL_UART_IRQHandler+0x514>
 8005e1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d008      	beq.n	8005e3c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 fb2d 	bl	800648a <UART_EndTransmit_IT>
    return;
 8005e30:	e004      	b.n	8005e3c <HAL_UART_IRQHandler+0x514>
    return;
 8005e32:	bf00      	nop
 8005e34:	e002      	b.n	8005e3c <HAL_UART_IRQHandler+0x514>
      return;
 8005e36:	bf00      	nop
 8005e38:	e000      	b.n	8005e3c <HAL_UART_IRQHandler+0x514>
      return;
 8005e3a:	bf00      	nop
  }
}
 8005e3c:	37e8      	adds	r7, #232	; 0xe8
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop

08005e44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005e4c:	bf00      	nop
 8005e4e:	370c      	adds	r7, #12
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005e74:	bf00      	nop
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005e88:	bf00      	nop
 8005e8a:	370c      	adds	r7, #12
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ea0:	bf00      	nop
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b09c      	sub	sp, #112	; 0x70
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb8:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d172      	bne.n	8005fae <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005ec8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eca:	2200      	movs	r2, #0
 8005ecc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ece:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	330c      	adds	r3, #12
 8005ed4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ed8:	e853 3f00 	ldrex	r3, [r3]
 8005edc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005ede:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ee0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ee4:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ee6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	330c      	adds	r3, #12
 8005eec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005eee:	65ba      	str	r2, [r7, #88]	; 0x58
 8005ef0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ef4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ef6:	e841 2300 	strex	r3, r2, [r1]
 8005efa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005efc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d1e5      	bne.n	8005ece <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	3314      	adds	r3, #20
 8005f08:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f0c:	e853 3f00 	ldrex	r3, [r3]
 8005f10:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f14:	f023 0301 	bic.w	r3, r3, #1
 8005f18:	667b      	str	r3, [r7, #100]	; 0x64
 8005f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	3314      	adds	r3, #20
 8005f20:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005f22:	647a      	str	r2, [r7, #68]	; 0x44
 8005f24:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f2a:	e841 2300 	strex	r3, r2, [r1]
 8005f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d1e5      	bne.n	8005f02 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	3314      	adds	r3, #20
 8005f3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f40:	e853 3f00 	ldrex	r3, [r3]
 8005f44:	623b      	str	r3, [r7, #32]
   return(result);
 8005f46:	6a3b      	ldr	r3, [r7, #32]
 8005f48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f4c:	663b      	str	r3, [r7, #96]	; 0x60
 8005f4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	3314      	adds	r3, #20
 8005f54:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005f56:	633a      	str	r2, [r7, #48]	; 0x30
 8005f58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f5e:	e841 2300 	strex	r3, r2, [r1]
 8005f62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d1e5      	bne.n	8005f36 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005f6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f6c:	2220      	movs	r2, #32
 8005f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d119      	bne.n	8005fae <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	330c      	adds	r3, #12
 8005f80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	e853 3f00 	ldrex	r3, [r3]
 8005f88:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f023 0310 	bic.w	r3, r3, #16
 8005f90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	330c      	adds	r3, #12
 8005f98:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005f9a:	61fa      	str	r2, [r7, #28]
 8005f9c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9e:	69b9      	ldr	r1, [r7, #24]
 8005fa0:	69fa      	ldr	r2, [r7, #28]
 8005fa2:	e841 2300 	strex	r3, r2, [r1]
 8005fa6:	617b      	str	r3, [r7, #20]
   return(result);
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d1e5      	bne.n	8005f7a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d106      	bne.n	8005fc4 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005fb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fb8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005fba:	4619      	mov	r1, r3
 8005fbc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005fbe:	f7ff ff69 	bl	8005e94 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005fc2:	e002      	b.n	8005fca <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005fc4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005fc6:	f7ff ff47 	bl	8005e58 <HAL_UART_RxCpltCallback>
}
 8005fca:	bf00      	nop
 8005fcc:	3770      	adds	r7, #112	; 0x70
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}

08005fd2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005fd2:	b580      	push	{r7, lr}
 8005fd4:	b084      	sub	sp, #16
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fde:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d108      	bne.n	8005ffa <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005fec:	085b      	lsrs	r3, r3, #1
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	68f8      	ldr	r0, [r7, #12]
 8005ff4:	f7ff ff4e 	bl	8005e94 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005ff8:	e002      	b.n	8006000 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005ffa:	68f8      	ldr	r0, [r7, #12]
 8005ffc:	f7ff ff36 	bl	8005e6c <HAL_UART_RxHalfCpltCallback>
}
 8006000:	bf00      	nop
 8006002:	3710      	adds	r7, #16
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006010:	2300      	movs	r3, #0
 8006012:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006018:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	695b      	ldr	r3, [r3, #20]
 8006020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006024:	2b80      	cmp	r3, #128	; 0x80
 8006026:	bf0c      	ite	eq
 8006028:	2301      	moveq	r3, #1
 800602a:	2300      	movne	r3, #0
 800602c:	b2db      	uxtb	r3, r3
 800602e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006036:	b2db      	uxtb	r3, r3
 8006038:	2b21      	cmp	r3, #33	; 0x21
 800603a:	d108      	bne.n	800604e <UART_DMAError+0x46>
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d005      	beq.n	800604e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	2200      	movs	r2, #0
 8006046:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006048:	68b8      	ldr	r0, [r7, #8]
 800604a:	f000 f92f 	bl	80062ac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	695b      	ldr	r3, [r3, #20]
 8006054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006058:	2b40      	cmp	r3, #64	; 0x40
 800605a:	bf0c      	ite	eq
 800605c:	2301      	moveq	r3, #1
 800605e:	2300      	movne	r3, #0
 8006060:	b2db      	uxtb	r3, r3
 8006062:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800606a:	b2db      	uxtb	r3, r3
 800606c:	2b22      	cmp	r3, #34	; 0x22
 800606e:	d108      	bne.n	8006082 <UART_DMAError+0x7a>
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d005      	beq.n	8006082 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	2200      	movs	r2, #0
 800607a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800607c:	68b8      	ldr	r0, [r7, #8]
 800607e:	f000 f93d 	bl	80062fc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006086:	f043 0210 	orr.w	r2, r3, #16
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800608e:	68b8      	ldr	r0, [r7, #8]
 8006090:	f7ff fef6 	bl	8005e80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006094:	bf00      	nop
 8006096:	3710      	adds	r7, #16
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b090      	sub	sp, #64	; 0x40
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	603b      	str	r3, [r7, #0]
 80060a8:	4613      	mov	r3, r2
 80060aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060ac:	e050      	b.n	8006150 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060b4:	d04c      	beq.n	8006150 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80060b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d007      	beq.n	80060cc <UART_WaitOnFlagUntilTimeout+0x30>
 80060bc:	f7fb fb94 	bl	80017e8 <HAL_GetTick>
 80060c0:	4602      	mov	r2, r0
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d241      	bcs.n	8006150 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	330c      	adds	r3, #12
 80060d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d6:	e853 3f00 	ldrex	r3, [r3]
 80060da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80060e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	330c      	adds	r3, #12
 80060ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80060ec:	637a      	str	r2, [r7, #52]	; 0x34
 80060ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060f4:	e841 2300 	strex	r3, r2, [r1]
 80060f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80060fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d1e5      	bne.n	80060cc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	3314      	adds	r3, #20
 8006106:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	e853 3f00 	ldrex	r3, [r3]
 800610e:	613b      	str	r3, [r7, #16]
   return(result);
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	f023 0301 	bic.w	r3, r3, #1
 8006116:	63bb      	str	r3, [r7, #56]	; 0x38
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	3314      	adds	r3, #20
 800611e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006120:	623a      	str	r2, [r7, #32]
 8006122:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006124:	69f9      	ldr	r1, [r7, #28]
 8006126:	6a3a      	ldr	r2, [r7, #32]
 8006128:	e841 2300 	strex	r3, r2, [r1]
 800612c:	61bb      	str	r3, [r7, #24]
   return(result);
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d1e5      	bne.n	8006100 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2220      	movs	r2, #32
 8006138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2220      	movs	r2, #32
 8006140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2200      	movs	r2, #0
 8006148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800614c:	2303      	movs	r3, #3
 800614e:	e00f      	b.n	8006170 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	4013      	ands	r3, r2
 800615a:	68ba      	ldr	r2, [r7, #8]
 800615c:	429a      	cmp	r2, r3
 800615e:	bf0c      	ite	eq
 8006160:	2301      	moveq	r3, #1
 8006162:	2300      	movne	r3, #0
 8006164:	b2db      	uxtb	r3, r3
 8006166:	461a      	mov	r2, r3
 8006168:	79fb      	ldrb	r3, [r7, #7]
 800616a:	429a      	cmp	r2, r3
 800616c:	d09f      	beq.n	80060ae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	3740      	adds	r7, #64	; 0x40
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b098      	sub	sp, #96	; 0x60
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	4613      	mov	r3, r2
 8006184:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006186:	68ba      	ldr	r2, [r7, #8]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	88fa      	ldrh	r2, [r7, #6]
 8006190:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2200      	movs	r2, #0
 8006196:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2222      	movs	r2, #34	; 0x22
 800619c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a4:	4a3e      	ldr	r2, [pc, #248]	; (80062a0 <UART_Start_Receive_DMA+0x128>)
 80061a6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ac:	4a3d      	ldr	r2, [pc, #244]	; (80062a4 <UART_Start_Receive_DMA+0x12c>)
 80061ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b4:	4a3c      	ldr	r2, [pc, #240]	; (80062a8 <UART_Start_Receive_DMA+0x130>)
 80061b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061bc:	2200      	movs	r2, #0
 80061be:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80061c0:	f107 0308 	add.w	r3, r7, #8
 80061c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	3304      	adds	r3, #4
 80061d0:	4619      	mov	r1, r3
 80061d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	88fb      	ldrh	r3, [r7, #6]
 80061d8:	f7fb fcbe 	bl	8001b58 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80061dc:	2300      	movs	r3, #0
 80061de:	613b      	str	r3, [r7, #16]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	613b      	str	r3, [r7, #16]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	613b      	str	r3, [r7, #16]
 80061f0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	330c      	adds	r3, #12
 8006200:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006202:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006204:	e853 3f00 	ldrex	r3, [r3]
 8006208:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800620a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800620c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006210:	65bb      	str	r3, [r7, #88]	; 0x58
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	330c      	adds	r3, #12
 8006218:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800621a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800621c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800621e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006220:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006222:	e841 2300 	strex	r3, r2, [r1]
 8006226:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006228:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800622a:	2b00      	cmp	r3, #0
 800622c:	d1e5      	bne.n	80061fa <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	3314      	adds	r3, #20
 8006234:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006238:	e853 3f00 	ldrex	r3, [r3]
 800623c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800623e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006240:	f043 0301 	orr.w	r3, r3, #1
 8006244:	657b      	str	r3, [r7, #84]	; 0x54
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	3314      	adds	r3, #20
 800624c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800624e:	63ba      	str	r2, [r7, #56]	; 0x38
 8006250:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006252:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006254:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006256:	e841 2300 	strex	r3, r2, [r1]
 800625a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800625c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625e:	2b00      	cmp	r3, #0
 8006260:	d1e5      	bne.n	800622e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	3314      	adds	r3, #20
 8006268:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	e853 3f00 	ldrex	r3, [r3]
 8006270:	617b      	str	r3, [r7, #20]
   return(result);
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006278:	653b      	str	r3, [r7, #80]	; 0x50
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	3314      	adds	r3, #20
 8006280:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006282:	627a      	str	r2, [r7, #36]	; 0x24
 8006284:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006286:	6a39      	ldr	r1, [r7, #32]
 8006288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800628a:	e841 2300 	strex	r3, r2, [r1]
 800628e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d1e5      	bne.n	8006262 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006296:	2300      	movs	r3, #0
}
 8006298:	4618      	mov	r0, r3
 800629a:	3760      	adds	r7, #96	; 0x60
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}
 80062a0:	08005ead 	.word	0x08005ead
 80062a4:	08005fd3 	.word	0x08005fd3
 80062a8:	08006009 	.word	0x08006009

080062ac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b089      	sub	sp, #36	; 0x24
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	330c      	adds	r3, #12
 80062ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	e853 3f00 	ldrex	r3, [r3]
 80062c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80062ca:	61fb      	str	r3, [r7, #28]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	330c      	adds	r3, #12
 80062d2:	69fa      	ldr	r2, [r7, #28]
 80062d4:	61ba      	str	r2, [r7, #24]
 80062d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d8:	6979      	ldr	r1, [r7, #20]
 80062da:	69ba      	ldr	r2, [r7, #24]
 80062dc:	e841 2300 	strex	r3, r2, [r1]
 80062e0:	613b      	str	r3, [r7, #16]
   return(result);
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d1e5      	bne.n	80062b4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2220      	movs	r2, #32
 80062ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80062f0:	bf00      	nop
 80062f2:	3724      	adds	r7, #36	; 0x24
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b095      	sub	sp, #84	; 0x54
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	330c      	adds	r3, #12
 800630a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800630c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800630e:	e853 3f00 	ldrex	r3, [r3]
 8006312:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006316:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800631a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	330c      	adds	r3, #12
 8006322:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006324:	643a      	str	r2, [r7, #64]	; 0x40
 8006326:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006328:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800632a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800632c:	e841 2300 	strex	r3, r2, [r1]
 8006330:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006334:	2b00      	cmp	r3, #0
 8006336:	d1e5      	bne.n	8006304 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	3314      	adds	r3, #20
 800633e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006340:	6a3b      	ldr	r3, [r7, #32]
 8006342:	e853 3f00 	ldrex	r3, [r3]
 8006346:	61fb      	str	r3, [r7, #28]
   return(result);
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	f023 0301 	bic.w	r3, r3, #1
 800634e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	3314      	adds	r3, #20
 8006356:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006358:	62fa      	str	r2, [r7, #44]	; 0x2c
 800635a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800635e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006360:	e841 2300 	strex	r3, r2, [r1]
 8006364:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006368:	2b00      	cmp	r3, #0
 800636a:	d1e5      	bne.n	8006338 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006370:	2b01      	cmp	r3, #1
 8006372:	d119      	bne.n	80063a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	330c      	adds	r3, #12
 800637a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	e853 3f00 	ldrex	r3, [r3]
 8006382:	60bb      	str	r3, [r7, #8]
   return(result);
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	f023 0310 	bic.w	r3, r3, #16
 800638a:	647b      	str	r3, [r7, #68]	; 0x44
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	330c      	adds	r3, #12
 8006392:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006394:	61ba      	str	r2, [r7, #24]
 8006396:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006398:	6979      	ldr	r1, [r7, #20]
 800639a:	69ba      	ldr	r2, [r7, #24]
 800639c:	e841 2300 	strex	r3, r2, [r1]
 80063a0:	613b      	str	r3, [r7, #16]
   return(result);
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d1e5      	bne.n	8006374 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2220      	movs	r2, #32
 80063ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80063b6:	bf00      	nop
 80063b8:	3754      	adds	r7, #84	; 0x54
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr

080063c2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b084      	sub	sp, #16
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2200      	movs	r2, #0
 80063da:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063dc:	68f8      	ldr	r0, [r7, #12]
 80063de:	f7ff fd4f 	bl	8005e80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063e2:	bf00      	nop
 80063e4:	3710      	adds	r7, #16
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}

080063ea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80063ea:	b480      	push	{r7}
 80063ec:	b085      	sub	sp, #20
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	2b21      	cmp	r3, #33	; 0x21
 80063fc:	d13e      	bne.n	800647c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006406:	d114      	bne.n	8006432 <UART_Transmit_IT+0x48>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d110      	bne.n	8006432 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6a1b      	ldr	r3, [r3, #32]
 8006414:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	881b      	ldrh	r3, [r3, #0]
 800641a:	461a      	mov	r2, r3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006424:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a1b      	ldr	r3, [r3, #32]
 800642a:	1c9a      	adds	r2, r3, #2
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	621a      	str	r2, [r3, #32]
 8006430:	e008      	b.n	8006444 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6a1b      	ldr	r3, [r3, #32]
 8006436:	1c59      	adds	r1, r3, #1
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	6211      	str	r1, [r2, #32]
 800643c:	781a      	ldrb	r2, [r3, #0]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006448:	b29b      	uxth	r3, r3
 800644a:	3b01      	subs	r3, #1
 800644c:	b29b      	uxth	r3, r3
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	4619      	mov	r1, r3
 8006452:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006454:	2b00      	cmp	r3, #0
 8006456:	d10f      	bne.n	8006478 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	68da      	ldr	r2, [r3, #12]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006466:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	68da      	ldr	r2, [r3, #12]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006476:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006478:	2300      	movs	r3, #0
 800647a:	e000      	b.n	800647e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800647c:	2302      	movs	r3, #2
  }
}
 800647e:	4618      	mov	r0, r3
 8006480:	3714      	adds	r7, #20
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr

0800648a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800648a:	b580      	push	{r7, lr}
 800648c:	b082      	sub	sp, #8
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	68da      	ldr	r2, [r3, #12]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064a0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2220      	movs	r2, #32
 80064a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f7ff fcca 	bl	8005e44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3708      	adds	r7, #8
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}

080064ba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b08c      	sub	sp, #48	; 0x30
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	2b22      	cmp	r3, #34	; 0x22
 80064cc:	f040 80ab 	bne.w	8006626 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064d8:	d117      	bne.n	800650a <UART_Receive_IT+0x50>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d113      	bne.n	800650a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80064e2:	2300      	movs	r3, #0
 80064e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ea:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064f8:	b29a      	uxth	r2, r3
 80064fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006502:	1c9a      	adds	r2, r3, #2
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	629a      	str	r2, [r3, #40]	; 0x28
 8006508:	e026      	b.n	8006558 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800650e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006510:	2300      	movs	r3, #0
 8006512:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800651c:	d007      	beq.n	800652e <UART_Receive_IT+0x74>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d10a      	bne.n	800653c <UART_Receive_IT+0x82>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d106      	bne.n	800653c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	b2da      	uxtb	r2, r3
 8006536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006538:	701a      	strb	r2, [r3, #0]
 800653a:	e008      	b.n	800654e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	b2db      	uxtb	r3, r3
 8006544:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006548:	b2da      	uxtb	r2, r3
 800654a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800654c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006552:	1c5a      	adds	r2, r3, #1
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800655c:	b29b      	uxth	r3, r3
 800655e:	3b01      	subs	r3, #1
 8006560:	b29b      	uxth	r3, r3
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	4619      	mov	r1, r3
 8006566:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006568:	2b00      	cmp	r3, #0
 800656a:	d15a      	bne.n	8006622 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68da      	ldr	r2, [r3, #12]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f022 0220 	bic.w	r2, r2, #32
 800657a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	68da      	ldr	r2, [r3, #12]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800658a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	695a      	ldr	r2, [r3, #20]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f022 0201 	bic.w	r2, r2, #1
 800659a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2220      	movs	r2, #32
 80065a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d135      	bne.n	8006618 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	330c      	adds	r3, #12
 80065b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	e853 3f00 	ldrex	r3, [r3]
 80065c0:	613b      	str	r3, [r7, #16]
   return(result);
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	f023 0310 	bic.w	r3, r3, #16
 80065c8:	627b      	str	r3, [r7, #36]	; 0x24
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	330c      	adds	r3, #12
 80065d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065d2:	623a      	str	r2, [r7, #32]
 80065d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d6:	69f9      	ldr	r1, [r7, #28]
 80065d8:	6a3a      	ldr	r2, [r7, #32]
 80065da:	e841 2300 	strex	r3, r2, [r1]
 80065de:	61bb      	str	r3, [r7, #24]
   return(result);
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d1e5      	bne.n	80065b2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 0310 	and.w	r3, r3, #16
 80065f0:	2b10      	cmp	r3, #16
 80065f2:	d10a      	bne.n	800660a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80065f4:	2300      	movs	r3, #0
 80065f6:	60fb      	str	r3, [r7, #12]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	60fb      	str	r3, [r7, #12]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	60fb      	str	r3, [r7, #12]
 8006608:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800660e:	4619      	mov	r1, r3
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f7ff fc3f 	bl	8005e94 <HAL_UARTEx_RxEventCallback>
 8006616:	e002      	b.n	800661e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f7ff fc1d 	bl	8005e58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800661e:	2300      	movs	r3, #0
 8006620:	e002      	b.n	8006628 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006622:	2300      	movs	r3, #0
 8006624:	e000      	b.n	8006628 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006626:	2302      	movs	r3, #2
  }
}
 8006628:	4618      	mov	r0, r3
 800662a:	3730      	adds	r7, #48	; 0x30
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}

08006630 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006630:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006634:	b0c0      	sub	sp, #256	; 0x100
 8006636:	af00      	add	r7, sp, #0
 8006638:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800663c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	691b      	ldr	r3, [r3, #16]
 8006644:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800664c:	68d9      	ldr	r1, [r3, #12]
 800664e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	ea40 0301 	orr.w	r3, r0, r1
 8006658:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800665a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800665e:	689a      	ldr	r2, [r3, #8]
 8006660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	431a      	orrs	r2, r3
 8006668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800666c:	695b      	ldr	r3, [r3, #20]
 800666e:	431a      	orrs	r2, r3
 8006670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006674:	69db      	ldr	r3, [r3, #28]
 8006676:	4313      	orrs	r3, r2
 8006678:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800667c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006688:	f021 010c 	bic.w	r1, r1, #12
 800668c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006696:	430b      	orrs	r3, r1
 8006698:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800669a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	695b      	ldr	r3, [r3, #20]
 80066a2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80066a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066aa:	6999      	ldr	r1, [r3, #24]
 80066ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	ea40 0301 	orr.w	r3, r0, r1
 80066b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80066b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	4b8f      	ldr	r3, [pc, #572]	; (80068fc <UART_SetConfig+0x2cc>)
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d005      	beq.n	80066d0 <UART_SetConfig+0xa0>
 80066c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	4b8d      	ldr	r3, [pc, #564]	; (8006900 <UART_SetConfig+0x2d0>)
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d104      	bne.n	80066da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80066d0:	f7fe fb00 	bl	8004cd4 <HAL_RCC_GetPCLK2Freq>
 80066d4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80066d8:	e003      	b.n	80066e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80066da:	f7fe fae7 	bl	8004cac <HAL_RCC_GetPCLK1Freq>
 80066de:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066e6:	69db      	ldr	r3, [r3, #28]
 80066e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066ec:	f040 810c 	bne.w	8006908 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80066f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066f4:	2200      	movs	r2, #0
 80066f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80066fa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80066fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006702:	4622      	mov	r2, r4
 8006704:	462b      	mov	r3, r5
 8006706:	1891      	adds	r1, r2, r2
 8006708:	65b9      	str	r1, [r7, #88]	; 0x58
 800670a:	415b      	adcs	r3, r3
 800670c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800670e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006712:	4621      	mov	r1, r4
 8006714:	eb12 0801 	adds.w	r8, r2, r1
 8006718:	4629      	mov	r1, r5
 800671a:	eb43 0901 	adc.w	r9, r3, r1
 800671e:	f04f 0200 	mov.w	r2, #0
 8006722:	f04f 0300 	mov.w	r3, #0
 8006726:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800672a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800672e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006732:	4690      	mov	r8, r2
 8006734:	4699      	mov	r9, r3
 8006736:	4623      	mov	r3, r4
 8006738:	eb18 0303 	adds.w	r3, r8, r3
 800673c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006740:	462b      	mov	r3, r5
 8006742:	eb49 0303 	adc.w	r3, r9, r3
 8006746:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800674a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006756:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800675a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800675e:	460b      	mov	r3, r1
 8006760:	18db      	adds	r3, r3, r3
 8006762:	653b      	str	r3, [r7, #80]	; 0x50
 8006764:	4613      	mov	r3, r2
 8006766:	eb42 0303 	adc.w	r3, r2, r3
 800676a:	657b      	str	r3, [r7, #84]	; 0x54
 800676c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006770:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006774:	f7f9 fd8c 	bl	8000290 <__aeabi_uldivmod>
 8006778:	4602      	mov	r2, r0
 800677a:	460b      	mov	r3, r1
 800677c:	4b61      	ldr	r3, [pc, #388]	; (8006904 <UART_SetConfig+0x2d4>)
 800677e:	fba3 2302 	umull	r2, r3, r3, r2
 8006782:	095b      	lsrs	r3, r3, #5
 8006784:	011c      	lsls	r4, r3, #4
 8006786:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800678a:	2200      	movs	r2, #0
 800678c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006790:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006794:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006798:	4642      	mov	r2, r8
 800679a:	464b      	mov	r3, r9
 800679c:	1891      	adds	r1, r2, r2
 800679e:	64b9      	str	r1, [r7, #72]	; 0x48
 80067a0:	415b      	adcs	r3, r3
 80067a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80067a8:	4641      	mov	r1, r8
 80067aa:	eb12 0a01 	adds.w	sl, r2, r1
 80067ae:	4649      	mov	r1, r9
 80067b0:	eb43 0b01 	adc.w	fp, r3, r1
 80067b4:	f04f 0200 	mov.w	r2, #0
 80067b8:	f04f 0300 	mov.w	r3, #0
 80067bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80067c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80067c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067c8:	4692      	mov	sl, r2
 80067ca:	469b      	mov	fp, r3
 80067cc:	4643      	mov	r3, r8
 80067ce:	eb1a 0303 	adds.w	r3, sl, r3
 80067d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80067d6:	464b      	mov	r3, r9
 80067d8:	eb4b 0303 	adc.w	r3, fp, r3
 80067dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80067e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067ec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80067f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80067f4:	460b      	mov	r3, r1
 80067f6:	18db      	adds	r3, r3, r3
 80067f8:	643b      	str	r3, [r7, #64]	; 0x40
 80067fa:	4613      	mov	r3, r2
 80067fc:	eb42 0303 	adc.w	r3, r2, r3
 8006800:	647b      	str	r3, [r7, #68]	; 0x44
 8006802:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006806:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800680a:	f7f9 fd41 	bl	8000290 <__aeabi_uldivmod>
 800680e:	4602      	mov	r2, r0
 8006810:	460b      	mov	r3, r1
 8006812:	4611      	mov	r1, r2
 8006814:	4b3b      	ldr	r3, [pc, #236]	; (8006904 <UART_SetConfig+0x2d4>)
 8006816:	fba3 2301 	umull	r2, r3, r3, r1
 800681a:	095b      	lsrs	r3, r3, #5
 800681c:	2264      	movs	r2, #100	; 0x64
 800681e:	fb02 f303 	mul.w	r3, r2, r3
 8006822:	1acb      	subs	r3, r1, r3
 8006824:	00db      	lsls	r3, r3, #3
 8006826:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800682a:	4b36      	ldr	r3, [pc, #216]	; (8006904 <UART_SetConfig+0x2d4>)
 800682c:	fba3 2302 	umull	r2, r3, r3, r2
 8006830:	095b      	lsrs	r3, r3, #5
 8006832:	005b      	lsls	r3, r3, #1
 8006834:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006838:	441c      	add	r4, r3
 800683a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800683e:	2200      	movs	r2, #0
 8006840:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006844:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006848:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800684c:	4642      	mov	r2, r8
 800684e:	464b      	mov	r3, r9
 8006850:	1891      	adds	r1, r2, r2
 8006852:	63b9      	str	r1, [r7, #56]	; 0x38
 8006854:	415b      	adcs	r3, r3
 8006856:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006858:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800685c:	4641      	mov	r1, r8
 800685e:	1851      	adds	r1, r2, r1
 8006860:	6339      	str	r1, [r7, #48]	; 0x30
 8006862:	4649      	mov	r1, r9
 8006864:	414b      	adcs	r3, r1
 8006866:	637b      	str	r3, [r7, #52]	; 0x34
 8006868:	f04f 0200 	mov.w	r2, #0
 800686c:	f04f 0300 	mov.w	r3, #0
 8006870:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006874:	4659      	mov	r1, fp
 8006876:	00cb      	lsls	r3, r1, #3
 8006878:	4651      	mov	r1, sl
 800687a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800687e:	4651      	mov	r1, sl
 8006880:	00ca      	lsls	r2, r1, #3
 8006882:	4610      	mov	r0, r2
 8006884:	4619      	mov	r1, r3
 8006886:	4603      	mov	r3, r0
 8006888:	4642      	mov	r2, r8
 800688a:	189b      	adds	r3, r3, r2
 800688c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006890:	464b      	mov	r3, r9
 8006892:	460a      	mov	r2, r1
 8006894:	eb42 0303 	adc.w	r3, r2, r3
 8006898:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800689c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80068a8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80068ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80068b0:	460b      	mov	r3, r1
 80068b2:	18db      	adds	r3, r3, r3
 80068b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80068b6:	4613      	mov	r3, r2
 80068b8:	eb42 0303 	adc.w	r3, r2, r3
 80068bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80068c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80068c6:	f7f9 fce3 	bl	8000290 <__aeabi_uldivmod>
 80068ca:	4602      	mov	r2, r0
 80068cc:	460b      	mov	r3, r1
 80068ce:	4b0d      	ldr	r3, [pc, #52]	; (8006904 <UART_SetConfig+0x2d4>)
 80068d0:	fba3 1302 	umull	r1, r3, r3, r2
 80068d4:	095b      	lsrs	r3, r3, #5
 80068d6:	2164      	movs	r1, #100	; 0x64
 80068d8:	fb01 f303 	mul.w	r3, r1, r3
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	00db      	lsls	r3, r3, #3
 80068e0:	3332      	adds	r3, #50	; 0x32
 80068e2:	4a08      	ldr	r2, [pc, #32]	; (8006904 <UART_SetConfig+0x2d4>)
 80068e4:	fba2 2303 	umull	r2, r3, r2, r3
 80068e8:	095b      	lsrs	r3, r3, #5
 80068ea:	f003 0207 	and.w	r2, r3, #7
 80068ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4422      	add	r2, r4
 80068f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80068f8:	e105      	b.n	8006b06 <UART_SetConfig+0x4d6>
 80068fa:	bf00      	nop
 80068fc:	40011000 	.word	0x40011000
 8006900:	40011400 	.word	0x40011400
 8006904:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006908:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800690c:	2200      	movs	r2, #0
 800690e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006912:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006916:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800691a:	4642      	mov	r2, r8
 800691c:	464b      	mov	r3, r9
 800691e:	1891      	adds	r1, r2, r2
 8006920:	6239      	str	r1, [r7, #32]
 8006922:	415b      	adcs	r3, r3
 8006924:	627b      	str	r3, [r7, #36]	; 0x24
 8006926:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800692a:	4641      	mov	r1, r8
 800692c:	1854      	adds	r4, r2, r1
 800692e:	4649      	mov	r1, r9
 8006930:	eb43 0501 	adc.w	r5, r3, r1
 8006934:	f04f 0200 	mov.w	r2, #0
 8006938:	f04f 0300 	mov.w	r3, #0
 800693c:	00eb      	lsls	r3, r5, #3
 800693e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006942:	00e2      	lsls	r2, r4, #3
 8006944:	4614      	mov	r4, r2
 8006946:	461d      	mov	r5, r3
 8006948:	4643      	mov	r3, r8
 800694a:	18e3      	adds	r3, r4, r3
 800694c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006950:	464b      	mov	r3, r9
 8006952:	eb45 0303 	adc.w	r3, r5, r3
 8006956:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800695a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006966:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800696a:	f04f 0200 	mov.w	r2, #0
 800696e:	f04f 0300 	mov.w	r3, #0
 8006972:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006976:	4629      	mov	r1, r5
 8006978:	008b      	lsls	r3, r1, #2
 800697a:	4621      	mov	r1, r4
 800697c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006980:	4621      	mov	r1, r4
 8006982:	008a      	lsls	r2, r1, #2
 8006984:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006988:	f7f9 fc82 	bl	8000290 <__aeabi_uldivmod>
 800698c:	4602      	mov	r2, r0
 800698e:	460b      	mov	r3, r1
 8006990:	4b60      	ldr	r3, [pc, #384]	; (8006b14 <UART_SetConfig+0x4e4>)
 8006992:	fba3 2302 	umull	r2, r3, r3, r2
 8006996:	095b      	lsrs	r3, r3, #5
 8006998:	011c      	lsls	r4, r3, #4
 800699a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800699e:	2200      	movs	r2, #0
 80069a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80069a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80069a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80069ac:	4642      	mov	r2, r8
 80069ae:	464b      	mov	r3, r9
 80069b0:	1891      	adds	r1, r2, r2
 80069b2:	61b9      	str	r1, [r7, #24]
 80069b4:	415b      	adcs	r3, r3
 80069b6:	61fb      	str	r3, [r7, #28]
 80069b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80069bc:	4641      	mov	r1, r8
 80069be:	1851      	adds	r1, r2, r1
 80069c0:	6139      	str	r1, [r7, #16]
 80069c2:	4649      	mov	r1, r9
 80069c4:	414b      	adcs	r3, r1
 80069c6:	617b      	str	r3, [r7, #20]
 80069c8:	f04f 0200 	mov.w	r2, #0
 80069cc:	f04f 0300 	mov.w	r3, #0
 80069d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80069d4:	4659      	mov	r1, fp
 80069d6:	00cb      	lsls	r3, r1, #3
 80069d8:	4651      	mov	r1, sl
 80069da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069de:	4651      	mov	r1, sl
 80069e0:	00ca      	lsls	r2, r1, #3
 80069e2:	4610      	mov	r0, r2
 80069e4:	4619      	mov	r1, r3
 80069e6:	4603      	mov	r3, r0
 80069e8:	4642      	mov	r2, r8
 80069ea:	189b      	adds	r3, r3, r2
 80069ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80069f0:	464b      	mov	r3, r9
 80069f2:	460a      	mov	r2, r1
 80069f4:	eb42 0303 	adc.w	r3, r2, r3
 80069f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80069fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a06:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006a08:	f04f 0200 	mov.w	r2, #0
 8006a0c:	f04f 0300 	mov.w	r3, #0
 8006a10:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006a14:	4649      	mov	r1, r9
 8006a16:	008b      	lsls	r3, r1, #2
 8006a18:	4641      	mov	r1, r8
 8006a1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a1e:	4641      	mov	r1, r8
 8006a20:	008a      	lsls	r2, r1, #2
 8006a22:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006a26:	f7f9 fc33 	bl	8000290 <__aeabi_uldivmod>
 8006a2a:	4602      	mov	r2, r0
 8006a2c:	460b      	mov	r3, r1
 8006a2e:	4b39      	ldr	r3, [pc, #228]	; (8006b14 <UART_SetConfig+0x4e4>)
 8006a30:	fba3 1302 	umull	r1, r3, r3, r2
 8006a34:	095b      	lsrs	r3, r3, #5
 8006a36:	2164      	movs	r1, #100	; 0x64
 8006a38:	fb01 f303 	mul.w	r3, r1, r3
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	011b      	lsls	r3, r3, #4
 8006a40:	3332      	adds	r3, #50	; 0x32
 8006a42:	4a34      	ldr	r2, [pc, #208]	; (8006b14 <UART_SetConfig+0x4e4>)
 8006a44:	fba2 2303 	umull	r2, r3, r2, r3
 8006a48:	095b      	lsrs	r3, r3, #5
 8006a4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a4e:	441c      	add	r4, r3
 8006a50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a54:	2200      	movs	r2, #0
 8006a56:	673b      	str	r3, [r7, #112]	; 0x70
 8006a58:	677a      	str	r2, [r7, #116]	; 0x74
 8006a5a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006a5e:	4642      	mov	r2, r8
 8006a60:	464b      	mov	r3, r9
 8006a62:	1891      	adds	r1, r2, r2
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	415b      	adcs	r3, r3
 8006a68:	60fb      	str	r3, [r7, #12]
 8006a6a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a6e:	4641      	mov	r1, r8
 8006a70:	1851      	adds	r1, r2, r1
 8006a72:	6039      	str	r1, [r7, #0]
 8006a74:	4649      	mov	r1, r9
 8006a76:	414b      	adcs	r3, r1
 8006a78:	607b      	str	r3, [r7, #4]
 8006a7a:	f04f 0200 	mov.w	r2, #0
 8006a7e:	f04f 0300 	mov.w	r3, #0
 8006a82:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006a86:	4659      	mov	r1, fp
 8006a88:	00cb      	lsls	r3, r1, #3
 8006a8a:	4651      	mov	r1, sl
 8006a8c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a90:	4651      	mov	r1, sl
 8006a92:	00ca      	lsls	r2, r1, #3
 8006a94:	4610      	mov	r0, r2
 8006a96:	4619      	mov	r1, r3
 8006a98:	4603      	mov	r3, r0
 8006a9a:	4642      	mov	r2, r8
 8006a9c:	189b      	adds	r3, r3, r2
 8006a9e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006aa0:	464b      	mov	r3, r9
 8006aa2:	460a      	mov	r2, r1
 8006aa4:	eb42 0303 	adc.w	r3, r2, r3
 8006aa8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	663b      	str	r3, [r7, #96]	; 0x60
 8006ab4:	667a      	str	r2, [r7, #100]	; 0x64
 8006ab6:	f04f 0200 	mov.w	r2, #0
 8006aba:	f04f 0300 	mov.w	r3, #0
 8006abe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006ac2:	4649      	mov	r1, r9
 8006ac4:	008b      	lsls	r3, r1, #2
 8006ac6:	4641      	mov	r1, r8
 8006ac8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006acc:	4641      	mov	r1, r8
 8006ace:	008a      	lsls	r2, r1, #2
 8006ad0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006ad4:	f7f9 fbdc 	bl	8000290 <__aeabi_uldivmod>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	460b      	mov	r3, r1
 8006adc:	4b0d      	ldr	r3, [pc, #52]	; (8006b14 <UART_SetConfig+0x4e4>)
 8006ade:	fba3 1302 	umull	r1, r3, r3, r2
 8006ae2:	095b      	lsrs	r3, r3, #5
 8006ae4:	2164      	movs	r1, #100	; 0x64
 8006ae6:	fb01 f303 	mul.w	r3, r1, r3
 8006aea:	1ad3      	subs	r3, r2, r3
 8006aec:	011b      	lsls	r3, r3, #4
 8006aee:	3332      	adds	r3, #50	; 0x32
 8006af0:	4a08      	ldr	r2, [pc, #32]	; (8006b14 <UART_SetConfig+0x4e4>)
 8006af2:	fba2 2303 	umull	r2, r3, r2, r3
 8006af6:	095b      	lsrs	r3, r3, #5
 8006af8:	f003 020f 	and.w	r2, r3, #15
 8006afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4422      	add	r2, r4
 8006b04:	609a      	str	r2, [r3, #8]
}
 8006b06:	bf00      	nop
 8006b08:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b12:	bf00      	nop
 8006b14:	51eb851f 	.word	0x51eb851f

08006b18 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b085      	sub	sp, #20
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	4603      	mov	r3, r0
 8006b20:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006b22:	2300      	movs	r3, #0
 8006b24:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006b26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006b2a:	2b84      	cmp	r3, #132	; 0x84
 8006b2c:	d005      	beq.n	8006b3a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006b2e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	4413      	add	r3, r2
 8006b36:	3303      	adds	r3, #3
 8006b38:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3714      	adds	r7, #20
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b4e:	f3ef 8305 	mrs	r3, IPSR
 8006b52:	607b      	str	r3, [r7, #4]
  return(result);
 8006b54:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	bf14      	ite	ne
 8006b5a:	2301      	movne	r3, #1
 8006b5c:	2300      	moveq	r3, #0
 8006b5e:	b2db      	uxtb	r3, r3
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006b70:	f001 fb96 	bl	80082a0 <vTaskStartScheduler>
  
  return osOK;
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	bd80      	pop	{r7, pc}

08006b7a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006b7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b7c:	b089      	sub	sp, #36	; 0x24
 8006b7e:	af04      	add	r7, sp, #16
 8006b80:	6078      	str	r0, [r7, #4]
 8006b82:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	695b      	ldr	r3, [r3, #20]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d020      	beq.n	8006bce <osThreadCreate+0x54>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	699b      	ldr	r3, [r3, #24]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d01c      	beq.n	8006bce <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	685c      	ldr	r4, [r3, #4]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681d      	ldr	r5, [r3, #0]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	691e      	ldr	r6, [r3, #16]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f7ff ffb6 	bl	8006b18 <makeFreeRtosPriority>
 8006bac:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006bb6:	9202      	str	r2, [sp, #8]
 8006bb8:	9301      	str	r3, [sp, #4]
 8006bba:	9100      	str	r1, [sp, #0]
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	4632      	mov	r2, r6
 8006bc0:	4629      	mov	r1, r5
 8006bc2:	4620      	mov	r0, r4
 8006bc4:	f001 f9a4 	bl	8007f10 <xTaskCreateStatic>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	60fb      	str	r3, [r7, #12]
 8006bcc:	e01c      	b.n	8006c08 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	685c      	ldr	r4, [r3, #4]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006bda:	b29e      	uxth	r6, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006be2:	4618      	mov	r0, r3
 8006be4:	f7ff ff98 	bl	8006b18 <makeFreeRtosPriority>
 8006be8:	4602      	mov	r2, r0
 8006bea:	f107 030c 	add.w	r3, r7, #12
 8006bee:	9301      	str	r3, [sp, #4]
 8006bf0:	9200      	str	r2, [sp, #0]
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	4632      	mov	r2, r6
 8006bf6:	4629      	mov	r1, r5
 8006bf8:	4620      	mov	r0, r4
 8006bfa:	f001 f9e6 	bl	8007fca <xTaskCreate>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d001      	beq.n	8006c08 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006c04:	2300      	movs	r3, #0
 8006c06:	e000      	b.n	8006c0a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006c08:	68fb      	ldr	r3, [r7, #12]
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3714      	adds	r7, #20
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006c12 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006c12:	b580      	push	{r7, lr}
 8006c14:	b084      	sub	sp, #16
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d001      	beq.n	8006c28 <osDelay+0x16>
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	e000      	b.n	8006c2a <osDelay+0x18>
 8006c28:	2301      	movs	r3, #1
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f001 fb04 	bl	8008238 <vTaskDelay>
  
  return osOK;
 8006c30:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3710      	adds	r7, #16
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}

08006c3a <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8006c3a:	b580      	push	{r7, lr}
 8006c3c:	b086      	sub	sp, #24
 8006c3e:	af02      	add	r7, sp, #8
 8006c40:	6078      	str	r0, [r7, #4]
 8006c42:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d00f      	beq.n	8006c6c <osSemaphoreCreate+0x32>
    if (count == 1) {
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d10a      	bne.n	8006c68 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	2203      	movs	r2, #3
 8006c58:	9200      	str	r2, [sp, #0]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	2100      	movs	r1, #0
 8006c5e:	2001      	movs	r0, #1
 8006c60:	f000 fb56 	bl	8007310 <xQueueGenericCreateStatic>
 8006c64:	4603      	mov	r3, r0
 8006c66:	e016      	b.n	8006c96 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	e014      	b.n	8006c96 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d110      	bne.n	8006c94 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8006c72:	2203      	movs	r2, #3
 8006c74:	2100      	movs	r1, #0
 8006c76:	2001      	movs	r0, #1
 8006c78:	f000 fbc2 	bl	8007400 <xQueueGenericCreate>
 8006c7c:	60f8      	str	r0, [r7, #12]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d005      	beq.n	8006c90 <osSemaphoreCreate+0x56>
 8006c84:	2300      	movs	r3, #0
 8006c86:	2200      	movs	r2, #0
 8006c88:	2100      	movs	r1, #0
 8006c8a:	68f8      	ldr	r0, [r7, #12]
 8006c8c:	f000 fc12 	bl	80074b4 <xQueueGenericSend>
      return sema;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	e000      	b.n	8006c96 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8006c94:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3710      	adds	r7, #16
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
	...

08006ca0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006caa:	2300      	movs	r3, #0
 8006cac:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d101      	bne.n	8006cb8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8006cb4:	2380      	movs	r3, #128	; 0x80
 8006cb6:	e03a      	b.n	8006d2e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cc2:	d103      	bne.n	8006ccc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8006cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8006cc8:	60fb      	str	r3, [r7, #12]
 8006cca:	e009      	b.n	8006ce0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d006      	beq.n	8006ce0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d101      	bne.n	8006ce0 <osSemaphoreWait+0x40>
      ticks = 1;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006ce0:	f7ff ff32 	bl	8006b48 <inHandlerMode>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d017      	beq.n	8006d1a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006cea:	f107 0308 	add.w	r3, r7, #8
 8006cee:	461a      	mov	r2, r3
 8006cf0:	2100      	movs	r1, #0
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 ff64 	bl	8007bc0 <xQueueReceiveFromISR>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d001      	beq.n	8006d02 <osSemaphoreWait+0x62>
      return osErrorOS;
 8006cfe:	23ff      	movs	r3, #255	; 0xff
 8006d00:	e015      	b.n	8006d2e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d011      	beq.n	8006d2c <osSemaphoreWait+0x8c>
 8006d08:	4b0b      	ldr	r3, [pc, #44]	; (8006d38 <osSemaphoreWait+0x98>)
 8006d0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d0e:	601a      	str	r2, [r3, #0]
 8006d10:	f3bf 8f4f 	dsb	sy
 8006d14:	f3bf 8f6f 	isb	sy
 8006d18:	e008      	b.n	8006d2c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8006d1a:	68f9      	ldr	r1, [r7, #12]
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 fe43 	bl	80079a8 <xQueueSemaphoreTake>
 8006d22:	4603      	mov	r3, r0
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d001      	beq.n	8006d2c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8006d28:	23ff      	movs	r3, #255	; 0xff
 8006d2a:	e000      	b.n	8006d2e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3710      	adds	r7, #16
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	bf00      	nop
 8006d38:	e000ed04 	.word	0xe000ed04

08006d3c <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b082      	sub	sp, #8
 8006d40:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8006d42:	201c      	movs	r0, #28
 8006d44:	f002 fbd0 	bl	80094e8 <pvPortMalloc>
 8006d48:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d00a      	beq.n	8006d66 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	3304      	adds	r3, #4
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f000 f9bb 	bl	80070d6 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2200      	movs	r2, #0
 8006d64:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8006d66:	687b      	ldr	r3, [r7, #4]
	}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3708      	adds	r7, #8
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b090      	sub	sp, #64	; 0x40
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	60b9      	str	r1, [r7, #8]
 8006d7a:	607a      	str	r2, [r7, #4]
 8006d7c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8006d82:	2300      	movs	r3, #0
 8006d84:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8006d86:	2300      	movs	r3, #0
 8006d88:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d10a      	bne.n	8006da6 <xEventGroupWaitBits+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d94:	f383 8811 	msr	BASEPRI, r3
 8006d98:	f3bf 8f6f 	isb	sy
 8006d9c:	f3bf 8f4f 	dsb	sy
 8006da0:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006da2:	bf00      	nop
 8006da4:	e7fe      	b.n	8006da4 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d00a      	beq.n	8006dc6 <xEventGroupWaitBits+0x56>
	__asm volatile
 8006db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db4:	f383 8811 	msr	BASEPRI, r3
 8006db8:	f3bf 8f6f 	isb	sy
 8006dbc:	f3bf 8f4f 	dsb	sy
 8006dc0:	61fb      	str	r3, [r7, #28]
}
 8006dc2:	bf00      	nop
 8006dc4:	e7fe      	b.n	8006dc4 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d10a      	bne.n	8006de2 <xEventGroupWaitBits+0x72>
	__asm volatile
 8006dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd0:	f383 8811 	msr	BASEPRI, r3
 8006dd4:	f3bf 8f6f 	isb	sy
 8006dd8:	f3bf 8f4f 	dsb	sy
 8006ddc:	61bb      	str	r3, [r7, #24]
}
 8006dde:	bf00      	nop
 8006de0:	e7fe      	b.n	8006de0 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006de2:	f001 fef9 	bl	8008bd8 <xTaskGetSchedulerState>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d102      	bne.n	8006df2 <xEventGroupWaitBits+0x82>
 8006dec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d101      	bne.n	8006df6 <xEventGroupWaitBits+0x86>
 8006df2:	2301      	movs	r3, #1
 8006df4:	e000      	b.n	8006df8 <xEventGroupWaitBits+0x88>
 8006df6:	2300      	movs	r3, #0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d10a      	bne.n	8006e12 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8006dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e00:	f383 8811 	msr	BASEPRI, r3
 8006e04:	f3bf 8f6f 	isb	sy
 8006e08:	f3bf 8f4f 	dsb	sy
 8006e0c:	617b      	str	r3, [r7, #20]
}
 8006e0e:	bf00      	nop
 8006e10:	e7fe      	b.n	8006e10 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8006e12:	f001 faa5 	bl	8008360 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8006e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8006e1c:	683a      	ldr	r2, [r7, #0]
 8006e1e:	68b9      	ldr	r1, [r7, #8]
 8006e20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e22:	f000 f936 	bl	8007092 <prvTestWaitCondition>
 8006e26:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8006e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d00e      	beq.n	8006e4c <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8006e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e30:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8006e32:	2300      	movs	r3, #0
 8006e34:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d028      	beq.n	8006e8e <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8006e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	43db      	mvns	r3, r3
 8006e44:	401a      	ands	r2, r3
 8006e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e48:	601a      	str	r2, [r3, #0]
 8006e4a:	e020      	b.n	8006e8e <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8006e4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d104      	bne.n	8006e5c <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8006e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e54:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8006e56:	2301      	movs	r3, #1
 8006e58:	633b      	str	r3, [r7, #48]	; 0x30
 8006e5a:	e018      	b.n	8006e8e <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d003      	beq.n	8006e6a <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8006e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e68:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d003      	beq.n	8006e78 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8006e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e72:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006e76:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8006e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e7a:	1d18      	adds	r0, r3, #4
 8006e7c:	68ba      	ldr	r2, [r7, #8]
 8006e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e80:	4313      	orrs	r3, r2
 8006e82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e84:	4619      	mov	r1, r3
 8006e86:	f001 fc4d 	bl	8008724 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8006e8e:	f001 fa75 	bl	800837c <xTaskResumeAll>
 8006e92:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8006e94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d031      	beq.n	8006efe <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8006e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d107      	bne.n	8006eb0 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8006ea0:	4b19      	ldr	r3, [pc, #100]	; (8006f08 <xEventGroupWaitBits+0x198>)
 8006ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ea6:	601a      	str	r2, [r3, #0]
 8006ea8:	f3bf 8f4f 	dsb	sy
 8006eac:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8006eb0:	f002 f83a 	bl	8008f28 <uxTaskResetEventItemValue>
 8006eb4:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8006eb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d11a      	bne.n	8006ef6 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8006ec0:	f002 f9f0 	bl	80092a4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8006ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8006eca:	683a      	ldr	r2, [r7, #0]
 8006ecc:	68b9      	ldr	r1, [r7, #8]
 8006ece:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006ed0:	f000 f8df 	bl	8007092 <prvTestWaitCondition>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d009      	beq.n	8006eee <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d006      	beq.n	8006eee <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8006ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	43db      	mvns	r3, r3
 8006ee8:	401a      	ands	r2, r3
 8006eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eec:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8006ef2:	f002 fa07 	bl	8009304 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8006ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ef8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006efc:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8006efe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3740      	adds	r7, #64	; 0x40
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	e000ed04 	.word	0xe000ed04

08006f0c <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b086      	sub	sp, #24
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d10a      	bne.n	8006f36 <xEventGroupClearBits+0x2a>
	__asm volatile
 8006f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f24:	f383 8811 	msr	BASEPRI, r3
 8006f28:	f3bf 8f6f 	isb	sy
 8006f2c:	f3bf 8f4f 	dsb	sy
 8006f30:	60fb      	str	r3, [r7, #12]
}
 8006f32:	bf00      	nop
 8006f34:	e7fe      	b.n	8006f34 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d00a      	beq.n	8006f56 <xEventGroupClearBits+0x4a>
	__asm volatile
 8006f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f44:	f383 8811 	msr	BASEPRI, r3
 8006f48:	f3bf 8f6f 	isb	sy
 8006f4c:	f3bf 8f4f 	dsb	sy
 8006f50:	60bb      	str	r3, [r7, #8]
}
 8006f52:	bf00      	nop
 8006f54:	e7fe      	b.n	8006f54 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8006f56:	f002 f9a5 	bl	80092a4 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	43db      	mvns	r3, r3
 8006f68:	401a      	ands	r2, r3
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8006f6e:	f002 f9c9 	bl	8009304 <vPortExitCritical>

	return uxReturn;
 8006f72:	693b      	ldr	r3, [r7, #16]
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3718      	adds	r7, #24
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b08e      	sub	sp, #56	; 0x38
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8006f86:	2300      	movs	r3, #0
 8006f88:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d10a      	bne.n	8006fae <xEventGroupSetBits+0x32>
	__asm volatile
 8006f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f9c:	f383 8811 	msr	BASEPRI, r3
 8006fa0:	f3bf 8f6f 	isb	sy
 8006fa4:	f3bf 8f4f 	dsb	sy
 8006fa8:	613b      	str	r3, [r7, #16]
}
 8006faa:	bf00      	nop
 8006fac:	e7fe      	b.n	8006fac <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d00a      	beq.n	8006fce <xEventGroupSetBits+0x52>
	__asm volatile
 8006fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fbc:	f383 8811 	msr	BASEPRI, r3
 8006fc0:	f3bf 8f6f 	isb	sy
 8006fc4:	f3bf 8f4f 	dsb	sy
 8006fc8:	60fb      	str	r3, [r7, #12]
}
 8006fca:	bf00      	nop
 8006fcc:	e7fe      	b.n	8006fcc <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8006fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd0:	3304      	adds	r3, #4
 8006fd2:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd6:	3308      	adds	r3, #8
 8006fd8:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8006fda:	f001 f9c1 	bl	8008360 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8006fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe0:	68db      	ldr	r3, [r3, #12]
 8006fe2:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8006fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	431a      	orrs	r2, r3
 8006fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fee:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8006ff0:	e03c      	b.n	800706c <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8006ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8006ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8006ffe:	2300      	movs	r3, #0
 8007000:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8007002:	69bb      	ldr	r3, [r7, #24]
 8007004:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007008:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007010:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007018:	2b00      	cmp	r3, #0
 800701a:	d108      	bne.n	800702e <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800701c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	4013      	ands	r3, r2
 8007024:	2b00      	cmp	r3, #0
 8007026:	d00b      	beq.n	8007040 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8007028:	2301      	movs	r3, #1
 800702a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800702c:	e008      	b.n	8007040 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800702e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	4013      	ands	r3, r2
 8007036:	69ba      	ldr	r2, [r7, #24]
 8007038:	429a      	cmp	r2, r3
 800703a:	d101      	bne.n	8007040 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800703c:	2301      	movs	r3, #1
 800703e:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8007040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007042:	2b00      	cmp	r3, #0
 8007044:	d010      	beq.n	8007068 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800704c:	2b00      	cmp	r3, #0
 800704e:	d003      	beq.n	8007058 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8007050:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007052:	69bb      	ldr	r3, [r7, #24]
 8007054:	4313      	orrs	r3, r2
 8007056:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8007058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007060:	4619      	mov	r1, r3
 8007062:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007064:	f001 fbfc 	bl	8008860 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8007068:	69fb      	ldr	r3, [r7, #28]
 800706a:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800706c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800706e:	6a3b      	ldr	r3, [r7, #32]
 8007070:	429a      	cmp	r2, r3
 8007072:	d1be      	bne.n	8006ff2 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8007074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800707a:	43db      	mvns	r3, r3
 800707c:	401a      	ands	r2, r3
 800707e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007080:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8007082:	f001 f97b 	bl	800837c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8007086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007088:	681b      	ldr	r3, [r3, #0]
}
 800708a:	4618      	mov	r0, r3
 800708c:	3738      	adds	r7, #56	; 0x38
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}

08007092 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8007092:	b480      	push	{r7}
 8007094:	b087      	sub	sp, #28
 8007096:	af00      	add	r7, sp, #0
 8007098:	60f8      	str	r0, [r7, #12]
 800709a:	60b9      	str	r1, [r7, #8]
 800709c:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800709e:	2300      	movs	r3, #0
 80070a0:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d107      	bne.n	80070b8 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	4013      	ands	r3, r2
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00a      	beq.n	80070c8 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80070b2:	2301      	movs	r3, #1
 80070b4:	617b      	str	r3, [r7, #20]
 80070b6:	e007      	b.n	80070c8 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80070b8:	68fa      	ldr	r2, [r7, #12]
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	4013      	ands	r3, r2
 80070be:	68ba      	ldr	r2, [r7, #8]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d101      	bne.n	80070c8 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80070c4:	2301      	movs	r3, #1
 80070c6:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80070c8:	697b      	ldr	r3, [r7, #20]
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	371c      	adds	r7, #28
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr

080070d6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80070d6:	b480      	push	{r7}
 80070d8:	b083      	sub	sp, #12
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f103 0208 	add.w	r2, r3, #8
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f04f 32ff 	mov.w	r2, #4294967295
 80070ee:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f103 0208 	add.w	r2, r3, #8
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f103 0208 	add.w	r2, r3, #8
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800710a:	bf00      	nop
 800710c:	370c      	adds	r7, #12
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr

08007116 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007116:	b480      	push	{r7}
 8007118:	b083      	sub	sp, #12
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007124:	bf00      	nop
 8007126:	370c      	adds	r7, #12
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007130:	b480      	push	{r7}
 8007132:	b085      	sub	sp, #20
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	68fa      	ldr	r2, [r7, #12]
 8007144:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	689a      	ldr	r2, [r3, #8]
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	683a      	ldr	r2, [r7, #0]
 8007154:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	683a      	ldr	r2, [r7, #0]
 800715a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	1c5a      	adds	r2, r3, #1
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	601a      	str	r2, [r3, #0]
}
 800716c:	bf00      	nop
 800716e:	3714      	adds	r7, #20
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr

08007178 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007178:	b480      	push	{r7}
 800717a:	b085      	sub	sp, #20
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800718e:	d103      	bne.n	8007198 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	691b      	ldr	r3, [r3, #16]
 8007194:	60fb      	str	r3, [r7, #12]
 8007196:	e00c      	b.n	80071b2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	3308      	adds	r3, #8
 800719c:	60fb      	str	r3, [r7, #12]
 800719e:	e002      	b.n	80071a6 <vListInsert+0x2e>
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	60fb      	str	r3, [r7, #12]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	68ba      	ldr	r2, [r7, #8]
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d2f6      	bcs.n	80071a0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	685a      	ldr	r2, [r3, #4]
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	683a      	ldr	r2, [r7, #0]
 80071c0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	68fa      	ldr	r2, [r7, #12]
 80071c6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	683a      	ldr	r2, [r7, #0]
 80071cc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	1c5a      	adds	r2, r3, #1
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	601a      	str	r2, [r3, #0]
}
 80071de:	bf00      	nop
 80071e0:	3714      	adds	r7, #20
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr

080071ea <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80071ea:	b480      	push	{r7}
 80071ec:	b085      	sub	sp, #20
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	691b      	ldr	r3, [r3, #16]
 80071f6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	6892      	ldr	r2, [r2, #8]
 8007200:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	6852      	ldr	r2, [r2, #4]
 800720a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	429a      	cmp	r2, r3
 8007214:	d103      	bne.n	800721e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	689a      	ldr	r2, [r3, #8]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	1e5a      	subs	r2, r3, #1
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
}
 8007232:	4618      	mov	r0, r3
 8007234:	3714      	adds	r7, #20
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr
	...

08007240 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d10a      	bne.n	800726a <xQueueGenericReset+0x2a>
	__asm volatile
 8007254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007258:	f383 8811 	msr	BASEPRI, r3
 800725c:	f3bf 8f6f 	isb	sy
 8007260:	f3bf 8f4f 	dsb	sy
 8007264:	60bb      	str	r3, [r7, #8]
}
 8007266:	bf00      	nop
 8007268:	e7fe      	b.n	8007268 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800726a:	f002 f81b 	bl	80092a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007276:	68f9      	ldr	r1, [r7, #12]
 8007278:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800727a:	fb01 f303 	mul.w	r3, r1, r3
 800727e:	441a      	add	r2, r3
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2200      	movs	r2, #0
 8007288:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800729a:	3b01      	subs	r3, #1
 800729c:	68f9      	ldr	r1, [r7, #12]
 800729e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80072a0:	fb01 f303 	mul.w	r3, r1, r3
 80072a4:	441a      	add	r2, r3
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	22ff      	movs	r2, #255	; 0xff
 80072ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	22ff      	movs	r2, #255	; 0xff
 80072b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d114      	bne.n	80072ea <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	691b      	ldr	r3, [r3, #16]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d01a      	beq.n	80072fe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	3310      	adds	r3, #16
 80072cc:	4618      	mov	r0, r3
 80072ce:	f001 fa65 	bl	800879c <xTaskRemoveFromEventList>
 80072d2:	4603      	mov	r3, r0
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d012      	beq.n	80072fe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80072d8:	4b0c      	ldr	r3, [pc, #48]	; (800730c <xQueueGenericReset+0xcc>)
 80072da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072de:	601a      	str	r2, [r3, #0]
 80072e0:	f3bf 8f4f 	dsb	sy
 80072e4:	f3bf 8f6f 	isb	sy
 80072e8:	e009      	b.n	80072fe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	3310      	adds	r3, #16
 80072ee:	4618      	mov	r0, r3
 80072f0:	f7ff fef1 	bl	80070d6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	3324      	adds	r3, #36	; 0x24
 80072f8:	4618      	mov	r0, r3
 80072fa:	f7ff feec 	bl	80070d6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80072fe:	f002 f801 	bl	8009304 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007302:	2301      	movs	r3, #1
}
 8007304:	4618      	mov	r0, r3
 8007306:	3710      	adds	r7, #16
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}
 800730c:	e000ed04 	.word	0xe000ed04

08007310 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007310:	b580      	push	{r7, lr}
 8007312:	b08e      	sub	sp, #56	; 0x38
 8007314:	af02      	add	r7, sp, #8
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	607a      	str	r2, [r7, #4]
 800731c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d10a      	bne.n	800733a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007328:	f383 8811 	msr	BASEPRI, r3
 800732c:	f3bf 8f6f 	isb	sy
 8007330:	f3bf 8f4f 	dsb	sy
 8007334:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007336:	bf00      	nop
 8007338:	e7fe      	b.n	8007338 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d10a      	bne.n	8007356 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007344:	f383 8811 	msr	BASEPRI, r3
 8007348:	f3bf 8f6f 	isb	sy
 800734c:	f3bf 8f4f 	dsb	sy
 8007350:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007352:	bf00      	nop
 8007354:	e7fe      	b.n	8007354 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d002      	beq.n	8007362 <xQueueGenericCreateStatic+0x52>
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d001      	beq.n	8007366 <xQueueGenericCreateStatic+0x56>
 8007362:	2301      	movs	r3, #1
 8007364:	e000      	b.n	8007368 <xQueueGenericCreateStatic+0x58>
 8007366:	2300      	movs	r3, #0
 8007368:	2b00      	cmp	r3, #0
 800736a:	d10a      	bne.n	8007382 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800736c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007370:	f383 8811 	msr	BASEPRI, r3
 8007374:	f3bf 8f6f 	isb	sy
 8007378:	f3bf 8f4f 	dsb	sy
 800737c:	623b      	str	r3, [r7, #32]
}
 800737e:	bf00      	nop
 8007380:	e7fe      	b.n	8007380 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d102      	bne.n	800738e <xQueueGenericCreateStatic+0x7e>
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d101      	bne.n	8007392 <xQueueGenericCreateStatic+0x82>
 800738e:	2301      	movs	r3, #1
 8007390:	e000      	b.n	8007394 <xQueueGenericCreateStatic+0x84>
 8007392:	2300      	movs	r3, #0
 8007394:	2b00      	cmp	r3, #0
 8007396:	d10a      	bne.n	80073ae <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739c:	f383 8811 	msr	BASEPRI, r3
 80073a0:	f3bf 8f6f 	isb	sy
 80073a4:	f3bf 8f4f 	dsb	sy
 80073a8:	61fb      	str	r3, [r7, #28]
}
 80073aa:	bf00      	nop
 80073ac:	e7fe      	b.n	80073ac <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80073ae:	2348      	movs	r3, #72	; 0x48
 80073b0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	2b48      	cmp	r3, #72	; 0x48
 80073b6:	d00a      	beq.n	80073ce <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80073b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073bc:	f383 8811 	msr	BASEPRI, r3
 80073c0:	f3bf 8f6f 	isb	sy
 80073c4:	f3bf 8f4f 	dsb	sy
 80073c8:	61bb      	str	r3, [r7, #24]
}
 80073ca:	bf00      	nop
 80073cc:	e7fe      	b.n	80073cc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80073ce:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80073d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d00d      	beq.n	80073f6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80073da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073dc:	2201      	movs	r2, #1
 80073de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80073e2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80073e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e8:	9300      	str	r3, [sp, #0]
 80073ea:	4613      	mov	r3, r2
 80073ec:	687a      	ldr	r2, [r7, #4]
 80073ee:	68b9      	ldr	r1, [r7, #8]
 80073f0:	68f8      	ldr	r0, [r7, #12]
 80073f2:	f000 f83f 	bl	8007474 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80073f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3730      	adds	r7, #48	; 0x30
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007400:	b580      	push	{r7, lr}
 8007402:	b08a      	sub	sp, #40	; 0x28
 8007404:	af02      	add	r7, sp, #8
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	60b9      	str	r1, [r7, #8]
 800740a:	4613      	mov	r3, r2
 800740c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d10a      	bne.n	800742a <xQueueGenericCreate+0x2a>
	__asm volatile
 8007414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007418:	f383 8811 	msr	BASEPRI, r3
 800741c:	f3bf 8f6f 	isb	sy
 8007420:	f3bf 8f4f 	dsb	sy
 8007424:	613b      	str	r3, [r7, #16]
}
 8007426:	bf00      	nop
 8007428:	e7fe      	b.n	8007428 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	68ba      	ldr	r2, [r7, #8]
 800742e:	fb02 f303 	mul.w	r3, r2, r3
 8007432:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007434:	69fb      	ldr	r3, [r7, #28]
 8007436:	3348      	adds	r3, #72	; 0x48
 8007438:	4618      	mov	r0, r3
 800743a:	f002 f855 	bl	80094e8 <pvPortMalloc>
 800743e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007440:	69bb      	ldr	r3, [r7, #24]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d011      	beq.n	800746a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	3348      	adds	r3, #72	; 0x48
 800744e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007450:	69bb      	ldr	r3, [r7, #24]
 8007452:	2200      	movs	r2, #0
 8007454:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007458:	79fa      	ldrb	r2, [r7, #7]
 800745a:	69bb      	ldr	r3, [r7, #24]
 800745c:	9300      	str	r3, [sp, #0]
 800745e:	4613      	mov	r3, r2
 8007460:	697a      	ldr	r2, [r7, #20]
 8007462:	68b9      	ldr	r1, [r7, #8]
 8007464:	68f8      	ldr	r0, [r7, #12]
 8007466:	f000 f805 	bl	8007474 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800746a:	69bb      	ldr	r3, [r7, #24]
	}
 800746c:	4618      	mov	r0, r3
 800746e:	3720      	adds	r7, #32
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}

08007474 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	60b9      	str	r1, [r7, #8]
 800747e:	607a      	str	r2, [r7, #4]
 8007480:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d103      	bne.n	8007490 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	69ba      	ldr	r2, [r7, #24]
 800748c:	601a      	str	r2, [r3, #0]
 800748e:	e002      	b.n	8007496 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007490:	69bb      	ldr	r3, [r7, #24]
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007496:	69bb      	ldr	r3, [r7, #24]
 8007498:	68fa      	ldr	r2, [r7, #12]
 800749a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800749c:	69bb      	ldr	r3, [r7, #24]
 800749e:	68ba      	ldr	r2, [r7, #8]
 80074a0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80074a2:	2101      	movs	r1, #1
 80074a4:	69b8      	ldr	r0, [r7, #24]
 80074a6:	f7ff fecb 	bl	8007240 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80074aa:	bf00      	nop
 80074ac:	3710      	adds	r7, #16
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
	...

080074b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b08e      	sub	sp, #56	; 0x38
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	60b9      	str	r1, [r7, #8]
 80074be:	607a      	str	r2, [r7, #4]
 80074c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80074c2:	2300      	movs	r3, #0
 80074c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80074ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d10a      	bne.n	80074e6 <xQueueGenericSend+0x32>
	__asm volatile
 80074d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d4:	f383 8811 	msr	BASEPRI, r3
 80074d8:	f3bf 8f6f 	isb	sy
 80074dc:	f3bf 8f4f 	dsb	sy
 80074e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80074e2:	bf00      	nop
 80074e4:	e7fe      	b.n	80074e4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d103      	bne.n	80074f4 <xQueueGenericSend+0x40>
 80074ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d101      	bne.n	80074f8 <xQueueGenericSend+0x44>
 80074f4:	2301      	movs	r3, #1
 80074f6:	e000      	b.n	80074fa <xQueueGenericSend+0x46>
 80074f8:	2300      	movs	r3, #0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d10a      	bne.n	8007514 <xQueueGenericSend+0x60>
	__asm volatile
 80074fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007502:	f383 8811 	msr	BASEPRI, r3
 8007506:	f3bf 8f6f 	isb	sy
 800750a:	f3bf 8f4f 	dsb	sy
 800750e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007510:	bf00      	nop
 8007512:	e7fe      	b.n	8007512 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	2b02      	cmp	r3, #2
 8007518:	d103      	bne.n	8007522 <xQueueGenericSend+0x6e>
 800751a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800751e:	2b01      	cmp	r3, #1
 8007520:	d101      	bne.n	8007526 <xQueueGenericSend+0x72>
 8007522:	2301      	movs	r3, #1
 8007524:	e000      	b.n	8007528 <xQueueGenericSend+0x74>
 8007526:	2300      	movs	r3, #0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d10a      	bne.n	8007542 <xQueueGenericSend+0x8e>
	__asm volatile
 800752c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007530:	f383 8811 	msr	BASEPRI, r3
 8007534:	f3bf 8f6f 	isb	sy
 8007538:	f3bf 8f4f 	dsb	sy
 800753c:	623b      	str	r3, [r7, #32]
}
 800753e:	bf00      	nop
 8007540:	e7fe      	b.n	8007540 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007542:	f001 fb49 	bl	8008bd8 <xTaskGetSchedulerState>
 8007546:	4603      	mov	r3, r0
 8007548:	2b00      	cmp	r3, #0
 800754a:	d102      	bne.n	8007552 <xQueueGenericSend+0x9e>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d101      	bne.n	8007556 <xQueueGenericSend+0xa2>
 8007552:	2301      	movs	r3, #1
 8007554:	e000      	b.n	8007558 <xQueueGenericSend+0xa4>
 8007556:	2300      	movs	r3, #0
 8007558:	2b00      	cmp	r3, #0
 800755a:	d10a      	bne.n	8007572 <xQueueGenericSend+0xbe>
	__asm volatile
 800755c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007560:	f383 8811 	msr	BASEPRI, r3
 8007564:	f3bf 8f6f 	isb	sy
 8007568:	f3bf 8f4f 	dsb	sy
 800756c:	61fb      	str	r3, [r7, #28]
}
 800756e:	bf00      	nop
 8007570:	e7fe      	b.n	8007570 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007572:	f001 fe97 	bl	80092a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007578:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800757a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800757e:	429a      	cmp	r2, r3
 8007580:	d302      	bcc.n	8007588 <xQueueGenericSend+0xd4>
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	2b02      	cmp	r3, #2
 8007586:	d129      	bne.n	80075dc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007588:	683a      	ldr	r2, [r7, #0]
 800758a:	68b9      	ldr	r1, [r7, #8]
 800758c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800758e:	f000 fbaf 	bl	8007cf0 <prvCopyDataToQueue>
 8007592:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007598:	2b00      	cmp	r3, #0
 800759a:	d010      	beq.n	80075be <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800759c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759e:	3324      	adds	r3, #36	; 0x24
 80075a0:	4618      	mov	r0, r3
 80075a2:	f001 f8fb 	bl	800879c <xTaskRemoveFromEventList>
 80075a6:	4603      	mov	r3, r0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d013      	beq.n	80075d4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80075ac:	4b3f      	ldr	r3, [pc, #252]	; (80076ac <xQueueGenericSend+0x1f8>)
 80075ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075b2:	601a      	str	r2, [r3, #0]
 80075b4:	f3bf 8f4f 	dsb	sy
 80075b8:	f3bf 8f6f 	isb	sy
 80075bc:	e00a      	b.n	80075d4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80075be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d007      	beq.n	80075d4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80075c4:	4b39      	ldr	r3, [pc, #228]	; (80076ac <xQueueGenericSend+0x1f8>)
 80075c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075ca:	601a      	str	r2, [r3, #0]
 80075cc:	f3bf 8f4f 	dsb	sy
 80075d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80075d4:	f001 fe96 	bl	8009304 <vPortExitCritical>
				return pdPASS;
 80075d8:	2301      	movs	r3, #1
 80075da:	e063      	b.n	80076a4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d103      	bne.n	80075ea <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80075e2:	f001 fe8f 	bl	8009304 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80075e6:	2300      	movs	r3, #0
 80075e8:	e05c      	b.n	80076a4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80075ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d106      	bne.n	80075fe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80075f0:	f107 0314 	add.w	r3, r7, #20
 80075f4:	4618      	mov	r0, r3
 80075f6:	f001 f995 	bl	8008924 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80075fa:	2301      	movs	r3, #1
 80075fc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80075fe:	f001 fe81 	bl	8009304 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007602:	f000 fead 	bl	8008360 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007606:	f001 fe4d 	bl	80092a4 <vPortEnterCritical>
 800760a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800760c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007610:	b25b      	sxtb	r3, r3
 8007612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007616:	d103      	bne.n	8007620 <xQueueGenericSend+0x16c>
 8007618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800761a:	2200      	movs	r2, #0
 800761c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007622:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007626:	b25b      	sxtb	r3, r3
 8007628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800762c:	d103      	bne.n	8007636 <xQueueGenericSend+0x182>
 800762e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007630:	2200      	movs	r2, #0
 8007632:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007636:	f001 fe65 	bl	8009304 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800763a:	1d3a      	adds	r2, r7, #4
 800763c:	f107 0314 	add.w	r3, r7, #20
 8007640:	4611      	mov	r1, r2
 8007642:	4618      	mov	r0, r3
 8007644:	f001 f984 	bl	8008950 <xTaskCheckForTimeOut>
 8007648:	4603      	mov	r3, r0
 800764a:	2b00      	cmp	r3, #0
 800764c:	d124      	bne.n	8007698 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800764e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007650:	f000 fc46 	bl	8007ee0 <prvIsQueueFull>
 8007654:	4603      	mov	r3, r0
 8007656:	2b00      	cmp	r3, #0
 8007658:	d018      	beq.n	800768c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800765a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800765c:	3310      	adds	r3, #16
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	4611      	mov	r1, r2
 8007662:	4618      	mov	r0, r3
 8007664:	f001 f83a 	bl	80086dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007668:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800766a:	f000 fbd1 	bl	8007e10 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800766e:	f000 fe85 	bl	800837c <xTaskResumeAll>
 8007672:	4603      	mov	r3, r0
 8007674:	2b00      	cmp	r3, #0
 8007676:	f47f af7c 	bne.w	8007572 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800767a:	4b0c      	ldr	r3, [pc, #48]	; (80076ac <xQueueGenericSend+0x1f8>)
 800767c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007680:	601a      	str	r2, [r3, #0]
 8007682:	f3bf 8f4f 	dsb	sy
 8007686:	f3bf 8f6f 	isb	sy
 800768a:	e772      	b.n	8007572 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800768c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800768e:	f000 fbbf 	bl	8007e10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007692:	f000 fe73 	bl	800837c <xTaskResumeAll>
 8007696:	e76c      	b.n	8007572 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007698:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800769a:	f000 fbb9 	bl	8007e10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800769e:	f000 fe6d 	bl	800837c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80076a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3738      	adds	r7, #56	; 0x38
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	e000ed04 	.word	0xe000ed04

080076b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b090      	sub	sp, #64	; 0x40
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	60b9      	str	r1, [r7, #8]
 80076ba:	607a      	str	r2, [r7, #4]
 80076bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80076c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d10a      	bne.n	80076de <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80076c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076cc:	f383 8811 	msr	BASEPRI, r3
 80076d0:	f3bf 8f6f 	isb	sy
 80076d4:	f3bf 8f4f 	dsb	sy
 80076d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80076da:	bf00      	nop
 80076dc:	e7fe      	b.n	80076dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d103      	bne.n	80076ec <xQueueGenericSendFromISR+0x3c>
 80076e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d101      	bne.n	80076f0 <xQueueGenericSendFromISR+0x40>
 80076ec:	2301      	movs	r3, #1
 80076ee:	e000      	b.n	80076f2 <xQueueGenericSendFromISR+0x42>
 80076f0:	2300      	movs	r3, #0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d10a      	bne.n	800770c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80076f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076fa:	f383 8811 	msr	BASEPRI, r3
 80076fe:	f3bf 8f6f 	isb	sy
 8007702:	f3bf 8f4f 	dsb	sy
 8007706:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007708:	bf00      	nop
 800770a:	e7fe      	b.n	800770a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	2b02      	cmp	r3, #2
 8007710:	d103      	bne.n	800771a <xQueueGenericSendFromISR+0x6a>
 8007712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007716:	2b01      	cmp	r3, #1
 8007718:	d101      	bne.n	800771e <xQueueGenericSendFromISR+0x6e>
 800771a:	2301      	movs	r3, #1
 800771c:	e000      	b.n	8007720 <xQueueGenericSendFromISR+0x70>
 800771e:	2300      	movs	r3, #0
 8007720:	2b00      	cmp	r3, #0
 8007722:	d10a      	bne.n	800773a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007728:	f383 8811 	msr	BASEPRI, r3
 800772c:	f3bf 8f6f 	isb	sy
 8007730:	f3bf 8f4f 	dsb	sy
 8007734:	623b      	str	r3, [r7, #32]
}
 8007736:	bf00      	nop
 8007738:	e7fe      	b.n	8007738 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800773a:	f001 fe95 	bl	8009468 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800773e:	f3ef 8211 	mrs	r2, BASEPRI
 8007742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007746:	f383 8811 	msr	BASEPRI, r3
 800774a:	f3bf 8f6f 	isb	sy
 800774e:	f3bf 8f4f 	dsb	sy
 8007752:	61fa      	str	r2, [r7, #28]
 8007754:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007756:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007758:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800775a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800775c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800775e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007762:	429a      	cmp	r2, r3
 8007764:	d302      	bcc.n	800776c <xQueueGenericSendFromISR+0xbc>
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	2b02      	cmp	r3, #2
 800776a:	d12f      	bne.n	80077cc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800776c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800776e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007772:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800777a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800777c:	683a      	ldr	r2, [r7, #0]
 800777e:	68b9      	ldr	r1, [r7, #8]
 8007780:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007782:	f000 fab5 	bl	8007cf0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007786:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800778a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800778e:	d112      	bne.n	80077b6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007794:	2b00      	cmp	r3, #0
 8007796:	d016      	beq.n	80077c6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800779a:	3324      	adds	r3, #36	; 0x24
 800779c:	4618      	mov	r0, r3
 800779e:	f000 fffd 	bl	800879c <xTaskRemoveFromEventList>
 80077a2:	4603      	mov	r3, r0
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d00e      	beq.n	80077c6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d00b      	beq.n	80077c6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2201      	movs	r2, #1
 80077b2:	601a      	str	r2, [r3, #0]
 80077b4:	e007      	b.n	80077c6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80077b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80077ba:	3301      	adds	r3, #1
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	b25a      	sxtb	r2, r3
 80077c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80077c6:	2301      	movs	r3, #1
 80077c8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80077ca:	e001      	b.n	80077d0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80077cc:	2300      	movs	r3, #0
 80077ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077d2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80077da:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80077dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3740      	adds	r7, #64	; 0x40
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
	...

080077e8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b08c      	sub	sp, #48	; 0x30
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	60f8      	str	r0, [r7, #12]
 80077f0:	60b9      	str	r1, [r7, #8]
 80077f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80077f4:	2300      	movs	r3, #0
 80077f6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80077fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d10a      	bne.n	8007818 <xQueueReceive+0x30>
	__asm volatile
 8007802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007806:	f383 8811 	msr	BASEPRI, r3
 800780a:	f3bf 8f6f 	isb	sy
 800780e:	f3bf 8f4f 	dsb	sy
 8007812:	623b      	str	r3, [r7, #32]
}
 8007814:	bf00      	nop
 8007816:	e7fe      	b.n	8007816 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d103      	bne.n	8007826 <xQueueReceive+0x3e>
 800781e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007822:	2b00      	cmp	r3, #0
 8007824:	d101      	bne.n	800782a <xQueueReceive+0x42>
 8007826:	2301      	movs	r3, #1
 8007828:	e000      	b.n	800782c <xQueueReceive+0x44>
 800782a:	2300      	movs	r3, #0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d10a      	bne.n	8007846 <xQueueReceive+0x5e>
	__asm volatile
 8007830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007834:	f383 8811 	msr	BASEPRI, r3
 8007838:	f3bf 8f6f 	isb	sy
 800783c:	f3bf 8f4f 	dsb	sy
 8007840:	61fb      	str	r3, [r7, #28]
}
 8007842:	bf00      	nop
 8007844:	e7fe      	b.n	8007844 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007846:	f001 f9c7 	bl	8008bd8 <xTaskGetSchedulerState>
 800784a:	4603      	mov	r3, r0
 800784c:	2b00      	cmp	r3, #0
 800784e:	d102      	bne.n	8007856 <xQueueReceive+0x6e>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d101      	bne.n	800785a <xQueueReceive+0x72>
 8007856:	2301      	movs	r3, #1
 8007858:	e000      	b.n	800785c <xQueueReceive+0x74>
 800785a:	2300      	movs	r3, #0
 800785c:	2b00      	cmp	r3, #0
 800785e:	d10a      	bne.n	8007876 <xQueueReceive+0x8e>
	__asm volatile
 8007860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007864:	f383 8811 	msr	BASEPRI, r3
 8007868:	f3bf 8f6f 	isb	sy
 800786c:	f3bf 8f4f 	dsb	sy
 8007870:	61bb      	str	r3, [r7, #24]
}
 8007872:	bf00      	nop
 8007874:	e7fe      	b.n	8007874 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007876:	f001 fd15 	bl	80092a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800787a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800787c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800787e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007882:	2b00      	cmp	r3, #0
 8007884:	d01f      	beq.n	80078c6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007886:	68b9      	ldr	r1, [r7, #8]
 8007888:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800788a:	f000 fa9b 	bl	8007dc4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800788e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007890:	1e5a      	subs	r2, r3, #1
 8007892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007894:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007898:	691b      	ldr	r3, [r3, #16]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d00f      	beq.n	80078be <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800789e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a0:	3310      	adds	r3, #16
 80078a2:	4618      	mov	r0, r3
 80078a4:	f000 ff7a 	bl	800879c <xTaskRemoveFromEventList>
 80078a8:	4603      	mov	r3, r0
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d007      	beq.n	80078be <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80078ae:	4b3d      	ldr	r3, [pc, #244]	; (80079a4 <xQueueReceive+0x1bc>)
 80078b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078b4:	601a      	str	r2, [r3, #0]
 80078b6:	f3bf 8f4f 	dsb	sy
 80078ba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80078be:	f001 fd21 	bl	8009304 <vPortExitCritical>
				return pdPASS;
 80078c2:	2301      	movs	r3, #1
 80078c4:	e069      	b.n	800799a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d103      	bne.n	80078d4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80078cc:	f001 fd1a 	bl	8009304 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80078d0:	2300      	movs	r3, #0
 80078d2:	e062      	b.n	800799a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80078d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d106      	bne.n	80078e8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80078da:	f107 0310 	add.w	r3, r7, #16
 80078de:	4618      	mov	r0, r3
 80078e0:	f001 f820 	bl	8008924 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80078e4:	2301      	movs	r3, #1
 80078e6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80078e8:	f001 fd0c 	bl	8009304 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80078ec:	f000 fd38 	bl	8008360 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80078f0:	f001 fcd8 	bl	80092a4 <vPortEnterCritical>
 80078f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078fa:	b25b      	sxtb	r3, r3
 80078fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007900:	d103      	bne.n	800790a <xQueueReceive+0x122>
 8007902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007904:	2200      	movs	r2, #0
 8007906:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800790a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007910:	b25b      	sxtb	r3, r3
 8007912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007916:	d103      	bne.n	8007920 <xQueueReceive+0x138>
 8007918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800791a:	2200      	movs	r2, #0
 800791c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007920:	f001 fcf0 	bl	8009304 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007924:	1d3a      	adds	r2, r7, #4
 8007926:	f107 0310 	add.w	r3, r7, #16
 800792a:	4611      	mov	r1, r2
 800792c:	4618      	mov	r0, r3
 800792e:	f001 f80f 	bl	8008950 <xTaskCheckForTimeOut>
 8007932:	4603      	mov	r3, r0
 8007934:	2b00      	cmp	r3, #0
 8007936:	d123      	bne.n	8007980 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007938:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800793a:	f000 fabb 	bl	8007eb4 <prvIsQueueEmpty>
 800793e:	4603      	mov	r3, r0
 8007940:	2b00      	cmp	r3, #0
 8007942:	d017      	beq.n	8007974 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007946:	3324      	adds	r3, #36	; 0x24
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	4611      	mov	r1, r2
 800794c:	4618      	mov	r0, r3
 800794e:	f000 fec5 	bl	80086dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007952:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007954:	f000 fa5c 	bl	8007e10 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007958:	f000 fd10 	bl	800837c <xTaskResumeAll>
 800795c:	4603      	mov	r3, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d189      	bne.n	8007876 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007962:	4b10      	ldr	r3, [pc, #64]	; (80079a4 <xQueueReceive+0x1bc>)
 8007964:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007968:	601a      	str	r2, [r3, #0]
 800796a:	f3bf 8f4f 	dsb	sy
 800796e:	f3bf 8f6f 	isb	sy
 8007972:	e780      	b.n	8007876 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007974:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007976:	f000 fa4b 	bl	8007e10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800797a:	f000 fcff 	bl	800837c <xTaskResumeAll>
 800797e:	e77a      	b.n	8007876 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007980:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007982:	f000 fa45 	bl	8007e10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007986:	f000 fcf9 	bl	800837c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800798a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800798c:	f000 fa92 	bl	8007eb4 <prvIsQueueEmpty>
 8007990:	4603      	mov	r3, r0
 8007992:	2b00      	cmp	r3, #0
 8007994:	f43f af6f 	beq.w	8007876 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007998:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800799a:	4618      	mov	r0, r3
 800799c:	3730      	adds	r7, #48	; 0x30
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
 80079a2:	bf00      	nop
 80079a4:	e000ed04 	.word	0xe000ed04

080079a8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b08e      	sub	sp, #56	; 0x38
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80079b2:	2300      	movs	r3, #0
 80079b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80079ba:	2300      	movs	r3, #0
 80079bc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80079be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d10a      	bne.n	80079da <xQueueSemaphoreTake+0x32>
	__asm volatile
 80079c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c8:	f383 8811 	msr	BASEPRI, r3
 80079cc:	f3bf 8f6f 	isb	sy
 80079d0:	f3bf 8f4f 	dsb	sy
 80079d4:	623b      	str	r3, [r7, #32]
}
 80079d6:	bf00      	nop
 80079d8:	e7fe      	b.n	80079d8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80079da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d00a      	beq.n	80079f8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80079e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e6:	f383 8811 	msr	BASEPRI, r3
 80079ea:	f3bf 8f6f 	isb	sy
 80079ee:	f3bf 8f4f 	dsb	sy
 80079f2:	61fb      	str	r3, [r7, #28]
}
 80079f4:	bf00      	nop
 80079f6:	e7fe      	b.n	80079f6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80079f8:	f001 f8ee 	bl	8008bd8 <xTaskGetSchedulerState>
 80079fc:	4603      	mov	r3, r0
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d102      	bne.n	8007a08 <xQueueSemaphoreTake+0x60>
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d101      	bne.n	8007a0c <xQueueSemaphoreTake+0x64>
 8007a08:	2301      	movs	r3, #1
 8007a0a:	e000      	b.n	8007a0e <xQueueSemaphoreTake+0x66>
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d10a      	bne.n	8007a28 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8007a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a16:	f383 8811 	msr	BASEPRI, r3
 8007a1a:	f3bf 8f6f 	isb	sy
 8007a1e:	f3bf 8f4f 	dsb	sy
 8007a22:	61bb      	str	r3, [r7, #24]
}
 8007a24:	bf00      	nop
 8007a26:	e7fe      	b.n	8007a26 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007a28:	f001 fc3c 	bl	80092a4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a30:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d024      	beq.n	8007a82 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a3a:	1e5a      	subs	r2, r3, #1
 8007a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a3e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d104      	bne.n	8007a52 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007a48:	f001 fa86 	bl	8008f58 <pvTaskIncrementMutexHeldCount>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a50:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a54:	691b      	ldr	r3, [r3, #16]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d00f      	beq.n	8007a7a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a5c:	3310      	adds	r3, #16
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f000 fe9c 	bl	800879c <xTaskRemoveFromEventList>
 8007a64:	4603      	mov	r3, r0
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d007      	beq.n	8007a7a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007a6a:	4b54      	ldr	r3, [pc, #336]	; (8007bbc <xQueueSemaphoreTake+0x214>)
 8007a6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a70:	601a      	str	r2, [r3, #0]
 8007a72:	f3bf 8f4f 	dsb	sy
 8007a76:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007a7a:	f001 fc43 	bl	8009304 <vPortExitCritical>
				return pdPASS;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	e097      	b.n	8007bb2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d111      	bne.n	8007aac <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00a      	beq.n	8007aa4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a92:	f383 8811 	msr	BASEPRI, r3
 8007a96:	f3bf 8f6f 	isb	sy
 8007a9a:	f3bf 8f4f 	dsb	sy
 8007a9e:	617b      	str	r3, [r7, #20]
}
 8007aa0:	bf00      	nop
 8007aa2:	e7fe      	b.n	8007aa2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007aa4:	f001 fc2e 	bl	8009304 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	e082      	b.n	8007bb2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d106      	bne.n	8007ac0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ab2:	f107 030c 	add.w	r3, r7, #12
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f000 ff34 	bl	8008924 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007abc:	2301      	movs	r3, #1
 8007abe:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007ac0:	f001 fc20 	bl	8009304 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007ac4:	f000 fc4c 	bl	8008360 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ac8:	f001 fbec 	bl	80092a4 <vPortEnterCritical>
 8007acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ace:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ad2:	b25b      	sxtb	r3, r3
 8007ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ad8:	d103      	bne.n	8007ae2 <xQueueSemaphoreTake+0x13a>
 8007ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007adc:	2200      	movs	r2, #0
 8007ade:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ae8:	b25b      	sxtb	r3, r3
 8007aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aee:	d103      	bne.n	8007af8 <xQueueSemaphoreTake+0x150>
 8007af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af2:	2200      	movs	r2, #0
 8007af4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007af8:	f001 fc04 	bl	8009304 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007afc:	463a      	mov	r2, r7
 8007afe:	f107 030c 	add.w	r3, r7, #12
 8007b02:	4611      	mov	r1, r2
 8007b04:	4618      	mov	r0, r3
 8007b06:	f000 ff23 	bl	8008950 <xTaskCheckForTimeOut>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d132      	bne.n	8007b76 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b12:	f000 f9cf 	bl	8007eb4 <prvIsQueueEmpty>
 8007b16:	4603      	mov	r3, r0
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d026      	beq.n	8007b6a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d109      	bne.n	8007b38 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007b24:	f001 fbbe 	bl	80092a4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f001 f871 	bl	8008c14 <xTaskPriorityInherit>
 8007b32:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007b34:	f001 fbe6 	bl	8009304 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b3a:	3324      	adds	r3, #36	; 0x24
 8007b3c:	683a      	ldr	r2, [r7, #0]
 8007b3e:	4611      	mov	r1, r2
 8007b40:	4618      	mov	r0, r3
 8007b42:	f000 fdcb 	bl	80086dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007b46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b48:	f000 f962 	bl	8007e10 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007b4c:	f000 fc16 	bl	800837c <xTaskResumeAll>
 8007b50:	4603      	mov	r3, r0
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	f47f af68 	bne.w	8007a28 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007b58:	4b18      	ldr	r3, [pc, #96]	; (8007bbc <xQueueSemaphoreTake+0x214>)
 8007b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b5e:	601a      	str	r2, [r3, #0]
 8007b60:	f3bf 8f4f 	dsb	sy
 8007b64:	f3bf 8f6f 	isb	sy
 8007b68:	e75e      	b.n	8007a28 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007b6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b6c:	f000 f950 	bl	8007e10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b70:	f000 fc04 	bl	800837c <xTaskResumeAll>
 8007b74:	e758      	b.n	8007a28 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007b76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b78:	f000 f94a 	bl	8007e10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b7c:	f000 fbfe 	bl	800837c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b82:	f000 f997 	bl	8007eb4 <prvIsQueueEmpty>
 8007b86:	4603      	mov	r3, r0
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	f43f af4d 	beq.w	8007a28 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d00d      	beq.n	8007bb0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007b94:	f001 fb86 	bl	80092a4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007b98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b9a:	f000 f891 	bl	8007cc0 <prvGetDisinheritPriorityAfterTimeout>
 8007b9e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f001 f930 	bl	8008e0c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007bac:	f001 fbaa 	bl	8009304 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007bb0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3738      	adds	r7, #56	; 0x38
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}
 8007bba:	bf00      	nop
 8007bbc:	e000ed04 	.word	0xe000ed04

08007bc0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b08e      	sub	sp, #56	; 0x38
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	60f8      	str	r0, [r7, #12]
 8007bc8:	60b9      	str	r1, [r7, #8]
 8007bca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d10a      	bne.n	8007bec <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bda:	f383 8811 	msr	BASEPRI, r3
 8007bde:	f3bf 8f6f 	isb	sy
 8007be2:	f3bf 8f4f 	dsb	sy
 8007be6:	623b      	str	r3, [r7, #32]
}
 8007be8:	bf00      	nop
 8007bea:	e7fe      	b.n	8007bea <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d103      	bne.n	8007bfa <xQueueReceiveFromISR+0x3a>
 8007bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d101      	bne.n	8007bfe <xQueueReceiveFromISR+0x3e>
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e000      	b.n	8007c00 <xQueueReceiveFromISR+0x40>
 8007bfe:	2300      	movs	r3, #0
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d10a      	bne.n	8007c1a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c08:	f383 8811 	msr	BASEPRI, r3
 8007c0c:	f3bf 8f6f 	isb	sy
 8007c10:	f3bf 8f4f 	dsb	sy
 8007c14:	61fb      	str	r3, [r7, #28]
}
 8007c16:	bf00      	nop
 8007c18:	e7fe      	b.n	8007c18 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007c1a:	f001 fc25 	bl	8009468 <vPortValidateInterruptPriority>
	__asm volatile
 8007c1e:	f3ef 8211 	mrs	r2, BASEPRI
 8007c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c26:	f383 8811 	msr	BASEPRI, r3
 8007c2a:	f3bf 8f6f 	isb	sy
 8007c2e:	f3bf 8f4f 	dsb	sy
 8007c32:	61ba      	str	r2, [r7, #24]
 8007c34:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007c36:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007c38:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c3e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d02f      	beq.n	8007ca6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007c50:	68b9      	ldr	r1, [r7, #8]
 8007c52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c54:	f000 f8b6 	bl	8007dc4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c5a:	1e5a      	subs	r2, r3, #1
 8007c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c5e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007c60:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c68:	d112      	bne.n	8007c90 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c6c:	691b      	ldr	r3, [r3, #16]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d016      	beq.n	8007ca0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c74:	3310      	adds	r3, #16
 8007c76:	4618      	mov	r0, r3
 8007c78:	f000 fd90 	bl	800879c <xTaskRemoveFromEventList>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d00e      	beq.n	8007ca0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d00b      	beq.n	8007ca0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	601a      	str	r2, [r3, #0]
 8007c8e:	e007      	b.n	8007ca0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007c90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c94:	3301      	adds	r3, #1
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	b25a      	sxtb	r2, r3
 8007c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	637b      	str	r3, [r7, #52]	; 0x34
 8007ca4:	e001      	b.n	8007caa <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	637b      	str	r3, [r7, #52]	; 0x34
 8007caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cac:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	f383 8811 	msr	BASEPRI, r3
}
 8007cb4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3738      	adds	r7, #56	; 0x38
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b085      	sub	sp, #20
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d006      	beq.n	8007cde <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f1c3 0307 	rsb	r3, r3, #7
 8007cda:	60fb      	str	r3, [r7, #12]
 8007cdc:	e001      	b.n	8007ce2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
	}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3714      	adds	r7, #20
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr

08007cf0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b086      	sub	sp, #24
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	60b9      	str	r1, [r7, #8]
 8007cfa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d04:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d10d      	bne.n	8007d2a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d14d      	bne.n	8007db2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	689b      	ldr	r3, [r3, #8]
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f000 fff0 	bl	8008d00 <xTaskPriorityDisinherit>
 8007d20:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2200      	movs	r2, #0
 8007d26:	609a      	str	r2, [r3, #8]
 8007d28:	e043      	b.n	8007db2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d119      	bne.n	8007d64 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	6858      	ldr	r0, [r3, #4]
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d38:	461a      	mov	r2, r3
 8007d3a:	68b9      	ldr	r1, [r7, #8]
 8007d3c:	f001 fde8 	bl	8009910 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	685a      	ldr	r2, [r3, #4]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d48:	441a      	add	r2, r3
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	685a      	ldr	r2, [r3, #4]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	429a      	cmp	r2, r3
 8007d58:	d32b      	bcc.n	8007db2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681a      	ldr	r2, [r3, #0]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	605a      	str	r2, [r3, #4]
 8007d62:	e026      	b.n	8007db2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	68d8      	ldr	r0, [r3, #12]
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	68b9      	ldr	r1, [r7, #8]
 8007d70:	f001 fdce 	bl	8009910 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	68da      	ldr	r2, [r3, #12]
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d7c:	425b      	negs	r3, r3
 8007d7e:	441a      	add	r2, r3
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	68da      	ldr	r2, [r3, #12]
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d207      	bcs.n	8007da0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	689a      	ldr	r2, [r3, #8]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d98:	425b      	negs	r3, r3
 8007d9a:	441a      	add	r2, r3
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2b02      	cmp	r3, #2
 8007da4:	d105      	bne.n	8007db2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d002      	beq.n	8007db2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	3b01      	subs	r3, #1
 8007db0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	1c5a      	adds	r2, r3, #1
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007dba:	697b      	ldr	r3, [r7, #20]
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3718      	adds	r7, #24
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b082      	sub	sp, #8
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d018      	beq.n	8007e08 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	68da      	ldr	r2, [r3, #12]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dde:	441a      	add	r2, r3
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	68da      	ldr	r2, [r3, #12]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d303      	bcc.n	8007df8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	68d9      	ldr	r1, [r3, #12]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e00:	461a      	mov	r2, r3
 8007e02:	6838      	ldr	r0, [r7, #0]
 8007e04:	f001 fd84 	bl	8009910 <memcpy>
	}
}
 8007e08:	bf00      	nop
 8007e0a:	3708      	adds	r7, #8
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b084      	sub	sp, #16
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007e18:	f001 fa44 	bl	80092a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e22:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e24:	e011      	b.n	8007e4a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d012      	beq.n	8007e54 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	3324      	adds	r3, #36	; 0x24
 8007e32:	4618      	mov	r0, r3
 8007e34:	f000 fcb2 	bl	800879c <xTaskRemoveFromEventList>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d001      	beq.n	8007e42 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007e3e:	f000 fde9 	bl	8008a14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007e42:	7bfb      	ldrb	r3, [r7, #15]
 8007e44:	3b01      	subs	r3, #1
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	dce9      	bgt.n	8007e26 <prvUnlockQueue+0x16>
 8007e52:	e000      	b.n	8007e56 <prvUnlockQueue+0x46>
					break;
 8007e54:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	22ff      	movs	r2, #255	; 0xff
 8007e5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007e5e:	f001 fa51 	bl	8009304 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007e62:	f001 fa1f 	bl	80092a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e6c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e6e:	e011      	b.n	8007e94 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	691b      	ldr	r3, [r3, #16]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d012      	beq.n	8007e9e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	3310      	adds	r3, #16
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f000 fc8d 	bl	800879c <xTaskRemoveFromEventList>
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d001      	beq.n	8007e8c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007e88:	f000 fdc4 	bl	8008a14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007e8c:	7bbb      	ldrb	r3, [r7, #14]
 8007e8e:	3b01      	subs	r3, #1
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	dce9      	bgt.n	8007e70 <prvUnlockQueue+0x60>
 8007e9c:	e000      	b.n	8007ea0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007e9e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	22ff      	movs	r2, #255	; 0xff
 8007ea4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007ea8:	f001 fa2c 	bl	8009304 <vPortExitCritical>
}
 8007eac:	bf00      	nop
 8007eae:	3710      	adds	r7, #16
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007ebc:	f001 f9f2 	bl	80092a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d102      	bne.n	8007ece <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	60fb      	str	r3, [r7, #12]
 8007ecc:	e001      	b.n	8007ed2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007ed2:	f001 fa17 	bl	8009304 <vPortExitCritical>

	return xReturn;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3710      	adds	r7, #16
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007ee8:	f001 f9dc 	bl	80092a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d102      	bne.n	8007efe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007ef8:	2301      	movs	r3, #1
 8007efa:	60fb      	str	r3, [r7, #12]
 8007efc:	e001      	b.n	8007f02 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007efe:	2300      	movs	r3, #0
 8007f00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007f02:	f001 f9ff 	bl	8009304 <vPortExitCritical>

	return xReturn;
 8007f06:	68fb      	ldr	r3, [r7, #12]
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3710      	adds	r7, #16
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b08e      	sub	sp, #56	; 0x38
 8007f14:	af04      	add	r7, sp, #16
 8007f16:	60f8      	str	r0, [r7, #12]
 8007f18:	60b9      	str	r1, [r7, #8]
 8007f1a:	607a      	str	r2, [r7, #4]
 8007f1c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d10a      	bne.n	8007f3a <xTaskCreateStatic+0x2a>
	__asm volatile
 8007f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f28:	f383 8811 	msr	BASEPRI, r3
 8007f2c:	f3bf 8f6f 	isb	sy
 8007f30:	f3bf 8f4f 	dsb	sy
 8007f34:	623b      	str	r3, [r7, #32]
}
 8007f36:	bf00      	nop
 8007f38:	e7fe      	b.n	8007f38 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d10a      	bne.n	8007f56 <xTaskCreateStatic+0x46>
	__asm volatile
 8007f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f44:	f383 8811 	msr	BASEPRI, r3
 8007f48:	f3bf 8f6f 	isb	sy
 8007f4c:	f3bf 8f4f 	dsb	sy
 8007f50:	61fb      	str	r3, [r7, #28]
}
 8007f52:	bf00      	nop
 8007f54:	e7fe      	b.n	8007f54 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007f56:	2354      	movs	r3, #84	; 0x54
 8007f58:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	2b54      	cmp	r3, #84	; 0x54
 8007f5e:	d00a      	beq.n	8007f76 <xTaskCreateStatic+0x66>
	__asm volatile
 8007f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f64:	f383 8811 	msr	BASEPRI, r3
 8007f68:	f3bf 8f6f 	isb	sy
 8007f6c:	f3bf 8f4f 	dsb	sy
 8007f70:	61bb      	str	r3, [r7, #24]
}
 8007f72:	bf00      	nop
 8007f74:	e7fe      	b.n	8007f74 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007f76:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d01e      	beq.n	8007fbc <xTaskCreateStatic+0xac>
 8007f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d01b      	beq.n	8007fbc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f86:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f8c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f90:	2202      	movs	r2, #2
 8007f92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007f96:	2300      	movs	r3, #0
 8007f98:	9303      	str	r3, [sp, #12]
 8007f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9c:	9302      	str	r3, [sp, #8]
 8007f9e:	f107 0314 	add.w	r3, r7, #20
 8007fa2:	9301      	str	r3, [sp, #4]
 8007fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa6:	9300      	str	r3, [sp, #0]
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	68b9      	ldr	r1, [r7, #8]
 8007fae:	68f8      	ldr	r0, [r7, #12]
 8007fb0:	f000 f850 	bl	8008054 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007fb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007fb6:	f000 f8d5 	bl	8008164 <prvAddNewTaskToReadyList>
 8007fba:	e001      	b.n	8007fc0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007fc0:	697b      	ldr	r3, [r7, #20]
	}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3728      	adds	r7, #40	; 0x28
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}

08007fca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007fca:	b580      	push	{r7, lr}
 8007fcc:	b08c      	sub	sp, #48	; 0x30
 8007fce:	af04      	add	r7, sp, #16
 8007fd0:	60f8      	str	r0, [r7, #12]
 8007fd2:	60b9      	str	r1, [r7, #8]
 8007fd4:	603b      	str	r3, [r7, #0]
 8007fd6:	4613      	mov	r3, r2
 8007fd8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007fda:	88fb      	ldrh	r3, [r7, #6]
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f001 fa82 	bl	80094e8 <pvPortMalloc>
 8007fe4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d00e      	beq.n	800800a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007fec:	2054      	movs	r0, #84	; 0x54
 8007fee:	f001 fa7b 	bl	80094e8 <pvPortMalloc>
 8007ff2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007ff4:	69fb      	ldr	r3, [r7, #28]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d003      	beq.n	8008002 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007ffa:	69fb      	ldr	r3, [r7, #28]
 8007ffc:	697a      	ldr	r2, [r7, #20]
 8007ffe:	631a      	str	r2, [r3, #48]	; 0x30
 8008000:	e005      	b.n	800800e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008002:	6978      	ldr	r0, [r7, #20]
 8008004:	f001 fb3c 	bl	8009680 <vPortFree>
 8008008:	e001      	b.n	800800e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800800a:	2300      	movs	r3, #0
 800800c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800800e:	69fb      	ldr	r3, [r7, #28]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d017      	beq.n	8008044 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008014:	69fb      	ldr	r3, [r7, #28]
 8008016:	2200      	movs	r2, #0
 8008018:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800801c:	88fa      	ldrh	r2, [r7, #6]
 800801e:	2300      	movs	r3, #0
 8008020:	9303      	str	r3, [sp, #12]
 8008022:	69fb      	ldr	r3, [r7, #28]
 8008024:	9302      	str	r3, [sp, #8]
 8008026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008028:	9301      	str	r3, [sp, #4]
 800802a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800802c:	9300      	str	r3, [sp, #0]
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	68b9      	ldr	r1, [r7, #8]
 8008032:	68f8      	ldr	r0, [r7, #12]
 8008034:	f000 f80e 	bl	8008054 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008038:	69f8      	ldr	r0, [r7, #28]
 800803a:	f000 f893 	bl	8008164 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800803e:	2301      	movs	r3, #1
 8008040:	61bb      	str	r3, [r7, #24]
 8008042:	e002      	b.n	800804a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008044:	f04f 33ff 	mov.w	r3, #4294967295
 8008048:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800804a:	69bb      	ldr	r3, [r7, #24]
	}
 800804c:	4618      	mov	r0, r3
 800804e:	3720      	adds	r7, #32
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b088      	sub	sp, #32
 8008058:	af00      	add	r7, sp, #0
 800805a:	60f8      	str	r0, [r7, #12]
 800805c:	60b9      	str	r1, [r7, #8]
 800805e:	607a      	str	r2, [r7, #4]
 8008060:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008064:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800806c:	3b01      	subs	r3, #1
 800806e:	009b      	lsls	r3, r3, #2
 8008070:	4413      	add	r3, r2
 8008072:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008074:	69bb      	ldr	r3, [r7, #24]
 8008076:	f023 0307 	bic.w	r3, r3, #7
 800807a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800807c:	69bb      	ldr	r3, [r7, #24]
 800807e:	f003 0307 	and.w	r3, r3, #7
 8008082:	2b00      	cmp	r3, #0
 8008084:	d00a      	beq.n	800809c <prvInitialiseNewTask+0x48>
	__asm volatile
 8008086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800808a:	f383 8811 	msr	BASEPRI, r3
 800808e:	f3bf 8f6f 	isb	sy
 8008092:	f3bf 8f4f 	dsb	sy
 8008096:	617b      	str	r3, [r7, #20]
}
 8008098:	bf00      	nop
 800809a:	e7fe      	b.n	800809a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d01f      	beq.n	80080e2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80080a2:	2300      	movs	r3, #0
 80080a4:	61fb      	str	r3, [r7, #28]
 80080a6:	e012      	b.n	80080ce <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80080a8:	68ba      	ldr	r2, [r7, #8]
 80080aa:	69fb      	ldr	r3, [r7, #28]
 80080ac:	4413      	add	r3, r2
 80080ae:	7819      	ldrb	r1, [r3, #0]
 80080b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080b2:	69fb      	ldr	r3, [r7, #28]
 80080b4:	4413      	add	r3, r2
 80080b6:	3334      	adds	r3, #52	; 0x34
 80080b8:	460a      	mov	r2, r1
 80080ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80080bc:	68ba      	ldr	r2, [r7, #8]
 80080be:	69fb      	ldr	r3, [r7, #28]
 80080c0:	4413      	add	r3, r2
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d006      	beq.n	80080d6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80080c8:	69fb      	ldr	r3, [r7, #28]
 80080ca:	3301      	adds	r3, #1
 80080cc:	61fb      	str	r3, [r7, #28]
 80080ce:	69fb      	ldr	r3, [r7, #28]
 80080d0:	2b0f      	cmp	r3, #15
 80080d2:	d9e9      	bls.n	80080a8 <prvInitialiseNewTask+0x54>
 80080d4:	e000      	b.n	80080d8 <prvInitialiseNewTask+0x84>
			{
				break;
 80080d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80080d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080da:	2200      	movs	r2, #0
 80080dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80080e0:	e003      	b.n	80080ea <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80080e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e4:	2200      	movs	r2, #0
 80080e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80080ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ec:	2b06      	cmp	r3, #6
 80080ee:	d901      	bls.n	80080f4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80080f0:	2306      	movs	r3, #6
 80080f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80080f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80080fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080fe:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008102:	2200      	movs	r2, #0
 8008104:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008108:	3304      	adds	r3, #4
 800810a:	4618      	mov	r0, r3
 800810c:	f7ff f803 	bl	8007116 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008112:	3318      	adds	r3, #24
 8008114:	4618      	mov	r0, r3
 8008116:	f7fe fffe 	bl	8007116 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800811a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800811e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008122:	f1c3 0207 	rsb	r2, r3, #7
 8008126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008128:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800812a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800812c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800812e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008132:	2200      	movs	r2, #0
 8008134:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008138:	2200      	movs	r2, #0
 800813a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800813e:	683a      	ldr	r2, [r7, #0]
 8008140:	68f9      	ldr	r1, [r7, #12]
 8008142:	69b8      	ldr	r0, [r7, #24]
 8008144:	f000 ff82 	bl	800904c <pxPortInitialiseStack>
 8008148:	4602      	mov	r2, r0
 800814a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800814e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008150:	2b00      	cmp	r3, #0
 8008152:	d002      	beq.n	800815a <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008156:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008158:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800815a:	bf00      	nop
 800815c:	3720      	adds	r7, #32
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
	...

08008164 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b082      	sub	sp, #8
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800816c:	f001 f89a 	bl	80092a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008170:	4b2a      	ldr	r3, [pc, #168]	; (800821c <prvAddNewTaskToReadyList+0xb8>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	3301      	adds	r3, #1
 8008176:	4a29      	ldr	r2, [pc, #164]	; (800821c <prvAddNewTaskToReadyList+0xb8>)
 8008178:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800817a:	4b29      	ldr	r3, [pc, #164]	; (8008220 <prvAddNewTaskToReadyList+0xbc>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d109      	bne.n	8008196 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008182:	4a27      	ldr	r2, [pc, #156]	; (8008220 <prvAddNewTaskToReadyList+0xbc>)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008188:	4b24      	ldr	r3, [pc, #144]	; (800821c <prvAddNewTaskToReadyList+0xb8>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	2b01      	cmp	r3, #1
 800818e:	d110      	bne.n	80081b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008190:	f000 fc64 	bl	8008a5c <prvInitialiseTaskLists>
 8008194:	e00d      	b.n	80081b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008196:	4b23      	ldr	r3, [pc, #140]	; (8008224 <prvAddNewTaskToReadyList+0xc0>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d109      	bne.n	80081b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800819e:	4b20      	ldr	r3, [pc, #128]	; (8008220 <prvAddNewTaskToReadyList+0xbc>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a8:	429a      	cmp	r2, r3
 80081aa:	d802      	bhi.n	80081b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80081ac:	4a1c      	ldr	r2, [pc, #112]	; (8008220 <prvAddNewTaskToReadyList+0xbc>)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80081b2:	4b1d      	ldr	r3, [pc, #116]	; (8008228 <prvAddNewTaskToReadyList+0xc4>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	3301      	adds	r3, #1
 80081b8:	4a1b      	ldr	r2, [pc, #108]	; (8008228 <prvAddNewTaskToReadyList+0xc4>)
 80081ba:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c0:	2201      	movs	r2, #1
 80081c2:	409a      	lsls	r2, r3
 80081c4:	4b19      	ldr	r3, [pc, #100]	; (800822c <prvAddNewTaskToReadyList+0xc8>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4313      	orrs	r3, r2
 80081ca:	4a18      	ldr	r2, [pc, #96]	; (800822c <prvAddNewTaskToReadyList+0xc8>)
 80081cc:	6013      	str	r3, [r2, #0]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081d2:	4613      	mov	r3, r2
 80081d4:	009b      	lsls	r3, r3, #2
 80081d6:	4413      	add	r3, r2
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	4a15      	ldr	r2, [pc, #84]	; (8008230 <prvAddNewTaskToReadyList+0xcc>)
 80081dc:	441a      	add	r2, r3
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	3304      	adds	r3, #4
 80081e2:	4619      	mov	r1, r3
 80081e4:	4610      	mov	r0, r2
 80081e6:	f7fe ffa3 	bl	8007130 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80081ea:	f001 f88b 	bl	8009304 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80081ee:	4b0d      	ldr	r3, [pc, #52]	; (8008224 <prvAddNewTaskToReadyList+0xc0>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d00e      	beq.n	8008214 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80081f6:	4b0a      	ldr	r3, [pc, #40]	; (8008220 <prvAddNewTaskToReadyList+0xbc>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008200:	429a      	cmp	r2, r3
 8008202:	d207      	bcs.n	8008214 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008204:	4b0b      	ldr	r3, [pc, #44]	; (8008234 <prvAddNewTaskToReadyList+0xd0>)
 8008206:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800820a:	601a      	str	r2, [r3, #0]
 800820c:	f3bf 8f4f 	dsb	sy
 8008210:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008214:	bf00      	nop
 8008216:	3708      	adds	r7, #8
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}
 800821c:	2000088c 	.word	0x2000088c
 8008220:	2000078c 	.word	0x2000078c
 8008224:	20000898 	.word	0x20000898
 8008228:	200008a8 	.word	0x200008a8
 800822c:	20000894 	.word	0x20000894
 8008230:	20000790 	.word	0x20000790
 8008234:	e000ed04 	.word	0xe000ed04

08008238 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008240:	2300      	movs	r3, #0
 8008242:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d017      	beq.n	800827a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800824a:	4b13      	ldr	r3, [pc, #76]	; (8008298 <vTaskDelay+0x60>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d00a      	beq.n	8008268 <vTaskDelay+0x30>
	__asm volatile
 8008252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008256:	f383 8811 	msr	BASEPRI, r3
 800825a:	f3bf 8f6f 	isb	sy
 800825e:	f3bf 8f4f 	dsb	sy
 8008262:	60bb      	str	r3, [r7, #8]
}
 8008264:	bf00      	nop
 8008266:	e7fe      	b.n	8008266 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008268:	f000 f87a 	bl	8008360 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800826c:	2100      	movs	r1, #0
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 fe86 	bl	8008f80 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008274:	f000 f882 	bl	800837c <xTaskResumeAll>
 8008278:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d107      	bne.n	8008290 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008280:	4b06      	ldr	r3, [pc, #24]	; (800829c <vTaskDelay+0x64>)
 8008282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008286:	601a      	str	r2, [r3, #0]
 8008288:	f3bf 8f4f 	dsb	sy
 800828c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008290:	bf00      	nop
 8008292:	3710      	adds	r7, #16
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}
 8008298:	200008b4 	.word	0x200008b4
 800829c:	e000ed04 	.word	0xe000ed04

080082a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b08a      	sub	sp, #40	; 0x28
 80082a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80082a6:	2300      	movs	r3, #0
 80082a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80082aa:	2300      	movs	r3, #0
 80082ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80082ae:	463a      	mov	r2, r7
 80082b0:	1d39      	adds	r1, r7, #4
 80082b2:	f107 0308 	add.w	r3, r7, #8
 80082b6:	4618      	mov	r0, r3
 80082b8:	f7f8 f96c 	bl	8000594 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80082bc:	6839      	ldr	r1, [r7, #0]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	68ba      	ldr	r2, [r7, #8]
 80082c2:	9202      	str	r2, [sp, #8]
 80082c4:	9301      	str	r3, [sp, #4]
 80082c6:	2300      	movs	r3, #0
 80082c8:	9300      	str	r3, [sp, #0]
 80082ca:	2300      	movs	r3, #0
 80082cc:	460a      	mov	r2, r1
 80082ce:	491e      	ldr	r1, [pc, #120]	; (8008348 <vTaskStartScheduler+0xa8>)
 80082d0:	481e      	ldr	r0, [pc, #120]	; (800834c <vTaskStartScheduler+0xac>)
 80082d2:	f7ff fe1d 	bl	8007f10 <xTaskCreateStatic>
 80082d6:	4603      	mov	r3, r0
 80082d8:	4a1d      	ldr	r2, [pc, #116]	; (8008350 <vTaskStartScheduler+0xb0>)
 80082da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80082dc:	4b1c      	ldr	r3, [pc, #112]	; (8008350 <vTaskStartScheduler+0xb0>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d002      	beq.n	80082ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80082e4:	2301      	movs	r3, #1
 80082e6:	617b      	str	r3, [r7, #20]
 80082e8:	e001      	b.n	80082ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80082ea:	2300      	movs	r3, #0
 80082ec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d116      	bne.n	8008322 <vTaskStartScheduler+0x82>
	__asm volatile
 80082f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f8:	f383 8811 	msr	BASEPRI, r3
 80082fc:	f3bf 8f6f 	isb	sy
 8008300:	f3bf 8f4f 	dsb	sy
 8008304:	613b      	str	r3, [r7, #16]
}
 8008306:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008308:	4b12      	ldr	r3, [pc, #72]	; (8008354 <vTaskStartScheduler+0xb4>)
 800830a:	f04f 32ff 	mov.w	r2, #4294967295
 800830e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008310:	4b11      	ldr	r3, [pc, #68]	; (8008358 <vTaskStartScheduler+0xb8>)
 8008312:	2201      	movs	r2, #1
 8008314:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008316:	4b11      	ldr	r3, [pc, #68]	; (800835c <vTaskStartScheduler+0xbc>)
 8008318:	2200      	movs	r2, #0
 800831a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800831c:	f000 ff20 	bl	8009160 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008320:	e00e      	b.n	8008340 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008328:	d10a      	bne.n	8008340 <vTaskStartScheduler+0xa0>
	__asm volatile
 800832a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800832e:	f383 8811 	msr	BASEPRI, r3
 8008332:	f3bf 8f6f 	isb	sy
 8008336:	f3bf 8f4f 	dsb	sy
 800833a:	60fb      	str	r3, [r7, #12]
}
 800833c:	bf00      	nop
 800833e:	e7fe      	b.n	800833e <vTaskStartScheduler+0x9e>
}
 8008340:	bf00      	nop
 8008342:	3718      	adds	r7, #24
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}
 8008348:	0800aaec 	.word	0x0800aaec
 800834c:	08008a2d 	.word	0x08008a2d
 8008350:	200008b0 	.word	0x200008b0
 8008354:	200008ac 	.word	0x200008ac
 8008358:	20000898 	.word	0x20000898
 800835c:	20000890 	.word	0x20000890

08008360 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008360:	b480      	push	{r7}
 8008362:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008364:	4b04      	ldr	r3, [pc, #16]	; (8008378 <vTaskSuspendAll+0x18>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	3301      	adds	r3, #1
 800836a:	4a03      	ldr	r2, [pc, #12]	; (8008378 <vTaskSuspendAll+0x18>)
 800836c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800836e:	bf00      	nop
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr
 8008378:	200008b4 	.word	0x200008b4

0800837c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b084      	sub	sp, #16
 8008380:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008382:	2300      	movs	r3, #0
 8008384:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008386:	2300      	movs	r3, #0
 8008388:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800838a:	4b41      	ldr	r3, [pc, #260]	; (8008490 <xTaskResumeAll+0x114>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d10a      	bne.n	80083a8 <xTaskResumeAll+0x2c>
	__asm volatile
 8008392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008396:	f383 8811 	msr	BASEPRI, r3
 800839a:	f3bf 8f6f 	isb	sy
 800839e:	f3bf 8f4f 	dsb	sy
 80083a2:	603b      	str	r3, [r7, #0]
}
 80083a4:	bf00      	nop
 80083a6:	e7fe      	b.n	80083a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80083a8:	f000 ff7c 	bl	80092a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80083ac:	4b38      	ldr	r3, [pc, #224]	; (8008490 <xTaskResumeAll+0x114>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	3b01      	subs	r3, #1
 80083b2:	4a37      	ldr	r2, [pc, #220]	; (8008490 <xTaskResumeAll+0x114>)
 80083b4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083b6:	4b36      	ldr	r3, [pc, #216]	; (8008490 <xTaskResumeAll+0x114>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d161      	bne.n	8008482 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80083be:	4b35      	ldr	r3, [pc, #212]	; (8008494 <xTaskResumeAll+0x118>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d05d      	beq.n	8008482 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80083c6:	e02e      	b.n	8008426 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083c8:	4b33      	ldr	r3, [pc, #204]	; (8008498 <xTaskResumeAll+0x11c>)
 80083ca:	68db      	ldr	r3, [r3, #12]
 80083cc:	68db      	ldr	r3, [r3, #12]
 80083ce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	3318      	adds	r3, #24
 80083d4:	4618      	mov	r0, r3
 80083d6:	f7fe ff08 	bl	80071ea <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	3304      	adds	r3, #4
 80083de:	4618      	mov	r0, r3
 80083e0:	f7fe ff03 	bl	80071ea <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e8:	2201      	movs	r2, #1
 80083ea:	409a      	lsls	r2, r3
 80083ec:	4b2b      	ldr	r3, [pc, #172]	; (800849c <xTaskResumeAll+0x120>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4313      	orrs	r3, r2
 80083f2:	4a2a      	ldr	r2, [pc, #168]	; (800849c <xTaskResumeAll+0x120>)
 80083f4:	6013      	str	r3, [r2, #0]
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083fa:	4613      	mov	r3, r2
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	4413      	add	r3, r2
 8008400:	009b      	lsls	r3, r3, #2
 8008402:	4a27      	ldr	r2, [pc, #156]	; (80084a0 <xTaskResumeAll+0x124>)
 8008404:	441a      	add	r2, r3
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	3304      	adds	r3, #4
 800840a:	4619      	mov	r1, r3
 800840c:	4610      	mov	r0, r2
 800840e:	f7fe fe8f 	bl	8007130 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008416:	4b23      	ldr	r3, [pc, #140]	; (80084a4 <xTaskResumeAll+0x128>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800841c:	429a      	cmp	r2, r3
 800841e:	d302      	bcc.n	8008426 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008420:	4b21      	ldr	r3, [pc, #132]	; (80084a8 <xTaskResumeAll+0x12c>)
 8008422:	2201      	movs	r2, #1
 8008424:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008426:	4b1c      	ldr	r3, [pc, #112]	; (8008498 <xTaskResumeAll+0x11c>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d1cc      	bne.n	80083c8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d001      	beq.n	8008438 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008434:	f000 fbb0 	bl	8008b98 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008438:	4b1c      	ldr	r3, [pc, #112]	; (80084ac <xTaskResumeAll+0x130>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d010      	beq.n	8008466 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008444:	f000 f836 	bl	80084b4 <xTaskIncrementTick>
 8008448:	4603      	mov	r3, r0
 800844a:	2b00      	cmp	r3, #0
 800844c:	d002      	beq.n	8008454 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800844e:	4b16      	ldr	r3, [pc, #88]	; (80084a8 <xTaskResumeAll+0x12c>)
 8008450:	2201      	movs	r2, #1
 8008452:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	3b01      	subs	r3, #1
 8008458:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d1f1      	bne.n	8008444 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8008460:	4b12      	ldr	r3, [pc, #72]	; (80084ac <xTaskResumeAll+0x130>)
 8008462:	2200      	movs	r2, #0
 8008464:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008466:	4b10      	ldr	r3, [pc, #64]	; (80084a8 <xTaskResumeAll+0x12c>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d009      	beq.n	8008482 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800846e:	2301      	movs	r3, #1
 8008470:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008472:	4b0f      	ldr	r3, [pc, #60]	; (80084b0 <xTaskResumeAll+0x134>)
 8008474:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008478:	601a      	str	r2, [r3, #0]
 800847a:	f3bf 8f4f 	dsb	sy
 800847e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008482:	f000 ff3f 	bl	8009304 <vPortExitCritical>

	return xAlreadyYielded;
 8008486:	68bb      	ldr	r3, [r7, #8]
}
 8008488:	4618      	mov	r0, r3
 800848a:	3710      	adds	r7, #16
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}
 8008490:	200008b4 	.word	0x200008b4
 8008494:	2000088c 	.word	0x2000088c
 8008498:	2000084c 	.word	0x2000084c
 800849c:	20000894 	.word	0x20000894
 80084a0:	20000790 	.word	0x20000790
 80084a4:	2000078c 	.word	0x2000078c
 80084a8:	200008a0 	.word	0x200008a0
 80084ac:	2000089c 	.word	0x2000089c
 80084b0:	e000ed04 	.word	0xe000ed04

080084b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b086      	sub	sp, #24
 80084b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80084ba:	2300      	movs	r3, #0
 80084bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084be:	4b4e      	ldr	r3, [pc, #312]	; (80085f8 <xTaskIncrementTick+0x144>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	f040 808e 	bne.w	80085e4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80084c8:	4b4c      	ldr	r3, [pc, #304]	; (80085fc <xTaskIncrementTick+0x148>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	3301      	adds	r3, #1
 80084ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80084d0:	4a4a      	ldr	r2, [pc, #296]	; (80085fc <xTaskIncrementTick+0x148>)
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d120      	bne.n	800851e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80084dc:	4b48      	ldr	r3, [pc, #288]	; (8008600 <xTaskIncrementTick+0x14c>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d00a      	beq.n	80084fc <xTaskIncrementTick+0x48>
	__asm volatile
 80084e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ea:	f383 8811 	msr	BASEPRI, r3
 80084ee:	f3bf 8f6f 	isb	sy
 80084f2:	f3bf 8f4f 	dsb	sy
 80084f6:	603b      	str	r3, [r7, #0]
}
 80084f8:	bf00      	nop
 80084fa:	e7fe      	b.n	80084fa <xTaskIncrementTick+0x46>
 80084fc:	4b40      	ldr	r3, [pc, #256]	; (8008600 <xTaskIncrementTick+0x14c>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	60fb      	str	r3, [r7, #12]
 8008502:	4b40      	ldr	r3, [pc, #256]	; (8008604 <xTaskIncrementTick+0x150>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a3e      	ldr	r2, [pc, #248]	; (8008600 <xTaskIncrementTick+0x14c>)
 8008508:	6013      	str	r3, [r2, #0]
 800850a:	4a3e      	ldr	r2, [pc, #248]	; (8008604 <xTaskIncrementTick+0x150>)
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	6013      	str	r3, [r2, #0]
 8008510:	4b3d      	ldr	r3, [pc, #244]	; (8008608 <xTaskIncrementTick+0x154>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	3301      	adds	r3, #1
 8008516:	4a3c      	ldr	r2, [pc, #240]	; (8008608 <xTaskIncrementTick+0x154>)
 8008518:	6013      	str	r3, [r2, #0]
 800851a:	f000 fb3d 	bl	8008b98 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800851e:	4b3b      	ldr	r3, [pc, #236]	; (800860c <xTaskIncrementTick+0x158>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	693a      	ldr	r2, [r7, #16]
 8008524:	429a      	cmp	r2, r3
 8008526:	d348      	bcc.n	80085ba <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008528:	4b35      	ldr	r3, [pc, #212]	; (8008600 <xTaskIncrementTick+0x14c>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d104      	bne.n	800853c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008532:	4b36      	ldr	r3, [pc, #216]	; (800860c <xTaskIncrementTick+0x158>)
 8008534:	f04f 32ff 	mov.w	r2, #4294967295
 8008538:	601a      	str	r2, [r3, #0]
					break;
 800853a:	e03e      	b.n	80085ba <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800853c:	4b30      	ldr	r3, [pc, #192]	; (8008600 <xTaskIncrementTick+0x14c>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	68db      	ldr	r3, [r3, #12]
 8008542:	68db      	ldr	r3, [r3, #12]
 8008544:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800854c:	693a      	ldr	r2, [r7, #16]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	429a      	cmp	r2, r3
 8008552:	d203      	bcs.n	800855c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008554:	4a2d      	ldr	r2, [pc, #180]	; (800860c <xTaskIncrementTick+0x158>)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800855a:	e02e      	b.n	80085ba <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	3304      	adds	r3, #4
 8008560:	4618      	mov	r0, r3
 8008562:	f7fe fe42 	bl	80071ea <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800856a:	2b00      	cmp	r3, #0
 800856c:	d004      	beq.n	8008578 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	3318      	adds	r3, #24
 8008572:	4618      	mov	r0, r3
 8008574:	f7fe fe39 	bl	80071ea <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800857c:	2201      	movs	r2, #1
 800857e:	409a      	lsls	r2, r3
 8008580:	4b23      	ldr	r3, [pc, #140]	; (8008610 <xTaskIncrementTick+0x15c>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4313      	orrs	r3, r2
 8008586:	4a22      	ldr	r2, [pc, #136]	; (8008610 <xTaskIncrementTick+0x15c>)
 8008588:	6013      	str	r3, [r2, #0]
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800858e:	4613      	mov	r3, r2
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	4413      	add	r3, r2
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	4a1f      	ldr	r2, [pc, #124]	; (8008614 <xTaskIncrementTick+0x160>)
 8008598:	441a      	add	r2, r3
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	3304      	adds	r3, #4
 800859e:	4619      	mov	r1, r3
 80085a0:	4610      	mov	r0, r2
 80085a2:	f7fe fdc5 	bl	8007130 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085aa:	4b1b      	ldr	r3, [pc, #108]	; (8008618 <xTaskIncrementTick+0x164>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d3b9      	bcc.n	8008528 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80085b4:	2301      	movs	r3, #1
 80085b6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085b8:	e7b6      	b.n	8008528 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80085ba:	4b17      	ldr	r3, [pc, #92]	; (8008618 <xTaskIncrementTick+0x164>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085c0:	4914      	ldr	r1, [pc, #80]	; (8008614 <xTaskIncrementTick+0x160>)
 80085c2:	4613      	mov	r3, r2
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	4413      	add	r3, r2
 80085c8:	009b      	lsls	r3, r3, #2
 80085ca:	440b      	add	r3, r1
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	d901      	bls.n	80085d6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80085d2:	2301      	movs	r3, #1
 80085d4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80085d6:	4b11      	ldr	r3, [pc, #68]	; (800861c <xTaskIncrementTick+0x168>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d007      	beq.n	80085ee <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80085de:	2301      	movs	r3, #1
 80085e0:	617b      	str	r3, [r7, #20]
 80085e2:	e004      	b.n	80085ee <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80085e4:	4b0e      	ldr	r3, [pc, #56]	; (8008620 <xTaskIncrementTick+0x16c>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	3301      	adds	r3, #1
 80085ea:	4a0d      	ldr	r2, [pc, #52]	; (8008620 <xTaskIncrementTick+0x16c>)
 80085ec:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80085ee:	697b      	ldr	r3, [r7, #20]
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3718      	adds	r7, #24
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}
 80085f8:	200008b4 	.word	0x200008b4
 80085fc:	20000890 	.word	0x20000890
 8008600:	20000844 	.word	0x20000844
 8008604:	20000848 	.word	0x20000848
 8008608:	200008a4 	.word	0x200008a4
 800860c:	200008ac 	.word	0x200008ac
 8008610:	20000894 	.word	0x20000894
 8008614:	20000790 	.word	0x20000790
 8008618:	2000078c 	.word	0x2000078c
 800861c:	200008a0 	.word	0x200008a0
 8008620:	2000089c 	.word	0x2000089c

08008624 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008624:	b480      	push	{r7}
 8008626:	b087      	sub	sp, #28
 8008628:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800862a:	4b27      	ldr	r3, [pc, #156]	; (80086c8 <vTaskSwitchContext+0xa4>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d003      	beq.n	800863a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008632:	4b26      	ldr	r3, [pc, #152]	; (80086cc <vTaskSwitchContext+0xa8>)
 8008634:	2201      	movs	r2, #1
 8008636:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008638:	e03f      	b.n	80086ba <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800863a:	4b24      	ldr	r3, [pc, #144]	; (80086cc <vTaskSwitchContext+0xa8>)
 800863c:	2200      	movs	r2, #0
 800863e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008640:	4b23      	ldr	r3, [pc, #140]	; (80086d0 <vTaskSwitchContext+0xac>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	fab3 f383 	clz	r3, r3
 800864c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800864e:	7afb      	ldrb	r3, [r7, #11]
 8008650:	f1c3 031f 	rsb	r3, r3, #31
 8008654:	617b      	str	r3, [r7, #20]
 8008656:	491f      	ldr	r1, [pc, #124]	; (80086d4 <vTaskSwitchContext+0xb0>)
 8008658:	697a      	ldr	r2, [r7, #20]
 800865a:	4613      	mov	r3, r2
 800865c:	009b      	lsls	r3, r3, #2
 800865e:	4413      	add	r3, r2
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	440b      	add	r3, r1
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d10a      	bne.n	8008680 <vTaskSwitchContext+0x5c>
	__asm volatile
 800866a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800866e:	f383 8811 	msr	BASEPRI, r3
 8008672:	f3bf 8f6f 	isb	sy
 8008676:	f3bf 8f4f 	dsb	sy
 800867a:	607b      	str	r3, [r7, #4]
}
 800867c:	bf00      	nop
 800867e:	e7fe      	b.n	800867e <vTaskSwitchContext+0x5a>
 8008680:	697a      	ldr	r2, [r7, #20]
 8008682:	4613      	mov	r3, r2
 8008684:	009b      	lsls	r3, r3, #2
 8008686:	4413      	add	r3, r2
 8008688:	009b      	lsls	r3, r3, #2
 800868a:	4a12      	ldr	r2, [pc, #72]	; (80086d4 <vTaskSwitchContext+0xb0>)
 800868c:	4413      	add	r3, r2
 800868e:	613b      	str	r3, [r7, #16]
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	685a      	ldr	r2, [r3, #4]
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	605a      	str	r2, [r3, #4]
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	685a      	ldr	r2, [r3, #4]
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	3308      	adds	r3, #8
 80086a2:	429a      	cmp	r2, r3
 80086a4:	d104      	bne.n	80086b0 <vTaskSwitchContext+0x8c>
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	685a      	ldr	r2, [r3, #4]
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	605a      	str	r2, [r3, #4]
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	68db      	ldr	r3, [r3, #12]
 80086b6:	4a08      	ldr	r2, [pc, #32]	; (80086d8 <vTaskSwitchContext+0xb4>)
 80086b8:	6013      	str	r3, [r2, #0]
}
 80086ba:	bf00      	nop
 80086bc:	371c      	adds	r7, #28
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr
 80086c6:	bf00      	nop
 80086c8:	200008b4 	.word	0x200008b4
 80086cc:	200008a0 	.word	0x200008a0
 80086d0:	20000894 	.word	0x20000894
 80086d4:	20000790 	.word	0x20000790
 80086d8:	2000078c 	.word	0x2000078c

080086dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b084      	sub	sp, #16
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d10a      	bne.n	8008702 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80086ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f0:	f383 8811 	msr	BASEPRI, r3
 80086f4:	f3bf 8f6f 	isb	sy
 80086f8:	f3bf 8f4f 	dsb	sy
 80086fc:	60fb      	str	r3, [r7, #12]
}
 80086fe:	bf00      	nop
 8008700:	e7fe      	b.n	8008700 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008702:	4b07      	ldr	r3, [pc, #28]	; (8008720 <vTaskPlaceOnEventList+0x44>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	3318      	adds	r3, #24
 8008708:	4619      	mov	r1, r3
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f7fe fd34 	bl	8007178 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008710:	2101      	movs	r1, #1
 8008712:	6838      	ldr	r0, [r7, #0]
 8008714:	f000 fc34 	bl	8008f80 <prvAddCurrentTaskToDelayedList>
}
 8008718:	bf00      	nop
 800871a:	3710      	adds	r7, #16
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}
 8008720:	2000078c 	.word	0x2000078c

08008724 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b086      	sub	sp, #24
 8008728:	af00      	add	r7, sp, #0
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	60b9      	str	r1, [r7, #8]
 800872e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d10a      	bne.n	800874c <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8008736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800873a:	f383 8811 	msr	BASEPRI, r3
 800873e:	f3bf 8f6f 	isb	sy
 8008742:	f3bf 8f4f 	dsb	sy
 8008746:	617b      	str	r3, [r7, #20]
}
 8008748:	bf00      	nop
 800874a:	e7fe      	b.n	800874a <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800874c:	4b11      	ldr	r3, [pc, #68]	; (8008794 <vTaskPlaceOnUnorderedEventList+0x70>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d10a      	bne.n	800876a <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8008754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008758:	f383 8811 	msr	BASEPRI, r3
 800875c:	f3bf 8f6f 	isb	sy
 8008760:	f3bf 8f4f 	dsb	sy
 8008764:	613b      	str	r3, [r7, #16]
}
 8008766:	bf00      	nop
 8008768:	e7fe      	b.n	8008768 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800876a:	4b0b      	ldr	r3, [pc, #44]	; (8008798 <vTaskPlaceOnUnorderedEventList+0x74>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	68ba      	ldr	r2, [r7, #8]
 8008770:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8008774:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008776:	4b08      	ldr	r3, [pc, #32]	; (8008798 <vTaskPlaceOnUnorderedEventList+0x74>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	3318      	adds	r3, #24
 800877c:	4619      	mov	r1, r3
 800877e:	68f8      	ldr	r0, [r7, #12]
 8008780:	f7fe fcd6 	bl	8007130 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008784:	2101      	movs	r1, #1
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f000 fbfa 	bl	8008f80 <prvAddCurrentTaskToDelayedList>
}
 800878c:	bf00      	nop
 800878e:	3718      	adds	r7, #24
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}
 8008794:	200008b4 	.word	0x200008b4
 8008798:	2000078c 	.word	0x2000078c

0800879c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b086      	sub	sp, #24
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	68db      	ldr	r3, [r3, #12]
 80087a8:	68db      	ldr	r3, [r3, #12]
 80087aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d10a      	bne.n	80087c8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80087b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b6:	f383 8811 	msr	BASEPRI, r3
 80087ba:	f3bf 8f6f 	isb	sy
 80087be:	f3bf 8f4f 	dsb	sy
 80087c2:	60fb      	str	r3, [r7, #12]
}
 80087c4:	bf00      	nop
 80087c6:	e7fe      	b.n	80087c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	3318      	adds	r3, #24
 80087cc:	4618      	mov	r0, r3
 80087ce:	f7fe fd0c 	bl	80071ea <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087d2:	4b1d      	ldr	r3, [pc, #116]	; (8008848 <xTaskRemoveFromEventList+0xac>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d11c      	bne.n	8008814 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	3304      	adds	r3, #4
 80087de:	4618      	mov	r0, r3
 80087e0:	f7fe fd03 	bl	80071ea <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e8:	2201      	movs	r2, #1
 80087ea:	409a      	lsls	r2, r3
 80087ec:	4b17      	ldr	r3, [pc, #92]	; (800884c <xTaskRemoveFromEventList+0xb0>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4313      	orrs	r3, r2
 80087f2:	4a16      	ldr	r2, [pc, #88]	; (800884c <xTaskRemoveFromEventList+0xb0>)
 80087f4:	6013      	str	r3, [r2, #0]
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087fa:	4613      	mov	r3, r2
 80087fc:	009b      	lsls	r3, r3, #2
 80087fe:	4413      	add	r3, r2
 8008800:	009b      	lsls	r3, r3, #2
 8008802:	4a13      	ldr	r2, [pc, #76]	; (8008850 <xTaskRemoveFromEventList+0xb4>)
 8008804:	441a      	add	r2, r3
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	3304      	adds	r3, #4
 800880a:	4619      	mov	r1, r3
 800880c:	4610      	mov	r0, r2
 800880e:	f7fe fc8f 	bl	8007130 <vListInsertEnd>
 8008812:	e005      	b.n	8008820 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	3318      	adds	r3, #24
 8008818:	4619      	mov	r1, r3
 800881a:	480e      	ldr	r0, [pc, #56]	; (8008854 <xTaskRemoveFromEventList+0xb8>)
 800881c:	f7fe fc88 	bl	8007130 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008824:	4b0c      	ldr	r3, [pc, #48]	; (8008858 <xTaskRemoveFromEventList+0xbc>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800882a:	429a      	cmp	r2, r3
 800882c:	d905      	bls.n	800883a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800882e:	2301      	movs	r3, #1
 8008830:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008832:	4b0a      	ldr	r3, [pc, #40]	; (800885c <xTaskRemoveFromEventList+0xc0>)
 8008834:	2201      	movs	r2, #1
 8008836:	601a      	str	r2, [r3, #0]
 8008838:	e001      	b.n	800883e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800883a:	2300      	movs	r3, #0
 800883c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800883e:	697b      	ldr	r3, [r7, #20]
}
 8008840:	4618      	mov	r0, r3
 8008842:	3718      	adds	r7, #24
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}
 8008848:	200008b4 	.word	0x200008b4
 800884c:	20000894 	.word	0x20000894
 8008850:	20000790 	.word	0x20000790
 8008854:	2000084c 	.word	0x2000084c
 8008858:	2000078c 	.word	0x2000078c
 800885c:	200008a0 	.word	0x200008a0

08008860 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b086      	sub	sp, #24
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800886a:	4b29      	ldr	r3, [pc, #164]	; (8008910 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d10a      	bne.n	8008888 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8008872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008876:	f383 8811 	msr	BASEPRI, r3
 800887a:	f3bf 8f6f 	isb	sy
 800887e:	f3bf 8f4f 	dsb	sy
 8008882:	613b      	str	r3, [r7, #16]
}
 8008884:	bf00      	nop
 8008886:	e7fe      	b.n	8008886 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	68db      	ldr	r3, [r3, #12]
 8008896:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d10a      	bne.n	80088b4 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800889e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a2:	f383 8811 	msr	BASEPRI, r3
 80088a6:	f3bf 8f6f 	isb	sy
 80088aa:	f3bf 8f4f 	dsb	sy
 80088ae:	60fb      	str	r3, [r7, #12]
}
 80088b0:	bf00      	nop
 80088b2:	e7fe      	b.n	80088b2 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f7fe fc98 	bl	80071ea <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	3304      	adds	r3, #4
 80088be:	4618      	mov	r0, r3
 80088c0:	f7fe fc93 	bl	80071ea <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088c8:	2201      	movs	r2, #1
 80088ca:	409a      	lsls	r2, r3
 80088cc:	4b11      	ldr	r3, [pc, #68]	; (8008914 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4313      	orrs	r3, r2
 80088d2:	4a10      	ldr	r2, [pc, #64]	; (8008914 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80088d4:	6013      	str	r3, [r2, #0]
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088da:	4613      	mov	r3, r2
 80088dc:	009b      	lsls	r3, r3, #2
 80088de:	4413      	add	r3, r2
 80088e0:	009b      	lsls	r3, r3, #2
 80088e2:	4a0d      	ldr	r2, [pc, #52]	; (8008918 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80088e4:	441a      	add	r2, r3
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	3304      	adds	r3, #4
 80088ea:	4619      	mov	r1, r3
 80088ec:	4610      	mov	r0, r2
 80088ee:	f7fe fc1f 	bl	8007130 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088f6:	4b09      	ldr	r3, [pc, #36]	; (800891c <vTaskRemoveFromUnorderedEventList+0xbc>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d902      	bls.n	8008906 <vTaskRemoveFromUnorderedEventList+0xa6>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8008900:	4b07      	ldr	r3, [pc, #28]	; (8008920 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8008902:	2201      	movs	r2, #1
 8008904:	601a      	str	r2, [r3, #0]
	}
}
 8008906:	bf00      	nop
 8008908:	3718      	adds	r7, #24
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
 800890e:	bf00      	nop
 8008910:	200008b4 	.word	0x200008b4
 8008914:	20000894 	.word	0x20000894
 8008918:	20000790 	.word	0x20000790
 800891c:	2000078c 	.word	0x2000078c
 8008920:	200008a0 	.word	0x200008a0

08008924 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008924:	b480      	push	{r7}
 8008926:	b083      	sub	sp, #12
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800892c:	4b06      	ldr	r3, [pc, #24]	; (8008948 <vTaskInternalSetTimeOutState+0x24>)
 800892e:	681a      	ldr	r2, [r3, #0]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008934:	4b05      	ldr	r3, [pc, #20]	; (800894c <vTaskInternalSetTimeOutState+0x28>)
 8008936:	681a      	ldr	r2, [r3, #0]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	605a      	str	r2, [r3, #4]
}
 800893c:	bf00      	nop
 800893e:	370c      	adds	r7, #12
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr
 8008948:	200008a4 	.word	0x200008a4
 800894c:	20000890 	.word	0x20000890

08008950 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b088      	sub	sp, #32
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d10a      	bne.n	8008976 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008964:	f383 8811 	msr	BASEPRI, r3
 8008968:	f3bf 8f6f 	isb	sy
 800896c:	f3bf 8f4f 	dsb	sy
 8008970:	613b      	str	r3, [r7, #16]
}
 8008972:	bf00      	nop
 8008974:	e7fe      	b.n	8008974 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d10a      	bne.n	8008992 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800897c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008980:	f383 8811 	msr	BASEPRI, r3
 8008984:	f3bf 8f6f 	isb	sy
 8008988:	f3bf 8f4f 	dsb	sy
 800898c:	60fb      	str	r3, [r7, #12]
}
 800898e:	bf00      	nop
 8008990:	e7fe      	b.n	8008990 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008992:	f000 fc87 	bl	80092a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008996:	4b1d      	ldr	r3, [pc, #116]	; (8008a0c <xTaskCheckForTimeOut+0xbc>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	69ba      	ldr	r2, [r7, #24]
 80089a2:	1ad3      	subs	r3, r2, r3
 80089a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089ae:	d102      	bne.n	80089b6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80089b0:	2300      	movs	r3, #0
 80089b2:	61fb      	str	r3, [r7, #28]
 80089b4:	e023      	b.n	80089fe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681a      	ldr	r2, [r3, #0]
 80089ba:	4b15      	ldr	r3, [pc, #84]	; (8008a10 <xTaskCheckForTimeOut+0xc0>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	429a      	cmp	r2, r3
 80089c0:	d007      	beq.n	80089d2 <xTaskCheckForTimeOut+0x82>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	69ba      	ldr	r2, [r7, #24]
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d302      	bcc.n	80089d2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80089cc:	2301      	movs	r3, #1
 80089ce:	61fb      	str	r3, [r7, #28]
 80089d0:	e015      	b.n	80089fe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	697a      	ldr	r2, [r7, #20]
 80089d8:	429a      	cmp	r2, r3
 80089da:	d20b      	bcs.n	80089f4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	681a      	ldr	r2, [r3, #0]
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	1ad2      	subs	r2, r2, r3
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f7ff ff9b 	bl	8008924 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80089ee:	2300      	movs	r3, #0
 80089f0:	61fb      	str	r3, [r7, #28]
 80089f2:	e004      	b.n	80089fe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	2200      	movs	r2, #0
 80089f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80089fa:	2301      	movs	r3, #1
 80089fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80089fe:	f000 fc81 	bl	8009304 <vPortExitCritical>

	return xReturn;
 8008a02:	69fb      	ldr	r3, [r7, #28]
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3720      	adds	r7, #32
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}
 8008a0c:	20000890 	.word	0x20000890
 8008a10:	200008a4 	.word	0x200008a4

08008a14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008a14:	b480      	push	{r7}
 8008a16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008a18:	4b03      	ldr	r3, [pc, #12]	; (8008a28 <vTaskMissedYield+0x14>)
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	601a      	str	r2, [r3, #0]
}
 8008a1e:	bf00      	nop
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr
 8008a28:	200008a0 	.word	0x200008a0

08008a2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b082      	sub	sp, #8
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008a34:	f000 f852 	bl	8008adc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008a38:	4b06      	ldr	r3, [pc, #24]	; (8008a54 <prvIdleTask+0x28>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d9f9      	bls.n	8008a34 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008a40:	4b05      	ldr	r3, [pc, #20]	; (8008a58 <prvIdleTask+0x2c>)
 8008a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a46:	601a      	str	r2, [r3, #0]
 8008a48:	f3bf 8f4f 	dsb	sy
 8008a4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008a50:	e7f0      	b.n	8008a34 <prvIdleTask+0x8>
 8008a52:	bf00      	nop
 8008a54:	20000790 	.word	0x20000790
 8008a58:	e000ed04 	.word	0xe000ed04

08008a5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b082      	sub	sp, #8
 8008a60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a62:	2300      	movs	r3, #0
 8008a64:	607b      	str	r3, [r7, #4]
 8008a66:	e00c      	b.n	8008a82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008a68:	687a      	ldr	r2, [r7, #4]
 8008a6a:	4613      	mov	r3, r2
 8008a6c:	009b      	lsls	r3, r3, #2
 8008a6e:	4413      	add	r3, r2
 8008a70:	009b      	lsls	r3, r3, #2
 8008a72:	4a12      	ldr	r2, [pc, #72]	; (8008abc <prvInitialiseTaskLists+0x60>)
 8008a74:	4413      	add	r3, r2
 8008a76:	4618      	mov	r0, r3
 8008a78:	f7fe fb2d 	bl	80070d6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	3301      	adds	r3, #1
 8008a80:	607b      	str	r3, [r7, #4]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2b06      	cmp	r3, #6
 8008a86:	d9ef      	bls.n	8008a68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008a88:	480d      	ldr	r0, [pc, #52]	; (8008ac0 <prvInitialiseTaskLists+0x64>)
 8008a8a:	f7fe fb24 	bl	80070d6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008a8e:	480d      	ldr	r0, [pc, #52]	; (8008ac4 <prvInitialiseTaskLists+0x68>)
 8008a90:	f7fe fb21 	bl	80070d6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008a94:	480c      	ldr	r0, [pc, #48]	; (8008ac8 <prvInitialiseTaskLists+0x6c>)
 8008a96:	f7fe fb1e 	bl	80070d6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008a9a:	480c      	ldr	r0, [pc, #48]	; (8008acc <prvInitialiseTaskLists+0x70>)
 8008a9c:	f7fe fb1b 	bl	80070d6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008aa0:	480b      	ldr	r0, [pc, #44]	; (8008ad0 <prvInitialiseTaskLists+0x74>)
 8008aa2:	f7fe fb18 	bl	80070d6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008aa6:	4b0b      	ldr	r3, [pc, #44]	; (8008ad4 <prvInitialiseTaskLists+0x78>)
 8008aa8:	4a05      	ldr	r2, [pc, #20]	; (8008ac0 <prvInitialiseTaskLists+0x64>)
 8008aaa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008aac:	4b0a      	ldr	r3, [pc, #40]	; (8008ad8 <prvInitialiseTaskLists+0x7c>)
 8008aae:	4a05      	ldr	r2, [pc, #20]	; (8008ac4 <prvInitialiseTaskLists+0x68>)
 8008ab0:	601a      	str	r2, [r3, #0]
}
 8008ab2:	bf00      	nop
 8008ab4:	3708      	adds	r7, #8
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}
 8008aba:	bf00      	nop
 8008abc:	20000790 	.word	0x20000790
 8008ac0:	2000081c 	.word	0x2000081c
 8008ac4:	20000830 	.word	0x20000830
 8008ac8:	2000084c 	.word	0x2000084c
 8008acc:	20000860 	.word	0x20000860
 8008ad0:	20000878 	.word	0x20000878
 8008ad4:	20000844 	.word	0x20000844
 8008ad8:	20000848 	.word	0x20000848

08008adc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b082      	sub	sp, #8
 8008ae0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ae2:	e019      	b.n	8008b18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008ae4:	f000 fbde 	bl	80092a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ae8:	4b10      	ldr	r3, [pc, #64]	; (8008b2c <prvCheckTasksWaitingTermination+0x50>)
 8008aea:	68db      	ldr	r3, [r3, #12]
 8008aec:	68db      	ldr	r3, [r3, #12]
 8008aee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	3304      	adds	r3, #4
 8008af4:	4618      	mov	r0, r3
 8008af6:	f7fe fb78 	bl	80071ea <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008afa:	4b0d      	ldr	r3, [pc, #52]	; (8008b30 <prvCheckTasksWaitingTermination+0x54>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	3b01      	subs	r3, #1
 8008b00:	4a0b      	ldr	r2, [pc, #44]	; (8008b30 <prvCheckTasksWaitingTermination+0x54>)
 8008b02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008b04:	4b0b      	ldr	r3, [pc, #44]	; (8008b34 <prvCheckTasksWaitingTermination+0x58>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	3b01      	subs	r3, #1
 8008b0a:	4a0a      	ldr	r2, [pc, #40]	; (8008b34 <prvCheckTasksWaitingTermination+0x58>)
 8008b0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008b0e:	f000 fbf9 	bl	8009304 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 f810 	bl	8008b38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b18:	4b06      	ldr	r3, [pc, #24]	; (8008b34 <prvCheckTasksWaitingTermination+0x58>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d1e1      	bne.n	8008ae4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008b20:	bf00      	nop
 8008b22:	bf00      	nop
 8008b24:	3708      	adds	r7, #8
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	bf00      	nop
 8008b2c:	20000860 	.word	0x20000860
 8008b30:	2000088c 	.word	0x2000088c
 8008b34:	20000874 	.word	0x20000874

08008b38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d108      	bne.n	8008b5c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f000 fd96 	bl	8009680 <vPortFree>
				vPortFree( pxTCB );
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f000 fd93 	bl	8009680 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008b5a:	e018      	b.n	8008b8e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008b62:	2b01      	cmp	r3, #1
 8008b64:	d103      	bne.n	8008b6e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f000 fd8a 	bl	8009680 <vPortFree>
	}
 8008b6c:	e00f      	b.n	8008b8e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008b74:	2b02      	cmp	r3, #2
 8008b76:	d00a      	beq.n	8008b8e <prvDeleteTCB+0x56>
	__asm volatile
 8008b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b7c:	f383 8811 	msr	BASEPRI, r3
 8008b80:	f3bf 8f6f 	isb	sy
 8008b84:	f3bf 8f4f 	dsb	sy
 8008b88:	60fb      	str	r3, [r7, #12]
}
 8008b8a:	bf00      	nop
 8008b8c:	e7fe      	b.n	8008b8c <prvDeleteTCB+0x54>
	}
 8008b8e:	bf00      	nop
 8008b90:	3710      	adds	r7, #16
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
	...

08008b98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b083      	sub	sp, #12
 8008b9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b9e:	4b0c      	ldr	r3, [pc, #48]	; (8008bd0 <prvResetNextTaskUnblockTime+0x38>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d104      	bne.n	8008bb2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008ba8:	4b0a      	ldr	r3, [pc, #40]	; (8008bd4 <prvResetNextTaskUnblockTime+0x3c>)
 8008baa:	f04f 32ff 	mov.w	r2, #4294967295
 8008bae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008bb0:	e008      	b.n	8008bc4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bb2:	4b07      	ldr	r3, [pc, #28]	; (8008bd0 <prvResetNextTaskUnblockTime+0x38>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	68db      	ldr	r3, [r3, #12]
 8008bb8:	68db      	ldr	r3, [r3, #12]
 8008bba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	4a04      	ldr	r2, [pc, #16]	; (8008bd4 <prvResetNextTaskUnblockTime+0x3c>)
 8008bc2:	6013      	str	r3, [r2, #0]
}
 8008bc4:	bf00      	nop
 8008bc6:	370c      	adds	r7, #12
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr
 8008bd0:	20000844 	.word	0x20000844
 8008bd4:	200008ac 	.word	0x200008ac

08008bd8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008bd8:	b480      	push	{r7}
 8008bda:	b083      	sub	sp, #12
 8008bdc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008bde:	4b0b      	ldr	r3, [pc, #44]	; (8008c0c <xTaskGetSchedulerState+0x34>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d102      	bne.n	8008bec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008be6:	2301      	movs	r3, #1
 8008be8:	607b      	str	r3, [r7, #4]
 8008bea:	e008      	b.n	8008bfe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bec:	4b08      	ldr	r3, [pc, #32]	; (8008c10 <xTaskGetSchedulerState+0x38>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d102      	bne.n	8008bfa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008bf4:	2302      	movs	r3, #2
 8008bf6:	607b      	str	r3, [r7, #4]
 8008bf8:	e001      	b.n	8008bfe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008bfe:	687b      	ldr	r3, [r7, #4]
	}
 8008c00:	4618      	mov	r0, r3
 8008c02:	370c      	adds	r7, #12
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr
 8008c0c:	20000898 	.word	0x20000898
 8008c10:	200008b4 	.word	0x200008b4

08008c14 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b084      	sub	sp, #16
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008c20:	2300      	movs	r3, #0
 8008c22:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d05e      	beq.n	8008ce8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c2e:	4b31      	ldr	r3, [pc, #196]	; (8008cf4 <xTaskPriorityInherit+0xe0>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d24e      	bcs.n	8008cd6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	699b      	ldr	r3, [r3, #24]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	db06      	blt.n	8008c4e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c40:	4b2c      	ldr	r3, [pc, #176]	; (8008cf4 <xTaskPriorityInherit+0xe0>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c46:	f1c3 0207 	rsb	r2, r3, #7
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	6959      	ldr	r1, [r3, #20]
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c56:	4613      	mov	r3, r2
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	4413      	add	r3, r2
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	4a26      	ldr	r2, [pc, #152]	; (8008cf8 <xTaskPriorityInherit+0xe4>)
 8008c60:	4413      	add	r3, r2
 8008c62:	4299      	cmp	r1, r3
 8008c64:	d12f      	bne.n	8008cc6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	3304      	adds	r3, #4
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f7fe fabd 	bl	80071ea <uxListRemove>
 8008c70:	4603      	mov	r3, r0
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d10a      	bne.n	8008c8c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c80:	43da      	mvns	r2, r3
 8008c82:	4b1e      	ldr	r3, [pc, #120]	; (8008cfc <xTaskPriorityInherit+0xe8>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4013      	ands	r3, r2
 8008c88:	4a1c      	ldr	r2, [pc, #112]	; (8008cfc <xTaskPriorityInherit+0xe8>)
 8008c8a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008c8c:	4b19      	ldr	r3, [pc, #100]	; (8008cf4 <xTaskPriorityInherit+0xe0>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	409a      	lsls	r2, r3
 8008c9e:	4b17      	ldr	r3, [pc, #92]	; (8008cfc <xTaskPriorityInherit+0xe8>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	4a15      	ldr	r2, [pc, #84]	; (8008cfc <xTaskPriorityInherit+0xe8>)
 8008ca6:	6013      	str	r3, [r2, #0]
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cac:	4613      	mov	r3, r2
 8008cae:	009b      	lsls	r3, r3, #2
 8008cb0:	4413      	add	r3, r2
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	4a10      	ldr	r2, [pc, #64]	; (8008cf8 <xTaskPriorityInherit+0xe4>)
 8008cb6:	441a      	add	r2, r3
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	3304      	adds	r3, #4
 8008cbc:	4619      	mov	r1, r3
 8008cbe:	4610      	mov	r0, r2
 8008cc0:	f7fe fa36 	bl	8007130 <vListInsertEnd>
 8008cc4:	e004      	b.n	8008cd0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008cc6:	4b0b      	ldr	r3, [pc, #44]	; (8008cf4 <xTaskPriorityInherit+0xe0>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	60fb      	str	r3, [r7, #12]
 8008cd4:	e008      	b.n	8008ce8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008cda:	4b06      	ldr	r3, [pc, #24]	; (8008cf4 <xTaskPriorityInherit+0xe0>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d201      	bcs.n	8008ce8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
	}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3710      	adds	r7, #16
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}
 8008cf2:	bf00      	nop
 8008cf4:	2000078c 	.word	0x2000078c
 8008cf8:	20000790 	.word	0x20000790
 8008cfc:	20000894 	.word	0x20000894

08008d00 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b086      	sub	sp, #24
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d06e      	beq.n	8008df4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008d16:	4b3a      	ldr	r3, [pc, #232]	; (8008e00 <xTaskPriorityDisinherit+0x100>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	693a      	ldr	r2, [r7, #16]
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d00a      	beq.n	8008d36 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d24:	f383 8811 	msr	BASEPRI, r3
 8008d28:	f3bf 8f6f 	isb	sy
 8008d2c:	f3bf 8f4f 	dsb	sy
 8008d30:	60fb      	str	r3, [r7, #12]
}
 8008d32:	bf00      	nop
 8008d34:	e7fe      	b.n	8008d34 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d10a      	bne.n	8008d54 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d42:	f383 8811 	msr	BASEPRI, r3
 8008d46:	f3bf 8f6f 	isb	sy
 8008d4a:	f3bf 8f4f 	dsb	sy
 8008d4e:	60bb      	str	r3, [r7, #8]
}
 8008d50:	bf00      	nop
 8008d52:	e7fe      	b.n	8008d52 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d58:	1e5a      	subs	r2, r3, #1
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d044      	beq.n	8008df4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d140      	bne.n	8008df4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	3304      	adds	r3, #4
 8008d76:	4618      	mov	r0, r3
 8008d78:	f7fe fa37 	bl	80071ea <uxListRemove>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d115      	bne.n	8008dae <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d86:	491f      	ldr	r1, [pc, #124]	; (8008e04 <xTaskPriorityDisinherit+0x104>)
 8008d88:	4613      	mov	r3, r2
 8008d8a:	009b      	lsls	r3, r3, #2
 8008d8c:	4413      	add	r3, r2
 8008d8e:	009b      	lsls	r3, r3, #2
 8008d90:	440b      	add	r3, r1
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d10a      	bne.n	8008dae <xTaskPriorityDisinherit+0xae>
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8008da2:	43da      	mvns	r2, r3
 8008da4:	4b18      	ldr	r3, [pc, #96]	; (8008e08 <xTaskPriorityDisinherit+0x108>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4013      	ands	r3, r2
 8008daa:	4a17      	ldr	r2, [pc, #92]	; (8008e08 <xTaskPriorityDisinherit+0x108>)
 8008dac:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dba:	f1c3 0207 	rsb	r2, r3, #7
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	409a      	lsls	r2, r3
 8008dca:	4b0f      	ldr	r3, [pc, #60]	; (8008e08 <xTaskPriorityDisinherit+0x108>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	4a0d      	ldr	r2, [pc, #52]	; (8008e08 <xTaskPriorityDisinherit+0x108>)
 8008dd2:	6013      	str	r3, [r2, #0]
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dd8:	4613      	mov	r3, r2
 8008dda:	009b      	lsls	r3, r3, #2
 8008ddc:	4413      	add	r3, r2
 8008dde:	009b      	lsls	r3, r3, #2
 8008de0:	4a08      	ldr	r2, [pc, #32]	; (8008e04 <xTaskPriorityDisinherit+0x104>)
 8008de2:	441a      	add	r2, r3
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	3304      	adds	r3, #4
 8008de8:	4619      	mov	r1, r3
 8008dea:	4610      	mov	r0, r2
 8008dec:	f7fe f9a0 	bl	8007130 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008df0:	2301      	movs	r3, #1
 8008df2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008df4:	697b      	ldr	r3, [r7, #20]
	}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3718      	adds	r7, #24
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}
 8008dfe:	bf00      	nop
 8008e00:	2000078c 	.word	0x2000078c
 8008e04:	20000790 	.word	0x20000790
 8008e08:	20000894 	.word	0x20000894

08008e0c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b088      	sub	sp, #32
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d077      	beq.n	8008f14 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008e24:	69bb      	ldr	r3, [r7, #24]
 8008e26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d10a      	bne.n	8008e42 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e30:	f383 8811 	msr	BASEPRI, r3
 8008e34:	f3bf 8f6f 	isb	sy
 8008e38:	f3bf 8f4f 	dsb	sy
 8008e3c:	60fb      	str	r3, [r7, #12]
}
 8008e3e:	bf00      	nop
 8008e40:	e7fe      	b.n	8008e40 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008e42:	69bb      	ldr	r3, [r7, #24]
 8008e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e46:	683a      	ldr	r2, [r7, #0]
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	d902      	bls.n	8008e52 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	61fb      	str	r3, [r7, #28]
 8008e50:	e002      	b.n	8008e58 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008e52:	69bb      	ldr	r3, [r7, #24]
 8008e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e56:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008e58:	69bb      	ldr	r3, [r7, #24]
 8008e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e5c:	69fa      	ldr	r2, [r7, #28]
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	d058      	beq.n	8008f14 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008e62:	69bb      	ldr	r3, [r7, #24]
 8008e64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e66:	697a      	ldr	r2, [r7, #20]
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d153      	bne.n	8008f14 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008e6c:	4b2b      	ldr	r3, [pc, #172]	; (8008f1c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	69ba      	ldr	r2, [r7, #24]
 8008e72:	429a      	cmp	r2, r3
 8008e74:	d10a      	bne.n	8008e8c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e7a:	f383 8811 	msr	BASEPRI, r3
 8008e7e:	f3bf 8f6f 	isb	sy
 8008e82:	f3bf 8f4f 	dsb	sy
 8008e86:	60bb      	str	r3, [r7, #8]
}
 8008e88:	bf00      	nop
 8008e8a:	e7fe      	b.n	8008e8a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008e8c:	69bb      	ldr	r3, [r7, #24]
 8008e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e90:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008e92:	69bb      	ldr	r3, [r7, #24]
 8008e94:	69fa      	ldr	r2, [r7, #28]
 8008e96:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008e98:	69bb      	ldr	r3, [r7, #24]
 8008e9a:	699b      	ldr	r3, [r3, #24]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	db04      	blt.n	8008eaa <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ea0:	69fb      	ldr	r3, [r7, #28]
 8008ea2:	f1c3 0207 	rsb	r2, r3, #7
 8008ea6:	69bb      	ldr	r3, [r7, #24]
 8008ea8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008eaa:	69bb      	ldr	r3, [r7, #24]
 8008eac:	6959      	ldr	r1, [r3, #20]
 8008eae:	693a      	ldr	r2, [r7, #16]
 8008eb0:	4613      	mov	r3, r2
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	4413      	add	r3, r2
 8008eb6:	009b      	lsls	r3, r3, #2
 8008eb8:	4a19      	ldr	r2, [pc, #100]	; (8008f20 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008eba:	4413      	add	r3, r2
 8008ebc:	4299      	cmp	r1, r3
 8008ebe:	d129      	bne.n	8008f14 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ec0:	69bb      	ldr	r3, [r7, #24]
 8008ec2:	3304      	adds	r3, #4
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f7fe f990 	bl	80071ea <uxListRemove>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d10a      	bne.n	8008ee6 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8008ed0:	69bb      	ldr	r3, [r7, #24]
 8008ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed4:	2201      	movs	r2, #1
 8008ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8008eda:	43da      	mvns	r2, r3
 8008edc:	4b11      	ldr	r3, [pc, #68]	; (8008f24 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4013      	ands	r3, r2
 8008ee2:	4a10      	ldr	r2, [pc, #64]	; (8008f24 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008ee4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008ee6:	69bb      	ldr	r3, [r7, #24]
 8008ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eea:	2201      	movs	r2, #1
 8008eec:	409a      	lsls	r2, r3
 8008eee:	4b0d      	ldr	r3, [pc, #52]	; (8008f24 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	4a0b      	ldr	r2, [pc, #44]	; (8008f24 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008ef6:	6013      	str	r3, [r2, #0]
 8008ef8:	69bb      	ldr	r3, [r7, #24]
 8008efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008efc:	4613      	mov	r3, r2
 8008efe:	009b      	lsls	r3, r3, #2
 8008f00:	4413      	add	r3, r2
 8008f02:	009b      	lsls	r3, r3, #2
 8008f04:	4a06      	ldr	r2, [pc, #24]	; (8008f20 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008f06:	441a      	add	r2, r3
 8008f08:	69bb      	ldr	r3, [r7, #24]
 8008f0a:	3304      	adds	r3, #4
 8008f0c:	4619      	mov	r1, r3
 8008f0e:	4610      	mov	r0, r2
 8008f10:	f7fe f90e 	bl	8007130 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008f14:	bf00      	nop
 8008f16:	3720      	adds	r7, #32
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}
 8008f1c:	2000078c 	.word	0x2000078c
 8008f20:	20000790 	.word	0x20000790
 8008f24:	20000894 	.word	0x20000894

08008f28 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b083      	sub	sp, #12
 8008f2c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8008f2e:	4b09      	ldr	r3, [pc, #36]	; (8008f54 <uxTaskResetEventItemValue+0x2c>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	699b      	ldr	r3, [r3, #24]
 8008f34:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f36:	4b07      	ldr	r3, [pc, #28]	; (8008f54 <uxTaskResetEventItemValue+0x2c>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f3c:	4b05      	ldr	r3, [pc, #20]	; (8008f54 <uxTaskResetEventItemValue+0x2c>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f1c2 0207 	rsb	r2, r2, #7
 8008f44:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8008f46:	687b      	ldr	r3, [r7, #4]
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	370c      	adds	r7, #12
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr
 8008f54:	2000078c 	.word	0x2000078c

08008f58 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008f58:	b480      	push	{r7}
 8008f5a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008f5c:	4b07      	ldr	r3, [pc, #28]	; (8008f7c <pvTaskIncrementMutexHeldCount+0x24>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d004      	beq.n	8008f6e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008f64:	4b05      	ldr	r3, [pc, #20]	; (8008f7c <pvTaskIncrementMutexHeldCount+0x24>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008f6a:	3201      	adds	r2, #1
 8008f6c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8008f6e:	4b03      	ldr	r3, [pc, #12]	; (8008f7c <pvTaskIncrementMutexHeldCount+0x24>)
 8008f70:	681b      	ldr	r3, [r3, #0]
	}
 8008f72:	4618      	mov	r0, r3
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr
 8008f7c:	2000078c 	.word	0x2000078c

08008f80 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b084      	sub	sp, #16
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008f8a:	4b29      	ldr	r3, [pc, #164]	; (8009030 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f90:	4b28      	ldr	r3, [pc, #160]	; (8009034 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	3304      	adds	r3, #4
 8008f96:	4618      	mov	r0, r3
 8008f98:	f7fe f927 	bl	80071ea <uxListRemove>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d10b      	bne.n	8008fba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008fa2:	4b24      	ldr	r3, [pc, #144]	; (8009034 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fa8:	2201      	movs	r2, #1
 8008faa:	fa02 f303 	lsl.w	r3, r2, r3
 8008fae:	43da      	mvns	r2, r3
 8008fb0:	4b21      	ldr	r3, [pc, #132]	; (8009038 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4013      	ands	r3, r2
 8008fb6:	4a20      	ldr	r2, [pc, #128]	; (8009038 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008fb8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fc0:	d10a      	bne.n	8008fd8 <prvAddCurrentTaskToDelayedList+0x58>
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d007      	beq.n	8008fd8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008fc8:	4b1a      	ldr	r3, [pc, #104]	; (8009034 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	3304      	adds	r3, #4
 8008fce:	4619      	mov	r1, r3
 8008fd0:	481a      	ldr	r0, [pc, #104]	; (800903c <prvAddCurrentTaskToDelayedList+0xbc>)
 8008fd2:	f7fe f8ad 	bl	8007130 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008fd6:	e026      	b.n	8009026 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008fd8:	68fa      	ldr	r2, [r7, #12]
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	4413      	add	r3, r2
 8008fde:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008fe0:	4b14      	ldr	r3, [pc, #80]	; (8009034 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	68ba      	ldr	r2, [r7, #8]
 8008fe6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008fe8:	68ba      	ldr	r2, [r7, #8]
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d209      	bcs.n	8009004 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ff0:	4b13      	ldr	r3, [pc, #76]	; (8009040 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008ff2:	681a      	ldr	r2, [r3, #0]
 8008ff4:	4b0f      	ldr	r3, [pc, #60]	; (8009034 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	3304      	adds	r3, #4
 8008ffa:	4619      	mov	r1, r3
 8008ffc:	4610      	mov	r0, r2
 8008ffe:	f7fe f8bb 	bl	8007178 <vListInsert>
}
 8009002:	e010      	b.n	8009026 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009004:	4b0f      	ldr	r3, [pc, #60]	; (8009044 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009006:	681a      	ldr	r2, [r3, #0]
 8009008:	4b0a      	ldr	r3, [pc, #40]	; (8009034 <prvAddCurrentTaskToDelayedList+0xb4>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	3304      	adds	r3, #4
 800900e:	4619      	mov	r1, r3
 8009010:	4610      	mov	r0, r2
 8009012:	f7fe f8b1 	bl	8007178 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009016:	4b0c      	ldr	r3, [pc, #48]	; (8009048 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	68ba      	ldr	r2, [r7, #8]
 800901c:	429a      	cmp	r2, r3
 800901e:	d202      	bcs.n	8009026 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009020:	4a09      	ldr	r2, [pc, #36]	; (8009048 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	6013      	str	r3, [r2, #0]
}
 8009026:	bf00      	nop
 8009028:	3710      	adds	r7, #16
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
 800902e:	bf00      	nop
 8009030:	20000890 	.word	0x20000890
 8009034:	2000078c 	.word	0x2000078c
 8009038:	20000894 	.word	0x20000894
 800903c:	20000878 	.word	0x20000878
 8009040:	20000848 	.word	0x20000848
 8009044:	20000844 	.word	0x20000844
 8009048:	200008ac 	.word	0x200008ac

0800904c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800904c:	b480      	push	{r7}
 800904e:	b085      	sub	sp, #20
 8009050:	af00      	add	r7, sp, #0
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	60b9      	str	r1, [r7, #8]
 8009056:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	3b04      	subs	r3, #4
 800905c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009064:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	3b04      	subs	r3, #4
 800906a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	f023 0201 	bic.w	r2, r3, #1
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	3b04      	subs	r3, #4
 800907a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800907c:	4a0c      	ldr	r2, [pc, #48]	; (80090b0 <pxPortInitialiseStack+0x64>)
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	3b14      	subs	r3, #20
 8009086:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009088:	687a      	ldr	r2, [r7, #4]
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	3b04      	subs	r3, #4
 8009092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f06f 0202 	mvn.w	r2, #2
 800909a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	3b20      	subs	r3, #32
 80090a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80090a2:	68fb      	ldr	r3, [r7, #12]
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3714      	adds	r7, #20
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr
 80090b0:	080090b5 	.word	0x080090b5

080090b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80090b4:	b480      	push	{r7}
 80090b6:	b085      	sub	sp, #20
 80090b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80090ba:	2300      	movs	r3, #0
 80090bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80090be:	4b12      	ldr	r3, [pc, #72]	; (8009108 <prvTaskExitError+0x54>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090c6:	d00a      	beq.n	80090de <prvTaskExitError+0x2a>
	__asm volatile
 80090c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090cc:	f383 8811 	msr	BASEPRI, r3
 80090d0:	f3bf 8f6f 	isb	sy
 80090d4:	f3bf 8f4f 	dsb	sy
 80090d8:	60fb      	str	r3, [r7, #12]
}
 80090da:	bf00      	nop
 80090dc:	e7fe      	b.n	80090dc <prvTaskExitError+0x28>
	__asm volatile
 80090de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e2:	f383 8811 	msr	BASEPRI, r3
 80090e6:	f3bf 8f6f 	isb	sy
 80090ea:	f3bf 8f4f 	dsb	sy
 80090ee:	60bb      	str	r3, [r7, #8]
}
 80090f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80090f2:	bf00      	nop
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d0fc      	beq.n	80090f4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80090fa:	bf00      	nop
 80090fc:	bf00      	nop
 80090fe:	3714      	adds	r7, #20
 8009100:	46bd      	mov	sp, r7
 8009102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009106:	4770      	bx	lr
 8009108:	2000000c 	.word	0x2000000c
 800910c:	00000000 	.word	0x00000000

08009110 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009110:	4b07      	ldr	r3, [pc, #28]	; (8009130 <pxCurrentTCBConst2>)
 8009112:	6819      	ldr	r1, [r3, #0]
 8009114:	6808      	ldr	r0, [r1, #0]
 8009116:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800911a:	f380 8809 	msr	PSP, r0
 800911e:	f3bf 8f6f 	isb	sy
 8009122:	f04f 0000 	mov.w	r0, #0
 8009126:	f380 8811 	msr	BASEPRI, r0
 800912a:	4770      	bx	lr
 800912c:	f3af 8000 	nop.w

08009130 <pxCurrentTCBConst2>:
 8009130:	2000078c 	.word	0x2000078c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009134:	bf00      	nop
 8009136:	bf00      	nop

08009138 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009138:	4808      	ldr	r0, [pc, #32]	; (800915c <prvPortStartFirstTask+0x24>)
 800913a:	6800      	ldr	r0, [r0, #0]
 800913c:	6800      	ldr	r0, [r0, #0]
 800913e:	f380 8808 	msr	MSP, r0
 8009142:	f04f 0000 	mov.w	r0, #0
 8009146:	f380 8814 	msr	CONTROL, r0
 800914a:	b662      	cpsie	i
 800914c:	b661      	cpsie	f
 800914e:	f3bf 8f4f 	dsb	sy
 8009152:	f3bf 8f6f 	isb	sy
 8009156:	df00      	svc	0
 8009158:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800915a:	bf00      	nop
 800915c:	e000ed08 	.word	0xe000ed08

08009160 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b086      	sub	sp, #24
 8009164:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009166:	4b46      	ldr	r3, [pc, #280]	; (8009280 <xPortStartScheduler+0x120>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4a46      	ldr	r2, [pc, #280]	; (8009284 <xPortStartScheduler+0x124>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d10a      	bne.n	8009186 <xPortStartScheduler+0x26>
	__asm volatile
 8009170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009174:	f383 8811 	msr	BASEPRI, r3
 8009178:	f3bf 8f6f 	isb	sy
 800917c:	f3bf 8f4f 	dsb	sy
 8009180:	613b      	str	r3, [r7, #16]
}
 8009182:	bf00      	nop
 8009184:	e7fe      	b.n	8009184 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009186:	4b3e      	ldr	r3, [pc, #248]	; (8009280 <xPortStartScheduler+0x120>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	4a3f      	ldr	r2, [pc, #252]	; (8009288 <xPortStartScheduler+0x128>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d10a      	bne.n	80091a6 <xPortStartScheduler+0x46>
	__asm volatile
 8009190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009194:	f383 8811 	msr	BASEPRI, r3
 8009198:	f3bf 8f6f 	isb	sy
 800919c:	f3bf 8f4f 	dsb	sy
 80091a0:	60fb      	str	r3, [r7, #12]
}
 80091a2:	bf00      	nop
 80091a4:	e7fe      	b.n	80091a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80091a6:	4b39      	ldr	r3, [pc, #228]	; (800928c <xPortStartScheduler+0x12c>)
 80091a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	781b      	ldrb	r3, [r3, #0]
 80091ae:	b2db      	uxtb	r3, r3
 80091b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	22ff      	movs	r2, #255	; 0xff
 80091b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	781b      	ldrb	r3, [r3, #0]
 80091bc:	b2db      	uxtb	r3, r3
 80091be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80091c0:	78fb      	ldrb	r3, [r7, #3]
 80091c2:	b2db      	uxtb	r3, r3
 80091c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80091c8:	b2da      	uxtb	r2, r3
 80091ca:	4b31      	ldr	r3, [pc, #196]	; (8009290 <xPortStartScheduler+0x130>)
 80091cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80091ce:	4b31      	ldr	r3, [pc, #196]	; (8009294 <xPortStartScheduler+0x134>)
 80091d0:	2207      	movs	r2, #7
 80091d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80091d4:	e009      	b.n	80091ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80091d6:	4b2f      	ldr	r3, [pc, #188]	; (8009294 <xPortStartScheduler+0x134>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	3b01      	subs	r3, #1
 80091dc:	4a2d      	ldr	r2, [pc, #180]	; (8009294 <xPortStartScheduler+0x134>)
 80091de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80091e0:	78fb      	ldrb	r3, [r7, #3]
 80091e2:	b2db      	uxtb	r3, r3
 80091e4:	005b      	lsls	r3, r3, #1
 80091e6:	b2db      	uxtb	r3, r3
 80091e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80091ea:	78fb      	ldrb	r3, [r7, #3]
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091f2:	2b80      	cmp	r3, #128	; 0x80
 80091f4:	d0ef      	beq.n	80091d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80091f6:	4b27      	ldr	r3, [pc, #156]	; (8009294 <xPortStartScheduler+0x134>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f1c3 0307 	rsb	r3, r3, #7
 80091fe:	2b04      	cmp	r3, #4
 8009200:	d00a      	beq.n	8009218 <xPortStartScheduler+0xb8>
	__asm volatile
 8009202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009206:	f383 8811 	msr	BASEPRI, r3
 800920a:	f3bf 8f6f 	isb	sy
 800920e:	f3bf 8f4f 	dsb	sy
 8009212:	60bb      	str	r3, [r7, #8]
}
 8009214:	bf00      	nop
 8009216:	e7fe      	b.n	8009216 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009218:	4b1e      	ldr	r3, [pc, #120]	; (8009294 <xPortStartScheduler+0x134>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	021b      	lsls	r3, r3, #8
 800921e:	4a1d      	ldr	r2, [pc, #116]	; (8009294 <xPortStartScheduler+0x134>)
 8009220:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009222:	4b1c      	ldr	r3, [pc, #112]	; (8009294 <xPortStartScheduler+0x134>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800922a:	4a1a      	ldr	r2, [pc, #104]	; (8009294 <xPortStartScheduler+0x134>)
 800922c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	b2da      	uxtb	r2, r3
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009236:	4b18      	ldr	r3, [pc, #96]	; (8009298 <xPortStartScheduler+0x138>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a17      	ldr	r2, [pc, #92]	; (8009298 <xPortStartScheduler+0x138>)
 800923c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009240:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009242:	4b15      	ldr	r3, [pc, #84]	; (8009298 <xPortStartScheduler+0x138>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4a14      	ldr	r2, [pc, #80]	; (8009298 <xPortStartScheduler+0x138>)
 8009248:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800924c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800924e:	f000 f8dd 	bl	800940c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009252:	4b12      	ldr	r3, [pc, #72]	; (800929c <xPortStartScheduler+0x13c>)
 8009254:	2200      	movs	r2, #0
 8009256:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009258:	f000 f8fc 	bl	8009454 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800925c:	4b10      	ldr	r3, [pc, #64]	; (80092a0 <xPortStartScheduler+0x140>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a0f      	ldr	r2, [pc, #60]	; (80092a0 <xPortStartScheduler+0x140>)
 8009262:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009266:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009268:	f7ff ff66 	bl	8009138 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800926c:	f7ff f9da 	bl	8008624 <vTaskSwitchContext>
	prvTaskExitError();
 8009270:	f7ff ff20 	bl	80090b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009274:	2300      	movs	r3, #0
}
 8009276:	4618      	mov	r0, r3
 8009278:	3718      	adds	r7, #24
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}
 800927e:	bf00      	nop
 8009280:	e000ed00 	.word	0xe000ed00
 8009284:	410fc271 	.word	0x410fc271
 8009288:	410fc270 	.word	0x410fc270
 800928c:	e000e400 	.word	0xe000e400
 8009290:	200008b8 	.word	0x200008b8
 8009294:	200008bc 	.word	0x200008bc
 8009298:	e000ed20 	.word	0xe000ed20
 800929c:	2000000c 	.word	0x2000000c
 80092a0:	e000ef34 	.word	0xe000ef34

080092a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80092a4:	b480      	push	{r7}
 80092a6:	b083      	sub	sp, #12
 80092a8:	af00      	add	r7, sp, #0
	__asm volatile
 80092aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ae:	f383 8811 	msr	BASEPRI, r3
 80092b2:	f3bf 8f6f 	isb	sy
 80092b6:	f3bf 8f4f 	dsb	sy
 80092ba:	607b      	str	r3, [r7, #4]
}
 80092bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80092be:	4b0f      	ldr	r3, [pc, #60]	; (80092fc <vPortEnterCritical+0x58>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	3301      	adds	r3, #1
 80092c4:	4a0d      	ldr	r2, [pc, #52]	; (80092fc <vPortEnterCritical+0x58>)
 80092c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80092c8:	4b0c      	ldr	r3, [pc, #48]	; (80092fc <vPortEnterCritical+0x58>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	2b01      	cmp	r3, #1
 80092ce:	d10f      	bne.n	80092f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80092d0:	4b0b      	ldr	r3, [pc, #44]	; (8009300 <vPortEnterCritical+0x5c>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	b2db      	uxtb	r3, r3
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d00a      	beq.n	80092f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80092da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092de:	f383 8811 	msr	BASEPRI, r3
 80092e2:	f3bf 8f6f 	isb	sy
 80092e6:	f3bf 8f4f 	dsb	sy
 80092ea:	603b      	str	r3, [r7, #0]
}
 80092ec:	bf00      	nop
 80092ee:	e7fe      	b.n	80092ee <vPortEnterCritical+0x4a>
	}
}
 80092f0:	bf00      	nop
 80092f2:	370c      	adds	r7, #12
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr
 80092fc:	2000000c 	.word	0x2000000c
 8009300:	e000ed04 	.word	0xe000ed04

08009304 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009304:	b480      	push	{r7}
 8009306:	b083      	sub	sp, #12
 8009308:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800930a:	4b12      	ldr	r3, [pc, #72]	; (8009354 <vPortExitCritical+0x50>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d10a      	bne.n	8009328 <vPortExitCritical+0x24>
	__asm volatile
 8009312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009316:	f383 8811 	msr	BASEPRI, r3
 800931a:	f3bf 8f6f 	isb	sy
 800931e:	f3bf 8f4f 	dsb	sy
 8009322:	607b      	str	r3, [r7, #4]
}
 8009324:	bf00      	nop
 8009326:	e7fe      	b.n	8009326 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009328:	4b0a      	ldr	r3, [pc, #40]	; (8009354 <vPortExitCritical+0x50>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	3b01      	subs	r3, #1
 800932e:	4a09      	ldr	r2, [pc, #36]	; (8009354 <vPortExitCritical+0x50>)
 8009330:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009332:	4b08      	ldr	r3, [pc, #32]	; (8009354 <vPortExitCritical+0x50>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d105      	bne.n	8009346 <vPortExitCritical+0x42>
 800933a:	2300      	movs	r3, #0
 800933c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	f383 8811 	msr	BASEPRI, r3
}
 8009344:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009346:	bf00      	nop
 8009348:	370c      	adds	r7, #12
 800934a:	46bd      	mov	sp, r7
 800934c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009350:	4770      	bx	lr
 8009352:	bf00      	nop
 8009354:	2000000c 	.word	0x2000000c
	...

08009360 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009360:	f3ef 8009 	mrs	r0, PSP
 8009364:	f3bf 8f6f 	isb	sy
 8009368:	4b15      	ldr	r3, [pc, #84]	; (80093c0 <pxCurrentTCBConst>)
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	f01e 0f10 	tst.w	lr, #16
 8009370:	bf08      	it	eq
 8009372:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009376:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800937a:	6010      	str	r0, [r2, #0]
 800937c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009380:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009384:	f380 8811 	msr	BASEPRI, r0
 8009388:	f3bf 8f4f 	dsb	sy
 800938c:	f3bf 8f6f 	isb	sy
 8009390:	f7ff f948 	bl	8008624 <vTaskSwitchContext>
 8009394:	f04f 0000 	mov.w	r0, #0
 8009398:	f380 8811 	msr	BASEPRI, r0
 800939c:	bc09      	pop	{r0, r3}
 800939e:	6819      	ldr	r1, [r3, #0]
 80093a0:	6808      	ldr	r0, [r1, #0]
 80093a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093a6:	f01e 0f10 	tst.w	lr, #16
 80093aa:	bf08      	it	eq
 80093ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80093b0:	f380 8809 	msr	PSP, r0
 80093b4:	f3bf 8f6f 	isb	sy
 80093b8:	4770      	bx	lr
 80093ba:	bf00      	nop
 80093bc:	f3af 8000 	nop.w

080093c0 <pxCurrentTCBConst>:
 80093c0:	2000078c 	.word	0x2000078c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80093c4:	bf00      	nop
 80093c6:	bf00      	nop

080093c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b082      	sub	sp, #8
 80093cc:	af00      	add	r7, sp, #0
	__asm volatile
 80093ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d2:	f383 8811 	msr	BASEPRI, r3
 80093d6:	f3bf 8f6f 	isb	sy
 80093da:	f3bf 8f4f 	dsb	sy
 80093de:	607b      	str	r3, [r7, #4]
}
 80093e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80093e2:	f7ff f867 	bl	80084b4 <xTaskIncrementTick>
 80093e6:	4603      	mov	r3, r0
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d003      	beq.n	80093f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80093ec:	4b06      	ldr	r3, [pc, #24]	; (8009408 <SysTick_Handler+0x40>)
 80093ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093f2:	601a      	str	r2, [r3, #0]
 80093f4:	2300      	movs	r3, #0
 80093f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	f383 8811 	msr	BASEPRI, r3
}
 80093fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009400:	bf00      	nop
 8009402:	3708      	adds	r7, #8
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}
 8009408:	e000ed04 	.word	0xe000ed04

0800940c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800940c:	b480      	push	{r7}
 800940e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009410:	4b0b      	ldr	r3, [pc, #44]	; (8009440 <vPortSetupTimerInterrupt+0x34>)
 8009412:	2200      	movs	r2, #0
 8009414:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009416:	4b0b      	ldr	r3, [pc, #44]	; (8009444 <vPortSetupTimerInterrupt+0x38>)
 8009418:	2200      	movs	r2, #0
 800941a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800941c:	4b0a      	ldr	r3, [pc, #40]	; (8009448 <vPortSetupTimerInterrupt+0x3c>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4a0a      	ldr	r2, [pc, #40]	; (800944c <vPortSetupTimerInterrupt+0x40>)
 8009422:	fba2 2303 	umull	r2, r3, r2, r3
 8009426:	099b      	lsrs	r3, r3, #6
 8009428:	4a09      	ldr	r2, [pc, #36]	; (8009450 <vPortSetupTimerInterrupt+0x44>)
 800942a:	3b01      	subs	r3, #1
 800942c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800942e:	4b04      	ldr	r3, [pc, #16]	; (8009440 <vPortSetupTimerInterrupt+0x34>)
 8009430:	2207      	movs	r2, #7
 8009432:	601a      	str	r2, [r3, #0]
}
 8009434:	bf00      	nop
 8009436:	46bd      	mov	sp, r7
 8009438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943c:	4770      	bx	lr
 800943e:	bf00      	nop
 8009440:	e000e010 	.word	0xe000e010
 8009444:	e000e018 	.word	0xe000e018
 8009448:	20000000 	.word	0x20000000
 800944c:	10624dd3 	.word	0x10624dd3
 8009450:	e000e014 	.word	0xe000e014

08009454 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009454:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009464 <vPortEnableVFP+0x10>
 8009458:	6801      	ldr	r1, [r0, #0]
 800945a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800945e:	6001      	str	r1, [r0, #0]
 8009460:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009462:	bf00      	nop
 8009464:	e000ed88 	.word	0xe000ed88

08009468 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009468:	b480      	push	{r7}
 800946a:	b085      	sub	sp, #20
 800946c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800946e:	f3ef 8305 	mrs	r3, IPSR
 8009472:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	2b0f      	cmp	r3, #15
 8009478:	d914      	bls.n	80094a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800947a:	4a17      	ldr	r2, [pc, #92]	; (80094d8 <vPortValidateInterruptPriority+0x70>)
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	4413      	add	r3, r2
 8009480:	781b      	ldrb	r3, [r3, #0]
 8009482:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009484:	4b15      	ldr	r3, [pc, #84]	; (80094dc <vPortValidateInterruptPriority+0x74>)
 8009486:	781b      	ldrb	r3, [r3, #0]
 8009488:	7afa      	ldrb	r2, [r7, #11]
 800948a:	429a      	cmp	r2, r3
 800948c:	d20a      	bcs.n	80094a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800948e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009492:	f383 8811 	msr	BASEPRI, r3
 8009496:	f3bf 8f6f 	isb	sy
 800949a:	f3bf 8f4f 	dsb	sy
 800949e:	607b      	str	r3, [r7, #4]
}
 80094a0:	bf00      	nop
 80094a2:	e7fe      	b.n	80094a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80094a4:	4b0e      	ldr	r3, [pc, #56]	; (80094e0 <vPortValidateInterruptPriority+0x78>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80094ac:	4b0d      	ldr	r3, [pc, #52]	; (80094e4 <vPortValidateInterruptPriority+0x7c>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	429a      	cmp	r2, r3
 80094b2:	d90a      	bls.n	80094ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80094b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b8:	f383 8811 	msr	BASEPRI, r3
 80094bc:	f3bf 8f6f 	isb	sy
 80094c0:	f3bf 8f4f 	dsb	sy
 80094c4:	603b      	str	r3, [r7, #0]
}
 80094c6:	bf00      	nop
 80094c8:	e7fe      	b.n	80094c8 <vPortValidateInterruptPriority+0x60>
	}
 80094ca:	bf00      	nop
 80094cc:	3714      	adds	r7, #20
 80094ce:	46bd      	mov	sp, r7
 80094d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d4:	4770      	bx	lr
 80094d6:	bf00      	nop
 80094d8:	e000e3f0 	.word	0xe000e3f0
 80094dc:	200008b8 	.word	0x200008b8
 80094e0:	e000ed0c 	.word	0xe000ed0c
 80094e4:	200008bc 	.word	0x200008bc

080094e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b08a      	sub	sp, #40	; 0x28
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80094f0:	2300      	movs	r3, #0
 80094f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80094f4:	f7fe ff34 	bl	8008360 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80094f8:	4b5b      	ldr	r3, [pc, #364]	; (8009668 <pvPortMalloc+0x180>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d101      	bne.n	8009504 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009500:	f000 f920 	bl	8009744 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009504:	4b59      	ldr	r3, [pc, #356]	; (800966c <pvPortMalloc+0x184>)
 8009506:	681a      	ldr	r2, [r3, #0]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	4013      	ands	r3, r2
 800950c:	2b00      	cmp	r3, #0
 800950e:	f040 8093 	bne.w	8009638 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d01d      	beq.n	8009554 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009518:	2208      	movs	r2, #8
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	4413      	add	r3, r2
 800951e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f003 0307 	and.w	r3, r3, #7
 8009526:	2b00      	cmp	r3, #0
 8009528:	d014      	beq.n	8009554 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f023 0307 	bic.w	r3, r3, #7
 8009530:	3308      	adds	r3, #8
 8009532:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f003 0307 	and.w	r3, r3, #7
 800953a:	2b00      	cmp	r3, #0
 800953c:	d00a      	beq.n	8009554 <pvPortMalloc+0x6c>
	__asm volatile
 800953e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009542:	f383 8811 	msr	BASEPRI, r3
 8009546:	f3bf 8f6f 	isb	sy
 800954a:	f3bf 8f4f 	dsb	sy
 800954e:	617b      	str	r3, [r7, #20]
}
 8009550:	bf00      	nop
 8009552:	e7fe      	b.n	8009552 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d06e      	beq.n	8009638 <pvPortMalloc+0x150>
 800955a:	4b45      	ldr	r3, [pc, #276]	; (8009670 <pvPortMalloc+0x188>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	687a      	ldr	r2, [r7, #4]
 8009560:	429a      	cmp	r2, r3
 8009562:	d869      	bhi.n	8009638 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009564:	4b43      	ldr	r3, [pc, #268]	; (8009674 <pvPortMalloc+0x18c>)
 8009566:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009568:	4b42      	ldr	r3, [pc, #264]	; (8009674 <pvPortMalloc+0x18c>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800956e:	e004      	b.n	800957a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009572:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800957a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800957c:	685b      	ldr	r3, [r3, #4]
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	429a      	cmp	r2, r3
 8009582:	d903      	bls.n	800958c <pvPortMalloc+0xa4>
 8009584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d1f1      	bne.n	8009570 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800958c:	4b36      	ldr	r3, [pc, #216]	; (8009668 <pvPortMalloc+0x180>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009592:	429a      	cmp	r2, r3
 8009594:	d050      	beq.n	8009638 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009596:	6a3b      	ldr	r3, [r7, #32]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	2208      	movs	r2, #8
 800959c:	4413      	add	r3, r2
 800959e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80095a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a2:	681a      	ldr	r2, [r3, #0]
 80095a4:	6a3b      	ldr	r3, [r7, #32]
 80095a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80095a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095aa:	685a      	ldr	r2, [r3, #4]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	1ad2      	subs	r2, r2, r3
 80095b0:	2308      	movs	r3, #8
 80095b2:	005b      	lsls	r3, r3, #1
 80095b4:	429a      	cmp	r2, r3
 80095b6:	d91f      	bls.n	80095f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80095b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	4413      	add	r3, r2
 80095be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80095c0:	69bb      	ldr	r3, [r7, #24]
 80095c2:	f003 0307 	and.w	r3, r3, #7
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d00a      	beq.n	80095e0 <pvPortMalloc+0xf8>
	__asm volatile
 80095ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ce:	f383 8811 	msr	BASEPRI, r3
 80095d2:	f3bf 8f6f 	isb	sy
 80095d6:	f3bf 8f4f 	dsb	sy
 80095da:	613b      	str	r3, [r7, #16]
}
 80095dc:	bf00      	nop
 80095de:	e7fe      	b.n	80095de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80095e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e2:	685a      	ldr	r2, [r3, #4]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	1ad2      	subs	r2, r2, r3
 80095e8:	69bb      	ldr	r3, [r7, #24]
 80095ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80095ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ee:	687a      	ldr	r2, [r7, #4]
 80095f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80095f2:	69b8      	ldr	r0, [r7, #24]
 80095f4:	f000 f908 	bl	8009808 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80095f8:	4b1d      	ldr	r3, [pc, #116]	; (8009670 <pvPortMalloc+0x188>)
 80095fa:	681a      	ldr	r2, [r3, #0]
 80095fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	1ad3      	subs	r3, r2, r3
 8009602:	4a1b      	ldr	r2, [pc, #108]	; (8009670 <pvPortMalloc+0x188>)
 8009604:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009606:	4b1a      	ldr	r3, [pc, #104]	; (8009670 <pvPortMalloc+0x188>)
 8009608:	681a      	ldr	r2, [r3, #0]
 800960a:	4b1b      	ldr	r3, [pc, #108]	; (8009678 <pvPortMalloc+0x190>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	429a      	cmp	r2, r3
 8009610:	d203      	bcs.n	800961a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009612:	4b17      	ldr	r3, [pc, #92]	; (8009670 <pvPortMalloc+0x188>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4a18      	ldr	r2, [pc, #96]	; (8009678 <pvPortMalloc+0x190>)
 8009618:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800961a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961c:	685a      	ldr	r2, [r3, #4]
 800961e:	4b13      	ldr	r3, [pc, #76]	; (800966c <pvPortMalloc+0x184>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	431a      	orrs	r2, r3
 8009624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009626:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800962a:	2200      	movs	r2, #0
 800962c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800962e:	4b13      	ldr	r3, [pc, #76]	; (800967c <pvPortMalloc+0x194>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	3301      	adds	r3, #1
 8009634:	4a11      	ldr	r2, [pc, #68]	; (800967c <pvPortMalloc+0x194>)
 8009636:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009638:	f7fe fea0 	bl	800837c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800963c:	69fb      	ldr	r3, [r7, #28]
 800963e:	f003 0307 	and.w	r3, r3, #7
 8009642:	2b00      	cmp	r3, #0
 8009644:	d00a      	beq.n	800965c <pvPortMalloc+0x174>
	__asm volatile
 8009646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800964a:	f383 8811 	msr	BASEPRI, r3
 800964e:	f3bf 8f6f 	isb	sy
 8009652:	f3bf 8f4f 	dsb	sy
 8009656:	60fb      	str	r3, [r7, #12]
}
 8009658:	bf00      	nop
 800965a:	e7fe      	b.n	800965a <pvPortMalloc+0x172>
	return pvReturn;
 800965c:	69fb      	ldr	r3, [r7, #28]
}
 800965e:	4618      	mov	r0, r3
 8009660:	3728      	adds	r7, #40	; 0x28
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
 8009666:	bf00      	nop
 8009668:	200044c8 	.word	0x200044c8
 800966c:	200044dc 	.word	0x200044dc
 8009670:	200044cc 	.word	0x200044cc
 8009674:	200044c0 	.word	0x200044c0
 8009678:	200044d0 	.word	0x200044d0
 800967c:	200044d4 	.word	0x200044d4

08009680 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b086      	sub	sp, #24
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d04d      	beq.n	800972e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009692:	2308      	movs	r3, #8
 8009694:	425b      	negs	r3, r3
 8009696:	697a      	ldr	r2, [r7, #20]
 8009698:	4413      	add	r3, r2
 800969a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	685a      	ldr	r2, [r3, #4]
 80096a4:	4b24      	ldr	r3, [pc, #144]	; (8009738 <vPortFree+0xb8>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4013      	ands	r3, r2
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d10a      	bne.n	80096c4 <vPortFree+0x44>
	__asm volatile
 80096ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b2:	f383 8811 	msr	BASEPRI, r3
 80096b6:	f3bf 8f6f 	isb	sy
 80096ba:	f3bf 8f4f 	dsb	sy
 80096be:	60fb      	str	r3, [r7, #12]
}
 80096c0:	bf00      	nop
 80096c2:	e7fe      	b.n	80096c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d00a      	beq.n	80096e2 <vPortFree+0x62>
	__asm volatile
 80096cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d0:	f383 8811 	msr	BASEPRI, r3
 80096d4:	f3bf 8f6f 	isb	sy
 80096d8:	f3bf 8f4f 	dsb	sy
 80096dc:	60bb      	str	r3, [r7, #8]
}
 80096de:	bf00      	nop
 80096e0:	e7fe      	b.n	80096e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	685a      	ldr	r2, [r3, #4]
 80096e6:	4b14      	ldr	r3, [pc, #80]	; (8009738 <vPortFree+0xb8>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	4013      	ands	r3, r2
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d01e      	beq.n	800972e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d11a      	bne.n	800972e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	685a      	ldr	r2, [r3, #4]
 80096fc:	4b0e      	ldr	r3, [pc, #56]	; (8009738 <vPortFree+0xb8>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	43db      	mvns	r3, r3
 8009702:	401a      	ands	r2, r3
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009708:	f7fe fe2a 	bl	8008360 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	685a      	ldr	r2, [r3, #4]
 8009710:	4b0a      	ldr	r3, [pc, #40]	; (800973c <vPortFree+0xbc>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4413      	add	r3, r2
 8009716:	4a09      	ldr	r2, [pc, #36]	; (800973c <vPortFree+0xbc>)
 8009718:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800971a:	6938      	ldr	r0, [r7, #16]
 800971c:	f000 f874 	bl	8009808 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009720:	4b07      	ldr	r3, [pc, #28]	; (8009740 <vPortFree+0xc0>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	3301      	adds	r3, #1
 8009726:	4a06      	ldr	r2, [pc, #24]	; (8009740 <vPortFree+0xc0>)
 8009728:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800972a:	f7fe fe27 	bl	800837c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800972e:	bf00      	nop
 8009730:	3718      	adds	r7, #24
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
 8009736:	bf00      	nop
 8009738:	200044dc 	.word	0x200044dc
 800973c:	200044cc 	.word	0x200044cc
 8009740:	200044d8 	.word	0x200044d8

08009744 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009744:	b480      	push	{r7}
 8009746:	b085      	sub	sp, #20
 8009748:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800974a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800974e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009750:	4b27      	ldr	r3, [pc, #156]	; (80097f0 <prvHeapInit+0xac>)
 8009752:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	f003 0307 	and.w	r3, r3, #7
 800975a:	2b00      	cmp	r3, #0
 800975c:	d00c      	beq.n	8009778 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	3307      	adds	r3, #7
 8009762:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	f023 0307 	bic.w	r3, r3, #7
 800976a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800976c:	68ba      	ldr	r2, [r7, #8]
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	1ad3      	subs	r3, r2, r3
 8009772:	4a1f      	ldr	r2, [pc, #124]	; (80097f0 <prvHeapInit+0xac>)
 8009774:	4413      	add	r3, r2
 8009776:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800977c:	4a1d      	ldr	r2, [pc, #116]	; (80097f4 <prvHeapInit+0xb0>)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009782:	4b1c      	ldr	r3, [pc, #112]	; (80097f4 <prvHeapInit+0xb0>)
 8009784:	2200      	movs	r2, #0
 8009786:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	68ba      	ldr	r2, [r7, #8]
 800978c:	4413      	add	r3, r2
 800978e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009790:	2208      	movs	r2, #8
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	1a9b      	subs	r3, r3, r2
 8009796:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	f023 0307 	bic.w	r3, r3, #7
 800979e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	4a15      	ldr	r2, [pc, #84]	; (80097f8 <prvHeapInit+0xb4>)
 80097a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80097a6:	4b14      	ldr	r3, [pc, #80]	; (80097f8 <prvHeapInit+0xb4>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	2200      	movs	r2, #0
 80097ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80097ae:	4b12      	ldr	r3, [pc, #72]	; (80097f8 <prvHeapInit+0xb4>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	2200      	movs	r2, #0
 80097b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	68fa      	ldr	r2, [r7, #12]
 80097be:	1ad2      	subs	r2, r2, r3
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80097c4:	4b0c      	ldr	r3, [pc, #48]	; (80097f8 <prvHeapInit+0xb4>)
 80097c6:	681a      	ldr	r2, [r3, #0]
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	4a0a      	ldr	r2, [pc, #40]	; (80097fc <prvHeapInit+0xb8>)
 80097d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	4a09      	ldr	r2, [pc, #36]	; (8009800 <prvHeapInit+0xbc>)
 80097da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80097dc:	4b09      	ldr	r3, [pc, #36]	; (8009804 <prvHeapInit+0xc0>)
 80097de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80097e2:	601a      	str	r2, [r3, #0]
}
 80097e4:	bf00      	nop
 80097e6:	3714      	adds	r7, #20
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr
 80097f0:	200008c0 	.word	0x200008c0
 80097f4:	200044c0 	.word	0x200044c0
 80097f8:	200044c8 	.word	0x200044c8
 80097fc:	200044d0 	.word	0x200044d0
 8009800:	200044cc 	.word	0x200044cc
 8009804:	200044dc 	.word	0x200044dc

08009808 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009808:	b480      	push	{r7}
 800980a:	b085      	sub	sp, #20
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009810:	4b28      	ldr	r3, [pc, #160]	; (80098b4 <prvInsertBlockIntoFreeList+0xac>)
 8009812:	60fb      	str	r3, [r7, #12]
 8009814:	e002      	b.n	800981c <prvInsertBlockIntoFreeList+0x14>
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	60fb      	str	r3, [r7, #12]
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	687a      	ldr	r2, [r7, #4]
 8009822:	429a      	cmp	r2, r3
 8009824:	d8f7      	bhi.n	8009816 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	68ba      	ldr	r2, [r7, #8]
 8009830:	4413      	add	r3, r2
 8009832:	687a      	ldr	r2, [r7, #4]
 8009834:	429a      	cmp	r2, r3
 8009836:	d108      	bne.n	800984a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	685a      	ldr	r2, [r3, #4]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	685b      	ldr	r3, [r3, #4]
 8009840:	441a      	add	r2, r3
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	685b      	ldr	r3, [r3, #4]
 8009852:	68ba      	ldr	r2, [r7, #8]
 8009854:	441a      	add	r2, r3
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	429a      	cmp	r2, r3
 800985c:	d118      	bne.n	8009890 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681a      	ldr	r2, [r3, #0]
 8009862:	4b15      	ldr	r3, [pc, #84]	; (80098b8 <prvInsertBlockIntoFreeList+0xb0>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	429a      	cmp	r2, r3
 8009868:	d00d      	beq.n	8009886 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	685a      	ldr	r2, [r3, #4]
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	685b      	ldr	r3, [r3, #4]
 8009874:	441a      	add	r2, r3
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	681a      	ldr	r2, [r3, #0]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	601a      	str	r2, [r3, #0]
 8009884:	e008      	b.n	8009898 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009886:	4b0c      	ldr	r3, [pc, #48]	; (80098b8 <prvInsertBlockIntoFreeList+0xb0>)
 8009888:	681a      	ldr	r2, [r3, #0]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	601a      	str	r2, [r3, #0]
 800988e:	e003      	b.n	8009898 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681a      	ldr	r2, [r3, #0]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009898:	68fa      	ldr	r2, [r7, #12]
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	429a      	cmp	r2, r3
 800989e:	d002      	beq.n	80098a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	687a      	ldr	r2, [r7, #4]
 80098a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80098a6:	bf00      	nop
 80098a8:	3714      	adds	r7, #20
 80098aa:	46bd      	mov	sp, r7
 80098ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b0:	4770      	bx	lr
 80098b2:	bf00      	nop
 80098b4:	200044c0 	.word	0x200044c0
 80098b8:	200044c8 	.word	0x200044c8

080098bc <__errno>:
 80098bc:	4b01      	ldr	r3, [pc, #4]	; (80098c4 <__errno+0x8>)
 80098be:	6818      	ldr	r0, [r3, #0]
 80098c0:	4770      	bx	lr
 80098c2:	bf00      	nop
 80098c4:	20000010 	.word	0x20000010

080098c8 <__libc_init_array>:
 80098c8:	b570      	push	{r4, r5, r6, lr}
 80098ca:	4d0d      	ldr	r5, [pc, #52]	; (8009900 <__libc_init_array+0x38>)
 80098cc:	4c0d      	ldr	r4, [pc, #52]	; (8009904 <__libc_init_array+0x3c>)
 80098ce:	1b64      	subs	r4, r4, r5
 80098d0:	10a4      	asrs	r4, r4, #2
 80098d2:	2600      	movs	r6, #0
 80098d4:	42a6      	cmp	r6, r4
 80098d6:	d109      	bne.n	80098ec <__libc_init_array+0x24>
 80098d8:	4d0b      	ldr	r5, [pc, #44]	; (8009908 <__libc_init_array+0x40>)
 80098da:	4c0c      	ldr	r4, [pc, #48]	; (800990c <__libc_init_array+0x44>)
 80098dc:	f001 f832 	bl	800a944 <_init>
 80098e0:	1b64      	subs	r4, r4, r5
 80098e2:	10a4      	asrs	r4, r4, #2
 80098e4:	2600      	movs	r6, #0
 80098e6:	42a6      	cmp	r6, r4
 80098e8:	d105      	bne.n	80098f6 <__libc_init_array+0x2e>
 80098ea:	bd70      	pop	{r4, r5, r6, pc}
 80098ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80098f0:	4798      	blx	r3
 80098f2:	3601      	adds	r6, #1
 80098f4:	e7ee      	b.n	80098d4 <__libc_init_array+0xc>
 80098f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80098fa:	4798      	blx	r3
 80098fc:	3601      	adds	r6, #1
 80098fe:	e7f2      	b.n	80098e6 <__libc_init_array+0x1e>
 8009900:	0800abb4 	.word	0x0800abb4
 8009904:	0800abb4 	.word	0x0800abb4
 8009908:	0800abb4 	.word	0x0800abb4
 800990c:	0800abb8 	.word	0x0800abb8

08009910 <memcpy>:
 8009910:	440a      	add	r2, r1
 8009912:	4291      	cmp	r1, r2
 8009914:	f100 33ff 	add.w	r3, r0, #4294967295
 8009918:	d100      	bne.n	800991c <memcpy+0xc>
 800991a:	4770      	bx	lr
 800991c:	b510      	push	{r4, lr}
 800991e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009922:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009926:	4291      	cmp	r1, r2
 8009928:	d1f9      	bne.n	800991e <memcpy+0xe>
 800992a:	bd10      	pop	{r4, pc}

0800992c <memset>:
 800992c:	4402      	add	r2, r0
 800992e:	4603      	mov	r3, r0
 8009930:	4293      	cmp	r3, r2
 8009932:	d100      	bne.n	8009936 <memset+0xa>
 8009934:	4770      	bx	lr
 8009936:	f803 1b01 	strb.w	r1, [r3], #1
 800993a:	e7f9      	b.n	8009930 <memset+0x4>

0800993c <iprintf>:
 800993c:	b40f      	push	{r0, r1, r2, r3}
 800993e:	4b0a      	ldr	r3, [pc, #40]	; (8009968 <iprintf+0x2c>)
 8009940:	b513      	push	{r0, r1, r4, lr}
 8009942:	681c      	ldr	r4, [r3, #0]
 8009944:	b124      	cbz	r4, 8009950 <iprintf+0x14>
 8009946:	69a3      	ldr	r3, [r4, #24]
 8009948:	b913      	cbnz	r3, 8009950 <iprintf+0x14>
 800994a:	4620      	mov	r0, r4
 800994c:	f000 fa5e 	bl	8009e0c <__sinit>
 8009950:	ab05      	add	r3, sp, #20
 8009952:	9a04      	ldr	r2, [sp, #16]
 8009954:	68a1      	ldr	r1, [r4, #8]
 8009956:	9301      	str	r3, [sp, #4]
 8009958:	4620      	mov	r0, r4
 800995a:	f000 fc67 	bl	800a22c <_vfiprintf_r>
 800995e:	b002      	add	sp, #8
 8009960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009964:	b004      	add	sp, #16
 8009966:	4770      	bx	lr
 8009968:	20000010 	.word	0x20000010

0800996c <_puts_r>:
 800996c:	b570      	push	{r4, r5, r6, lr}
 800996e:	460e      	mov	r6, r1
 8009970:	4605      	mov	r5, r0
 8009972:	b118      	cbz	r0, 800997c <_puts_r+0x10>
 8009974:	6983      	ldr	r3, [r0, #24]
 8009976:	b90b      	cbnz	r3, 800997c <_puts_r+0x10>
 8009978:	f000 fa48 	bl	8009e0c <__sinit>
 800997c:	69ab      	ldr	r3, [r5, #24]
 800997e:	68ac      	ldr	r4, [r5, #8]
 8009980:	b913      	cbnz	r3, 8009988 <_puts_r+0x1c>
 8009982:	4628      	mov	r0, r5
 8009984:	f000 fa42 	bl	8009e0c <__sinit>
 8009988:	4b2c      	ldr	r3, [pc, #176]	; (8009a3c <_puts_r+0xd0>)
 800998a:	429c      	cmp	r4, r3
 800998c:	d120      	bne.n	80099d0 <_puts_r+0x64>
 800998e:	686c      	ldr	r4, [r5, #4]
 8009990:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009992:	07db      	lsls	r3, r3, #31
 8009994:	d405      	bmi.n	80099a2 <_puts_r+0x36>
 8009996:	89a3      	ldrh	r3, [r4, #12]
 8009998:	0598      	lsls	r0, r3, #22
 800999a:	d402      	bmi.n	80099a2 <_puts_r+0x36>
 800999c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800999e:	f000 fad3 	bl	8009f48 <__retarget_lock_acquire_recursive>
 80099a2:	89a3      	ldrh	r3, [r4, #12]
 80099a4:	0719      	lsls	r1, r3, #28
 80099a6:	d51d      	bpl.n	80099e4 <_puts_r+0x78>
 80099a8:	6923      	ldr	r3, [r4, #16]
 80099aa:	b1db      	cbz	r3, 80099e4 <_puts_r+0x78>
 80099ac:	3e01      	subs	r6, #1
 80099ae:	68a3      	ldr	r3, [r4, #8]
 80099b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80099b4:	3b01      	subs	r3, #1
 80099b6:	60a3      	str	r3, [r4, #8]
 80099b8:	bb39      	cbnz	r1, 8009a0a <_puts_r+0x9e>
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	da38      	bge.n	8009a30 <_puts_r+0xc4>
 80099be:	4622      	mov	r2, r4
 80099c0:	210a      	movs	r1, #10
 80099c2:	4628      	mov	r0, r5
 80099c4:	f000 f848 	bl	8009a58 <__swbuf_r>
 80099c8:	3001      	adds	r0, #1
 80099ca:	d011      	beq.n	80099f0 <_puts_r+0x84>
 80099cc:	250a      	movs	r5, #10
 80099ce:	e011      	b.n	80099f4 <_puts_r+0x88>
 80099d0:	4b1b      	ldr	r3, [pc, #108]	; (8009a40 <_puts_r+0xd4>)
 80099d2:	429c      	cmp	r4, r3
 80099d4:	d101      	bne.n	80099da <_puts_r+0x6e>
 80099d6:	68ac      	ldr	r4, [r5, #8]
 80099d8:	e7da      	b.n	8009990 <_puts_r+0x24>
 80099da:	4b1a      	ldr	r3, [pc, #104]	; (8009a44 <_puts_r+0xd8>)
 80099dc:	429c      	cmp	r4, r3
 80099de:	bf08      	it	eq
 80099e0:	68ec      	ldreq	r4, [r5, #12]
 80099e2:	e7d5      	b.n	8009990 <_puts_r+0x24>
 80099e4:	4621      	mov	r1, r4
 80099e6:	4628      	mov	r0, r5
 80099e8:	f000 f888 	bl	8009afc <__swsetup_r>
 80099ec:	2800      	cmp	r0, #0
 80099ee:	d0dd      	beq.n	80099ac <_puts_r+0x40>
 80099f0:	f04f 35ff 	mov.w	r5, #4294967295
 80099f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099f6:	07da      	lsls	r2, r3, #31
 80099f8:	d405      	bmi.n	8009a06 <_puts_r+0x9a>
 80099fa:	89a3      	ldrh	r3, [r4, #12]
 80099fc:	059b      	lsls	r3, r3, #22
 80099fe:	d402      	bmi.n	8009a06 <_puts_r+0x9a>
 8009a00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a02:	f000 faa2 	bl	8009f4a <__retarget_lock_release_recursive>
 8009a06:	4628      	mov	r0, r5
 8009a08:	bd70      	pop	{r4, r5, r6, pc}
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	da04      	bge.n	8009a18 <_puts_r+0xac>
 8009a0e:	69a2      	ldr	r2, [r4, #24]
 8009a10:	429a      	cmp	r2, r3
 8009a12:	dc06      	bgt.n	8009a22 <_puts_r+0xb6>
 8009a14:	290a      	cmp	r1, #10
 8009a16:	d004      	beq.n	8009a22 <_puts_r+0xb6>
 8009a18:	6823      	ldr	r3, [r4, #0]
 8009a1a:	1c5a      	adds	r2, r3, #1
 8009a1c:	6022      	str	r2, [r4, #0]
 8009a1e:	7019      	strb	r1, [r3, #0]
 8009a20:	e7c5      	b.n	80099ae <_puts_r+0x42>
 8009a22:	4622      	mov	r2, r4
 8009a24:	4628      	mov	r0, r5
 8009a26:	f000 f817 	bl	8009a58 <__swbuf_r>
 8009a2a:	3001      	adds	r0, #1
 8009a2c:	d1bf      	bne.n	80099ae <_puts_r+0x42>
 8009a2e:	e7df      	b.n	80099f0 <_puts_r+0x84>
 8009a30:	6823      	ldr	r3, [r4, #0]
 8009a32:	250a      	movs	r5, #10
 8009a34:	1c5a      	adds	r2, r3, #1
 8009a36:	6022      	str	r2, [r4, #0]
 8009a38:	701d      	strb	r5, [r3, #0]
 8009a3a:	e7db      	b.n	80099f4 <_puts_r+0x88>
 8009a3c:	0800ab38 	.word	0x0800ab38
 8009a40:	0800ab58 	.word	0x0800ab58
 8009a44:	0800ab18 	.word	0x0800ab18

08009a48 <puts>:
 8009a48:	4b02      	ldr	r3, [pc, #8]	; (8009a54 <puts+0xc>)
 8009a4a:	4601      	mov	r1, r0
 8009a4c:	6818      	ldr	r0, [r3, #0]
 8009a4e:	f7ff bf8d 	b.w	800996c <_puts_r>
 8009a52:	bf00      	nop
 8009a54:	20000010 	.word	0x20000010

08009a58 <__swbuf_r>:
 8009a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a5a:	460e      	mov	r6, r1
 8009a5c:	4614      	mov	r4, r2
 8009a5e:	4605      	mov	r5, r0
 8009a60:	b118      	cbz	r0, 8009a6a <__swbuf_r+0x12>
 8009a62:	6983      	ldr	r3, [r0, #24]
 8009a64:	b90b      	cbnz	r3, 8009a6a <__swbuf_r+0x12>
 8009a66:	f000 f9d1 	bl	8009e0c <__sinit>
 8009a6a:	4b21      	ldr	r3, [pc, #132]	; (8009af0 <__swbuf_r+0x98>)
 8009a6c:	429c      	cmp	r4, r3
 8009a6e:	d12b      	bne.n	8009ac8 <__swbuf_r+0x70>
 8009a70:	686c      	ldr	r4, [r5, #4]
 8009a72:	69a3      	ldr	r3, [r4, #24]
 8009a74:	60a3      	str	r3, [r4, #8]
 8009a76:	89a3      	ldrh	r3, [r4, #12]
 8009a78:	071a      	lsls	r2, r3, #28
 8009a7a:	d52f      	bpl.n	8009adc <__swbuf_r+0x84>
 8009a7c:	6923      	ldr	r3, [r4, #16]
 8009a7e:	b36b      	cbz	r3, 8009adc <__swbuf_r+0x84>
 8009a80:	6923      	ldr	r3, [r4, #16]
 8009a82:	6820      	ldr	r0, [r4, #0]
 8009a84:	1ac0      	subs	r0, r0, r3
 8009a86:	6963      	ldr	r3, [r4, #20]
 8009a88:	b2f6      	uxtb	r6, r6
 8009a8a:	4283      	cmp	r3, r0
 8009a8c:	4637      	mov	r7, r6
 8009a8e:	dc04      	bgt.n	8009a9a <__swbuf_r+0x42>
 8009a90:	4621      	mov	r1, r4
 8009a92:	4628      	mov	r0, r5
 8009a94:	f000 f926 	bl	8009ce4 <_fflush_r>
 8009a98:	bb30      	cbnz	r0, 8009ae8 <__swbuf_r+0x90>
 8009a9a:	68a3      	ldr	r3, [r4, #8]
 8009a9c:	3b01      	subs	r3, #1
 8009a9e:	60a3      	str	r3, [r4, #8]
 8009aa0:	6823      	ldr	r3, [r4, #0]
 8009aa2:	1c5a      	adds	r2, r3, #1
 8009aa4:	6022      	str	r2, [r4, #0]
 8009aa6:	701e      	strb	r6, [r3, #0]
 8009aa8:	6963      	ldr	r3, [r4, #20]
 8009aaa:	3001      	adds	r0, #1
 8009aac:	4283      	cmp	r3, r0
 8009aae:	d004      	beq.n	8009aba <__swbuf_r+0x62>
 8009ab0:	89a3      	ldrh	r3, [r4, #12]
 8009ab2:	07db      	lsls	r3, r3, #31
 8009ab4:	d506      	bpl.n	8009ac4 <__swbuf_r+0x6c>
 8009ab6:	2e0a      	cmp	r6, #10
 8009ab8:	d104      	bne.n	8009ac4 <__swbuf_r+0x6c>
 8009aba:	4621      	mov	r1, r4
 8009abc:	4628      	mov	r0, r5
 8009abe:	f000 f911 	bl	8009ce4 <_fflush_r>
 8009ac2:	b988      	cbnz	r0, 8009ae8 <__swbuf_r+0x90>
 8009ac4:	4638      	mov	r0, r7
 8009ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ac8:	4b0a      	ldr	r3, [pc, #40]	; (8009af4 <__swbuf_r+0x9c>)
 8009aca:	429c      	cmp	r4, r3
 8009acc:	d101      	bne.n	8009ad2 <__swbuf_r+0x7a>
 8009ace:	68ac      	ldr	r4, [r5, #8]
 8009ad0:	e7cf      	b.n	8009a72 <__swbuf_r+0x1a>
 8009ad2:	4b09      	ldr	r3, [pc, #36]	; (8009af8 <__swbuf_r+0xa0>)
 8009ad4:	429c      	cmp	r4, r3
 8009ad6:	bf08      	it	eq
 8009ad8:	68ec      	ldreq	r4, [r5, #12]
 8009ada:	e7ca      	b.n	8009a72 <__swbuf_r+0x1a>
 8009adc:	4621      	mov	r1, r4
 8009ade:	4628      	mov	r0, r5
 8009ae0:	f000 f80c 	bl	8009afc <__swsetup_r>
 8009ae4:	2800      	cmp	r0, #0
 8009ae6:	d0cb      	beq.n	8009a80 <__swbuf_r+0x28>
 8009ae8:	f04f 37ff 	mov.w	r7, #4294967295
 8009aec:	e7ea      	b.n	8009ac4 <__swbuf_r+0x6c>
 8009aee:	bf00      	nop
 8009af0:	0800ab38 	.word	0x0800ab38
 8009af4:	0800ab58 	.word	0x0800ab58
 8009af8:	0800ab18 	.word	0x0800ab18

08009afc <__swsetup_r>:
 8009afc:	4b32      	ldr	r3, [pc, #200]	; (8009bc8 <__swsetup_r+0xcc>)
 8009afe:	b570      	push	{r4, r5, r6, lr}
 8009b00:	681d      	ldr	r5, [r3, #0]
 8009b02:	4606      	mov	r6, r0
 8009b04:	460c      	mov	r4, r1
 8009b06:	b125      	cbz	r5, 8009b12 <__swsetup_r+0x16>
 8009b08:	69ab      	ldr	r3, [r5, #24]
 8009b0a:	b913      	cbnz	r3, 8009b12 <__swsetup_r+0x16>
 8009b0c:	4628      	mov	r0, r5
 8009b0e:	f000 f97d 	bl	8009e0c <__sinit>
 8009b12:	4b2e      	ldr	r3, [pc, #184]	; (8009bcc <__swsetup_r+0xd0>)
 8009b14:	429c      	cmp	r4, r3
 8009b16:	d10f      	bne.n	8009b38 <__swsetup_r+0x3c>
 8009b18:	686c      	ldr	r4, [r5, #4]
 8009b1a:	89a3      	ldrh	r3, [r4, #12]
 8009b1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b20:	0719      	lsls	r1, r3, #28
 8009b22:	d42c      	bmi.n	8009b7e <__swsetup_r+0x82>
 8009b24:	06dd      	lsls	r5, r3, #27
 8009b26:	d411      	bmi.n	8009b4c <__swsetup_r+0x50>
 8009b28:	2309      	movs	r3, #9
 8009b2a:	6033      	str	r3, [r6, #0]
 8009b2c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009b30:	81a3      	strh	r3, [r4, #12]
 8009b32:	f04f 30ff 	mov.w	r0, #4294967295
 8009b36:	e03e      	b.n	8009bb6 <__swsetup_r+0xba>
 8009b38:	4b25      	ldr	r3, [pc, #148]	; (8009bd0 <__swsetup_r+0xd4>)
 8009b3a:	429c      	cmp	r4, r3
 8009b3c:	d101      	bne.n	8009b42 <__swsetup_r+0x46>
 8009b3e:	68ac      	ldr	r4, [r5, #8]
 8009b40:	e7eb      	b.n	8009b1a <__swsetup_r+0x1e>
 8009b42:	4b24      	ldr	r3, [pc, #144]	; (8009bd4 <__swsetup_r+0xd8>)
 8009b44:	429c      	cmp	r4, r3
 8009b46:	bf08      	it	eq
 8009b48:	68ec      	ldreq	r4, [r5, #12]
 8009b4a:	e7e6      	b.n	8009b1a <__swsetup_r+0x1e>
 8009b4c:	0758      	lsls	r0, r3, #29
 8009b4e:	d512      	bpl.n	8009b76 <__swsetup_r+0x7a>
 8009b50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b52:	b141      	cbz	r1, 8009b66 <__swsetup_r+0x6a>
 8009b54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b58:	4299      	cmp	r1, r3
 8009b5a:	d002      	beq.n	8009b62 <__swsetup_r+0x66>
 8009b5c:	4630      	mov	r0, r6
 8009b5e:	f000 fa5b 	bl	800a018 <_free_r>
 8009b62:	2300      	movs	r3, #0
 8009b64:	6363      	str	r3, [r4, #52]	; 0x34
 8009b66:	89a3      	ldrh	r3, [r4, #12]
 8009b68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009b6c:	81a3      	strh	r3, [r4, #12]
 8009b6e:	2300      	movs	r3, #0
 8009b70:	6063      	str	r3, [r4, #4]
 8009b72:	6923      	ldr	r3, [r4, #16]
 8009b74:	6023      	str	r3, [r4, #0]
 8009b76:	89a3      	ldrh	r3, [r4, #12]
 8009b78:	f043 0308 	orr.w	r3, r3, #8
 8009b7c:	81a3      	strh	r3, [r4, #12]
 8009b7e:	6923      	ldr	r3, [r4, #16]
 8009b80:	b94b      	cbnz	r3, 8009b96 <__swsetup_r+0x9a>
 8009b82:	89a3      	ldrh	r3, [r4, #12]
 8009b84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009b88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b8c:	d003      	beq.n	8009b96 <__swsetup_r+0x9a>
 8009b8e:	4621      	mov	r1, r4
 8009b90:	4630      	mov	r0, r6
 8009b92:	f000 fa01 	bl	8009f98 <__smakebuf_r>
 8009b96:	89a0      	ldrh	r0, [r4, #12]
 8009b98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b9c:	f010 0301 	ands.w	r3, r0, #1
 8009ba0:	d00a      	beq.n	8009bb8 <__swsetup_r+0xbc>
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	60a3      	str	r3, [r4, #8]
 8009ba6:	6963      	ldr	r3, [r4, #20]
 8009ba8:	425b      	negs	r3, r3
 8009baa:	61a3      	str	r3, [r4, #24]
 8009bac:	6923      	ldr	r3, [r4, #16]
 8009bae:	b943      	cbnz	r3, 8009bc2 <__swsetup_r+0xc6>
 8009bb0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009bb4:	d1ba      	bne.n	8009b2c <__swsetup_r+0x30>
 8009bb6:	bd70      	pop	{r4, r5, r6, pc}
 8009bb8:	0781      	lsls	r1, r0, #30
 8009bba:	bf58      	it	pl
 8009bbc:	6963      	ldrpl	r3, [r4, #20]
 8009bbe:	60a3      	str	r3, [r4, #8]
 8009bc0:	e7f4      	b.n	8009bac <__swsetup_r+0xb0>
 8009bc2:	2000      	movs	r0, #0
 8009bc4:	e7f7      	b.n	8009bb6 <__swsetup_r+0xba>
 8009bc6:	bf00      	nop
 8009bc8:	20000010 	.word	0x20000010
 8009bcc:	0800ab38 	.word	0x0800ab38
 8009bd0:	0800ab58 	.word	0x0800ab58
 8009bd4:	0800ab18 	.word	0x0800ab18

08009bd8 <__sflush_r>:
 8009bd8:	898a      	ldrh	r2, [r1, #12]
 8009bda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bde:	4605      	mov	r5, r0
 8009be0:	0710      	lsls	r0, r2, #28
 8009be2:	460c      	mov	r4, r1
 8009be4:	d458      	bmi.n	8009c98 <__sflush_r+0xc0>
 8009be6:	684b      	ldr	r3, [r1, #4]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	dc05      	bgt.n	8009bf8 <__sflush_r+0x20>
 8009bec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	dc02      	bgt.n	8009bf8 <__sflush_r+0x20>
 8009bf2:	2000      	movs	r0, #0
 8009bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bf8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009bfa:	2e00      	cmp	r6, #0
 8009bfc:	d0f9      	beq.n	8009bf2 <__sflush_r+0x1a>
 8009bfe:	2300      	movs	r3, #0
 8009c00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009c04:	682f      	ldr	r7, [r5, #0]
 8009c06:	602b      	str	r3, [r5, #0]
 8009c08:	d032      	beq.n	8009c70 <__sflush_r+0x98>
 8009c0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009c0c:	89a3      	ldrh	r3, [r4, #12]
 8009c0e:	075a      	lsls	r2, r3, #29
 8009c10:	d505      	bpl.n	8009c1e <__sflush_r+0x46>
 8009c12:	6863      	ldr	r3, [r4, #4]
 8009c14:	1ac0      	subs	r0, r0, r3
 8009c16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c18:	b10b      	cbz	r3, 8009c1e <__sflush_r+0x46>
 8009c1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009c1c:	1ac0      	subs	r0, r0, r3
 8009c1e:	2300      	movs	r3, #0
 8009c20:	4602      	mov	r2, r0
 8009c22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c24:	6a21      	ldr	r1, [r4, #32]
 8009c26:	4628      	mov	r0, r5
 8009c28:	47b0      	blx	r6
 8009c2a:	1c43      	adds	r3, r0, #1
 8009c2c:	89a3      	ldrh	r3, [r4, #12]
 8009c2e:	d106      	bne.n	8009c3e <__sflush_r+0x66>
 8009c30:	6829      	ldr	r1, [r5, #0]
 8009c32:	291d      	cmp	r1, #29
 8009c34:	d82c      	bhi.n	8009c90 <__sflush_r+0xb8>
 8009c36:	4a2a      	ldr	r2, [pc, #168]	; (8009ce0 <__sflush_r+0x108>)
 8009c38:	40ca      	lsrs	r2, r1
 8009c3a:	07d6      	lsls	r6, r2, #31
 8009c3c:	d528      	bpl.n	8009c90 <__sflush_r+0xb8>
 8009c3e:	2200      	movs	r2, #0
 8009c40:	6062      	str	r2, [r4, #4]
 8009c42:	04d9      	lsls	r1, r3, #19
 8009c44:	6922      	ldr	r2, [r4, #16]
 8009c46:	6022      	str	r2, [r4, #0]
 8009c48:	d504      	bpl.n	8009c54 <__sflush_r+0x7c>
 8009c4a:	1c42      	adds	r2, r0, #1
 8009c4c:	d101      	bne.n	8009c52 <__sflush_r+0x7a>
 8009c4e:	682b      	ldr	r3, [r5, #0]
 8009c50:	b903      	cbnz	r3, 8009c54 <__sflush_r+0x7c>
 8009c52:	6560      	str	r0, [r4, #84]	; 0x54
 8009c54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c56:	602f      	str	r7, [r5, #0]
 8009c58:	2900      	cmp	r1, #0
 8009c5a:	d0ca      	beq.n	8009bf2 <__sflush_r+0x1a>
 8009c5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c60:	4299      	cmp	r1, r3
 8009c62:	d002      	beq.n	8009c6a <__sflush_r+0x92>
 8009c64:	4628      	mov	r0, r5
 8009c66:	f000 f9d7 	bl	800a018 <_free_r>
 8009c6a:	2000      	movs	r0, #0
 8009c6c:	6360      	str	r0, [r4, #52]	; 0x34
 8009c6e:	e7c1      	b.n	8009bf4 <__sflush_r+0x1c>
 8009c70:	6a21      	ldr	r1, [r4, #32]
 8009c72:	2301      	movs	r3, #1
 8009c74:	4628      	mov	r0, r5
 8009c76:	47b0      	blx	r6
 8009c78:	1c41      	adds	r1, r0, #1
 8009c7a:	d1c7      	bne.n	8009c0c <__sflush_r+0x34>
 8009c7c:	682b      	ldr	r3, [r5, #0]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d0c4      	beq.n	8009c0c <__sflush_r+0x34>
 8009c82:	2b1d      	cmp	r3, #29
 8009c84:	d001      	beq.n	8009c8a <__sflush_r+0xb2>
 8009c86:	2b16      	cmp	r3, #22
 8009c88:	d101      	bne.n	8009c8e <__sflush_r+0xb6>
 8009c8a:	602f      	str	r7, [r5, #0]
 8009c8c:	e7b1      	b.n	8009bf2 <__sflush_r+0x1a>
 8009c8e:	89a3      	ldrh	r3, [r4, #12]
 8009c90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c94:	81a3      	strh	r3, [r4, #12]
 8009c96:	e7ad      	b.n	8009bf4 <__sflush_r+0x1c>
 8009c98:	690f      	ldr	r7, [r1, #16]
 8009c9a:	2f00      	cmp	r7, #0
 8009c9c:	d0a9      	beq.n	8009bf2 <__sflush_r+0x1a>
 8009c9e:	0793      	lsls	r3, r2, #30
 8009ca0:	680e      	ldr	r6, [r1, #0]
 8009ca2:	bf08      	it	eq
 8009ca4:	694b      	ldreq	r3, [r1, #20]
 8009ca6:	600f      	str	r7, [r1, #0]
 8009ca8:	bf18      	it	ne
 8009caa:	2300      	movne	r3, #0
 8009cac:	eba6 0807 	sub.w	r8, r6, r7
 8009cb0:	608b      	str	r3, [r1, #8]
 8009cb2:	f1b8 0f00 	cmp.w	r8, #0
 8009cb6:	dd9c      	ble.n	8009bf2 <__sflush_r+0x1a>
 8009cb8:	6a21      	ldr	r1, [r4, #32]
 8009cba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009cbc:	4643      	mov	r3, r8
 8009cbe:	463a      	mov	r2, r7
 8009cc0:	4628      	mov	r0, r5
 8009cc2:	47b0      	blx	r6
 8009cc4:	2800      	cmp	r0, #0
 8009cc6:	dc06      	bgt.n	8009cd6 <__sflush_r+0xfe>
 8009cc8:	89a3      	ldrh	r3, [r4, #12]
 8009cca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cce:	81a3      	strh	r3, [r4, #12]
 8009cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8009cd4:	e78e      	b.n	8009bf4 <__sflush_r+0x1c>
 8009cd6:	4407      	add	r7, r0
 8009cd8:	eba8 0800 	sub.w	r8, r8, r0
 8009cdc:	e7e9      	b.n	8009cb2 <__sflush_r+0xda>
 8009cde:	bf00      	nop
 8009ce0:	20400001 	.word	0x20400001

08009ce4 <_fflush_r>:
 8009ce4:	b538      	push	{r3, r4, r5, lr}
 8009ce6:	690b      	ldr	r3, [r1, #16]
 8009ce8:	4605      	mov	r5, r0
 8009cea:	460c      	mov	r4, r1
 8009cec:	b913      	cbnz	r3, 8009cf4 <_fflush_r+0x10>
 8009cee:	2500      	movs	r5, #0
 8009cf0:	4628      	mov	r0, r5
 8009cf2:	bd38      	pop	{r3, r4, r5, pc}
 8009cf4:	b118      	cbz	r0, 8009cfe <_fflush_r+0x1a>
 8009cf6:	6983      	ldr	r3, [r0, #24]
 8009cf8:	b90b      	cbnz	r3, 8009cfe <_fflush_r+0x1a>
 8009cfa:	f000 f887 	bl	8009e0c <__sinit>
 8009cfe:	4b14      	ldr	r3, [pc, #80]	; (8009d50 <_fflush_r+0x6c>)
 8009d00:	429c      	cmp	r4, r3
 8009d02:	d11b      	bne.n	8009d3c <_fflush_r+0x58>
 8009d04:	686c      	ldr	r4, [r5, #4]
 8009d06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d0ef      	beq.n	8009cee <_fflush_r+0xa>
 8009d0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009d10:	07d0      	lsls	r0, r2, #31
 8009d12:	d404      	bmi.n	8009d1e <_fflush_r+0x3a>
 8009d14:	0599      	lsls	r1, r3, #22
 8009d16:	d402      	bmi.n	8009d1e <_fflush_r+0x3a>
 8009d18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d1a:	f000 f915 	bl	8009f48 <__retarget_lock_acquire_recursive>
 8009d1e:	4628      	mov	r0, r5
 8009d20:	4621      	mov	r1, r4
 8009d22:	f7ff ff59 	bl	8009bd8 <__sflush_r>
 8009d26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d28:	07da      	lsls	r2, r3, #31
 8009d2a:	4605      	mov	r5, r0
 8009d2c:	d4e0      	bmi.n	8009cf0 <_fflush_r+0xc>
 8009d2e:	89a3      	ldrh	r3, [r4, #12]
 8009d30:	059b      	lsls	r3, r3, #22
 8009d32:	d4dd      	bmi.n	8009cf0 <_fflush_r+0xc>
 8009d34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d36:	f000 f908 	bl	8009f4a <__retarget_lock_release_recursive>
 8009d3a:	e7d9      	b.n	8009cf0 <_fflush_r+0xc>
 8009d3c:	4b05      	ldr	r3, [pc, #20]	; (8009d54 <_fflush_r+0x70>)
 8009d3e:	429c      	cmp	r4, r3
 8009d40:	d101      	bne.n	8009d46 <_fflush_r+0x62>
 8009d42:	68ac      	ldr	r4, [r5, #8]
 8009d44:	e7df      	b.n	8009d06 <_fflush_r+0x22>
 8009d46:	4b04      	ldr	r3, [pc, #16]	; (8009d58 <_fflush_r+0x74>)
 8009d48:	429c      	cmp	r4, r3
 8009d4a:	bf08      	it	eq
 8009d4c:	68ec      	ldreq	r4, [r5, #12]
 8009d4e:	e7da      	b.n	8009d06 <_fflush_r+0x22>
 8009d50:	0800ab38 	.word	0x0800ab38
 8009d54:	0800ab58 	.word	0x0800ab58
 8009d58:	0800ab18 	.word	0x0800ab18

08009d5c <std>:
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	b510      	push	{r4, lr}
 8009d60:	4604      	mov	r4, r0
 8009d62:	e9c0 3300 	strd	r3, r3, [r0]
 8009d66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009d6a:	6083      	str	r3, [r0, #8]
 8009d6c:	8181      	strh	r1, [r0, #12]
 8009d6e:	6643      	str	r3, [r0, #100]	; 0x64
 8009d70:	81c2      	strh	r2, [r0, #14]
 8009d72:	6183      	str	r3, [r0, #24]
 8009d74:	4619      	mov	r1, r3
 8009d76:	2208      	movs	r2, #8
 8009d78:	305c      	adds	r0, #92	; 0x5c
 8009d7a:	f7ff fdd7 	bl	800992c <memset>
 8009d7e:	4b05      	ldr	r3, [pc, #20]	; (8009d94 <std+0x38>)
 8009d80:	6263      	str	r3, [r4, #36]	; 0x24
 8009d82:	4b05      	ldr	r3, [pc, #20]	; (8009d98 <std+0x3c>)
 8009d84:	62a3      	str	r3, [r4, #40]	; 0x28
 8009d86:	4b05      	ldr	r3, [pc, #20]	; (8009d9c <std+0x40>)
 8009d88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009d8a:	4b05      	ldr	r3, [pc, #20]	; (8009da0 <std+0x44>)
 8009d8c:	6224      	str	r4, [r4, #32]
 8009d8e:	6323      	str	r3, [r4, #48]	; 0x30
 8009d90:	bd10      	pop	{r4, pc}
 8009d92:	bf00      	nop
 8009d94:	0800a7d5 	.word	0x0800a7d5
 8009d98:	0800a7f7 	.word	0x0800a7f7
 8009d9c:	0800a82f 	.word	0x0800a82f
 8009da0:	0800a853 	.word	0x0800a853

08009da4 <_cleanup_r>:
 8009da4:	4901      	ldr	r1, [pc, #4]	; (8009dac <_cleanup_r+0x8>)
 8009da6:	f000 b8af 	b.w	8009f08 <_fwalk_reent>
 8009daa:	bf00      	nop
 8009dac:	08009ce5 	.word	0x08009ce5

08009db0 <__sfmoreglue>:
 8009db0:	b570      	push	{r4, r5, r6, lr}
 8009db2:	2268      	movs	r2, #104	; 0x68
 8009db4:	1e4d      	subs	r5, r1, #1
 8009db6:	4355      	muls	r5, r2
 8009db8:	460e      	mov	r6, r1
 8009dba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009dbe:	f000 f997 	bl	800a0f0 <_malloc_r>
 8009dc2:	4604      	mov	r4, r0
 8009dc4:	b140      	cbz	r0, 8009dd8 <__sfmoreglue+0x28>
 8009dc6:	2100      	movs	r1, #0
 8009dc8:	e9c0 1600 	strd	r1, r6, [r0]
 8009dcc:	300c      	adds	r0, #12
 8009dce:	60a0      	str	r0, [r4, #8]
 8009dd0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009dd4:	f7ff fdaa 	bl	800992c <memset>
 8009dd8:	4620      	mov	r0, r4
 8009dda:	bd70      	pop	{r4, r5, r6, pc}

08009ddc <__sfp_lock_acquire>:
 8009ddc:	4801      	ldr	r0, [pc, #4]	; (8009de4 <__sfp_lock_acquire+0x8>)
 8009dde:	f000 b8b3 	b.w	8009f48 <__retarget_lock_acquire_recursive>
 8009de2:	bf00      	nop
 8009de4:	200044e1 	.word	0x200044e1

08009de8 <__sfp_lock_release>:
 8009de8:	4801      	ldr	r0, [pc, #4]	; (8009df0 <__sfp_lock_release+0x8>)
 8009dea:	f000 b8ae 	b.w	8009f4a <__retarget_lock_release_recursive>
 8009dee:	bf00      	nop
 8009df0:	200044e1 	.word	0x200044e1

08009df4 <__sinit_lock_acquire>:
 8009df4:	4801      	ldr	r0, [pc, #4]	; (8009dfc <__sinit_lock_acquire+0x8>)
 8009df6:	f000 b8a7 	b.w	8009f48 <__retarget_lock_acquire_recursive>
 8009dfa:	bf00      	nop
 8009dfc:	200044e2 	.word	0x200044e2

08009e00 <__sinit_lock_release>:
 8009e00:	4801      	ldr	r0, [pc, #4]	; (8009e08 <__sinit_lock_release+0x8>)
 8009e02:	f000 b8a2 	b.w	8009f4a <__retarget_lock_release_recursive>
 8009e06:	bf00      	nop
 8009e08:	200044e2 	.word	0x200044e2

08009e0c <__sinit>:
 8009e0c:	b510      	push	{r4, lr}
 8009e0e:	4604      	mov	r4, r0
 8009e10:	f7ff fff0 	bl	8009df4 <__sinit_lock_acquire>
 8009e14:	69a3      	ldr	r3, [r4, #24]
 8009e16:	b11b      	cbz	r3, 8009e20 <__sinit+0x14>
 8009e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e1c:	f7ff bff0 	b.w	8009e00 <__sinit_lock_release>
 8009e20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009e24:	6523      	str	r3, [r4, #80]	; 0x50
 8009e26:	4b13      	ldr	r3, [pc, #76]	; (8009e74 <__sinit+0x68>)
 8009e28:	4a13      	ldr	r2, [pc, #76]	; (8009e78 <__sinit+0x6c>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	62a2      	str	r2, [r4, #40]	; 0x28
 8009e2e:	42a3      	cmp	r3, r4
 8009e30:	bf04      	itt	eq
 8009e32:	2301      	moveq	r3, #1
 8009e34:	61a3      	streq	r3, [r4, #24]
 8009e36:	4620      	mov	r0, r4
 8009e38:	f000 f820 	bl	8009e7c <__sfp>
 8009e3c:	6060      	str	r0, [r4, #4]
 8009e3e:	4620      	mov	r0, r4
 8009e40:	f000 f81c 	bl	8009e7c <__sfp>
 8009e44:	60a0      	str	r0, [r4, #8]
 8009e46:	4620      	mov	r0, r4
 8009e48:	f000 f818 	bl	8009e7c <__sfp>
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	60e0      	str	r0, [r4, #12]
 8009e50:	2104      	movs	r1, #4
 8009e52:	6860      	ldr	r0, [r4, #4]
 8009e54:	f7ff ff82 	bl	8009d5c <std>
 8009e58:	68a0      	ldr	r0, [r4, #8]
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	2109      	movs	r1, #9
 8009e5e:	f7ff ff7d 	bl	8009d5c <std>
 8009e62:	68e0      	ldr	r0, [r4, #12]
 8009e64:	2202      	movs	r2, #2
 8009e66:	2112      	movs	r1, #18
 8009e68:	f7ff ff78 	bl	8009d5c <std>
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	61a3      	str	r3, [r4, #24]
 8009e70:	e7d2      	b.n	8009e18 <__sinit+0xc>
 8009e72:	bf00      	nop
 8009e74:	0800ab14 	.word	0x0800ab14
 8009e78:	08009da5 	.word	0x08009da5

08009e7c <__sfp>:
 8009e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e7e:	4607      	mov	r7, r0
 8009e80:	f7ff ffac 	bl	8009ddc <__sfp_lock_acquire>
 8009e84:	4b1e      	ldr	r3, [pc, #120]	; (8009f00 <__sfp+0x84>)
 8009e86:	681e      	ldr	r6, [r3, #0]
 8009e88:	69b3      	ldr	r3, [r6, #24]
 8009e8a:	b913      	cbnz	r3, 8009e92 <__sfp+0x16>
 8009e8c:	4630      	mov	r0, r6
 8009e8e:	f7ff ffbd 	bl	8009e0c <__sinit>
 8009e92:	3648      	adds	r6, #72	; 0x48
 8009e94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009e98:	3b01      	subs	r3, #1
 8009e9a:	d503      	bpl.n	8009ea4 <__sfp+0x28>
 8009e9c:	6833      	ldr	r3, [r6, #0]
 8009e9e:	b30b      	cbz	r3, 8009ee4 <__sfp+0x68>
 8009ea0:	6836      	ldr	r6, [r6, #0]
 8009ea2:	e7f7      	b.n	8009e94 <__sfp+0x18>
 8009ea4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009ea8:	b9d5      	cbnz	r5, 8009ee0 <__sfp+0x64>
 8009eaa:	4b16      	ldr	r3, [pc, #88]	; (8009f04 <__sfp+0x88>)
 8009eac:	60e3      	str	r3, [r4, #12]
 8009eae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009eb2:	6665      	str	r5, [r4, #100]	; 0x64
 8009eb4:	f000 f847 	bl	8009f46 <__retarget_lock_init_recursive>
 8009eb8:	f7ff ff96 	bl	8009de8 <__sfp_lock_release>
 8009ebc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009ec0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009ec4:	6025      	str	r5, [r4, #0]
 8009ec6:	61a5      	str	r5, [r4, #24]
 8009ec8:	2208      	movs	r2, #8
 8009eca:	4629      	mov	r1, r5
 8009ecc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009ed0:	f7ff fd2c 	bl	800992c <memset>
 8009ed4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009ed8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009edc:	4620      	mov	r0, r4
 8009ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ee0:	3468      	adds	r4, #104	; 0x68
 8009ee2:	e7d9      	b.n	8009e98 <__sfp+0x1c>
 8009ee4:	2104      	movs	r1, #4
 8009ee6:	4638      	mov	r0, r7
 8009ee8:	f7ff ff62 	bl	8009db0 <__sfmoreglue>
 8009eec:	4604      	mov	r4, r0
 8009eee:	6030      	str	r0, [r6, #0]
 8009ef0:	2800      	cmp	r0, #0
 8009ef2:	d1d5      	bne.n	8009ea0 <__sfp+0x24>
 8009ef4:	f7ff ff78 	bl	8009de8 <__sfp_lock_release>
 8009ef8:	230c      	movs	r3, #12
 8009efa:	603b      	str	r3, [r7, #0]
 8009efc:	e7ee      	b.n	8009edc <__sfp+0x60>
 8009efe:	bf00      	nop
 8009f00:	0800ab14 	.word	0x0800ab14
 8009f04:	ffff0001 	.word	0xffff0001

08009f08 <_fwalk_reent>:
 8009f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f0c:	4606      	mov	r6, r0
 8009f0e:	4688      	mov	r8, r1
 8009f10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009f14:	2700      	movs	r7, #0
 8009f16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009f1a:	f1b9 0901 	subs.w	r9, r9, #1
 8009f1e:	d505      	bpl.n	8009f2c <_fwalk_reent+0x24>
 8009f20:	6824      	ldr	r4, [r4, #0]
 8009f22:	2c00      	cmp	r4, #0
 8009f24:	d1f7      	bne.n	8009f16 <_fwalk_reent+0xe>
 8009f26:	4638      	mov	r0, r7
 8009f28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f2c:	89ab      	ldrh	r3, [r5, #12]
 8009f2e:	2b01      	cmp	r3, #1
 8009f30:	d907      	bls.n	8009f42 <_fwalk_reent+0x3a>
 8009f32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009f36:	3301      	adds	r3, #1
 8009f38:	d003      	beq.n	8009f42 <_fwalk_reent+0x3a>
 8009f3a:	4629      	mov	r1, r5
 8009f3c:	4630      	mov	r0, r6
 8009f3e:	47c0      	blx	r8
 8009f40:	4307      	orrs	r7, r0
 8009f42:	3568      	adds	r5, #104	; 0x68
 8009f44:	e7e9      	b.n	8009f1a <_fwalk_reent+0x12>

08009f46 <__retarget_lock_init_recursive>:
 8009f46:	4770      	bx	lr

08009f48 <__retarget_lock_acquire_recursive>:
 8009f48:	4770      	bx	lr

08009f4a <__retarget_lock_release_recursive>:
 8009f4a:	4770      	bx	lr

08009f4c <__swhatbuf_r>:
 8009f4c:	b570      	push	{r4, r5, r6, lr}
 8009f4e:	460e      	mov	r6, r1
 8009f50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f54:	2900      	cmp	r1, #0
 8009f56:	b096      	sub	sp, #88	; 0x58
 8009f58:	4614      	mov	r4, r2
 8009f5a:	461d      	mov	r5, r3
 8009f5c:	da08      	bge.n	8009f70 <__swhatbuf_r+0x24>
 8009f5e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009f62:	2200      	movs	r2, #0
 8009f64:	602a      	str	r2, [r5, #0]
 8009f66:	061a      	lsls	r2, r3, #24
 8009f68:	d410      	bmi.n	8009f8c <__swhatbuf_r+0x40>
 8009f6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f6e:	e00e      	b.n	8009f8e <__swhatbuf_r+0x42>
 8009f70:	466a      	mov	r2, sp
 8009f72:	f000 fc95 	bl	800a8a0 <_fstat_r>
 8009f76:	2800      	cmp	r0, #0
 8009f78:	dbf1      	blt.n	8009f5e <__swhatbuf_r+0x12>
 8009f7a:	9a01      	ldr	r2, [sp, #4]
 8009f7c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009f80:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009f84:	425a      	negs	r2, r3
 8009f86:	415a      	adcs	r2, r3
 8009f88:	602a      	str	r2, [r5, #0]
 8009f8a:	e7ee      	b.n	8009f6a <__swhatbuf_r+0x1e>
 8009f8c:	2340      	movs	r3, #64	; 0x40
 8009f8e:	2000      	movs	r0, #0
 8009f90:	6023      	str	r3, [r4, #0]
 8009f92:	b016      	add	sp, #88	; 0x58
 8009f94:	bd70      	pop	{r4, r5, r6, pc}
	...

08009f98 <__smakebuf_r>:
 8009f98:	898b      	ldrh	r3, [r1, #12]
 8009f9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009f9c:	079d      	lsls	r5, r3, #30
 8009f9e:	4606      	mov	r6, r0
 8009fa0:	460c      	mov	r4, r1
 8009fa2:	d507      	bpl.n	8009fb4 <__smakebuf_r+0x1c>
 8009fa4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009fa8:	6023      	str	r3, [r4, #0]
 8009faa:	6123      	str	r3, [r4, #16]
 8009fac:	2301      	movs	r3, #1
 8009fae:	6163      	str	r3, [r4, #20]
 8009fb0:	b002      	add	sp, #8
 8009fb2:	bd70      	pop	{r4, r5, r6, pc}
 8009fb4:	ab01      	add	r3, sp, #4
 8009fb6:	466a      	mov	r2, sp
 8009fb8:	f7ff ffc8 	bl	8009f4c <__swhatbuf_r>
 8009fbc:	9900      	ldr	r1, [sp, #0]
 8009fbe:	4605      	mov	r5, r0
 8009fc0:	4630      	mov	r0, r6
 8009fc2:	f000 f895 	bl	800a0f0 <_malloc_r>
 8009fc6:	b948      	cbnz	r0, 8009fdc <__smakebuf_r+0x44>
 8009fc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fcc:	059a      	lsls	r2, r3, #22
 8009fce:	d4ef      	bmi.n	8009fb0 <__smakebuf_r+0x18>
 8009fd0:	f023 0303 	bic.w	r3, r3, #3
 8009fd4:	f043 0302 	orr.w	r3, r3, #2
 8009fd8:	81a3      	strh	r3, [r4, #12]
 8009fda:	e7e3      	b.n	8009fa4 <__smakebuf_r+0xc>
 8009fdc:	4b0d      	ldr	r3, [pc, #52]	; (800a014 <__smakebuf_r+0x7c>)
 8009fde:	62b3      	str	r3, [r6, #40]	; 0x28
 8009fe0:	89a3      	ldrh	r3, [r4, #12]
 8009fe2:	6020      	str	r0, [r4, #0]
 8009fe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fe8:	81a3      	strh	r3, [r4, #12]
 8009fea:	9b00      	ldr	r3, [sp, #0]
 8009fec:	6163      	str	r3, [r4, #20]
 8009fee:	9b01      	ldr	r3, [sp, #4]
 8009ff0:	6120      	str	r0, [r4, #16]
 8009ff2:	b15b      	cbz	r3, 800a00c <__smakebuf_r+0x74>
 8009ff4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ff8:	4630      	mov	r0, r6
 8009ffa:	f000 fc63 	bl	800a8c4 <_isatty_r>
 8009ffe:	b128      	cbz	r0, 800a00c <__smakebuf_r+0x74>
 800a000:	89a3      	ldrh	r3, [r4, #12]
 800a002:	f023 0303 	bic.w	r3, r3, #3
 800a006:	f043 0301 	orr.w	r3, r3, #1
 800a00a:	81a3      	strh	r3, [r4, #12]
 800a00c:	89a0      	ldrh	r0, [r4, #12]
 800a00e:	4305      	orrs	r5, r0
 800a010:	81a5      	strh	r5, [r4, #12]
 800a012:	e7cd      	b.n	8009fb0 <__smakebuf_r+0x18>
 800a014:	08009da5 	.word	0x08009da5

0800a018 <_free_r>:
 800a018:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a01a:	2900      	cmp	r1, #0
 800a01c:	d044      	beq.n	800a0a8 <_free_r+0x90>
 800a01e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a022:	9001      	str	r0, [sp, #4]
 800a024:	2b00      	cmp	r3, #0
 800a026:	f1a1 0404 	sub.w	r4, r1, #4
 800a02a:	bfb8      	it	lt
 800a02c:	18e4      	addlt	r4, r4, r3
 800a02e:	f000 fc6b 	bl	800a908 <__malloc_lock>
 800a032:	4a1e      	ldr	r2, [pc, #120]	; (800a0ac <_free_r+0x94>)
 800a034:	9801      	ldr	r0, [sp, #4]
 800a036:	6813      	ldr	r3, [r2, #0]
 800a038:	b933      	cbnz	r3, 800a048 <_free_r+0x30>
 800a03a:	6063      	str	r3, [r4, #4]
 800a03c:	6014      	str	r4, [r2, #0]
 800a03e:	b003      	add	sp, #12
 800a040:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a044:	f000 bc66 	b.w	800a914 <__malloc_unlock>
 800a048:	42a3      	cmp	r3, r4
 800a04a:	d908      	bls.n	800a05e <_free_r+0x46>
 800a04c:	6825      	ldr	r5, [r4, #0]
 800a04e:	1961      	adds	r1, r4, r5
 800a050:	428b      	cmp	r3, r1
 800a052:	bf01      	itttt	eq
 800a054:	6819      	ldreq	r1, [r3, #0]
 800a056:	685b      	ldreq	r3, [r3, #4]
 800a058:	1949      	addeq	r1, r1, r5
 800a05a:	6021      	streq	r1, [r4, #0]
 800a05c:	e7ed      	b.n	800a03a <_free_r+0x22>
 800a05e:	461a      	mov	r2, r3
 800a060:	685b      	ldr	r3, [r3, #4]
 800a062:	b10b      	cbz	r3, 800a068 <_free_r+0x50>
 800a064:	42a3      	cmp	r3, r4
 800a066:	d9fa      	bls.n	800a05e <_free_r+0x46>
 800a068:	6811      	ldr	r1, [r2, #0]
 800a06a:	1855      	adds	r5, r2, r1
 800a06c:	42a5      	cmp	r5, r4
 800a06e:	d10b      	bne.n	800a088 <_free_r+0x70>
 800a070:	6824      	ldr	r4, [r4, #0]
 800a072:	4421      	add	r1, r4
 800a074:	1854      	adds	r4, r2, r1
 800a076:	42a3      	cmp	r3, r4
 800a078:	6011      	str	r1, [r2, #0]
 800a07a:	d1e0      	bne.n	800a03e <_free_r+0x26>
 800a07c:	681c      	ldr	r4, [r3, #0]
 800a07e:	685b      	ldr	r3, [r3, #4]
 800a080:	6053      	str	r3, [r2, #4]
 800a082:	4421      	add	r1, r4
 800a084:	6011      	str	r1, [r2, #0]
 800a086:	e7da      	b.n	800a03e <_free_r+0x26>
 800a088:	d902      	bls.n	800a090 <_free_r+0x78>
 800a08a:	230c      	movs	r3, #12
 800a08c:	6003      	str	r3, [r0, #0]
 800a08e:	e7d6      	b.n	800a03e <_free_r+0x26>
 800a090:	6825      	ldr	r5, [r4, #0]
 800a092:	1961      	adds	r1, r4, r5
 800a094:	428b      	cmp	r3, r1
 800a096:	bf04      	itt	eq
 800a098:	6819      	ldreq	r1, [r3, #0]
 800a09a:	685b      	ldreq	r3, [r3, #4]
 800a09c:	6063      	str	r3, [r4, #4]
 800a09e:	bf04      	itt	eq
 800a0a0:	1949      	addeq	r1, r1, r5
 800a0a2:	6021      	streq	r1, [r4, #0]
 800a0a4:	6054      	str	r4, [r2, #4]
 800a0a6:	e7ca      	b.n	800a03e <_free_r+0x26>
 800a0a8:	b003      	add	sp, #12
 800a0aa:	bd30      	pop	{r4, r5, pc}
 800a0ac:	200044e4 	.word	0x200044e4

0800a0b0 <sbrk_aligned>:
 800a0b0:	b570      	push	{r4, r5, r6, lr}
 800a0b2:	4e0e      	ldr	r6, [pc, #56]	; (800a0ec <sbrk_aligned+0x3c>)
 800a0b4:	460c      	mov	r4, r1
 800a0b6:	6831      	ldr	r1, [r6, #0]
 800a0b8:	4605      	mov	r5, r0
 800a0ba:	b911      	cbnz	r1, 800a0c2 <sbrk_aligned+0x12>
 800a0bc:	f000 fb7a 	bl	800a7b4 <_sbrk_r>
 800a0c0:	6030      	str	r0, [r6, #0]
 800a0c2:	4621      	mov	r1, r4
 800a0c4:	4628      	mov	r0, r5
 800a0c6:	f000 fb75 	bl	800a7b4 <_sbrk_r>
 800a0ca:	1c43      	adds	r3, r0, #1
 800a0cc:	d00a      	beq.n	800a0e4 <sbrk_aligned+0x34>
 800a0ce:	1cc4      	adds	r4, r0, #3
 800a0d0:	f024 0403 	bic.w	r4, r4, #3
 800a0d4:	42a0      	cmp	r0, r4
 800a0d6:	d007      	beq.n	800a0e8 <sbrk_aligned+0x38>
 800a0d8:	1a21      	subs	r1, r4, r0
 800a0da:	4628      	mov	r0, r5
 800a0dc:	f000 fb6a 	bl	800a7b4 <_sbrk_r>
 800a0e0:	3001      	adds	r0, #1
 800a0e2:	d101      	bne.n	800a0e8 <sbrk_aligned+0x38>
 800a0e4:	f04f 34ff 	mov.w	r4, #4294967295
 800a0e8:	4620      	mov	r0, r4
 800a0ea:	bd70      	pop	{r4, r5, r6, pc}
 800a0ec:	200044e8 	.word	0x200044e8

0800a0f0 <_malloc_r>:
 800a0f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0f4:	1ccd      	adds	r5, r1, #3
 800a0f6:	f025 0503 	bic.w	r5, r5, #3
 800a0fa:	3508      	adds	r5, #8
 800a0fc:	2d0c      	cmp	r5, #12
 800a0fe:	bf38      	it	cc
 800a100:	250c      	movcc	r5, #12
 800a102:	2d00      	cmp	r5, #0
 800a104:	4607      	mov	r7, r0
 800a106:	db01      	blt.n	800a10c <_malloc_r+0x1c>
 800a108:	42a9      	cmp	r1, r5
 800a10a:	d905      	bls.n	800a118 <_malloc_r+0x28>
 800a10c:	230c      	movs	r3, #12
 800a10e:	603b      	str	r3, [r7, #0]
 800a110:	2600      	movs	r6, #0
 800a112:	4630      	mov	r0, r6
 800a114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a118:	4e2e      	ldr	r6, [pc, #184]	; (800a1d4 <_malloc_r+0xe4>)
 800a11a:	f000 fbf5 	bl	800a908 <__malloc_lock>
 800a11e:	6833      	ldr	r3, [r6, #0]
 800a120:	461c      	mov	r4, r3
 800a122:	bb34      	cbnz	r4, 800a172 <_malloc_r+0x82>
 800a124:	4629      	mov	r1, r5
 800a126:	4638      	mov	r0, r7
 800a128:	f7ff ffc2 	bl	800a0b0 <sbrk_aligned>
 800a12c:	1c43      	adds	r3, r0, #1
 800a12e:	4604      	mov	r4, r0
 800a130:	d14d      	bne.n	800a1ce <_malloc_r+0xde>
 800a132:	6834      	ldr	r4, [r6, #0]
 800a134:	4626      	mov	r6, r4
 800a136:	2e00      	cmp	r6, #0
 800a138:	d140      	bne.n	800a1bc <_malloc_r+0xcc>
 800a13a:	6823      	ldr	r3, [r4, #0]
 800a13c:	4631      	mov	r1, r6
 800a13e:	4638      	mov	r0, r7
 800a140:	eb04 0803 	add.w	r8, r4, r3
 800a144:	f000 fb36 	bl	800a7b4 <_sbrk_r>
 800a148:	4580      	cmp	r8, r0
 800a14a:	d13a      	bne.n	800a1c2 <_malloc_r+0xd2>
 800a14c:	6821      	ldr	r1, [r4, #0]
 800a14e:	3503      	adds	r5, #3
 800a150:	1a6d      	subs	r5, r5, r1
 800a152:	f025 0503 	bic.w	r5, r5, #3
 800a156:	3508      	adds	r5, #8
 800a158:	2d0c      	cmp	r5, #12
 800a15a:	bf38      	it	cc
 800a15c:	250c      	movcc	r5, #12
 800a15e:	4629      	mov	r1, r5
 800a160:	4638      	mov	r0, r7
 800a162:	f7ff ffa5 	bl	800a0b0 <sbrk_aligned>
 800a166:	3001      	adds	r0, #1
 800a168:	d02b      	beq.n	800a1c2 <_malloc_r+0xd2>
 800a16a:	6823      	ldr	r3, [r4, #0]
 800a16c:	442b      	add	r3, r5
 800a16e:	6023      	str	r3, [r4, #0]
 800a170:	e00e      	b.n	800a190 <_malloc_r+0xa0>
 800a172:	6822      	ldr	r2, [r4, #0]
 800a174:	1b52      	subs	r2, r2, r5
 800a176:	d41e      	bmi.n	800a1b6 <_malloc_r+0xc6>
 800a178:	2a0b      	cmp	r2, #11
 800a17a:	d916      	bls.n	800a1aa <_malloc_r+0xba>
 800a17c:	1961      	adds	r1, r4, r5
 800a17e:	42a3      	cmp	r3, r4
 800a180:	6025      	str	r5, [r4, #0]
 800a182:	bf18      	it	ne
 800a184:	6059      	strne	r1, [r3, #4]
 800a186:	6863      	ldr	r3, [r4, #4]
 800a188:	bf08      	it	eq
 800a18a:	6031      	streq	r1, [r6, #0]
 800a18c:	5162      	str	r2, [r4, r5]
 800a18e:	604b      	str	r3, [r1, #4]
 800a190:	4638      	mov	r0, r7
 800a192:	f104 060b 	add.w	r6, r4, #11
 800a196:	f000 fbbd 	bl	800a914 <__malloc_unlock>
 800a19a:	f026 0607 	bic.w	r6, r6, #7
 800a19e:	1d23      	adds	r3, r4, #4
 800a1a0:	1af2      	subs	r2, r6, r3
 800a1a2:	d0b6      	beq.n	800a112 <_malloc_r+0x22>
 800a1a4:	1b9b      	subs	r3, r3, r6
 800a1a6:	50a3      	str	r3, [r4, r2]
 800a1a8:	e7b3      	b.n	800a112 <_malloc_r+0x22>
 800a1aa:	6862      	ldr	r2, [r4, #4]
 800a1ac:	42a3      	cmp	r3, r4
 800a1ae:	bf0c      	ite	eq
 800a1b0:	6032      	streq	r2, [r6, #0]
 800a1b2:	605a      	strne	r2, [r3, #4]
 800a1b4:	e7ec      	b.n	800a190 <_malloc_r+0xa0>
 800a1b6:	4623      	mov	r3, r4
 800a1b8:	6864      	ldr	r4, [r4, #4]
 800a1ba:	e7b2      	b.n	800a122 <_malloc_r+0x32>
 800a1bc:	4634      	mov	r4, r6
 800a1be:	6876      	ldr	r6, [r6, #4]
 800a1c0:	e7b9      	b.n	800a136 <_malloc_r+0x46>
 800a1c2:	230c      	movs	r3, #12
 800a1c4:	603b      	str	r3, [r7, #0]
 800a1c6:	4638      	mov	r0, r7
 800a1c8:	f000 fba4 	bl	800a914 <__malloc_unlock>
 800a1cc:	e7a1      	b.n	800a112 <_malloc_r+0x22>
 800a1ce:	6025      	str	r5, [r4, #0]
 800a1d0:	e7de      	b.n	800a190 <_malloc_r+0xa0>
 800a1d2:	bf00      	nop
 800a1d4:	200044e4 	.word	0x200044e4

0800a1d8 <__sfputc_r>:
 800a1d8:	6893      	ldr	r3, [r2, #8]
 800a1da:	3b01      	subs	r3, #1
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	b410      	push	{r4}
 800a1e0:	6093      	str	r3, [r2, #8]
 800a1e2:	da08      	bge.n	800a1f6 <__sfputc_r+0x1e>
 800a1e4:	6994      	ldr	r4, [r2, #24]
 800a1e6:	42a3      	cmp	r3, r4
 800a1e8:	db01      	blt.n	800a1ee <__sfputc_r+0x16>
 800a1ea:	290a      	cmp	r1, #10
 800a1ec:	d103      	bne.n	800a1f6 <__sfputc_r+0x1e>
 800a1ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1f2:	f7ff bc31 	b.w	8009a58 <__swbuf_r>
 800a1f6:	6813      	ldr	r3, [r2, #0]
 800a1f8:	1c58      	adds	r0, r3, #1
 800a1fa:	6010      	str	r0, [r2, #0]
 800a1fc:	7019      	strb	r1, [r3, #0]
 800a1fe:	4608      	mov	r0, r1
 800a200:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a204:	4770      	bx	lr

0800a206 <__sfputs_r>:
 800a206:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a208:	4606      	mov	r6, r0
 800a20a:	460f      	mov	r7, r1
 800a20c:	4614      	mov	r4, r2
 800a20e:	18d5      	adds	r5, r2, r3
 800a210:	42ac      	cmp	r4, r5
 800a212:	d101      	bne.n	800a218 <__sfputs_r+0x12>
 800a214:	2000      	movs	r0, #0
 800a216:	e007      	b.n	800a228 <__sfputs_r+0x22>
 800a218:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a21c:	463a      	mov	r2, r7
 800a21e:	4630      	mov	r0, r6
 800a220:	f7ff ffda 	bl	800a1d8 <__sfputc_r>
 800a224:	1c43      	adds	r3, r0, #1
 800a226:	d1f3      	bne.n	800a210 <__sfputs_r+0xa>
 800a228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a22c <_vfiprintf_r>:
 800a22c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a230:	460d      	mov	r5, r1
 800a232:	b09d      	sub	sp, #116	; 0x74
 800a234:	4614      	mov	r4, r2
 800a236:	4698      	mov	r8, r3
 800a238:	4606      	mov	r6, r0
 800a23a:	b118      	cbz	r0, 800a244 <_vfiprintf_r+0x18>
 800a23c:	6983      	ldr	r3, [r0, #24]
 800a23e:	b90b      	cbnz	r3, 800a244 <_vfiprintf_r+0x18>
 800a240:	f7ff fde4 	bl	8009e0c <__sinit>
 800a244:	4b89      	ldr	r3, [pc, #548]	; (800a46c <_vfiprintf_r+0x240>)
 800a246:	429d      	cmp	r5, r3
 800a248:	d11b      	bne.n	800a282 <_vfiprintf_r+0x56>
 800a24a:	6875      	ldr	r5, [r6, #4]
 800a24c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a24e:	07d9      	lsls	r1, r3, #31
 800a250:	d405      	bmi.n	800a25e <_vfiprintf_r+0x32>
 800a252:	89ab      	ldrh	r3, [r5, #12]
 800a254:	059a      	lsls	r2, r3, #22
 800a256:	d402      	bmi.n	800a25e <_vfiprintf_r+0x32>
 800a258:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a25a:	f7ff fe75 	bl	8009f48 <__retarget_lock_acquire_recursive>
 800a25e:	89ab      	ldrh	r3, [r5, #12]
 800a260:	071b      	lsls	r3, r3, #28
 800a262:	d501      	bpl.n	800a268 <_vfiprintf_r+0x3c>
 800a264:	692b      	ldr	r3, [r5, #16]
 800a266:	b9eb      	cbnz	r3, 800a2a4 <_vfiprintf_r+0x78>
 800a268:	4629      	mov	r1, r5
 800a26a:	4630      	mov	r0, r6
 800a26c:	f7ff fc46 	bl	8009afc <__swsetup_r>
 800a270:	b1c0      	cbz	r0, 800a2a4 <_vfiprintf_r+0x78>
 800a272:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a274:	07dc      	lsls	r4, r3, #31
 800a276:	d50e      	bpl.n	800a296 <_vfiprintf_r+0x6a>
 800a278:	f04f 30ff 	mov.w	r0, #4294967295
 800a27c:	b01d      	add	sp, #116	; 0x74
 800a27e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a282:	4b7b      	ldr	r3, [pc, #492]	; (800a470 <_vfiprintf_r+0x244>)
 800a284:	429d      	cmp	r5, r3
 800a286:	d101      	bne.n	800a28c <_vfiprintf_r+0x60>
 800a288:	68b5      	ldr	r5, [r6, #8]
 800a28a:	e7df      	b.n	800a24c <_vfiprintf_r+0x20>
 800a28c:	4b79      	ldr	r3, [pc, #484]	; (800a474 <_vfiprintf_r+0x248>)
 800a28e:	429d      	cmp	r5, r3
 800a290:	bf08      	it	eq
 800a292:	68f5      	ldreq	r5, [r6, #12]
 800a294:	e7da      	b.n	800a24c <_vfiprintf_r+0x20>
 800a296:	89ab      	ldrh	r3, [r5, #12]
 800a298:	0598      	lsls	r0, r3, #22
 800a29a:	d4ed      	bmi.n	800a278 <_vfiprintf_r+0x4c>
 800a29c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a29e:	f7ff fe54 	bl	8009f4a <__retarget_lock_release_recursive>
 800a2a2:	e7e9      	b.n	800a278 <_vfiprintf_r+0x4c>
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	9309      	str	r3, [sp, #36]	; 0x24
 800a2a8:	2320      	movs	r3, #32
 800a2aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a2ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2b2:	2330      	movs	r3, #48	; 0x30
 800a2b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a478 <_vfiprintf_r+0x24c>
 800a2b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a2bc:	f04f 0901 	mov.w	r9, #1
 800a2c0:	4623      	mov	r3, r4
 800a2c2:	469a      	mov	sl, r3
 800a2c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2c8:	b10a      	cbz	r2, 800a2ce <_vfiprintf_r+0xa2>
 800a2ca:	2a25      	cmp	r2, #37	; 0x25
 800a2cc:	d1f9      	bne.n	800a2c2 <_vfiprintf_r+0x96>
 800a2ce:	ebba 0b04 	subs.w	fp, sl, r4
 800a2d2:	d00b      	beq.n	800a2ec <_vfiprintf_r+0xc0>
 800a2d4:	465b      	mov	r3, fp
 800a2d6:	4622      	mov	r2, r4
 800a2d8:	4629      	mov	r1, r5
 800a2da:	4630      	mov	r0, r6
 800a2dc:	f7ff ff93 	bl	800a206 <__sfputs_r>
 800a2e0:	3001      	adds	r0, #1
 800a2e2:	f000 80aa 	beq.w	800a43a <_vfiprintf_r+0x20e>
 800a2e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2e8:	445a      	add	r2, fp
 800a2ea:	9209      	str	r2, [sp, #36]	; 0x24
 800a2ec:	f89a 3000 	ldrb.w	r3, [sl]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	f000 80a2 	beq.w	800a43a <_vfiprintf_r+0x20e>
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	f04f 32ff 	mov.w	r2, #4294967295
 800a2fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a300:	f10a 0a01 	add.w	sl, sl, #1
 800a304:	9304      	str	r3, [sp, #16]
 800a306:	9307      	str	r3, [sp, #28]
 800a308:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a30c:	931a      	str	r3, [sp, #104]	; 0x68
 800a30e:	4654      	mov	r4, sl
 800a310:	2205      	movs	r2, #5
 800a312:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a316:	4858      	ldr	r0, [pc, #352]	; (800a478 <_vfiprintf_r+0x24c>)
 800a318:	f7f5 ff6a 	bl	80001f0 <memchr>
 800a31c:	9a04      	ldr	r2, [sp, #16]
 800a31e:	b9d8      	cbnz	r0, 800a358 <_vfiprintf_r+0x12c>
 800a320:	06d1      	lsls	r1, r2, #27
 800a322:	bf44      	itt	mi
 800a324:	2320      	movmi	r3, #32
 800a326:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a32a:	0713      	lsls	r3, r2, #28
 800a32c:	bf44      	itt	mi
 800a32e:	232b      	movmi	r3, #43	; 0x2b
 800a330:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a334:	f89a 3000 	ldrb.w	r3, [sl]
 800a338:	2b2a      	cmp	r3, #42	; 0x2a
 800a33a:	d015      	beq.n	800a368 <_vfiprintf_r+0x13c>
 800a33c:	9a07      	ldr	r2, [sp, #28]
 800a33e:	4654      	mov	r4, sl
 800a340:	2000      	movs	r0, #0
 800a342:	f04f 0c0a 	mov.w	ip, #10
 800a346:	4621      	mov	r1, r4
 800a348:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a34c:	3b30      	subs	r3, #48	; 0x30
 800a34e:	2b09      	cmp	r3, #9
 800a350:	d94e      	bls.n	800a3f0 <_vfiprintf_r+0x1c4>
 800a352:	b1b0      	cbz	r0, 800a382 <_vfiprintf_r+0x156>
 800a354:	9207      	str	r2, [sp, #28]
 800a356:	e014      	b.n	800a382 <_vfiprintf_r+0x156>
 800a358:	eba0 0308 	sub.w	r3, r0, r8
 800a35c:	fa09 f303 	lsl.w	r3, r9, r3
 800a360:	4313      	orrs	r3, r2
 800a362:	9304      	str	r3, [sp, #16]
 800a364:	46a2      	mov	sl, r4
 800a366:	e7d2      	b.n	800a30e <_vfiprintf_r+0xe2>
 800a368:	9b03      	ldr	r3, [sp, #12]
 800a36a:	1d19      	adds	r1, r3, #4
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	9103      	str	r1, [sp, #12]
 800a370:	2b00      	cmp	r3, #0
 800a372:	bfbb      	ittet	lt
 800a374:	425b      	neglt	r3, r3
 800a376:	f042 0202 	orrlt.w	r2, r2, #2
 800a37a:	9307      	strge	r3, [sp, #28]
 800a37c:	9307      	strlt	r3, [sp, #28]
 800a37e:	bfb8      	it	lt
 800a380:	9204      	strlt	r2, [sp, #16]
 800a382:	7823      	ldrb	r3, [r4, #0]
 800a384:	2b2e      	cmp	r3, #46	; 0x2e
 800a386:	d10c      	bne.n	800a3a2 <_vfiprintf_r+0x176>
 800a388:	7863      	ldrb	r3, [r4, #1]
 800a38a:	2b2a      	cmp	r3, #42	; 0x2a
 800a38c:	d135      	bne.n	800a3fa <_vfiprintf_r+0x1ce>
 800a38e:	9b03      	ldr	r3, [sp, #12]
 800a390:	1d1a      	adds	r2, r3, #4
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	9203      	str	r2, [sp, #12]
 800a396:	2b00      	cmp	r3, #0
 800a398:	bfb8      	it	lt
 800a39a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a39e:	3402      	adds	r4, #2
 800a3a0:	9305      	str	r3, [sp, #20]
 800a3a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a488 <_vfiprintf_r+0x25c>
 800a3a6:	7821      	ldrb	r1, [r4, #0]
 800a3a8:	2203      	movs	r2, #3
 800a3aa:	4650      	mov	r0, sl
 800a3ac:	f7f5 ff20 	bl	80001f0 <memchr>
 800a3b0:	b140      	cbz	r0, 800a3c4 <_vfiprintf_r+0x198>
 800a3b2:	2340      	movs	r3, #64	; 0x40
 800a3b4:	eba0 000a 	sub.w	r0, r0, sl
 800a3b8:	fa03 f000 	lsl.w	r0, r3, r0
 800a3bc:	9b04      	ldr	r3, [sp, #16]
 800a3be:	4303      	orrs	r3, r0
 800a3c0:	3401      	adds	r4, #1
 800a3c2:	9304      	str	r3, [sp, #16]
 800a3c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3c8:	482c      	ldr	r0, [pc, #176]	; (800a47c <_vfiprintf_r+0x250>)
 800a3ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a3ce:	2206      	movs	r2, #6
 800a3d0:	f7f5 ff0e 	bl	80001f0 <memchr>
 800a3d4:	2800      	cmp	r0, #0
 800a3d6:	d03f      	beq.n	800a458 <_vfiprintf_r+0x22c>
 800a3d8:	4b29      	ldr	r3, [pc, #164]	; (800a480 <_vfiprintf_r+0x254>)
 800a3da:	bb1b      	cbnz	r3, 800a424 <_vfiprintf_r+0x1f8>
 800a3dc:	9b03      	ldr	r3, [sp, #12]
 800a3de:	3307      	adds	r3, #7
 800a3e0:	f023 0307 	bic.w	r3, r3, #7
 800a3e4:	3308      	adds	r3, #8
 800a3e6:	9303      	str	r3, [sp, #12]
 800a3e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3ea:	443b      	add	r3, r7
 800a3ec:	9309      	str	r3, [sp, #36]	; 0x24
 800a3ee:	e767      	b.n	800a2c0 <_vfiprintf_r+0x94>
 800a3f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3f4:	460c      	mov	r4, r1
 800a3f6:	2001      	movs	r0, #1
 800a3f8:	e7a5      	b.n	800a346 <_vfiprintf_r+0x11a>
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	3401      	adds	r4, #1
 800a3fe:	9305      	str	r3, [sp, #20]
 800a400:	4619      	mov	r1, r3
 800a402:	f04f 0c0a 	mov.w	ip, #10
 800a406:	4620      	mov	r0, r4
 800a408:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a40c:	3a30      	subs	r2, #48	; 0x30
 800a40e:	2a09      	cmp	r2, #9
 800a410:	d903      	bls.n	800a41a <_vfiprintf_r+0x1ee>
 800a412:	2b00      	cmp	r3, #0
 800a414:	d0c5      	beq.n	800a3a2 <_vfiprintf_r+0x176>
 800a416:	9105      	str	r1, [sp, #20]
 800a418:	e7c3      	b.n	800a3a2 <_vfiprintf_r+0x176>
 800a41a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a41e:	4604      	mov	r4, r0
 800a420:	2301      	movs	r3, #1
 800a422:	e7f0      	b.n	800a406 <_vfiprintf_r+0x1da>
 800a424:	ab03      	add	r3, sp, #12
 800a426:	9300      	str	r3, [sp, #0]
 800a428:	462a      	mov	r2, r5
 800a42a:	4b16      	ldr	r3, [pc, #88]	; (800a484 <_vfiprintf_r+0x258>)
 800a42c:	a904      	add	r1, sp, #16
 800a42e:	4630      	mov	r0, r6
 800a430:	f3af 8000 	nop.w
 800a434:	4607      	mov	r7, r0
 800a436:	1c78      	adds	r0, r7, #1
 800a438:	d1d6      	bne.n	800a3e8 <_vfiprintf_r+0x1bc>
 800a43a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a43c:	07d9      	lsls	r1, r3, #31
 800a43e:	d405      	bmi.n	800a44c <_vfiprintf_r+0x220>
 800a440:	89ab      	ldrh	r3, [r5, #12]
 800a442:	059a      	lsls	r2, r3, #22
 800a444:	d402      	bmi.n	800a44c <_vfiprintf_r+0x220>
 800a446:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a448:	f7ff fd7f 	bl	8009f4a <__retarget_lock_release_recursive>
 800a44c:	89ab      	ldrh	r3, [r5, #12]
 800a44e:	065b      	lsls	r3, r3, #25
 800a450:	f53f af12 	bmi.w	800a278 <_vfiprintf_r+0x4c>
 800a454:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a456:	e711      	b.n	800a27c <_vfiprintf_r+0x50>
 800a458:	ab03      	add	r3, sp, #12
 800a45a:	9300      	str	r3, [sp, #0]
 800a45c:	462a      	mov	r2, r5
 800a45e:	4b09      	ldr	r3, [pc, #36]	; (800a484 <_vfiprintf_r+0x258>)
 800a460:	a904      	add	r1, sp, #16
 800a462:	4630      	mov	r0, r6
 800a464:	f000 f880 	bl	800a568 <_printf_i>
 800a468:	e7e4      	b.n	800a434 <_vfiprintf_r+0x208>
 800a46a:	bf00      	nop
 800a46c:	0800ab38 	.word	0x0800ab38
 800a470:	0800ab58 	.word	0x0800ab58
 800a474:	0800ab18 	.word	0x0800ab18
 800a478:	0800ab78 	.word	0x0800ab78
 800a47c:	0800ab82 	.word	0x0800ab82
 800a480:	00000000 	.word	0x00000000
 800a484:	0800a207 	.word	0x0800a207
 800a488:	0800ab7e 	.word	0x0800ab7e

0800a48c <_printf_common>:
 800a48c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a490:	4616      	mov	r6, r2
 800a492:	4699      	mov	r9, r3
 800a494:	688a      	ldr	r2, [r1, #8]
 800a496:	690b      	ldr	r3, [r1, #16]
 800a498:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a49c:	4293      	cmp	r3, r2
 800a49e:	bfb8      	it	lt
 800a4a0:	4613      	movlt	r3, r2
 800a4a2:	6033      	str	r3, [r6, #0]
 800a4a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a4a8:	4607      	mov	r7, r0
 800a4aa:	460c      	mov	r4, r1
 800a4ac:	b10a      	cbz	r2, 800a4b2 <_printf_common+0x26>
 800a4ae:	3301      	adds	r3, #1
 800a4b0:	6033      	str	r3, [r6, #0]
 800a4b2:	6823      	ldr	r3, [r4, #0]
 800a4b4:	0699      	lsls	r1, r3, #26
 800a4b6:	bf42      	ittt	mi
 800a4b8:	6833      	ldrmi	r3, [r6, #0]
 800a4ba:	3302      	addmi	r3, #2
 800a4bc:	6033      	strmi	r3, [r6, #0]
 800a4be:	6825      	ldr	r5, [r4, #0]
 800a4c0:	f015 0506 	ands.w	r5, r5, #6
 800a4c4:	d106      	bne.n	800a4d4 <_printf_common+0x48>
 800a4c6:	f104 0a19 	add.w	sl, r4, #25
 800a4ca:	68e3      	ldr	r3, [r4, #12]
 800a4cc:	6832      	ldr	r2, [r6, #0]
 800a4ce:	1a9b      	subs	r3, r3, r2
 800a4d0:	42ab      	cmp	r3, r5
 800a4d2:	dc26      	bgt.n	800a522 <_printf_common+0x96>
 800a4d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a4d8:	1e13      	subs	r3, r2, #0
 800a4da:	6822      	ldr	r2, [r4, #0]
 800a4dc:	bf18      	it	ne
 800a4de:	2301      	movne	r3, #1
 800a4e0:	0692      	lsls	r2, r2, #26
 800a4e2:	d42b      	bmi.n	800a53c <_printf_common+0xb0>
 800a4e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a4e8:	4649      	mov	r1, r9
 800a4ea:	4638      	mov	r0, r7
 800a4ec:	47c0      	blx	r8
 800a4ee:	3001      	adds	r0, #1
 800a4f0:	d01e      	beq.n	800a530 <_printf_common+0xa4>
 800a4f2:	6823      	ldr	r3, [r4, #0]
 800a4f4:	68e5      	ldr	r5, [r4, #12]
 800a4f6:	6832      	ldr	r2, [r6, #0]
 800a4f8:	f003 0306 	and.w	r3, r3, #6
 800a4fc:	2b04      	cmp	r3, #4
 800a4fe:	bf08      	it	eq
 800a500:	1aad      	subeq	r5, r5, r2
 800a502:	68a3      	ldr	r3, [r4, #8]
 800a504:	6922      	ldr	r2, [r4, #16]
 800a506:	bf0c      	ite	eq
 800a508:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a50c:	2500      	movne	r5, #0
 800a50e:	4293      	cmp	r3, r2
 800a510:	bfc4      	itt	gt
 800a512:	1a9b      	subgt	r3, r3, r2
 800a514:	18ed      	addgt	r5, r5, r3
 800a516:	2600      	movs	r6, #0
 800a518:	341a      	adds	r4, #26
 800a51a:	42b5      	cmp	r5, r6
 800a51c:	d11a      	bne.n	800a554 <_printf_common+0xc8>
 800a51e:	2000      	movs	r0, #0
 800a520:	e008      	b.n	800a534 <_printf_common+0xa8>
 800a522:	2301      	movs	r3, #1
 800a524:	4652      	mov	r2, sl
 800a526:	4649      	mov	r1, r9
 800a528:	4638      	mov	r0, r7
 800a52a:	47c0      	blx	r8
 800a52c:	3001      	adds	r0, #1
 800a52e:	d103      	bne.n	800a538 <_printf_common+0xac>
 800a530:	f04f 30ff 	mov.w	r0, #4294967295
 800a534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a538:	3501      	adds	r5, #1
 800a53a:	e7c6      	b.n	800a4ca <_printf_common+0x3e>
 800a53c:	18e1      	adds	r1, r4, r3
 800a53e:	1c5a      	adds	r2, r3, #1
 800a540:	2030      	movs	r0, #48	; 0x30
 800a542:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a546:	4422      	add	r2, r4
 800a548:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a54c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a550:	3302      	adds	r3, #2
 800a552:	e7c7      	b.n	800a4e4 <_printf_common+0x58>
 800a554:	2301      	movs	r3, #1
 800a556:	4622      	mov	r2, r4
 800a558:	4649      	mov	r1, r9
 800a55a:	4638      	mov	r0, r7
 800a55c:	47c0      	blx	r8
 800a55e:	3001      	adds	r0, #1
 800a560:	d0e6      	beq.n	800a530 <_printf_common+0xa4>
 800a562:	3601      	adds	r6, #1
 800a564:	e7d9      	b.n	800a51a <_printf_common+0x8e>
	...

0800a568 <_printf_i>:
 800a568:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a56c:	7e0f      	ldrb	r7, [r1, #24]
 800a56e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a570:	2f78      	cmp	r7, #120	; 0x78
 800a572:	4691      	mov	r9, r2
 800a574:	4680      	mov	r8, r0
 800a576:	460c      	mov	r4, r1
 800a578:	469a      	mov	sl, r3
 800a57a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a57e:	d807      	bhi.n	800a590 <_printf_i+0x28>
 800a580:	2f62      	cmp	r7, #98	; 0x62
 800a582:	d80a      	bhi.n	800a59a <_printf_i+0x32>
 800a584:	2f00      	cmp	r7, #0
 800a586:	f000 80d8 	beq.w	800a73a <_printf_i+0x1d2>
 800a58a:	2f58      	cmp	r7, #88	; 0x58
 800a58c:	f000 80a3 	beq.w	800a6d6 <_printf_i+0x16e>
 800a590:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a594:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a598:	e03a      	b.n	800a610 <_printf_i+0xa8>
 800a59a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a59e:	2b15      	cmp	r3, #21
 800a5a0:	d8f6      	bhi.n	800a590 <_printf_i+0x28>
 800a5a2:	a101      	add	r1, pc, #4	; (adr r1, 800a5a8 <_printf_i+0x40>)
 800a5a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a5a8:	0800a601 	.word	0x0800a601
 800a5ac:	0800a615 	.word	0x0800a615
 800a5b0:	0800a591 	.word	0x0800a591
 800a5b4:	0800a591 	.word	0x0800a591
 800a5b8:	0800a591 	.word	0x0800a591
 800a5bc:	0800a591 	.word	0x0800a591
 800a5c0:	0800a615 	.word	0x0800a615
 800a5c4:	0800a591 	.word	0x0800a591
 800a5c8:	0800a591 	.word	0x0800a591
 800a5cc:	0800a591 	.word	0x0800a591
 800a5d0:	0800a591 	.word	0x0800a591
 800a5d4:	0800a721 	.word	0x0800a721
 800a5d8:	0800a645 	.word	0x0800a645
 800a5dc:	0800a703 	.word	0x0800a703
 800a5e0:	0800a591 	.word	0x0800a591
 800a5e4:	0800a591 	.word	0x0800a591
 800a5e8:	0800a743 	.word	0x0800a743
 800a5ec:	0800a591 	.word	0x0800a591
 800a5f0:	0800a645 	.word	0x0800a645
 800a5f4:	0800a591 	.word	0x0800a591
 800a5f8:	0800a591 	.word	0x0800a591
 800a5fc:	0800a70b 	.word	0x0800a70b
 800a600:	682b      	ldr	r3, [r5, #0]
 800a602:	1d1a      	adds	r2, r3, #4
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	602a      	str	r2, [r5, #0]
 800a608:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a60c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a610:	2301      	movs	r3, #1
 800a612:	e0a3      	b.n	800a75c <_printf_i+0x1f4>
 800a614:	6820      	ldr	r0, [r4, #0]
 800a616:	6829      	ldr	r1, [r5, #0]
 800a618:	0606      	lsls	r6, r0, #24
 800a61a:	f101 0304 	add.w	r3, r1, #4
 800a61e:	d50a      	bpl.n	800a636 <_printf_i+0xce>
 800a620:	680e      	ldr	r6, [r1, #0]
 800a622:	602b      	str	r3, [r5, #0]
 800a624:	2e00      	cmp	r6, #0
 800a626:	da03      	bge.n	800a630 <_printf_i+0xc8>
 800a628:	232d      	movs	r3, #45	; 0x2d
 800a62a:	4276      	negs	r6, r6
 800a62c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a630:	485e      	ldr	r0, [pc, #376]	; (800a7ac <_printf_i+0x244>)
 800a632:	230a      	movs	r3, #10
 800a634:	e019      	b.n	800a66a <_printf_i+0x102>
 800a636:	680e      	ldr	r6, [r1, #0]
 800a638:	602b      	str	r3, [r5, #0]
 800a63a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a63e:	bf18      	it	ne
 800a640:	b236      	sxthne	r6, r6
 800a642:	e7ef      	b.n	800a624 <_printf_i+0xbc>
 800a644:	682b      	ldr	r3, [r5, #0]
 800a646:	6820      	ldr	r0, [r4, #0]
 800a648:	1d19      	adds	r1, r3, #4
 800a64a:	6029      	str	r1, [r5, #0]
 800a64c:	0601      	lsls	r1, r0, #24
 800a64e:	d501      	bpl.n	800a654 <_printf_i+0xec>
 800a650:	681e      	ldr	r6, [r3, #0]
 800a652:	e002      	b.n	800a65a <_printf_i+0xf2>
 800a654:	0646      	lsls	r6, r0, #25
 800a656:	d5fb      	bpl.n	800a650 <_printf_i+0xe8>
 800a658:	881e      	ldrh	r6, [r3, #0]
 800a65a:	4854      	ldr	r0, [pc, #336]	; (800a7ac <_printf_i+0x244>)
 800a65c:	2f6f      	cmp	r7, #111	; 0x6f
 800a65e:	bf0c      	ite	eq
 800a660:	2308      	moveq	r3, #8
 800a662:	230a      	movne	r3, #10
 800a664:	2100      	movs	r1, #0
 800a666:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a66a:	6865      	ldr	r5, [r4, #4]
 800a66c:	60a5      	str	r5, [r4, #8]
 800a66e:	2d00      	cmp	r5, #0
 800a670:	bfa2      	ittt	ge
 800a672:	6821      	ldrge	r1, [r4, #0]
 800a674:	f021 0104 	bicge.w	r1, r1, #4
 800a678:	6021      	strge	r1, [r4, #0]
 800a67a:	b90e      	cbnz	r6, 800a680 <_printf_i+0x118>
 800a67c:	2d00      	cmp	r5, #0
 800a67e:	d04d      	beq.n	800a71c <_printf_i+0x1b4>
 800a680:	4615      	mov	r5, r2
 800a682:	fbb6 f1f3 	udiv	r1, r6, r3
 800a686:	fb03 6711 	mls	r7, r3, r1, r6
 800a68a:	5dc7      	ldrb	r7, [r0, r7]
 800a68c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a690:	4637      	mov	r7, r6
 800a692:	42bb      	cmp	r3, r7
 800a694:	460e      	mov	r6, r1
 800a696:	d9f4      	bls.n	800a682 <_printf_i+0x11a>
 800a698:	2b08      	cmp	r3, #8
 800a69a:	d10b      	bne.n	800a6b4 <_printf_i+0x14c>
 800a69c:	6823      	ldr	r3, [r4, #0]
 800a69e:	07de      	lsls	r6, r3, #31
 800a6a0:	d508      	bpl.n	800a6b4 <_printf_i+0x14c>
 800a6a2:	6923      	ldr	r3, [r4, #16]
 800a6a4:	6861      	ldr	r1, [r4, #4]
 800a6a6:	4299      	cmp	r1, r3
 800a6a8:	bfde      	ittt	le
 800a6aa:	2330      	movle	r3, #48	; 0x30
 800a6ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a6b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a6b4:	1b52      	subs	r2, r2, r5
 800a6b6:	6122      	str	r2, [r4, #16]
 800a6b8:	f8cd a000 	str.w	sl, [sp]
 800a6bc:	464b      	mov	r3, r9
 800a6be:	aa03      	add	r2, sp, #12
 800a6c0:	4621      	mov	r1, r4
 800a6c2:	4640      	mov	r0, r8
 800a6c4:	f7ff fee2 	bl	800a48c <_printf_common>
 800a6c8:	3001      	adds	r0, #1
 800a6ca:	d14c      	bne.n	800a766 <_printf_i+0x1fe>
 800a6cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a6d0:	b004      	add	sp, #16
 800a6d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6d6:	4835      	ldr	r0, [pc, #212]	; (800a7ac <_printf_i+0x244>)
 800a6d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a6dc:	6829      	ldr	r1, [r5, #0]
 800a6de:	6823      	ldr	r3, [r4, #0]
 800a6e0:	f851 6b04 	ldr.w	r6, [r1], #4
 800a6e4:	6029      	str	r1, [r5, #0]
 800a6e6:	061d      	lsls	r5, r3, #24
 800a6e8:	d514      	bpl.n	800a714 <_printf_i+0x1ac>
 800a6ea:	07df      	lsls	r7, r3, #31
 800a6ec:	bf44      	itt	mi
 800a6ee:	f043 0320 	orrmi.w	r3, r3, #32
 800a6f2:	6023      	strmi	r3, [r4, #0]
 800a6f4:	b91e      	cbnz	r6, 800a6fe <_printf_i+0x196>
 800a6f6:	6823      	ldr	r3, [r4, #0]
 800a6f8:	f023 0320 	bic.w	r3, r3, #32
 800a6fc:	6023      	str	r3, [r4, #0]
 800a6fe:	2310      	movs	r3, #16
 800a700:	e7b0      	b.n	800a664 <_printf_i+0xfc>
 800a702:	6823      	ldr	r3, [r4, #0]
 800a704:	f043 0320 	orr.w	r3, r3, #32
 800a708:	6023      	str	r3, [r4, #0]
 800a70a:	2378      	movs	r3, #120	; 0x78
 800a70c:	4828      	ldr	r0, [pc, #160]	; (800a7b0 <_printf_i+0x248>)
 800a70e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a712:	e7e3      	b.n	800a6dc <_printf_i+0x174>
 800a714:	0659      	lsls	r1, r3, #25
 800a716:	bf48      	it	mi
 800a718:	b2b6      	uxthmi	r6, r6
 800a71a:	e7e6      	b.n	800a6ea <_printf_i+0x182>
 800a71c:	4615      	mov	r5, r2
 800a71e:	e7bb      	b.n	800a698 <_printf_i+0x130>
 800a720:	682b      	ldr	r3, [r5, #0]
 800a722:	6826      	ldr	r6, [r4, #0]
 800a724:	6961      	ldr	r1, [r4, #20]
 800a726:	1d18      	adds	r0, r3, #4
 800a728:	6028      	str	r0, [r5, #0]
 800a72a:	0635      	lsls	r5, r6, #24
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	d501      	bpl.n	800a734 <_printf_i+0x1cc>
 800a730:	6019      	str	r1, [r3, #0]
 800a732:	e002      	b.n	800a73a <_printf_i+0x1d2>
 800a734:	0670      	lsls	r0, r6, #25
 800a736:	d5fb      	bpl.n	800a730 <_printf_i+0x1c8>
 800a738:	8019      	strh	r1, [r3, #0]
 800a73a:	2300      	movs	r3, #0
 800a73c:	6123      	str	r3, [r4, #16]
 800a73e:	4615      	mov	r5, r2
 800a740:	e7ba      	b.n	800a6b8 <_printf_i+0x150>
 800a742:	682b      	ldr	r3, [r5, #0]
 800a744:	1d1a      	adds	r2, r3, #4
 800a746:	602a      	str	r2, [r5, #0]
 800a748:	681d      	ldr	r5, [r3, #0]
 800a74a:	6862      	ldr	r2, [r4, #4]
 800a74c:	2100      	movs	r1, #0
 800a74e:	4628      	mov	r0, r5
 800a750:	f7f5 fd4e 	bl	80001f0 <memchr>
 800a754:	b108      	cbz	r0, 800a75a <_printf_i+0x1f2>
 800a756:	1b40      	subs	r0, r0, r5
 800a758:	6060      	str	r0, [r4, #4]
 800a75a:	6863      	ldr	r3, [r4, #4]
 800a75c:	6123      	str	r3, [r4, #16]
 800a75e:	2300      	movs	r3, #0
 800a760:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a764:	e7a8      	b.n	800a6b8 <_printf_i+0x150>
 800a766:	6923      	ldr	r3, [r4, #16]
 800a768:	462a      	mov	r2, r5
 800a76a:	4649      	mov	r1, r9
 800a76c:	4640      	mov	r0, r8
 800a76e:	47d0      	blx	sl
 800a770:	3001      	adds	r0, #1
 800a772:	d0ab      	beq.n	800a6cc <_printf_i+0x164>
 800a774:	6823      	ldr	r3, [r4, #0]
 800a776:	079b      	lsls	r3, r3, #30
 800a778:	d413      	bmi.n	800a7a2 <_printf_i+0x23a>
 800a77a:	68e0      	ldr	r0, [r4, #12]
 800a77c:	9b03      	ldr	r3, [sp, #12]
 800a77e:	4298      	cmp	r0, r3
 800a780:	bfb8      	it	lt
 800a782:	4618      	movlt	r0, r3
 800a784:	e7a4      	b.n	800a6d0 <_printf_i+0x168>
 800a786:	2301      	movs	r3, #1
 800a788:	4632      	mov	r2, r6
 800a78a:	4649      	mov	r1, r9
 800a78c:	4640      	mov	r0, r8
 800a78e:	47d0      	blx	sl
 800a790:	3001      	adds	r0, #1
 800a792:	d09b      	beq.n	800a6cc <_printf_i+0x164>
 800a794:	3501      	adds	r5, #1
 800a796:	68e3      	ldr	r3, [r4, #12]
 800a798:	9903      	ldr	r1, [sp, #12]
 800a79a:	1a5b      	subs	r3, r3, r1
 800a79c:	42ab      	cmp	r3, r5
 800a79e:	dcf2      	bgt.n	800a786 <_printf_i+0x21e>
 800a7a0:	e7eb      	b.n	800a77a <_printf_i+0x212>
 800a7a2:	2500      	movs	r5, #0
 800a7a4:	f104 0619 	add.w	r6, r4, #25
 800a7a8:	e7f5      	b.n	800a796 <_printf_i+0x22e>
 800a7aa:	bf00      	nop
 800a7ac:	0800ab89 	.word	0x0800ab89
 800a7b0:	0800ab9a 	.word	0x0800ab9a

0800a7b4 <_sbrk_r>:
 800a7b4:	b538      	push	{r3, r4, r5, lr}
 800a7b6:	4d06      	ldr	r5, [pc, #24]	; (800a7d0 <_sbrk_r+0x1c>)
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	4604      	mov	r4, r0
 800a7bc:	4608      	mov	r0, r1
 800a7be:	602b      	str	r3, [r5, #0]
 800a7c0:	f7f6 ff6a 	bl	8001698 <_sbrk>
 800a7c4:	1c43      	adds	r3, r0, #1
 800a7c6:	d102      	bne.n	800a7ce <_sbrk_r+0x1a>
 800a7c8:	682b      	ldr	r3, [r5, #0]
 800a7ca:	b103      	cbz	r3, 800a7ce <_sbrk_r+0x1a>
 800a7cc:	6023      	str	r3, [r4, #0]
 800a7ce:	bd38      	pop	{r3, r4, r5, pc}
 800a7d0:	200044ec 	.word	0x200044ec

0800a7d4 <__sread>:
 800a7d4:	b510      	push	{r4, lr}
 800a7d6:	460c      	mov	r4, r1
 800a7d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7dc:	f000 f8a0 	bl	800a920 <_read_r>
 800a7e0:	2800      	cmp	r0, #0
 800a7e2:	bfab      	itete	ge
 800a7e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a7e6:	89a3      	ldrhlt	r3, [r4, #12]
 800a7e8:	181b      	addge	r3, r3, r0
 800a7ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a7ee:	bfac      	ite	ge
 800a7f0:	6563      	strge	r3, [r4, #84]	; 0x54
 800a7f2:	81a3      	strhlt	r3, [r4, #12]
 800a7f4:	bd10      	pop	{r4, pc}

0800a7f6 <__swrite>:
 800a7f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7fa:	461f      	mov	r7, r3
 800a7fc:	898b      	ldrh	r3, [r1, #12]
 800a7fe:	05db      	lsls	r3, r3, #23
 800a800:	4605      	mov	r5, r0
 800a802:	460c      	mov	r4, r1
 800a804:	4616      	mov	r6, r2
 800a806:	d505      	bpl.n	800a814 <__swrite+0x1e>
 800a808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a80c:	2302      	movs	r3, #2
 800a80e:	2200      	movs	r2, #0
 800a810:	f000 f868 	bl	800a8e4 <_lseek_r>
 800a814:	89a3      	ldrh	r3, [r4, #12]
 800a816:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a81a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a81e:	81a3      	strh	r3, [r4, #12]
 800a820:	4632      	mov	r2, r6
 800a822:	463b      	mov	r3, r7
 800a824:	4628      	mov	r0, r5
 800a826:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a82a:	f000 b817 	b.w	800a85c <_write_r>

0800a82e <__sseek>:
 800a82e:	b510      	push	{r4, lr}
 800a830:	460c      	mov	r4, r1
 800a832:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a836:	f000 f855 	bl	800a8e4 <_lseek_r>
 800a83a:	1c43      	adds	r3, r0, #1
 800a83c:	89a3      	ldrh	r3, [r4, #12]
 800a83e:	bf15      	itete	ne
 800a840:	6560      	strne	r0, [r4, #84]	; 0x54
 800a842:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a846:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a84a:	81a3      	strheq	r3, [r4, #12]
 800a84c:	bf18      	it	ne
 800a84e:	81a3      	strhne	r3, [r4, #12]
 800a850:	bd10      	pop	{r4, pc}

0800a852 <__sclose>:
 800a852:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a856:	f000 b813 	b.w	800a880 <_close_r>
	...

0800a85c <_write_r>:
 800a85c:	b538      	push	{r3, r4, r5, lr}
 800a85e:	4d07      	ldr	r5, [pc, #28]	; (800a87c <_write_r+0x20>)
 800a860:	4604      	mov	r4, r0
 800a862:	4608      	mov	r0, r1
 800a864:	4611      	mov	r1, r2
 800a866:	2200      	movs	r2, #0
 800a868:	602a      	str	r2, [r5, #0]
 800a86a:	461a      	mov	r2, r3
 800a86c:	f7f6 fec3 	bl	80015f6 <_write>
 800a870:	1c43      	adds	r3, r0, #1
 800a872:	d102      	bne.n	800a87a <_write_r+0x1e>
 800a874:	682b      	ldr	r3, [r5, #0]
 800a876:	b103      	cbz	r3, 800a87a <_write_r+0x1e>
 800a878:	6023      	str	r3, [r4, #0]
 800a87a:	bd38      	pop	{r3, r4, r5, pc}
 800a87c:	200044ec 	.word	0x200044ec

0800a880 <_close_r>:
 800a880:	b538      	push	{r3, r4, r5, lr}
 800a882:	4d06      	ldr	r5, [pc, #24]	; (800a89c <_close_r+0x1c>)
 800a884:	2300      	movs	r3, #0
 800a886:	4604      	mov	r4, r0
 800a888:	4608      	mov	r0, r1
 800a88a:	602b      	str	r3, [r5, #0]
 800a88c:	f7f6 fecf 	bl	800162e <_close>
 800a890:	1c43      	adds	r3, r0, #1
 800a892:	d102      	bne.n	800a89a <_close_r+0x1a>
 800a894:	682b      	ldr	r3, [r5, #0]
 800a896:	b103      	cbz	r3, 800a89a <_close_r+0x1a>
 800a898:	6023      	str	r3, [r4, #0]
 800a89a:	bd38      	pop	{r3, r4, r5, pc}
 800a89c:	200044ec 	.word	0x200044ec

0800a8a0 <_fstat_r>:
 800a8a0:	b538      	push	{r3, r4, r5, lr}
 800a8a2:	4d07      	ldr	r5, [pc, #28]	; (800a8c0 <_fstat_r+0x20>)
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	4604      	mov	r4, r0
 800a8a8:	4608      	mov	r0, r1
 800a8aa:	4611      	mov	r1, r2
 800a8ac:	602b      	str	r3, [r5, #0]
 800a8ae:	f7f6 feca 	bl	8001646 <_fstat>
 800a8b2:	1c43      	adds	r3, r0, #1
 800a8b4:	d102      	bne.n	800a8bc <_fstat_r+0x1c>
 800a8b6:	682b      	ldr	r3, [r5, #0]
 800a8b8:	b103      	cbz	r3, 800a8bc <_fstat_r+0x1c>
 800a8ba:	6023      	str	r3, [r4, #0]
 800a8bc:	bd38      	pop	{r3, r4, r5, pc}
 800a8be:	bf00      	nop
 800a8c0:	200044ec 	.word	0x200044ec

0800a8c4 <_isatty_r>:
 800a8c4:	b538      	push	{r3, r4, r5, lr}
 800a8c6:	4d06      	ldr	r5, [pc, #24]	; (800a8e0 <_isatty_r+0x1c>)
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	4604      	mov	r4, r0
 800a8cc:	4608      	mov	r0, r1
 800a8ce:	602b      	str	r3, [r5, #0]
 800a8d0:	f7f6 fec9 	bl	8001666 <_isatty>
 800a8d4:	1c43      	adds	r3, r0, #1
 800a8d6:	d102      	bne.n	800a8de <_isatty_r+0x1a>
 800a8d8:	682b      	ldr	r3, [r5, #0]
 800a8da:	b103      	cbz	r3, 800a8de <_isatty_r+0x1a>
 800a8dc:	6023      	str	r3, [r4, #0]
 800a8de:	bd38      	pop	{r3, r4, r5, pc}
 800a8e0:	200044ec 	.word	0x200044ec

0800a8e4 <_lseek_r>:
 800a8e4:	b538      	push	{r3, r4, r5, lr}
 800a8e6:	4d07      	ldr	r5, [pc, #28]	; (800a904 <_lseek_r+0x20>)
 800a8e8:	4604      	mov	r4, r0
 800a8ea:	4608      	mov	r0, r1
 800a8ec:	4611      	mov	r1, r2
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	602a      	str	r2, [r5, #0]
 800a8f2:	461a      	mov	r2, r3
 800a8f4:	f7f6 fec2 	bl	800167c <_lseek>
 800a8f8:	1c43      	adds	r3, r0, #1
 800a8fa:	d102      	bne.n	800a902 <_lseek_r+0x1e>
 800a8fc:	682b      	ldr	r3, [r5, #0]
 800a8fe:	b103      	cbz	r3, 800a902 <_lseek_r+0x1e>
 800a900:	6023      	str	r3, [r4, #0]
 800a902:	bd38      	pop	{r3, r4, r5, pc}
 800a904:	200044ec 	.word	0x200044ec

0800a908 <__malloc_lock>:
 800a908:	4801      	ldr	r0, [pc, #4]	; (800a910 <__malloc_lock+0x8>)
 800a90a:	f7ff bb1d 	b.w	8009f48 <__retarget_lock_acquire_recursive>
 800a90e:	bf00      	nop
 800a910:	200044e0 	.word	0x200044e0

0800a914 <__malloc_unlock>:
 800a914:	4801      	ldr	r0, [pc, #4]	; (800a91c <__malloc_unlock+0x8>)
 800a916:	f7ff bb18 	b.w	8009f4a <__retarget_lock_release_recursive>
 800a91a:	bf00      	nop
 800a91c:	200044e0 	.word	0x200044e0

0800a920 <_read_r>:
 800a920:	b538      	push	{r3, r4, r5, lr}
 800a922:	4d07      	ldr	r5, [pc, #28]	; (800a940 <_read_r+0x20>)
 800a924:	4604      	mov	r4, r0
 800a926:	4608      	mov	r0, r1
 800a928:	4611      	mov	r1, r2
 800a92a:	2200      	movs	r2, #0
 800a92c:	602a      	str	r2, [r5, #0]
 800a92e:	461a      	mov	r2, r3
 800a930:	f7f6 fe44 	bl	80015bc <_read>
 800a934:	1c43      	adds	r3, r0, #1
 800a936:	d102      	bne.n	800a93e <_read_r+0x1e>
 800a938:	682b      	ldr	r3, [r5, #0]
 800a93a:	b103      	cbz	r3, 800a93e <_read_r+0x1e>
 800a93c:	6023      	str	r3, [r4, #0]
 800a93e:	bd38      	pop	{r3, r4, r5, pc}
 800a940:	200044ec 	.word	0x200044ec

0800a944 <_init>:
 800a944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a946:	bf00      	nop
 800a948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a94a:	bc08      	pop	{r3}
 800a94c:	469e      	mov	lr, r3
 800a94e:	4770      	bx	lr

0800a950 <_fini>:
 800a950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a952:	bf00      	nop
 800a954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a956:	bc08      	pop	{r3}
 800a958:	469e      	mov	lr, r3
 800a95a:	4770      	bx	lr
