
F429ZI_FRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a614  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000024c  0800a7c4  0800a7c4  0001a7c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa10  0800aa10  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa10  0800aa10  0001aa10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa18  0800aa18  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa18  0800aa18  0001aa18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa1c  0800aa1c  0001aa1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800aa20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          0000447c  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000c00  200044f0  200044f0  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d4bc  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e67  00000000  00000000  0003d560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001938  00000000  00000000  000413c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000017c8  00000000  00000000  00042d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028b68  00000000  00000000  000444c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001db62  00000000  00000000  0006d030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f1316  00000000  00000000  0008ab92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0017bea8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007228  00000000  00000000  0017bef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a7ac 	.word	0x0800a7ac

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	0800a7ac 	.word	0x0800a7ac

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	4a06      	ldr	r2, [pc, #24]	; (80005c4 <vApplicationGetIdleTaskMemory+0x30>)
 80005aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2280      	movs	r2, #128	; 0x80
 80005b0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005b2:	bf00      	nop
 80005b4:	3714      	adds	r7, #20
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	20000090 	.word	0x20000090
 80005c4:	200000e4 	.word	0x200000e4

080005c8 <__io_putchar>:
	/******************************************************************
	  * @name   PUTCHAR_PROTOTYPE
	  * @brief  Retargets the C library printf function to the USART.
	  *****************************************************************/
	PUTCHAR_PROTOTYPE
	{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
		HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);				//Use USART3
 80005d0:	1d39      	adds	r1, r7, #4
 80005d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005d6:	2201      	movs	r2, #1
 80005d8:	4803      	ldr	r0, [pc, #12]	; (80005e8 <__io_putchar+0x20>)
 80005da:	f005 f884 	bl	80056e6 <HAL_UART_Transmit>
		return ch;
 80005de:	687b      	ldr	r3, [r7, #4]
	}
 80005e0:	4618      	mov	r0, r3
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	200005d8 	.word	0x200005d8

080005ec <main>:
/************************************************************
  * @brief  The application entry point.
  * @retval int
  ***********************************************************/
int main(void)
{
 80005ec:	b5b0      	push	{r4, r5, r7, lr}
 80005ee:	b098      	sub	sp, #96	; 0x60
 80005f0:	af02      	add	r7, sp, #8
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f2:	f001 f8e3 	bl	80017bc <HAL_Init>

  /* Configure the system clock (HSE- PLL 180 MHz) */
  SystemClock_Config();
 80005f6:	f000 f9d5 	bl	80009a4 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fa:	f000 fb47 	bl	8000c8c <MX_GPIO_Init>
  MX_DMA_Init();
 80005fe:	f000 faff 	bl	8000c00 <MX_DMA_Init>
  MX_CRC_Init();
 8000602:	f000 fa3f 	bl	8000a84 <MX_CRC_Init>
  MX_I2C1_Init();
 8000606:	f000 fa51 	bl	8000aac <MX_I2C1_Init>
  MX_USART3_UART_Init();
 800060a:	f000 fac1 	bl	8000b90 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 800060e:	f000 fa8d 	bl	8000b2c <MX_SPI1_Init>

  printf("\r\nHW Initialization OK\r\n");
 8000612:	4844      	ldr	r0, [pc, #272]	; (8000724 <main+0x138>)
 8000614:	f009 f938 	bl	8009888 <puts>

  /* Event Group */

  xEventGroup = xEventGroupCreate();
 8000618:	f006 fb1d 	bl	8006c56 <xEventGroupCreate>
 800061c:	4603      	mov	r3, r0
 800061e:	4a42      	ldr	r2, [pc, #264]	; (8000728 <main+0x13c>)
 8000620:	6013      	str	r3, [r2, #0]
  if( xEventGroup == NULL )
 8000622:	4b41      	ldr	r3, [pc, #260]	; (8000728 <main+0x13c>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d102      	bne.n	8000630 <main+0x44>
  {
	  printf("Event Group Fail!!!\r\n");
 800062a:	4840      	ldr	r0, [pc, #256]	; (800072c <main+0x140>)
 800062c:	f009 f92c 	bl	8009888 <puts>

  /* RTOS_SEMAPHORES */
//  osSemaphoreDef(SEM);
//  osSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1);

  osSemaphore = xSemaphoreCreateBinary();
 8000630:	2203      	movs	r2, #3
 8000632:	2100      	movs	r1, #0
 8000634:	2001      	movs	r0, #1
 8000636:	f006 fdf9 	bl	800722c <xQueueGenericCreate>
 800063a:	4603      	mov	r3, r0
 800063c:	4a3c      	ldr	r2, [pc, #240]	; (8000730 <main+0x144>)
 800063e:	6013      	str	r3, [r2, #0]

  if( osSemaphore == NULL )
 8000640:	4b3b      	ldr	r3, [pc, #236]	; (8000730 <main+0x144>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d102      	bne.n	800064e <main+0x62>
  {
	  printf("Semaphore creation Fail!!!\r\n");
 8000648:	483a      	ldr	r0, [pc, #232]	; (8000734 <main+0x148>)
 800064a:	f009 f91d 	bl	8009888 <puts>
  }

  /* RTOS_QUEUE */
  delay_queue 	= xQueueCreate(delay_queue_len, sizeof(PrintMessage));
 800064e:	2305      	movs	r3, #5
 8000650:	2200      	movs	r2, #0
 8000652:	2118      	movs	r1, #24
 8000654:	4618      	mov	r0, r3
 8000656:	f006 fde9 	bl	800722c <xQueueGenericCreate>
 800065a:	4603      	mov	r3, r0
 800065c:	4a36      	ldr	r2, [pc, #216]	; (8000738 <main+0x14c>)
 800065e:	6013      	str	r3, [r2, #0]
  msg_queue 	= xQueueCreate(msg_queue_len, sizeof(PrintMessage));
 8000660:	2305      	movs	r3, #5
 8000662:	2200      	movs	r2, #0
 8000664:	2118      	movs	r1, #24
 8000666:	4618      	mov	r0, r3
 8000668:	f006 fde0 	bl	800722c <xQueueGenericCreate>
 800066c:	4603      	mov	r3, r0
 800066e:	4a33      	ldr	r2, [pc, #204]	; (800073c <main+0x150>)
 8000670:	6013      	str	r3, [r2, #0]
  if( ( delay_queue == NULL ) || ( msg_queue == NULL ) )
 8000672:	4b31      	ldr	r3, [pc, #196]	; (8000738 <main+0x14c>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d003      	beq.n	8000682 <main+0x96>
 800067a:	4b30      	ldr	r3, [pc, #192]	; (800073c <main+0x150>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d103      	bne.n	800068a <main+0x9e>
  {
	  printf("Queue creation Fail!!!\r\n");
 8000682:	482f      	ldr	r0, [pc, #188]	; (8000740 <main+0x154>)
 8000684:	f009 f900 	bl	8009888 <puts>
 8000688:	e002      	b.n	8000690 <main+0xa4>
  }else{
	  printf("Queue creation OK\r\n");
 800068a:	482e      	ldr	r0, [pc, #184]	; (8000744 <main+0x158>)
 800068c:	f009 f8fc 	bl	8009888 <puts>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */


  /* RTOS TASKS */
  xTaskCreate(Default_Thread, "DEFAULT_TASK", 128, NULL, osPriorityBelowNormal, &defaultThreadHandle);
 8000690:	4b2d      	ldr	r3, [pc, #180]	; (8000748 <main+0x15c>)
 8000692:	9301      	str	r3, [sp, #4]
 8000694:	f04f 33ff 	mov.w	r3, #4294967295
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	2300      	movs	r3, #0
 800069c:	2280      	movs	r2, #128	; 0x80
 800069e:	492b      	ldr	r1, [pc, #172]	; (800074c <main+0x160>)
 80006a0:	482b      	ldr	r0, [pc, #172]	; (8000750 <main+0x164>)
 80006a2:	f007 fbb4 	bl	8007e0e <xTaskCreate>

  /* LED Thread definition */
  osThreadDef(LEDTask, LED_Thread, osPriorityHigh, 0, configMINIMAL_STACK_SIZE);
 80006a6:	4b2b      	ldr	r3, [pc, #172]	; (8000754 <main+0x168>)
 80006a8:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80006ac:	461d      	mov	r5, r3
 80006ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LEDThreadHandle = osThreadCreate (osThread(LEDTask), (void *) osSemaphore);
 80006ba:	4b1d      	ldr	r3, [pc, #116]	; (8000730 <main+0x144>)
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80006c2:	4611      	mov	r1, r2
 80006c4:	4618      	mov	r0, r3
 80006c6:	f006 fa66 	bl	8006b96 <osThreadCreate>
 80006ca:	4603      	mov	r3, r0
 80006cc:	4a22      	ldr	r2, [pc, #136]	; (8000758 <main+0x16c>)
 80006ce:	6013      	str	r3, [r2, #0]

  /* UART Thread definition */
  osThreadDef(UARTTask, UART_Thread,  osPriorityAboveNormal, 0, configMINIMAL_STACK_SIZE);
 80006d0:	4b22      	ldr	r3, [pc, #136]	; (800075c <main+0x170>)
 80006d2:	f107 0420 	add.w	r4, r7, #32
 80006d6:	461d      	mov	r5, r3
 80006d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UARTThreadHandle = osThreadCreate (osThread(UARTTask), NULL);
 80006e4:	f107 0320 	add.w	r3, r7, #32
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f006 fa53 	bl	8006b96 <osThreadCreate>
 80006f0:	4603      	mov	r3, r0
 80006f2:	4a1b      	ldr	r2, [pc, #108]	; (8000760 <main+0x174>)
 80006f4:	6013      	str	r3, [r2, #0]

  /* Button Thread definition */
  osThreadDef(ButtonTask, Button_Thread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);
 80006f6:	4b1b      	ldr	r3, [pc, #108]	; (8000764 <main+0x178>)
 80006f8:	1d3c      	adds	r4, r7, #4
 80006fa:	461d      	mov	r5, r3
 80006fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000700:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000704:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ButtonThreadHandle = osThreadCreate (osThread(ButtonTask), (void *) osSemaphore);
 8000708:	4b09      	ldr	r3, [pc, #36]	; (8000730 <main+0x144>)
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	4611      	mov	r1, r2
 8000710:	4618      	mov	r0, r3
 8000712:	f006 fa40 	bl	8006b96 <osThreadCreate>
 8000716:	4603      	mov	r3, r0
 8000718:	4a13      	ldr	r2, [pc, #76]	; (8000768 <main+0x17c>)
 800071a:	6013      	str	r3, [r2, #0]

  /* Start scheduler */
  osKernelStart();
 800071c:	f006 fa34 	bl	8006b88 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  while (1)
 8000720:	e7fe      	b.n	8000720 <main+0x134>
 8000722:	bf00      	nop
 8000724:	0800a7e4 	.word	0x0800a7e4
 8000728:	20000738 	.word	0x20000738
 800072c:	0800a7fc 	.word	0x0800a7fc
 8000730:	20000734 	.word	0x20000734
 8000734:	0800a814 	.word	0x0800a814
 8000738:	2000072c 	.word	0x2000072c
 800073c:	20000730 	.word	0x20000730
 8000740:	0800a830 	.word	0x0800a830
 8000744:	0800a848 	.word	0x0800a848
 8000748:	2000071c 	.word	0x2000071c
 800074c:	0800a85c 	.word	0x0800a85c
 8000750:	08000995 	.word	0x08000995
 8000754:	0800a86c 	.word	0x0800a86c
 8000758:	20000728 	.word	0x20000728
 800075c:	0800a888 	.word	0x0800a888
 8000760:	20000724 	.word	0x20000724
 8000764:	0800a8a4 	.word	0x0800a8a4
 8000768:	20000720 	.word	0x20000720

0800076c <UART_Thread>:
  * @brief  LED thread
  * @param  semaphore
  * @retval None
  ************************************************************/
void UART_Thread(void const *argument)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08a      	sub	sp, #40	; 0x28
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
	struct PrintMessage rcv_msg;
	uint32_t TickDelay = pdMS_TO_TICKS(3000);
 8000774:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000778:	627b      	str	r3, [r7, #36]	; 0x24

	for(;;)
	{
		// See if there's a message in the queue
		if (xQueueReceive(msg_queue, (void *)&rcv_msg, portMAX_DELAY) != pdTRUE) {
 800077a:	4b0d      	ldr	r3, [pc, #52]	; (80007b0 <UART_Thread+0x44>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	f107 010c 	add.w	r1, r7, #12
 8000782:	f04f 32ff 	mov.w	r2, #4294967295
 8000786:	4618      	mov	r0, r3
 8000788:	f006 ffd0 	bl	800772c <xQueueReceive>
 800078c:	4603      	mov	r3, r0
 800078e:	2b01      	cmp	r3, #1
 8000790:	d003      	beq.n	800079a <UART_Thread+0x2e>
			printf("Error in Receiving from Queue\r\n\n");
 8000792:	4808      	ldr	r0, [pc, #32]	; (80007b4 <UART_Thread+0x48>)
 8000794:	f009 f878 	bl	8009888 <puts>
 8000798:	e005      	b.n	80007a6 <UART_Thread+0x3a>

		}else{

			printf("UART Thread RUN from %s\r\n\n",rcv_msg.body);
 800079a:	f107 030c 	add.w	r3, r7, #12
 800079e:	4619      	mov	r1, r3
 80007a0:	4805      	ldr	r0, [pc, #20]	; (80007b8 <UART_Thread+0x4c>)
 80007a2:	f008 ffeb 	bl	800977c <iprintf>
		}

		vTaskDelay(TickDelay);
 80007a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80007a8:	f007 fc68 	bl	800807c <vTaskDelay>
		if (xQueueReceive(msg_queue, (void *)&rcv_msg, portMAX_DELAY) != pdTRUE) {
 80007ac:	e7e5      	b.n	800077a <UART_Thread+0xe>
 80007ae:	bf00      	nop
 80007b0:	20000730 	.word	0x20000730
 80007b4:	0800a8c0 	.word	0x0800a8c0
 80007b8:	0800a8e0 	.word	0x0800a8e0

080007bc <LED_Thread>:
  * @brief  LED thread
  * @param  semaphore
  * @retval None
  ************************************************************/
void LED_Thread(void const *argument)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08e      	sub	sp, #56	; 0x38
 80007c0:	af02      	add	r7, sp, #8
 80007c2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  //osSemaphoreId semaphore = (osSemaphoreId) argument;

  const TickType_t xTicksToWait = 100 / portTICK_PERIOD_MS;
 80007c8:	2364      	movs	r3, #100	; 0x64
 80007ca:	62bb      	str	r3, [r7, #40]	; 0x28
  EventBits_t uxBits;

  for(;;)
  {
    count = 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	62fb      	str	r3, [r7, #44]	; 0x2c

    //printf("blink LED1 for 2S \r\n");
    while (count <= 20)
 80007d0:	e009      	b.n	80007e6 <LED_Thread+0x2a>
    {
    	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80007d2:	2101      	movs	r1, #1
 80007d4:	4857      	ldr	r0, [pc, #348]	; (8000934 <LED_Thread+0x178>)
 80007d6:	f001 ff06 	bl	80025e6 <HAL_GPIO_TogglePin>
    	osDelay(200);
 80007da:	20c8      	movs	r0, #200	; 0xc8
 80007dc:	f006 fa27 	bl	8006c2e <osDelay>
    	count++;
 80007e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007e2:	3301      	adds	r3, #1
 80007e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (count <= 20)
 80007e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007e8:	2b14      	cmp	r3, #20
 80007ea:	d9f2      	bls.n	80007d2 <LED_Thread+0x16>
    }

    /* Turn off LED */
    //printf("turn off LEDS for 2S \r\n");
    HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80007ec:	2200      	movs	r2, #0
 80007ee:	2101      	movs	r1, #1
 80007f0:	4850      	ldr	r0, [pc, #320]	; (8000934 <LED_Thread+0x178>)
 80007f2:	f001 fedf 	bl	80025b4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2180      	movs	r1, #128	; 0x80
 80007fa:	484e      	ldr	r0, [pc, #312]	; (8000934 <LED_Thread+0x178>)
 80007fc:	f001 feda 	bl	80025b4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000800:	2200      	movs	r2, #0
 8000802:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000806:	484b      	ldr	r0, [pc, #300]	; (8000934 <LED_Thread+0x178>)
 8000808:	f001 fed4 	bl	80025b4 <HAL_GPIO_WritePin>


    /* Release the semaphore */
    //osSemaphoreRelease(semaphore);

    vTaskDelay(2000);
 800080c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000810:	f007 fc34 	bl	800807c <vTaskDelay>


    /* Wait a maximum of 100ms for either bit 0,4 or bit 5 in event group.  Clear the bits before exiting. */
	uxBits = xEventGroupWaitBits(
 8000814:	4b48      	ldr	r3, [pc, #288]	; (8000938 <LED_Thread+0x17c>)
 8000816:	6818      	ldr	r0, [r3, #0]
 8000818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800081a:	9300      	str	r3, [sp, #0]
 800081c:	2300      	movs	r3, #0
 800081e:	2200      	movs	r2, #0
 8000820:	2111      	movs	r1, #17
 8000822:	f006 fa33 	bl	8006c8c <xEventGroupWaitBits>
 8000826:	6278      	str	r0, [r7, #36]	; 0x24
			BIT_0 | BIT_4, 		/* The bits within the event group to wait for. */
			pdFALSE,        	/* BIT_0 & BIT_4 not cleared before returning. */
			pdFALSE,       		/* Don't wait for both bits, either bit will do. */
			xTicksToWait );		/* Wait a maximum of 100ms for either bit to be set. */

	if( uxBits  == ( BIT_0 | BIT_4 ) )
 8000828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800082a:	2b11      	cmp	r3, #17
 800082c:	d13c      	bne.n	80008a8 <LED_Thread+0xec>
	{
		/*both bits were set. */
		//printf("Both set (LED2 ON)\r\n\n\n");
		count = 0;
 800082e:	2300      	movs	r3, #0
 8000830:	62fb      	str	r3, [r7, #44]	; 0x2c
		while (count <= 10)
 8000832:	e009      	b.n	8000848 <LED_Thread+0x8c>
		{
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000834:	2180      	movs	r1, #128	; 0x80
 8000836:	483f      	ldr	r0, [pc, #252]	; (8000934 <LED_Thread+0x178>)
 8000838:	f001 fed5 	bl	80025e6 <HAL_GPIO_TogglePin>
			vTaskDelay(200);
 800083c:	20c8      	movs	r0, #200	; 0xc8
 800083e:	f007 fc1d 	bl	800807c <vTaskDelay>
			count++;
 8000842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000844:	3301      	adds	r3, #1
 8000846:	62fb      	str	r3, [r7, #44]	; 0x2c
		while (count <= 10)
 8000848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800084a:	2b0a      	cmp	r3, #10
 800084c:	d9f2      	bls.n	8000834 <LED_Thread+0x78>
		}

		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	2180      	movs	r1, #128	; 0x80
 8000852:	4838      	ldr	r0, [pc, #224]	; (8000934 <LED_Thread+0x178>)
 8000854:	f001 feae 	bl	80025b4 <HAL_GPIO_WritePin>
		uxBits = xEventGroupClearBits( xEventGroup,  BIT_0 | BIT_4 );
 8000858:	4b37      	ldr	r3, [pc, #220]	; (8000938 <LED_Thread+0x17c>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2111      	movs	r1, #17
 800085e:	4618      	mov	r0, r3
 8000860:	f006 fae2 	bl	8006e28 <xEventGroupClearBits>
 8000864:	6278      	str	r0, [r7, #36]	; 0x24

		// Construct message and send
		PrintMessage msg;
		strcpy(msg.body, "LED Thread");
 8000866:	f107 0308 	add.w	r3, r7, #8
 800086a:	4a34      	ldr	r2, [pc, #208]	; (800093c <LED_Thread+0x180>)
 800086c:	ca07      	ldmia	r2, {r0, r1, r2}
 800086e:	c303      	stmia	r3!, {r0, r1}
 8000870:	801a      	strh	r2, [r3, #0]
 8000872:	3302      	adds	r3, #2
 8000874:	0c12      	lsrs	r2, r2, #16
 8000876:	701a      	strb	r2, [r3, #0]
		msg.count = 1;
 8000878:	2301      	movs	r3, #1
 800087a:	61fb      	str	r3, [r7, #28]

		if (xQueueSend(msg_queue, &msg, portMAX_DELAY) == pdPASS){
 800087c:	4b30      	ldr	r3, [pc, #192]	; (8000940 <LED_Thread+0x184>)
 800087e:	6818      	ldr	r0, [r3, #0]
 8000880:	f107 0108 	add.w	r1, r7, #8
 8000884:	2300      	movs	r3, #0
 8000886:	f04f 32ff 	mov.w	r2, #4294967295
 800088a:	f006 fd29 	bl	80072e0 <xQueueGenericSend>
 800088e:	4603      	mov	r3, r0
 8000890:	2b01      	cmp	r3, #1
 8000892:	d102      	bne.n	800089a <LED_Thread+0xde>
			printf("\r\n\nsent msg queue\r\n");
 8000894:	482b      	ldr	r0, [pc, #172]	; (8000944 <LED_Thread+0x188>)
 8000896:	f008 fff7 	bl	8009888 <puts>
		}

		uint32_t TickDelay = pdMS_TO_TICKS(2000);
 800089a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800089e:	623b      	str	r3, [r7, #32]
		vTaskDelay(TickDelay);
 80008a0:	6a38      	ldr	r0, [r7, #32]
 80008a2:	f007 fbeb 	bl	800807c <vTaskDelay>
 80008a6:	e791      	b.n	80007cc <LED_Thread+0x10>

	}
	else if( ( uxBits & BIT_0 ) != 0 )
 80008a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d007      	beq.n	80008c2 <LED_Thread+0x106>
	{
		/* BIT_0 was set. */
		uxBits = xEventGroupSetBits(xEventGroup,BIT_4);
 80008b2:	4b21      	ldr	r3, [pc, #132]	; (8000938 <LED_Thread+0x17c>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	2110      	movs	r1, #16
 80008b8:	4618      	mov	r0, r3
 80008ba:	f006 faed 	bl	8006e98 <xEventGroupSetBits>
 80008be:	6278      	str	r0, [r7, #36]	; 0x24
 80008c0:	e784      	b.n	80007cc <LED_Thread+0x10>
		//printf("BIT0 set \r\n\n\n");
	}
	else if( ( uxBits & BIT_4 ) != 0 )
 80008c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c4:	f003 0310 	and.w	r3, r3, #16
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d007      	beq.n	80008dc <LED_Thread+0x120>
	{
		/* BIT_4 was set. */
		uxBits = xEventGroupSetBits(xEventGroup,BIT_0);
 80008cc:	4b1a      	ldr	r3, [pc, #104]	; (8000938 <LED_Thread+0x17c>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2101      	movs	r1, #1
 80008d2:	4618      	mov	r0, r3
 80008d4:	f006 fae0 	bl	8006e98 <xEventGroupSetBits>
 80008d8:	6278      	str	r0, [r7, #36]	; 0x24
 80008da:	e777      	b.n	80007cc <LED_Thread+0x10>
		//printf("BIT4 set \r\n\n\n");
	}
	else if( ( uxBits & BIT_5 ) != 0 )
 80008dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008de:	f003 0320 	and.w	r3, r3, #32
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d01e      	beq.n	8000924 <LED_Thread+0x168>
	{
		/* BIT_5 was set. */
		//printf("BIT5 set, (LED3 ON) \r\n\n\n");
		uxBits = xEventGroupClearBits( xEventGroup,  BIT_5);
 80008e6:	4b14      	ldr	r3, [pc, #80]	; (8000938 <LED_Thread+0x17c>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	2120      	movs	r1, #32
 80008ec:	4618      	mov	r0, r3
 80008ee:	f006 fa9b 	bl	8006e28 <xEventGroupClearBits>
 80008f2:	6278      	str	r0, [r7, #36]	; 0x24

		count = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62fb      	str	r3, [r7, #44]	; 0x2c
		while (count <= 10)
 80008f8:	e00a      	b.n	8000910 <LED_Thread+0x154>
		{
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80008fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008fe:	480d      	ldr	r0, [pc, #52]	; (8000934 <LED_Thread+0x178>)
 8000900:	f001 fe71 	bl	80025e6 <HAL_GPIO_TogglePin>
			vTaskDelay(200);
 8000904:	20c8      	movs	r0, #200	; 0xc8
 8000906:	f007 fbb9 	bl	800807c <vTaskDelay>
			count++;
 800090a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800090c:	3301      	adds	r3, #1
 800090e:	62fb      	str	r3, [r7, #44]	; 0x2c
		while (count <= 10)
 8000910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000912:	2b0a      	cmp	r3, #10
 8000914:	d9f1      	bls.n	80008fa <LED_Thread+0x13e>
		}

		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800091c:	4805      	ldr	r0, [pc, #20]	; (8000934 <LED_Thread+0x178>)
 800091e:	f001 fe49 	bl	80025b4 <HAL_GPIO_WritePin>
 8000922:	e753      	b.n	80007cc <LED_Thread+0x10>
	}
	else
	{
		/* Timeout */
		//printf("timeout xEventGroup\r\n\n\n");
		uxBits = xEventGroupSetBits(
 8000924:	4b04      	ldr	r3, [pc, #16]	; (8000938 <LED_Thread+0x17c>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2101      	movs	r1, #1
 800092a:	4618      	mov	r0, r3
 800092c:	f006 fab4 	bl	8006e98 <xEventGroupSetBits>
 8000930:	6278      	str	r0, [r7, #36]	; 0x24
    count = 0;
 8000932:	e74b      	b.n	80007cc <LED_Thread+0x10>
 8000934:	40020400 	.word	0x40020400
 8000938:	20000738 	.word	0x20000738
 800093c:	0800a8fc 	.word	0x0800a8fc
 8000940:	20000730 	.word	0x20000730
 8000944:	0800a908 	.word	0x0800a908

08000948 <Button_Thread>:
  * @brief  Button thread
  * @param  semaphore
  * @retval None
  ************************************************************/
void Button_Thread(void const *argument)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	if (osSemaphore != NULL)
 8000950:	4b0d      	ldr	r3, [pc, #52]	; (8000988 <Button_Thread+0x40>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d0fb      	beq.n	8000950 <Button_Thread+0x8>
	{
		/* Try to obtain the semaphore. */
		if( xSemaphoreTake( osSemaphore,portMAX_DELAY ) == pdTRUE ){
 8000958:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <Button_Thread+0x40>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f04f 31ff 	mov.w	r1, #4294967295
 8000960:	4618      	mov	r0, r3
 8000962:	f006 ffc3 	bl	80078ec <xQueueSemaphoreTake>
 8000966:	4603      	mov	r3, r0
 8000968:	2b01      	cmp	r3, #1
 800096a:	d108      	bne.n	800097e <Button_Thread+0x36>
			printf("run button interrupt\r\n");
 800096c:	4807      	ldr	r0, [pc, #28]	; (800098c <Button_Thread+0x44>)
 800096e:	f008 ff8b 	bl	8009888 <puts>
			xEventGroupSetBits(xEventGroup,BIT_5);
 8000972:	4b07      	ldr	r3, [pc, #28]	; (8000990 <Button_Thread+0x48>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	2120      	movs	r1, #32
 8000978:	4618      	mov	r0, r3
 800097a:	f006 fa8d 	bl	8006e98 <xEventGroupSetBits>

		}
		vTaskDelay(100);
 800097e:	2064      	movs	r0, #100	; 0x64
 8000980:	f007 fb7c 	bl	800807c <vTaskDelay>
	if (osSemaphore != NULL)
 8000984:	e7e4      	b.n	8000950 <Button_Thread+0x8>
 8000986:	bf00      	nop
 8000988:	20000734 	.word	0x20000734
 800098c:	0800a91c 	.word	0x0800a91c
 8000990:	20000738 	.word	0x20000738

08000994 <Default_Thread>:
  * @param  argument: Not used
  * @retval None
  ***********************************************************/

void Default_Thread(void * argument)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 800099c:	2064      	movs	r0, #100	; 0x64
 800099e:	f006 f946 	bl	8006c2e <osDelay>
 80009a2:	e7fb      	b.n	800099c <Default_Thread+0x8>

080009a4 <SystemClock_Config>:
/************************************************************
  * @brief System Clock Configuration
  * @retval None
  ************************************************************/
void SystemClock_Config(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b094      	sub	sp, #80	; 0x50
 80009a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009aa:	f107 0320 	add.w	r3, r7, #32
 80009ae:	2230      	movs	r2, #48	; 0x30
 80009b0:	2100      	movs	r1, #0
 80009b2:	4618      	mov	r0, r3
 80009b4:	f008 feda 	bl	800976c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b8:	f107 030c 	add.w	r3, r7, #12
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage*/
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c8:	2300      	movs	r3, #0
 80009ca:	60bb      	str	r3, [r7, #8]
 80009cc:	4b2b      	ldr	r3, [pc, #172]	; (8000a7c <SystemClock_Config+0xd8>)
 80009ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d0:	4a2a      	ldr	r2, [pc, #168]	; (8000a7c <SystemClock_Config+0xd8>)
 80009d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d6:	6413      	str	r3, [r2, #64]	; 0x40
 80009d8:	4b28      	ldr	r3, [pc, #160]	; (8000a7c <SystemClock_Config+0xd8>)
 80009da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e0:	60bb      	str	r3, [r7, #8]
 80009e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009e4:	2300      	movs	r3, #0
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	4b25      	ldr	r3, [pc, #148]	; (8000a80 <SystemClock_Config+0xdc>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a24      	ldr	r2, [pc, #144]	; (8000a80 <SystemClock_Config+0xdc>)
 80009ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009f2:	6013      	str	r3, [r2, #0]
 80009f4:	4b22      	ldr	r3, [pc, #136]	; (8000a80 <SystemClock_Config+0xdc>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators */
  RCC_OscInitStruct.OscillatorType 	= RCC_OSCILLATORTYPE_HSE;
 8000a00:	2301      	movs	r3, #1
 8000a02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState 		= RCC_HSE_BYPASS;
 8000a04:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState	= RCC_PLL_ON;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource 	= RCC_PLLSOURCE_HSE;
 8000a0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM 		= 4;
 8000a14:	2304      	movs	r3, #4
 8000a16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN 		= 180;
 8000a18:	23b4      	movs	r3, #180	; 0xb4
 8000a1a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP 		= RCC_PLLP_DIV2;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ 		= 7;
 8000a20:	2307      	movs	r3, #7
 8000a22:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a24:	f107 0320 	add.w	r3, r7, #32
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f003 fcef 	bl	800440c <HAL_RCC_OscConfig>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a34:	f000 fa06 	bl	8000e44 <Error_Handler>
  }

  /** Activate the Over-Drive mode */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a38:	f003 fc98 	bl	800436c <HAL_PWREx_EnableOverDrive>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000a42:	f000 f9ff 	bl	8000e44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocksm */
  RCC_ClkInitStruct.ClockType 		= RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a46:	230f      	movs	r3, #15
 8000a48:	60fb      	str	r3, [r7, #12]
                              	  	  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource 	= RCC_SYSCLKSOURCE_PLLCLK;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider 	= RCC_SYSCLK_DIV1;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider 	= RCC_HCLK_DIV4;
 8000a52:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a56:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider 	= RCC_HCLK_DIV2;
 8000a58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a5c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a5e:	f107 030c 	add.w	r3, r7, #12
 8000a62:	2105      	movs	r1, #5
 8000a64:	4618      	mov	r0, r3
 8000a66:	f003 ff49 	bl	80048fc <HAL_RCC_ClockConfig>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000a70:	f000 f9e8 	bl	8000e44 <Error_Handler>
  }
}
 8000a74:	bf00      	nop
 8000a76:	3750      	adds	r7, #80	; 0x50
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	40007000 	.word	0x40007000

08000a84 <MX_CRC_Init>:
  * @brief 	CRC Initialization Function
  * @param 	None
  * @retval None
  ************************************************************/
static void MX_CRC_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  hcrc.Instance = CRC;
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <MX_CRC_Init+0x20>)
 8000a8a:	4a07      	ldr	r2, [pc, #28]	; (8000aa8 <MX_CRC_Init+0x24>)
 8000a8c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000a8e:	4805      	ldr	r0, [pc, #20]	; (8000aa4 <MX_CRC_Init+0x20>)
 8000a90:	f000 ffb8 	bl	8001a04 <HAL_CRC_Init>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000a9a:	f000 f9d3 	bl	8000e44 <Error_Handler>
  }
}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	200002e4 	.word	0x200002e4
 8000aa8:	40023000 	.word	0x40023000

08000aac <MX_I2C1_Init>:
  * @brief 	I2C1 Initialization Function
  * @param 	None
  * @retval None
  ************************************************************/
static void MX_I2C1_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  hi2c1.Instance 				= I2C1;
 8000ab0:	4b1b      	ldr	r3, [pc, #108]	; (8000b20 <MX_I2C1_Init+0x74>)
 8000ab2:	4a1c      	ldr	r2, [pc, #112]	; (8000b24 <MX_I2C1_Init+0x78>)
 8000ab4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed 		= 100000;
 8000ab6:	4b1a      	ldr	r3, [pc, #104]	; (8000b20 <MX_I2C1_Init+0x74>)
 8000ab8:	4a1b      	ldr	r2, [pc, #108]	; (8000b28 <MX_I2C1_Init+0x7c>)
 8000aba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle 			= I2C_DUTYCYCLE_2;
 8000abc:	4b18      	ldr	r3, [pc, #96]	; (8000b20 <MX_I2C1_Init+0x74>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 		= 0;
 8000ac2:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <MX_I2C1_Init+0x74>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode 	= I2C_ADDRESSINGMODE_7BIT;
 8000ac8:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <MX_I2C1_Init+0x74>)
 8000aca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ace:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode 	= I2C_DUALADDRESS_DISABLE;
 8000ad0:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <MX_I2C1_Init+0x74>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 		= 0;
 8000ad6:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <MX_I2C1_Init+0x74>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode 	= I2C_GENERALCALL_DISABLE;
 8000adc:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <MX_I2C1_Init+0x74>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode 		= I2C_NOSTRETCH_DISABLE;
 8000ae2:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <MX_I2C1_Init+0x74>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ae8:	480d      	ldr	r0, [pc, #52]	; (8000b20 <MX_I2C1_Init+0x74>)
 8000aea:	f001 fdaf 	bl	800264c <HAL_I2C_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000af4:	f000 f9a6 	bl	8000e44 <Error_Handler>
  }

  /** Configure Analogue filter*/
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000af8:	2100      	movs	r1, #0
 8000afa:	4809      	ldr	r0, [pc, #36]	; (8000b20 <MX_I2C1_Init+0x74>)
 8000afc:	f003 fbbb 	bl	8004276 <HAL_I2CEx_ConfigAnalogFilter>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000b06:	f000 f99d 	bl	8000e44 <Error_Handler>
  }

  /** Configure Digital filter*/
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	4804      	ldr	r0, [pc, #16]	; (8000b20 <MX_I2C1_Init+0x74>)
 8000b0e:	f003 fbee 	bl	80042ee <HAL_I2CEx_ConfigDigitalFilter>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000b18:	f000 f994 	bl	8000e44 <Error_Handler>
  }
}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	200002ec 	.word	0x200002ec
 8000b24:	40005400 	.word	0x40005400
 8000b28:	000186a0 	.word	0x000186a0

08000b2c <MX_SPI1_Init>:
  * @brief 	SPI1 Initialization Function
  * @param 	None
  * @retval None
  ************************************************************/
static void MX_SPI1_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* SPI1 parameter configuration*/
  hspi1.Instance 					= SPI1;
 8000b30:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <MX_SPI1_Init+0x5c>)
 8000b32:	4a16      	ldr	r2, [pc, #88]	; (8000b8c <MX_SPI1_Init+0x60>)
 8000b34:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode 					= SPI_MODE_SLAVE;
 8000b36:	4b14      	ldr	r3, [pc, #80]	; (8000b88 <MX_SPI1_Init+0x5c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction 				= SPI_DIRECTION_2LINES;
 8000b3c:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <MX_SPI1_Init+0x5c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize 				= SPI_DATASIZE_8BIT;
 8000b42:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <MX_SPI1_Init+0x5c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity 			= SPI_POLARITY_LOW;
 8000b48:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <MX_SPI1_Init+0x5c>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase 				= SPI_PHASE_1EDGE;
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <MX_SPI1_Init+0x5c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS 					= SPI_NSS_SOFT;
 8000b54:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <MX_SPI1_Init+0x5c>)
 8000b56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b5a:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit 				= SPI_FIRSTBIT_MSB;
 8000b5c:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <MX_SPI1_Init+0x5c>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode 				= SPI_TIMODE_DISABLE;
 8000b62:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <MX_SPI1_Init+0x5c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation 		= SPI_CRCCALCULATION_DISABLE;
 8000b68:	4b07      	ldr	r3, [pc, #28]	; (8000b88 <MX_SPI1_Init+0x5c>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial 			= 10;
 8000b6e:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <MX_SPI1_Init+0x5c>)
 8000b70:	220a      	movs	r2, #10
 8000b72:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b74:	4804      	ldr	r0, [pc, #16]	; (8000b88 <MX_SPI1_Init+0x5c>)
 8000b76:	f004 f913 	bl	8004da0 <HAL_SPI_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 8000b80:	f000 f960 	bl	8000e44 <Error_Handler>
  }
}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000400 	.word	0x20000400
 8000b8c:	40013000 	.word	0x40013000

08000b90 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  ************************************************************/
static void MX_USART3_UART_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  huart3.Instance 				= USART3;
 8000b94:	4b17      	ldr	r3, [pc, #92]	; (8000bf4 <MX_USART3_UART_Init+0x64>)
 8000b96:	4a18      	ldr	r2, [pc, #96]	; (8000bf8 <MX_USART3_UART_Init+0x68>)
 8000b98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate 			= 115200;
 8000b9a:	4b16      	ldr	r3, [pc, #88]	; (8000bf4 <MX_USART3_UART_Init+0x64>)
 8000b9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ba0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength 		= UART_WORDLENGTH_8B;
 8000ba2:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <MX_USART3_UART_Init+0x64>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits 			= UART_STOPBITS_1;
 8000ba8:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <MX_USART3_UART_Init+0x64>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity 			= UART_PARITY_NONE;
 8000bae:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <MX_USART3_UART_Init+0x64>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode 				= UART_MODE_TX_RX;
 8000bb4:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <MX_USART3_UART_Init+0x64>)
 8000bb6:	220c      	movs	r2, #12
 8000bb8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl 		= UART_HWCONTROL_NONE;
 8000bba:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <MX_USART3_UART_Init+0x64>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling 		= UART_OVERSAMPLING_16;
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <MX_USART3_UART_Init+0x64>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bc6:	480b      	ldr	r0, [pc, #44]	; (8000bf4 <MX_USART3_UART_Init+0x64>)
 8000bc8:	f004 fd40 	bl	800564c <HAL_UART_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000bd2:	f000 f937 	bl	8000e44 <Error_Handler>
  }

  __HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);
 8000bd6:	4b07      	ldr	r3, [pc, #28]	; (8000bf4 <MX_USART3_UART_Init+0x64>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	68da      	ldr	r2, [r3, #12]
 8000bdc:	4b05      	ldr	r3, [pc, #20]	; (8000bf4 <MX_USART3_UART_Init+0x64>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f042 0210 	orr.w	r2, r2, #16
 8000be4:	60da      	str	r2, [r3, #12]
  HAL_UART_Receive_DMA(&huart3, (uint8_t*)uart3Rcv_buff, UART3_RX_BUFFER_SIZE);
 8000be6:	22ff      	movs	r2, #255	; 0xff
 8000be8:	4904      	ldr	r1, [pc, #16]	; (8000bfc <MX_USART3_UART_Init+0x6c>)
 8000bea:	4802      	ldr	r0, [pc, #8]	; (8000bf4 <MX_USART3_UART_Init+0x64>)
 8000bec:	f004 fe0d 	bl	800580a <HAL_UART_Receive_DMA>
}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	200005d8 	.word	0x200005d8
 8000bf8:	40004800 	.word	0x40004800
 8000bfc:	2000061c 	.word	0x2000061c

08000c00 <MX_DMA_Init>:

/************************************************************
  * Enable DMA controller clock
  ************************************************************/
static void MX_DMA_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	4b1f      	ldr	r3, [pc, #124]	; (8000c88 <MX_DMA_Init+0x88>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a1e      	ldr	r2, [pc, #120]	; (8000c88 <MX_DMA_Init+0x88>)
 8000c10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b1c      	ldr	r3, [pc, #112]	; (8000c88 <MX_DMA_Init+0x88>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	603b      	str	r3, [r7, #0]
 8000c26:	4b18      	ldr	r3, [pc, #96]	; (8000c88 <MX_DMA_Init+0x88>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a17      	ldr	r2, [pc, #92]	; (8000c88 <MX_DMA_Init+0x88>)
 8000c2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <MX_DMA_Init+0x88>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c3a:	603b      	str	r3, [r7, #0]
 8000c3c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2105      	movs	r1, #5
 8000c42:	200b      	movs	r0, #11
 8000c44:	f000 feb4 	bl	80019b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c48:	200b      	movs	r0, #11
 8000c4a:	f000 fecd 	bl	80019e8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2105      	movs	r1, #5
 8000c52:	2011      	movs	r0, #17
 8000c54:	f000 feac 	bl	80019b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000c58:	2011      	movs	r0, #17
 8000c5a:	f000 fec5 	bl	80019e8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2105      	movs	r1, #5
 8000c62:	2038      	movs	r0, #56	; 0x38
 8000c64:	f000 fea4 	bl	80019b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c68:	2038      	movs	r0, #56	; 0x38
 8000c6a:	f000 febd 	bl	80019e8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2105      	movs	r1, #5
 8000c72:	203b      	movs	r0, #59	; 0x3b
 8000c74:	f000 fe9c 	bl	80019b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000c78:	203b      	movs	r0, #59	; 0x3b
 8000c7a:	f000 feb5 	bl	80019e8 <HAL_NVIC_EnableIRQ>

}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40023800 	.word	0x40023800

08000c8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  ************************************************************/
static void MX_GPIO_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08c      	sub	sp, #48	; 0x30
 8000c90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c92:	f107 031c 	add.w	r3, r7, #28
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]
 8000ca0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61bb      	str	r3, [r7, #24]
 8000ca6:	4b48      	ldr	r3, [pc, #288]	; (8000dc8 <MX_GPIO_Init+0x13c>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a47      	ldr	r2, [pc, #284]	; (8000dc8 <MX_GPIO_Init+0x13c>)
 8000cac:	f043 0304 	orr.w	r3, r3, #4
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b45      	ldr	r3, [pc, #276]	; (8000dc8 <MX_GPIO_Init+0x13c>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0304 	and.w	r3, r3, #4
 8000cba:	61bb      	str	r3, [r7, #24]
 8000cbc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	617b      	str	r3, [r7, #20]
 8000cc2:	4b41      	ldr	r3, [pc, #260]	; (8000dc8 <MX_GPIO_Init+0x13c>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4a40      	ldr	r2, [pc, #256]	; (8000dc8 <MX_GPIO_Init+0x13c>)
 8000cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cce:	4b3e      	ldr	r3, [pc, #248]	; (8000dc8 <MX_GPIO_Init+0x13c>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cd6:	617b      	str	r3, [r7, #20]
 8000cd8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	613b      	str	r3, [r7, #16]
 8000cde:	4b3a      	ldr	r3, [pc, #232]	; (8000dc8 <MX_GPIO_Init+0x13c>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a39      	ldr	r2, [pc, #228]	; (8000dc8 <MX_GPIO_Init+0x13c>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4b37      	ldr	r3, [pc, #220]	; (8000dc8 <MX_GPIO_Init+0x13c>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	613b      	str	r3, [r7, #16]
 8000cf4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	4b33      	ldr	r3, [pc, #204]	; (8000dc8 <MX_GPIO_Init+0x13c>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	4a32      	ldr	r2, [pc, #200]	; (8000dc8 <MX_GPIO_Init+0x13c>)
 8000d00:	f043 0302 	orr.w	r3, r3, #2
 8000d04:	6313      	str	r3, [r2, #48]	; 0x30
 8000d06:	4b30      	ldr	r3, [pc, #192]	; (8000dc8 <MX_GPIO_Init+0x13c>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	f003 0302 	and.w	r3, r3, #2
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	60bb      	str	r3, [r7, #8]
 8000d16:	4b2c      	ldr	r3, [pc, #176]	; (8000dc8 <MX_GPIO_Init+0x13c>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	4a2b      	ldr	r2, [pc, #172]	; (8000dc8 <MX_GPIO_Init+0x13c>)
 8000d1c:	f043 0308 	orr.w	r3, r3, #8
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
 8000d22:	4b29      	ldr	r3, [pc, #164]	; (8000dc8 <MX_GPIO_Init+0x13c>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	f003 0308 	and.w	r3, r3, #8
 8000d2a:	60bb      	str	r3, [r7, #8]
 8000d2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	607b      	str	r3, [r7, #4]
 8000d32:	4b25      	ldr	r3, [pc, #148]	; (8000dc8 <MX_GPIO_Init+0x13c>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	4a24      	ldr	r2, [pc, #144]	; (8000dc8 <MX_GPIO_Init+0x13c>)
 8000d38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3e:	4b22      	ldr	r3, [pc, #136]	; (8000dc8 <MX_GPIO_Init+0x13c>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000d50:	481e      	ldr	r0, [pc, #120]	; (8000dcc <MX_GPIO_Init+0x140>)
 8000d52:	f001 fc2f 	bl	80025b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin 	= USER_Btn_Pin;
 8000d56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode 	= GPIO_MODE_IT_RISING;
 8000d5c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000d66:	f107 031c 	add.w	r3, r7, #28
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4818      	ldr	r0, [pc, #96]	; (8000dd0 <MX_GPIO_Init+0x144>)
 8000d6e:	f001 fa75 	bl	800225c <HAL_GPIO_Init>

  /* Enable and set EXTI lines 15 to 10 Interrupt */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 15, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	210f      	movs	r1, #15
 8000d76:	2028      	movs	r0, #40	; 0x28
 8000d78:	f000 fe1a 	bl	80019b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d7c:	2028      	movs	r0, #40	; 0x28
 8000d7e:	f000 fe33 	bl	80019e8 <HAL_NVIC_EnableIRQ>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin 	= LD1_Pin|LD3_Pin|LD2_Pin;
 8000d82:	f244 0381 	movw	r3, #16513	; 0x4081
 8000d86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d90:	2300      	movs	r3, #0
 8000d92:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d94:	f107 031c 	add.w	r3, r7, #28
 8000d98:	4619      	mov	r1, r3
 8000d9a:	480c      	ldr	r0, [pc, #48]	; (8000dcc <MX_GPIO_Init+0x140>)
 8000d9c:	f001 fa5e 	bl	800225c <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000da0:	2200      	movs	r2, #0
 8000da2:	2101      	movs	r1, #1
 8000da4:	4809      	ldr	r0, [pc, #36]	; (8000dcc <MX_GPIO_Init+0x140>)
 8000da6:	f001 fc05 	bl	80025b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2180      	movs	r1, #128	; 0x80
 8000dae:	4807      	ldr	r0, [pc, #28]	; (8000dcc <MX_GPIO_Init+0x140>)
 8000db0:	f001 fc00 	bl	80025b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000db4:	2200      	movs	r2, #0
 8000db6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dba:	4804      	ldr	r0, [pc, #16]	; (8000dcc <MX_GPIO_Init+0x140>)
 8000dbc:	f001 fbfa 	bl	80025b4 <HAL_GPIO_WritePin>

}
 8000dc0:	bf00      	nop
 8000dc2:	3730      	adds	r7, #48	; 0x30
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	40020400 	.word	0x40020400
 8000dd0:	40020800 	.word	0x40020800

08000dd4 <HAL_GPIO_EXTI_Callback>:
  * @brief EXTI line detection callbacks
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  ***********************************************************/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == USER_Btn_Pin)
 8000dde:	88fb      	ldrh	r3, [r7, #6]
 8000de0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000de4:	d114      	bne.n	8000e10 <HAL_GPIO_EXTI_Callback+0x3c>
  {
	  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]

	  /* Unblock the task by releasing the semaphore. */
	  xSemaphoreGiveFromISR( osSemaphore, &xHigherPriorityTaskWoken );
 8000dea:	4b0b      	ldr	r3, [pc, #44]	; (8000e18 <HAL_GPIO_EXTI_Callback+0x44>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f107 020c 	add.w	r2, r7, #12
 8000df2:	4611      	mov	r1, r2
 8000df4:	4618      	mov	r0, r3
 8000df6:	f006 fc0c 	bl	8007612 <xQueueGiveFromISR>

	  /* If xHigherPriorityTaskWoken was set to true, we should yield.  */
	  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d007      	beq.n	8000e10 <HAL_GPIO_EXTI_Callback+0x3c>
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <HAL_GPIO_EXTI_Callback+0x48>)
 8000e02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	f3bf 8f4f 	dsb	sy
 8000e0c:	f3bf 8f6f 	isb	sy

  }
}
 8000e10:	bf00      	nop
 8000e12:	3710      	adds	r7, #16
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20000734 	.word	0x20000734
 8000e1c:	e000ed04 	.word	0xe000ed04

08000e20 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  ************************************************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) {
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a04      	ldr	r2, [pc, #16]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d101      	bne.n	8000e36 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e32:	f000 fce5 	bl	8001800 <HAL_IncTick>
  }
}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40010000 	.word	0x40010000

08000e44 <Error_Handler>:
/************************************************************
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  ************************************************************/
void Error_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e48:	b672      	cpsid	i
}
 8000e4a:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e4c:	e7fe      	b.n	8000e4c <Error_Handler+0x8>
	...

08000e50 <HAL_MspInit>:

/********************************************************
  * Initializes the Global MSP.
  *******************************************************/
void HAL_MspInit(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	607b      	str	r3, [r7, #4]
 8000e5a:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <HAL_MspInit+0x54>)
 8000e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5e:	4a11      	ldr	r2, [pc, #68]	; (8000ea4 <HAL_MspInit+0x54>)
 8000e60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e64:	6453      	str	r3, [r2, #68]	; 0x44
 8000e66:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <HAL_MspInit+0x54>)
 8000e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	603b      	str	r3, [r7, #0]
 8000e76:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <HAL_MspInit+0x54>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ea4 <HAL_MspInit+0x54>)
 8000e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e80:	6413      	str	r3, [r2, #64]	; 0x40
 8000e82:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <HAL_MspInit+0x54>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e8a:	603b      	str	r3, [r7, #0]
 8000e8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	210f      	movs	r1, #15
 8000e92:	f06f 0001 	mvn.w	r0, #1
 8000e96:	f000 fd8b 	bl	80019b0 <HAL_NVIC_SetPriority>
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40023800 	.word	0x40023800

08000ea8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*******************************************************/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a0b      	ldr	r2, [pc, #44]	; (8000ee4 <HAL_CRC_MspInit+0x3c>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d10d      	bne.n	8000ed6 <HAL_CRC_MspInit+0x2e>
  {
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <HAL_CRC_MspInit+0x40>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	4a09      	ldr	r2, [pc, #36]	; (8000ee8 <HAL_CRC_MspInit+0x40>)
 8000ec4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eca:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <HAL_CRC_MspInit+0x40>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
  }

}
 8000ed6:	bf00      	nop
 8000ed8:	3714      	adds	r7, #20
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	40023000 	.word	0x40023000
 8000ee8:	40023800 	.word	0x40023800

08000eec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*******************************************************/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08a      	sub	sp, #40	; 0x28
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a50      	ldr	r2, [pc, #320]	; (800104c <HAL_I2C_MspInit+0x160>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	f040 8099 	bne.w	8001042 <HAL_I2C_MspInit+0x156>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f10:	2300      	movs	r3, #0
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	4b4e      	ldr	r3, [pc, #312]	; (8001050 <HAL_I2C_MspInit+0x164>)
 8000f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f18:	4a4d      	ldr	r2, [pc, #308]	; (8001050 <HAL_I2C_MspInit+0x164>)
 8000f1a:	f043 0302 	orr.w	r3, r3, #2
 8000f1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f20:	4b4b      	ldr	r3, [pc, #300]	; (8001050 <HAL_I2C_MspInit+0x164>)
 8000f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f24:	f003 0302 	and.w	r3, r3, #2
 8000f28:	613b      	str	r3, [r7, #16]
 8000f2a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin 		= GPIO_PIN_6|GPIO_PIN_9;
 8000f2c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000f30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode 		= GPIO_MODE_AF_OD;
 8000f32:	2312      	movs	r3, #18
 8000f34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate 	= GPIO_AF4_I2C1;
 8000f3e:	2304      	movs	r3, #4
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f42:	f107 0314 	add.w	r3, r7, #20
 8000f46:	4619      	mov	r1, r3
 8000f48:	4842      	ldr	r0, [pc, #264]	; (8001054 <HAL_I2C_MspInit+0x168>)
 8000f4a:	f001 f987 	bl	800225c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	4b3f      	ldr	r3, [pc, #252]	; (8001050 <HAL_I2C_MspInit+0x164>)
 8000f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f56:	4a3e      	ldr	r2, [pc, #248]	; (8001050 <HAL_I2C_MspInit+0x164>)
 8000f58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5e:	4b3c      	ldr	r3, [pc, #240]	; (8001050 <HAL_I2C_MspInit+0x164>)
 8000f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance 					= DMA1_Stream0;
 8000f6a:	4b3b      	ldr	r3, [pc, #236]	; (8001058 <HAL_I2C_MspInit+0x16c>)
 8000f6c:	4a3b      	ldr	r2, [pc, #236]	; (800105c <HAL_I2C_MspInit+0x170>)
 8000f6e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel 				= DMA_CHANNEL_1;
 8000f70:	4b39      	ldr	r3, [pc, #228]	; (8001058 <HAL_I2C_MspInit+0x16c>)
 8000f72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000f76:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction 			= DMA_PERIPH_TO_MEMORY;
 8000f78:	4b37      	ldr	r3, [pc, #220]	; (8001058 <HAL_I2C_MspInit+0x16c>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc 			= DMA_PINC_DISABLE;
 8000f7e:	4b36      	ldr	r3, [pc, #216]	; (8001058 <HAL_I2C_MspInit+0x16c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc 				= DMA_MINC_ENABLE;
 8000f84:	4b34      	ldr	r3, [pc, #208]	; (8001058 <HAL_I2C_MspInit+0x16c>)
 8000f86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f8a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 8000f8c:	4b32      	ldr	r3, [pc, #200]	; (8001058 <HAL_I2C_MspInit+0x16c>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment 		= DMA_MDATAALIGN_BYTE;
 8000f92:	4b31      	ldr	r3, [pc, #196]	; (8001058 <HAL_I2C_MspInit+0x16c>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode 					= DMA_NORMAL;
 8000f98:	4b2f      	ldr	r3, [pc, #188]	; (8001058 <HAL_I2C_MspInit+0x16c>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority 				= DMA_PRIORITY_LOW;
 8000f9e:	4b2e      	ldr	r3, [pc, #184]	; (8001058 <HAL_I2C_MspInit+0x16c>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode 				= DMA_FIFOMODE_DISABLE;
 8000fa4:	4b2c      	ldr	r3, [pc, #176]	; (8001058 <HAL_I2C_MspInit+0x16c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000faa:	482b      	ldr	r0, [pc, #172]	; (8001058 <HAL_I2C_MspInit+0x16c>)
 8000fac:	f000 fd46 	bl	8001a3c <HAL_DMA_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8000fb6:	f7ff ff45 	bl	8000e44 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a26      	ldr	r2, [pc, #152]	; (8001058 <HAL_I2C_MspInit+0x16c>)
 8000fbe:	639a      	str	r2, [r3, #56]	; 0x38
 8000fc0:	4a25      	ldr	r2, [pc, #148]	; (8001058 <HAL_I2C_MspInit+0x16c>)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance 					= DMA1_Stream6;
 8000fc6:	4b26      	ldr	r3, [pc, #152]	; (8001060 <HAL_I2C_MspInit+0x174>)
 8000fc8:	4a26      	ldr	r2, [pc, #152]	; (8001064 <HAL_I2C_MspInit+0x178>)
 8000fca:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel 				= DMA_CHANNEL_1;
 8000fcc:	4b24      	ldr	r3, [pc, #144]	; (8001060 <HAL_I2C_MspInit+0x174>)
 8000fce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000fd2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction 			= DMA_MEMORY_TO_PERIPH;
 8000fd4:	4b22      	ldr	r3, [pc, #136]	; (8001060 <HAL_I2C_MspInit+0x174>)
 8000fd6:	2240      	movs	r2, #64	; 0x40
 8000fd8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc 			= DMA_PINC_DISABLE;
 8000fda:	4b21      	ldr	r3, [pc, #132]	; (8001060 <HAL_I2C_MspInit+0x174>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc 				= DMA_MINC_ENABLE;
 8000fe0:	4b1f      	ldr	r3, [pc, #124]	; (8001060 <HAL_I2C_MspInit+0x174>)
 8000fe2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fe6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 8000fe8:	4b1d      	ldr	r3, [pc, #116]	; (8001060 <HAL_I2C_MspInit+0x174>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment 		= DMA_MDATAALIGN_BYTE;
 8000fee:	4b1c      	ldr	r3, [pc, #112]	; (8001060 <HAL_I2C_MspInit+0x174>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode 					= DMA_NORMAL;
 8000ff4:	4b1a      	ldr	r3, [pc, #104]	; (8001060 <HAL_I2C_MspInit+0x174>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority 				= DMA_PRIORITY_LOW;
 8000ffa:	4b19      	ldr	r3, [pc, #100]	; (8001060 <HAL_I2C_MspInit+0x174>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode 				= DMA_FIFOMODE_DISABLE;
 8001000:	4b17      	ldr	r3, [pc, #92]	; (8001060 <HAL_I2C_MspInit+0x174>)
 8001002:	2200      	movs	r2, #0
 8001004:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001006:	4816      	ldr	r0, [pc, #88]	; (8001060 <HAL_I2C_MspInit+0x174>)
 8001008:	f000 fd18 	bl	8001a3c <HAL_DMA_Init>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 8001012:	f7ff ff17 	bl	8000e44 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a11      	ldr	r2, [pc, #68]	; (8001060 <HAL_I2C_MspInit+0x174>)
 800101a:	635a      	str	r2, [r3, #52]	; 0x34
 800101c:	4a10      	ldr	r2, [pc, #64]	; (8001060 <HAL_I2C_MspInit+0x174>)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001022:	2200      	movs	r2, #0
 8001024:	2105      	movs	r1, #5
 8001026:	201f      	movs	r0, #31
 8001028:	f000 fcc2 	bl	80019b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800102c:	201f      	movs	r0, #31
 800102e:	f000 fcdb 	bl	80019e8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001032:	2200      	movs	r2, #0
 8001034:	2105      	movs	r1, #5
 8001036:	2020      	movs	r0, #32
 8001038:	f000 fcba 	bl	80019b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800103c:	2020      	movs	r0, #32
 800103e:	f000 fcd3 	bl	80019e8 <HAL_NVIC_EnableIRQ>
  }

}
 8001042:	bf00      	nop
 8001044:	3728      	adds	r7, #40	; 0x28
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40005400 	.word	0x40005400
 8001050:	40023800 	.word	0x40023800
 8001054:	40020400 	.word	0x40020400
 8001058:	20000340 	.word	0x20000340
 800105c:	40026010 	.word	0x40026010
 8001060:	200003a0 	.word	0x200003a0
 8001064:	400260a0 	.word	0x400260a0

08001068 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*******************************************************/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08a      	sub	sp, #40	; 0x28
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a5b      	ldr	r2, [pc, #364]	; (80011f4 <HAL_SPI_MspInit+0x18c>)
 8001086:	4293      	cmp	r3, r2
 8001088:	f040 80b0 	bne.w	80011ec <HAL_SPI_MspInit+0x184>
  {
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800108c:	2300      	movs	r3, #0
 800108e:	613b      	str	r3, [r7, #16]
 8001090:	4b59      	ldr	r3, [pc, #356]	; (80011f8 <HAL_SPI_MspInit+0x190>)
 8001092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001094:	4a58      	ldr	r2, [pc, #352]	; (80011f8 <HAL_SPI_MspInit+0x190>)
 8001096:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800109a:	6453      	str	r3, [r2, #68]	; 0x44
 800109c:	4b56      	ldr	r3, [pc, #344]	; (80011f8 <HAL_SPI_MspInit+0x190>)
 800109e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010a4:	613b      	str	r3, [r7, #16]
 80010a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a8:	2300      	movs	r3, #0
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	4b52      	ldr	r3, [pc, #328]	; (80011f8 <HAL_SPI_MspInit+0x190>)
 80010ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b0:	4a51      	ldr	r2, [pc, #324]	; (80011f8 <HAL_SPI_MspInit+0x190>)
 80010b2:	f043 0301 	orr.w	r3, r3, #1
 80010b6:	6313      	str	r3, [r2, #48]	; 0x30
 80010b8:	4b4f      	ldr	r3, [pc, #316]	; (80011f8 <HAL_SPI_MspInit+0x190>)
 80010ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010bc:	f003 0301 	and.w	r3, r3, #1
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c4:	2300      	movs	r3, #0
 80010c6:	60bb      	str	r3, [r7, #8]
 80010c8:	4b4b      	ldr	r3, [pc, #300]	; (80011f8 <HAL_SPI_MspInit+0x190>)
 80010ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010cc:	4a4a      	ldr	r2, [pc, #296]	; (80011f8 <HAL_SPI_MspInit+0x190>)
 80010ce:	f043 0302 	orr.w	r3, r3, #2
 80010d2:	6313      	str	r3, [r2, #48]	; 0x30
 80010d4:	4b48      	ldr	r3, [pc, #288]	; (80011f8 <HAL_SPI_MspInit+0x190>)
 80010d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d8:	f003 0302 	and.w	r3, r3, #2
 80010dc:	60bb      	str	r3, [r7, #8]
 80010de:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin 		= GPIO_PIN_5|GPIO_PIN_6;
 80010e0:	2360      	movs	r3, #96	; 0x60
 80010e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode 		= GPIO_MODE_AF_PP;
 80010e4:	2302      	movs	r3, #2
 80010e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_VERY_HIGH;
 80010ec:	2303      	movs	r3, #3
 80010ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate 	= GPIO_AF5_SPI1;
 80010f0:	2305      	movs	r3, #5
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	4619      	mov	r1, r3
 80010fa:	4840      	ldr	r0, [pc, #256]	; (80011fc <HAL_SPI_MspInit+0x194>)
 80010fc:	f001 f8ae 	bl	800225c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin 		= GPIO_PIN_5;
 8001100:	2320      	movs	r3, #32
 8001102:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode 		= GPIO_MODE_AF_PP;
 8001104:	2302      	movs	r3, #2
 8001106:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_VERY_HIGH;
 800110c:	2303      	movs	r3, #3
 800110e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate 	= GPIO_AF5_SPI1;
 8001110:	2305      	movs	r3, #5
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	4619      	mov	r1, r3
 800111a:	4839      	ldr	r0, [pc, #228]	; (8001200 <HAL_SPI_MspInit+0x198>)
 800111c:	f001 f89e 	bl	800225c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance 					= DMA2_Stream0;
 8001120:	4b38      	ldr	r3, [pc, #224]	; (8001204 <HAL_SPI_MspInit+0x19c>)
 8001122:	4a39      	ldr	r2, [pc, #228]	; (8001208 <HAL_SPI_MspInit+0x1a0>)
 8001124:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel 				= DMA_CHANNEL_3;
 8001126:	4b37      	ldr	r3, [pc, #220]	; (8001204 <HAL_SPI_MspInit+0x19c>)
 8001128:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800112c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction 			= DMA_PERIPH_TO_MEMORY;
 800112e:	4b35      	ldr	r3, [pc, #212]	; (8001204 <HAL_SPI_MspInit+0x19c>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc 			= DMA_PINC_DISABLE;
 8001134:	4b33      	ldr	r3, [pc, #204]	; (8001204 <HAL_SPI_MspInit+0x19c>)
 8001136:	2200      	movs	r2, #0
 8001138:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc 				= DMA_MINC_ENABLE;
 800113a:	4b32      	ldr	r3, [pc, #200]	; (8001204 <HAL_SPI_MspInit+0x19c>)
 800113c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001140:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 8001142:	4b30      	ldr	r3, [pc, #192]	; (8001204 <HAL_SPI_MspInit+0x19c>)
 8001144:	2200      	movs	r2, #0
 8001146:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment 		= DMA_MDATAALIGN_BYTE;
 8001148:	4b2e      	ldr	r3, [pc, #184]	; (8001204 <HAL_SPI_MspInit+0x19c>)
 800114a:	2200      	movs	r2, #0
 800114c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode 					= DMA_CIRCULAR;
 800114e:	4b2d      	ldr	r3, [pc, #180]	; (8001204 <HAL_SPI_MspInit+0x19c>)
 8001150:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001154:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority 				= DMA_PRIORITY_LOW;
 8001156:	4b2b      	ldr	r3, [pc, #172]	; (8001204 <HAL_SPI_MspInit+0x19c>)
 8001158:	2200      	movs	r2, #0
 800115a:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode 				= DMA_FIFOMODE_DISABLE;
 800115c:	4b29      	ldr	r3, [pc, #164]	; (8001204 <HAL_SPI_MspInit+0x19c>)
 800115e:	2200      	movs	r2, #0
 8001160:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001162:	4828      	ldr	r0, [pc, #160]	; (8001204 <HAL_SPI_MspInit+0x19c>)
 8001164:	f000 fc6a 	bl	8001a3c <HAL_DMA_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <HAL_SPI_MspInit+0x10a>
    {
      Error_Handler();
 800116e:	f7ff fe69 	bl	8000e44 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a23      	ldr	r2, [pc, #140]	; (8001204 <HAL_SPI_MspInit+0x19c>)
 8001176:	64da      	str	r2, [r3, #76]	; 0x4c
 8001178:	4a22      	ldr	r2, [pc, #136]	; (8001204 <HAL_SPI_MspInit+0x19c>)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance 					= DMA2_Stream3;
 800117e:	4b23      	ldr	r3, [pc, #140]	; (800120c <HAL_SPI_MspInit+0x1a4>)
 8001180:	4a23      	ldr	r2, [pc, #140]	; (8001210 <HAL_SPI_MspInit+0x1a8>)
 8001182:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel 				= DMA_CHANNEL_3;
 8001184:	4b21      	ldr	r3, [pc, #132]	; (800120c <HAL_SPI_MspInit+0x1a4>)
 8001186:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800118a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction 			= DMA_MEMORY_TO_PERIPH;
 800118c:	4b1f      	ldr	r3, [pc, #124]	; (800120c <HAL_SPI_MspInit+0x1a4>)
 800118e:	2240      	movs	r2, #64	; 0x40
 8001190:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc 			= DMA_PINC_DISABLE;
 8001192:	4b1e      	ldr	r3, [pc, #120]	; (800120c <HAL_SPI_MspInit+0x1a4>)
 8001194:	2200      	movs	r2, #0
 8001196:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc 				= DMA_MINC_ENABLE;
 8001198:	4b1c      	ldr	r3, [pc, #112]	; (800120c <HAL_SPI_MspInit+0x1a4>)
 800119a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800119e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 80011a0:	4b1a      	ldr	r3, [pc, #104]	; (800120c <HAL_SPI_MspInit+0x1a4>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment 		= DMA_MDATAALIGN_BYTE;
 80011a6:	4b19      	ldr	r3, [pc, #100]	; (800120c <HAL_SPI_MspInit+0x1a4>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode 					= DMA_CIRCULAR;
 80011ac:	4b17      	ldr	r3, [pc, #92]	; (800120c <HAL_SPI_MspInit+0x1a4>)
 80011ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011b2:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority 				= DMA_PRIORITY_LOW;
 80011b4:	4b15      	ldr	r3, [pc, #84]	; (800120c <HAL_SPI_MspInit+0x1a4>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode 				= DMA_FIFOMODE_DISABLE;
 80011ba:	4b14      	ldr	r3, [pc, #80]	; (800120c <HAL_SPI_MspInit+0x1a4>)
 80011bc:	2200      	movs	r2, #0
 80011be:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80011c0:	4812      	ldr	r0, [pc, #72]	; (800120c <HAL_SPI_MspInit+0x1a4>)
 80011c2:	f000 fc3b 	bl	8001a3c <HAL_DMA_Init>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <HAL_SPI_MspInit+0x168>
    {
      Error_Handler();
 80011cc:	f7ff fe3a 	bl	8000e44 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a0e      	ldr	r2, [pc, #56]	; (800120c <HAL_SPI_MspInit+0x1a4>)
 80011d4:	649a      	str	r2, [r3, #72]	; 0x48
 80011d6:	4a0d      	ldr	r2, [pc, #52]	; (800120c <HAL_SPI_MspInit+0x1a4>)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80011dc:	2200      	movs	r2, #0
 80011de:	2105      	movs	r1, #5
 80011e0:	2023      	movs	r0, #35	; 0x23
 80011e2:	f000 fbe5 	bl	80019b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80011e6:	2023      	movs	r0, #35	; 0x23
 80011e8:	f000 fbfe 	bl	80019e8 <HAL_NVIC_EnableIRQ>
  }

}
 80011ec:	bf00      	nop
 80011ee:	3728      	adds	r7, #40	; 0x28
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40013000 	.word	0x40013000
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40020000 	.word	0x40020000
 8001200:	40020400 	.word	0x40020400
 8001204:	20000458 	.word	0x20000458
 8001208:	40026410 	.word	0x40026410
 800120c:	200004b8 	.word	0x200004b8
 8001210:	40026458 	.word	0x40026458

08001214 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*******************************************************/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08a      	sub	sp, #40	; 0x28
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a4c      	ldr	r2, [pc, #304]	; (8001364 <HAL_UART_MspInit+0x150>)
 8001232:	4293      	cmp	r3, r2
 8001234:	f040 8091 	bne.w	800135a <HAL_UART_MspInit+0x146>
  {
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001238:	2300      	movs	r3, #0
 800123a:	613b      	str	r3, [r7, #16]
 800123c:	4b4a      	ldr	r3, [pc, #296]	; (8001368 <HAL_UART_MspInit+0x154>)
 800123e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001240:	4a49      	ldr	r2, [pc, #292]	; (8001368 <HAL_UART_MspInit+0x154>)
 8001242:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001246:	6413      	str	r3, [r2, #64]	; 0x40
 8001248:	4b47      	ldr	r3, [pc, #284]	; (8001368 <HAL_UART_MspInit+0x154>)
 800124a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001250:	613b      	str	r3, [r7, #16]
 8001252:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001254:	2300      	movs	r3, #0
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	4b43      	ldr	r3, [pc, #268]	; (8001368 <HAL_UART_MspInit+0x154>)
 800125a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125c:	4a42      	ldr	r2, [pc, #264]	; (8001368 <HAL_UART_MspInit+0x154>)
 800125e:	f043 0308 	orr.w	r3, r3, #8
 8001262:	6313      	str	r3, [r2, #48]	; 0x30
 8001264:	4b40      	ldr	r3, [pc, #256]	; (8001368 <HAL_UART_MspInit+0x154>)
 8001266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001268:	f003 0308 	and.w	r3, r3, #8
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin 		= STLK_RX_Pin|STLK_TX_Pin;
 8001270:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001274:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode 		= GPIO_MODE_AF_PP;
 8001276:	2302      	movs	r3, #2
 8001278:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 800127a:	2300      	movs	r3, #0
 800127c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_VERY_HIGH;
 800127e:	2303      	movs	r3, #3
 8001280:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate 	= GPIO_AF7_USART3;
 8001282:	2307      	movs	r3, #7
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001286:	f107 0314 	add.w	r3, r7, #20
 800128a:	4619      	mov	r1, r3
 800128c:	4837      	ldr	r0, [pc, #220]	; (800136c <HAL_UART_MspInit+0x158>)
 800128e:	f000 ffe5 	bl	800225c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance 		= DMA1_Stream1;
 8001292:	4b37      	ldr	r3, [pc, #220]	; (8001370 <HAL_UART_MspInit+0x15c>)
 8001294:	4a37      	ldr	r2, [pc, #220]	; (8001374 <HAL_UART_MspInit+0x160>)
 8001296:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel 	= DMA_CHANNEL_4;
 8001298:	4b35      	ldr	r3, [pc, #212]	; (8001370 <HAL_UART_MspInit+0x15c>)
 800129a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800129e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction 	= DMA_PERIPH_TO_MEMORY;
 80012a0:	4b33      	ldr	r3, [pc, #204]	; (8001370 <HAL_UART_MspInit+0x15c>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc 	= DMA_PINC_DISABLE;
 80012a6:	4b32      	ldr	r3, [pc, #200]	; (8001370 <HAL_UART_MspInit+0x15c>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc 		= DMA_MINC_ENABLE;
 80012ac:	4b30      	ldr	r3, [pc, #192]	; (8001370 <HAL_UART_MspInit+0x15c>)
 80012ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012b2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012b4:	4b2e      	ldr	r3, [pc, #184]	; (8001370 <HAL_UART_MspInit+0x15c>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 80012ba:	4b2d      	ldr	r3, [pc, #180]	; (8001370 <HAL_UART_MspInit+0x15c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode 		= DMA_NORMAL;
 80012c0:	4b2b      	ldr	r3, [pc, #172]	; (8001370 <HAL_UART_MspInit+0x15c>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority 	= DMA_PRIORITY_LOW;
 80012c6:	4b2a      	ldr	r3, [pc, #168]	; (8001370 <HAL_UART_MspInit+0x15c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode 	= DMA_FIFOMODE_DISABLE;
 80012cc:	4b28      	ldr	r3, [pc, #160]	; (8001370 <HAL_UART_MspInit+0x15c>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80012d2:	4827      	ldr	r0, [pc, #156]	; (8001370 <HAL_UART_MspInit+0x15c>)
 80012d4:	f000 fbb2 	bl	8001a3c <HAL_DMA_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80012de:	f7ff fdb1 	bl	8000e44 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a22      	ldr	r2, [pc, #136]	; (8001370 <HAL_UART_MspInit+0x15c>)
 80012e6:	639a      	str	r2, [r3, #56]	; 0x38
 80012e8:	4a21      	ldr	r2, [pc, #132]	; (8001370 <HAL_UART_MspInit+0x15c>)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance 		= DMA1_Stream3;
 80012ee:	4b22      	ldr	r3, [pc, #136]	; (8001378 <HAL_UART_MspInit+0x164>)
 80012f0:	4a22      	ldr	r2, [pc, #136]	; (800137c <HAL_UART_MspInit+0x168>)
 80012f2:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel 	= DMA_CHANNEL_4;
 80012f4:	4b20      	ldr	r3, [pc, #128]	; (8001378 <HAL_UART_MspInit+0x164>)
 80012f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012fa:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction 	= DMA_MEMORY_TO_PERIPH;
 80012fc:	4b1e      	ldr	r3, [pc, #120]	; (8001378 <HAL_UART_MspInit+0x164>)
 80012fe:	2240      	movs	r2, #64	; 0x40
 8001300:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc 	= DMA_PINC_DISABLE;
 8001302:	4b1d      	ldr	r3, [pc, #116]	; (8001378 <HAL_UART_MspInit+0x164>)
 8001304:	2200      	movs	r2, #0
 8001306:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc 		= DMA_MINC_ENABLE;
 8001308:	4b1b      	ldr	r3, [pc, #108]	; (8001378 <HAL_UART_MspInit+0x164>)
 800130a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800130e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001310:	4b19      	ldr	r3, [pc, #100]	; (8001378 <HAL_UART_MspInit+0x164>)
 8001312:	2200      	movs	r2, #0
 8001314:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 8001316:	4b18      	ldr	r3, [pc, #96]	; (8001378 <HAL_UART_MspInit+0x164>)
 8001318:	2200      	movs	r2, #0
 800131a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode 		= DMA_NORMAL;
 800131c:	4b16      	ldr	r3, [pc, #88]	; (8001378 <HAL_UART_MspInit+0x164>)
 800131e:	2200      	movs	r2, #0
 8001320:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority 	= DMA_PRIORITY_LOW;
 8001322:	4b15      	ldr	r3, [pc, #84]	; (8001378 <HAL_UART_MspInit+0x164>)
 8001324:	2200      	movs	r2, #0
 8001326:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode 	= DMA_FIFOMODE_DISABLE;
 8001328:	4b13      	ldr	r3, [pc, #76]	; (8001378 <HAL_UART_MspInit+0x164>)
 800132a:	2200      	movs	r2, #0
 800132c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800132e:	4812      	ldr	r0, [pc, #72]	; (8001378 <HAL_UART_MspInit+0x164>)
 8001330:	f000 fb84 	bl	8001a3c <HAL_DMA_Init>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800133a:	f7ff fd83 	bl	8000e44 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a0d      	ldr	r2, [pc, #52]	; (8001378 <HAL_UART_MspInit+0x164>)
 8001342:	635a      	str	r2, [r3, #52]	; 0x34
 8001344:	4a0c      	ldr	r2, [pc, #48]	; (8001378 <HAL_UART_MspInit+0x164>)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6393      	str	r3, [r2, #56]	; 0x38


	/* UART2 interrupt Init */
	HAL_NVIC_SetPriority(USART3_IRQn, 15, 0);
 800134a:	2200      	movs	r2, #0
 800134c:	210f      	movs	r1, #15
 800134e:	2027      	movs	r0, #39	; 0x27
 8001350:	f000 fb2e 	bl	80019b0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001354:	2027      	movs	r0, #39	; 0x27
 8001356:	f000 fb47 	bl	80019e8 <HAL_NVIC_EnableIRQ>
  }

}
 800135a:	bf00      	nop
 800135c:	3728      	adds	r7, #40	; 0x28
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40004800 	.word	0x40004800
 8001368:	40023800 	.word	0x40023800
 800136c:	40020c00 	.word	0x40020c00
 8001370:	20000578 	.word	0x20000578
 8001374:	40026028 	.word	0x40026028
 8001378:	20000518 	.word	0x20000518
 800137c:	40026058 	.word	0x40026058

08001380 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08c      	sub	sp, #48	; 0x30
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001388:	2300      	movs	r3, #0
 800138a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800138c:	2300      	movs	r3, #0
 800138e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001390:	2200      	movs	r2, #0
 8001392:	6879      	ldr	r1, [r7, #4]
 8001394:	2019      	movs	r0, #25
 8001396:	f000 fb0b 	bl	80019b0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800139a:	2019      	movs	r0, #25
 800139c:	f000 fb24 	bl	80019e8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80013a0:	2300      	movs	r3, #0
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	4b1f      	ldr	r3, [pc, #124]	; (8001424 <HAL_InitTick+0xa4>)
 80013a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a8:	4a1e      	ldr	r2, [pc, #120]	; (8001424 <HAL_InitTick+0xa4>)
 80013aa:	f043 0301 	orr.w	r3, r3, #1
 80013ae:	6453      	str	r3, [r2, #68]	; 0x44
 80013b0:	4b1c      	ldr	r3, [pc, #112]	; (8001424 <HAL_InitTick+0xa4>)
 80013b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b4:	f003 0301 	and.w	r3, r3, #1
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013bc:	f107 0210 	add.w	r2, r7, #16
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	4611      	mov	r1, r2
 80013c6:	4618      	mov	r0, r3
 80013c8:	f003 fcb8 	bl	8004d3c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80013cc:	f003 fca2 	bl	8004d14 <HAL_RCC_GetPCLK2Freq>
 80013d0:	4603      	mov	r3, r0
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013d8:	4a13      	ldr	r2, [pc, #76]	; (8001428 <HAL_InitTick+0xa8>)
 80013da:	fba2 2303 	umull	r2, r3, r2, r3
 80013de:	0c9b      	lsrs	r3, r3, #18
 80013e0:	3b01      	subs	r3, #1
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80013e4:	4b11      	ldr	r3, [pc, #68]	; (800142c <HAL_InitTick+0xac>)
 80013e6:	4a12      	ldr	r2, [pc, #72]	; (8001430 <HAL_InitTick+0xb0>)
 80013e8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80013ea:	4b10      	ldr	r3, [pc, #64]	; (800142c <HAL_InitTick+0xac>)
 80013ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013f0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80013f2:	4a0e      	ldr	r2, [pc, #56]	; (800142c <HAL_InitTick+0xac>)
 80013f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80013f8:	4b0c      	ldr	r3, [pc, #48]	; (800142c <HAL_InitTick+0xac>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013fe:	4b0b      	ldr	r3, [pc, #44]	; (800142c <HAL_InitTick+0xac>)
 8001400:	2200      	movs	r2, #0
 8001402:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001404:	4809      	ldr	r0, [pc, #36]	; (800142c <HAL_InitTick+0xac>)
 8001406:	f003 fe73 	bl	80050f0 <HAL_TIM_Base_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d104      	bne.n	800141a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001410:	4806      	ldr	r0, [pc, #24]	; (800142c <HAL_InitTick+0xac>)
 8001412:	f003 fec7 	bl	80051a4 <HAL_TIM_Base_Start_IT>
 8001416:	4603      	mov	r3, r0
 8001418:	e000      	b.n	800141c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
}
 800141c:	4618      	mov	r0, r3
 800141e:	3730      	adds	r7, #48	; 0x30
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40023800 	.word	0x40023800
 8001428:	431bde83 	.word	0x431bde83
 800142c:	2000073c 	.word	0x2000073c
 8001430:	40010000 	.word	0x40010000

08001434 <NMI_Handler>:
/******************************************************************************/
/************************************************************
  * @brief This function handles Non maskable interrupt.
  ***********************************************************/
void NMI_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  while (1)
 8001438:	e7fe      	b.n	8001438 <NMI_Handler+0x4>

0800143a <HardFault_Handler>:

/************************************************************
  * @brief This function handles Hard fault interrupt.
  ***********************************************************/
void HardFault_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0
  while (1)
 800143e:	e7fe      	b.n	800143e <HardFault_Handler+0x4>

08001440 <MemManage_Handler>:

/************************************************************
  * @brief This function handles Memory management fault.
  ***********************************************************/
void MemManage_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  while (1)
 8001444:	e7fe      	b.n	8001444 <MemManage_Handler+0x4>

08001446 <BusFault_Handler>:

/************************************************************
  * @brief This function handles Pre-fetch fault, memory access fault.
  ***********************************************************/
void BusFault_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0
  while (1)
 800144a:	e7fe      	b.n	800144a <BusFault_Handler+0x4>

0800144c <UsageFault_Handler>:

/************************************************************
  * @brief This function handles Undefined instruction or illegal state.
  ***********************************************************/
void UsageFault_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  while (1)
 8001450:	e7fe      	b.n	8001450 <UsageFault_Handler+0x4>

08001452 <DebugMon_Handler>:

/************************************************************
  * @brief This function handles Debug monitor.
  ***********************************************************/
void DebugMon_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0

}
 8001456:	bf00      	nop
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <EXTI15_10_IRQHandler>:
  * @brief  This function handles external lines 15 to 10 interrupt request.
  * @param  None
  * @retval None
  *****************************************************************************/
void EXTI15_10_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001464:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001468:	f001 f8d8 	bl	800261c <HAL_GPIO_EXTI_IRQHandler>
}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}

08001470 <DMA1_Stream0_IRQHandler>:

/************************************************************
  * @brief This function handles DMA1 stream0 global interrupt.
  ************************************************************/
void DMA1_Stream0_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001474:	4802      	ldr	r0, [pc, #8]	; (8001480 <DMA1_Stream0_IRQHandler+0x10>)
 8001476:	f000 fc79 	bl	8001d6c <HAL_DMA_IRQHandler>
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000340 	.word	0x20000340

08001484 <DMA1_Stream6_IRQHandler>:

/*************************************************************
  * @brief This function handles DMA1 stream6 global interrupt.
  ************************************************************/
void DMA1_Stream6_IRQHandler(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001488:	4802      	ldr	r0, [pc, #8]	; (8001494 <DMA1_Stream6_IRQHandler+0x10>)
 800148a:	f000 fc6f 	bl	8001d6c <HAL_DMA_IRQHandler>
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	200003a0 	.word	0x200003a0

08001498 <TIM1_UP_TIM10_IRQHandler>:

/*************************************************************
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  ************************************************************/
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim1);
 800149c:	4802      	ldr	r0, [pc, #8]	; (80014a8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800149e:	f003 fef1 	bl	8005284 <HAL_TIM_IRQHandler>
}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	2000073c 	.word	0x2000073c

080014ac <I2C1_EV_IRQHandler>:

/**************************************************************
  * @brief This function handles I2C1 event interrupt.
  *************************************************************/
void I2C1_EV_IRQHandler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80014b0:	4802      	ldr	r0, [pc, #8]	; (80014bc <I2C1_EV_IRQHandler+0x10>)
 80014b2:	f001 fa0f 	bl	80028d4 <HAL_I2C_EV_IRQHandler>
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	200002ec 	.word	0x200002ec

080014c0 <I2C1_ER_IRQHandler>:

/**************************************************************
  * @brief This function handles I2C1 error interrupt.
  *************************************************************/
void I2C1_ER_IRQHandler(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80014c4:	4802      	ldr	r0, [pc, #8]	; (80014d0 <I2C1_ER_IRQHandler+0x10>)
 80014c6:	f001 fb76 	bl	8002bb6 <HAL_I2C_ER_IRQHandler>
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	200002ec 	.word	0x200002ec

080014d4 <SPI1_IRQHandler>:

/**************************************************************
  * @brief This function handles SPI1 global interrupt.
  *************************************************************/
void SPI1_IRQHandler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi1);
 80014d8:	4802      	ldr	r0, [pc, #8]	; (80014e4 <SPI1_IRQHandler+0x10>)
 80014da:	f003 fceb 	bl	8004eb4 <HAL_SPI_IRQHandler>
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000400 	.word	0x20000400

080014e8 <DMA2_Stream0_IRQHandler>:

/**************************************************************
  * @brief This function handles DMA2 stream0 global interrupt.
  *************************************************************/
void DMA2_Stream0_IRQHandler(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80014ec:	4802      	ldr	r0, [pc, #8]	; (80014f8 <DMA2_Stream0_IRQHandler+0x10>)
 80014ee:	f000 fc3d 	bl	8001d6c <HAL_DMA_IRQHandler>
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000458 	.word	0x20000458

080014fc <DMA2_Stream3_IRQHandler>:

/**************************************************************
  * @brief This function handles DMA2 stream3 global interrupt.
  *************************************************************/
void DMA2_Stream3_IRQHandler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001500:	4802      	ldr	r0, [pc, #8]	; (800150c <DMA2_Stream3_IRQHandler+0x10>)
 8001502:	f000 fc33 	bl	8001d6c <HAL_DMA_IRQHandler>
}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	200004b8 	.word	0x200004b8

08001510 <DMA1_Stream1_IRQHandler>:
  * @brief This function handles DMA1 stream1 global interrupt.
  * @param  None
  * @retval None
  **************************************************************/
void DMA1_Stream1_IRQHandler(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001514:	4802      	ldr	r0, [pc, #8]	; (8001520 <DMA1_Stream1_IRQHandler+0x10>)
 8001516:	f000 fc29 	bl	8001d6c <HAL_DMA_IRQHandler>
}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000578 	.word	0x20000578

08001524 <USART3_IRQHandler>:

/********************************************************
  * @brief This function handles USART3 interrupt.
  ******************************************************/
void USART3_IRQHandler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08a      	sub	sp, #40	; 0x28
 8001528:	af00      	add	r7, sp, #0
	extern xQueueHandle msg_queue;

	HAL_UART_IRQHandler(&huart3);
 800152a:	482d      	ldr	r0, [pc, #180]	; (80015e0 <USART3_IRQHandler+0xbc>)
 800152c:	f004 fa1c 	bl	8005968 <HAL_UART_IRQHandler>

	if(RESET != __HAL_UART_GET_FLAG(&huart3, UART_FLAG_IDLE))   //Judging whether it is idle interruption
 8001530:	4b2b      	ldr	r3, [pc, #172]	; (80015e0 <USART3_IRQHandler+0xbc>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0310 	and.w	r3, r3, #16
 800153a:	2b10      	cmp	r3, #16
 800153c:	d14b      	bne.n	80015d6 <USART3_IRQHandler+0xb2>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart3);                     //Clear idle interrupt sign (otherwise it will continue to enter interrupt)
 800153e:	2300      	movs	r3, #0
 8001540:	607b      	str	r3, [r7, #4]
 8001542:	4b27      	ldr	r3, [pc, #156]	; (80015e0 <USART3_IRQHandler+0xbc>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	607b      	str	r3, [r7, #4]
 800154a:	4b25      	ldr	r3, [pc, #148]	; (80015e0 <USART3_IRQHandler+0xbc>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	607b      	str	r3, [r7, #4]
 8001552:	687b      	ldr	r3, [r7, #4]

		//Stop this DMA transmission
		HAL_UART_DMAStop(&huart3);
 8001554:	4822      	ldr	r0, [pc, #136]	; (80015e0 <USART3_IRQHandler+0xbc>)
 8001556:	f004 f988 	bl	800586a <HAL_UART_DMAStop>

		//Calculate the length of the received data
		uint8_t data_length  = 255 - __HAL_DMA_GET_COUNTER(&hdma_usart3_rx);
 800155a:	4b22      	ldr	r3, [pc, #136]	; (80015e4 <USART3_IRQHandler+0xc0>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	b2db      	uxtb	r3, r3
 8001562:	43db      	mvns	r3, r3
 8001564:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		/*******************************************************************************
		* The xHigherPriorityTaskWoken parameter must be initialized to pdFALSE as
		* it will get set to pdTRUE inside the interrupt safe API function if a
		* context switch is required.
		*******************************************************************************/
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001568:	2300      	movs	r3, #0
 800156a:	623b      	str	r3, [r7, #32]

		// Construct message and send
		PrintMessage msg;
		strncpy(msg.body, (char*)uart3Rcv_buff, data_length);
 800156c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001570:	f107 0308 	add.w	r3, r7, #8
 8001574:	491c      	ldr	r1, [pc, #112]	; (80015e8 <USART3_IRQHandler+0xc4>)
 8001576:	4618      	mov	r0, r3
 8001578:	f008 f98e 	bl	8009898 <strncpy>
		msg.count = 1;
 800157c:	2301      	movs	r3, #1
 800157e:	61fb      	str	r3, [r7, #28]

		if (xQueueSendToFrontFromISR(msg_queue, &msg, &xHigherPriorityTaskWoken) == pdPASS)
 8001580:	4b1a      	ldr	r3, [pc, #104]	; (80015ec <USART3_IRQHandler+0xc8>)
 8001582:	6818      	ldr	r0, [r3, #0]
 8001584:	f107 0220 	add.w	r2, r7, #32
 8001588:	f107 0108 	add.w	r1, r7, #8
 800158c:	2301      	movs	r3, #1
 800158e:	f005 ffa5 	bl	80074dc <xQueueGenericSendFromISR>
 8001592:	4603      	mov	r3, r0
 8001594:	2b01      	cmp	r3, #1
 8001596:	d102      	bne.n	800159e <USART3_IRQHandler+0x7a>
		{
			printf("INT Handler queue sent\r\n\n");
 8001598:	4815      	ldr	r0, [pc, #84]	; (80015f0 <USART3_IRQHandler+0xcc>)
 800159a:	f008 f975 	bl	8009888 <puts>
		 * then calling portEND_SWITCHING_ISR() will request a context switch. If
		 * xHigherPriorityTaskWoken is still pdFALSE then calling
		 * portEND_SWITCHING_ISR() will have no effect
		 *****************************************************************************/

		portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 800159e:	6a3b      	ldr	r3, [r7, #32]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d007      	beq.n	80015b4 <USART3_IRQHandler+0x90>
 80015a4:	4b13      	ldr	r3, [pc, #76]	; (80015f4 <USART3_IRQHandler+0xd0>)
 80015a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	f3bf 8f4f 	dsb	sy
 80015b0:	f3bf 8f6f 	isb	sy
		  //tinysh_char_in((unsigned char)single_char);
		}
#endif

		//Zero Receiving Buffer
		memset(uart3Rcv_buff, '\0', sizeof(uart3Rcv_buff));
 80015b4:	22ff      	movs	r2, #255	; 0xff
 80015b6:	2100      	movs	r1, #0
 80015b8:	480b      	ldr	r0, [pc, #44]	; (80015e8 <USART3_IRQHandler+0xc4>)
 80015ba:	f008 f8d7 	bl	800976c <memset>
		uart3_buff_len = data_length;
 80015be:	4a0e      	ldr	r2, [pc, #56]	; (80015f8 <USART3_IRQHandler+0xd4>)
 80015c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015c4:	7013      	strb	r3, [r2, #0]
		data_length = 0;
 80015c6:	2300      	movs	r3, #0
 80015c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27


		//Restart to start DMA transmission of 255 bytes of data at a time
		HAL_UART_Receive_DMA(&huart3, (uint8_t*)uart3Rcv_buff, UART3_RX_BUFFER_SIZE);
 80015cc:	22ff      	movs	r2, #255	; 0xff
 80015ce:	4906      	ldr	r1, [pc, #24]	; (80015e8 <USART3_IRQHandler+0xc4>)
 80015d0:	4803      	ldr	r0, [pc, #12]	; (80015e0 <USART3_IRQHandler+0xbc>)
 80015d2:	f004 f91a 	bl	800580a <HAL_UART_Receive_DMA>
	}
}
 80015d6:	bf00      	nop
 80015d8:	3728      	adds	r7, #40	; 0x28
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	200005d8 	.word	0x200005d8
 80015e4:	20000578 	.word	0x20000578
 80015e8:	2000061c 	.word	0x2000061c
 80015ec:	20000730 	.word	0x20000730
 80015f0:	0800a934 	.word	0x0800a934
 80015f4:	e000ed04 	.word	0xe000ed04
 80015f8:	2000071b 	.word	0x2000071b

080015fc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]
 800160c:	e00a      	b.n	8001624 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800160e:	f3af 8000 	nop.w
 8001612:	4601      	mov	r1, r0
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	1c5a      	adds	r2, r3, #1
 8001618:	60ba      	str	r2, [r7, #8]
 800161a:	b2ca      	uxtb	r2, r1
 800161c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	3301      	adds	r3, #1
 8001622:	617b      	str	r3, [r7, #20]
 8001624:	697a      	ldr	r2, [r7, #20]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	429a      	cmp	r2, r3
 800162a:	dbf0      	blt.n	800160e <_read+0x12>
	}

return len;
 800162c:	687b      	ldr	r3, [r7, #4]
}
 800162e:	4618      	mov	r0, r3
 8001630:	3718      	adds	r7, #24
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b086      	sub	sp, #24
 800163a:	af00      	add	r7, sp, #0
 800163c:	60f8      	str	r0, [r7, #12]
 800163e:	60b9      	str	r1, [r7, #8]
 8001640:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001642:	2300      	movs	r3, #0
 8001644:	617b      	str	r3, [r7, #20]
 8001646:	e009      	b.n	800165c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	1c5a      	adds	r2, r3, #1
 800164c:	60ba      	str	r2, [r7, #8]
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f7fe ffb9 	bl	80005c8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	3301      	adds	r3, #1
 800165a:	617b      	str	r3, [r7, #20]
 800165c:	697a      	ldr	r2, [r7, #20]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	429a      	cmp	r2, r3
 8001662:	dbf1      	blt.n	8001648 <_write+0x12>
	}
	return len;
 8001664:	687b      	ldr	r3, [r7, #4]
}
 8001666:	4618      	mov	r0, r3
 8001668:	3718      	adds	r7, #24
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <_close>:

int _close(int file)
{
 800166e:	b480      	push	{r7}
 8001670:	b083      	sub	sp, #12
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
	return -1;
 8001676:	f04f 33ff 	mov.w	r3, #4294967295
}
 800167a:	4618      	mov	r0, r3
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001686:	b480      	push	{r7}
 8001688:	b083      	sub	sp, #12
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
 800168e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001696:	605a      	str	r2, [r3, #4]
	return 0;
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <_isatty>:

int _isatty(int file)
{
 80016a6:	b480      	push	{r7}
 80016a8:	b083      	sub	sp, #12
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
	return 1;
 80016ae:	2301      	movs	r3, #1
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
	return 0;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3714      	adds	r7, #20
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
	...

080016d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016e0:	4a14      	ldr	r2, [pc, #80]	; (8001734 <_sbrk+0x5c>)
 80016e2:	4b15      	ldr	r3, [pc, #84]	; (8001738 <_sbrk+0x60>)
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016ec:	4b13      	ldr	r3, [pc, #76]	; (800173c <_sbrk+0x64>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d102      	bne.n	80016fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016f4:	4b11      	ldr	r3, [pc, #68]	; (800173c <_sbrk+0x64>)
 80016f6:	4a12      	ldr	r2, [pc, #72]	; (8001740 <_sbrk+0x68>)
 80016f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016fa:	4b10      	ldr	r3, [pc, #64]	; (800173c <_sbrk+0x64>)
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4413      	add	r3, r2
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	429a      	cmp	r2, r3
 8001706:	d207      	bcs.n	8001718 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001708:	f007 fff8 	bl	80096fc <__errno>
 800170c:	4603      	mov	r3, r0
 800170e:	220c      	movs	r2, #12
 8001710:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001712:	f04f 33ff 	mov.w	r3, #4294967295
 8001716:	e009      	b.n	800172c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001718:	4b08      	ldr	r3, [pc, #32]	; (800173c <_sbrk+0x64>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800171e:	4b07      	ldr	r3, [pc, #28]	; (800173c <_sbrk+0x64>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4413      	add	r3, r2
 8001726:	4a05      	ldr	r2, [pc, #20]	; (800173c <_sbrk+0x64>)
 8001728:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800172a:	68fb      	ldr	r3, [r7, #12]
}
 800172c:	4618      	mov	r0, r3
 800172e:	3718      	adds	r7, #24
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20030000 	.word	0x20030000
 8001738:	00000600 	.word	0x00000600
 800173c:	20000784 	.word	0x20000784
 8001740:	200044f0 	.word	0x200044f0

08001744 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001748:	4b06      	ldr	r3, [pc, #24]	; (8001764 <SystemInit+0x20>)
 800174a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800174e:	4a05      	ldr	r2, [pc, #20]	; (8001764 <SystemInit+0x20>)
 8001750:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001754:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001768:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017a0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800176c:	480d      	ldr	r0, [pc, #52]	; (80017a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800176e:	490e      	ldr	r1, [pc, #56]	; (80017a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001770:	4a0e      	ldr	r2, [pc, #56]	; (80017ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001772:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001774:	e002      	b.n	800177c <LoopCopyDataInit>

08001776 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001776:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001778:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800177a:	3304      	adds	r3, #4

0800177c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800177c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800177e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001780:	d3f9      	bcc.n	8001776 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001782:	4a0b      	ldr	r2, [pc, #44]	; (80017b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001784:	4c0b      	ldr	r4, [pc, #44]	; (80017b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001786:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001788:	e001      	b.n	800178e <LoopFillZerobss>

0800178a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800178a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800178c:	3204      	adds	r2, #4

0800178e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800178e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001790:	d3fb      	bcc.n	800178a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001792:	f7ff ffd7 	bl	8001744 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001796:	f007 ffb7 	bl	8009708 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800179a:	f7fe ff27 	bl	80005ec <main>
  bx  lr    
 800179e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80017a0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80017a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017a8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80017ac:	0800aa20 	.word	0x0800aa20
  ldr r2, =_sbss
 80017b0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80017b4:	200044f0 	.word	0x200044f0

080017b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017b8:	e7fe      	b.n	80017b8 <ADC_IRQHandler>
	...

080017bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017c0:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <HAL_Init+0x40>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a0d      	ldr	r2, [pc, #52]	; (80017fc <HAL_Init+0x40>)
 80017c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017cc:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <HAL_Init+0x40>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a0a      	ldr	r2, [pc, #40]	; (80017fc <HAL_Init+0x40>)
 80017d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017d8:	4b08      	ldr	r3, [pc, #32]	; (80017fc <HAL_Init+0x40>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a07      	ldr	r2, [pc, #28]	; (80017fc <HAL_Init+0x40>)
 80017de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017e4:	2003      	movs	r0, #3
 80017e6:	f000 f8d8 	bl	800199a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ea:	200f      	movs	r0, #15
 80017ec:	f7ff fdc8 	bl	8001380 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017f0:	f7ff fb2e 	bl	8000e50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40023c00 	.word	0x40023c00

08001800 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <HAL_IncTick+0x20>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	461a      	mov	r2, r3
 800180a:	4b06      	ldr	r3, [pc, #24]	; (8001824 <HAL_IncTick+0x24>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4413      	add	r3, r2
 8001810:	4a04      	ldr	r2, [pc, #16]	; (8001824 <HAL_IncTick+0x24>)
 8001812:	6013      	str	r3, [r2, #0]
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	20000008 	.word	0x20000008
 8001824:	20000788 	.word	0x20000788

08001828 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  return uwTick;
 800182c:	4b03      	ldr	r3, [pc, #12]	; (800183c <HAL_GetTick+0x14>)
 800182e:	681b      	ldr	r3, [r3, #0]
}
 8001830:	4618      	mov	r0, r3
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	20000788 	.word	0x20000788

08001840 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001850:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <__NVIC_SetPriorityGrouping+0x44>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001856:	68ba      	ldr	r2, [r7, #8]
 8001858:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800185c:	4013      	ands	r3, r2
 800185e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001868:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800186c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001870:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001872:	4a04      	ldr	r2, [pc, #16]	; (8001884 <__NVIC_SetPriorityGrouping+0x44>)
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	60d3      	str	r3, [r2, #12]
}
 8001878:	bf00      	nop
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800188c:	4b04      	ldr	r3, [pc, #16]	; (80018a0 <__NVIC_GetPriorityGrouping+0x18>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	0a1b      	lsrs	r3, r3, #8
 8001892:	f003 0307 	and.w	r3, r3, #7
}
 8001896:	4618      	mov	r0, r3
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	e000ed00 	.word	0xe000ed00

080018a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	db0b      	blt.n	80018ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018b6:	79fb      	ldrb	r3, [r7, #7]
 80018b8:	f003 021f 	and.w	r2, r3, #31
 80018bc:	4907      	ldr	r1, [pc, #28]	; (80018dc <__NVIC_EnableIRQ+0x38>)
 80018be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c2:	095b      	lsrs	r3, r3, #5
 80018c4:	2001      	movs	r0, #1
 80018c6:	fa00 f202 	lsl.w	r2, r0, r2
 80018ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	e000e100 	.word	0xe000e100

080018e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	6039      	str	r1, [r7, #0]
 80018ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	db0a      	blt.n	800190a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	b2da      	uxtb	r2, r3
 80018f8:	490c      	ldr	r1, [pc, #48]	; (800192c <__NVIC_SetPriority+0x4c>)
 80018fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fe:	0112      	lsls	r2, r2, #4
 8001900:	b2d2      	uxtb	r2, r2
 8001902:	440b      	add	r3, r1
 8001904:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001908:	e00a      	b.n	8001920 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	b2da      	uxtb	r2, r3
 800190e:	4908      	ldr	r1, [pc, #32]	; (8001930 <__NVIC_SetPriority+0x50>)
 8001910:	79fb      	ldrb	r3, [r7, #7]
 8001912:	f003 030f 	and.w	r3, r3, #15
 8001916:	3b04      	subs	r3, #4
 8001918:	0112      	lsls	r2, r2, #4
 800191a:	b2d2      	uxtb	r2, r2
 800191c:	440b      	add	r3, r1
 800191e:	761a      	strb	r2, [r3, #24]
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	e000e100 	.word	0xe000e100
 8001930:	e000ed00 	.word	0xe000ed00

08001934 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001934:	b480      	push	{r7}
 8001936:	b089      	sub	sp, #36	; 0x24
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	f1c3 0307 	rsb	r3, r3, #7
 800194e:	2b04      	cmp	r3, #4
 8001950:	bf28      	it	cs
 8001952:	2304      	movcs	r3, #4
 8001954:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	3304      	adds	r3, #4
 800195a:	2b06      	cmp	r3, #6
 800195c:	d902      	bls.n	8001964 <NVIC_EncodePriority+0x30>
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	3b03      	subs	r3, #3
 8001962:	e000      	b.n	8001966 <NVIC_EncodePriority+0x32>
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001968:	f04f 32ff 	mov.w	r2, #4294967295
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	43da      	mvns	r2, r3
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	401a      	ands	r2, r3
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800197c:	f04f 31ff 	mov.w	r1, #4294967295
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	fa01 f303 	lsl.w	r3, r1, r3
 8001986:	43d9      	mvns	r1, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800198c:	4313      	orrs	r3, r2
         );
}
 800198e:	4618      	mov	r0, r3
 8001990:	3724      	adds	r7, #36	; 0x24
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff ff4c 	bl	8001840 <__NVIC_SetPriorityGrouping>
}
 80019a8:	bf00      	nop
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
 80019bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019be:	2300      	movs	r3, #0
 80019c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019c2:	f7ff ff61 	bl	8001888 <__NVIC_GetPriorityGrouping>
 80019c6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	68b9      	ldr	r1, [r7, #8]
 80019cc:	6978      	ldr	r0, [r7, #20]
 80019ce:	f7ff ffb1 	bl	8001934 <NVIC_EncodePriority>
 80019d2:	4602      	mov	r2, r0
 80019d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019d8:	4611      	mov	r1, r2
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff ff80 	bl	80018e0 <__NVIC_SetPriority>
}
 80019e0:	bf00      	nop
 80019e2:	3718      	adds	r7, #24
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff ff54 	bl	80018a4 <__NVIC_EnableIRQ>
}
 80019fc:	bf00      	nop
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e00e      	b.n	8001a34 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	795b      	ldrb	r3, [r3, #5]
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d105      	bne.n	8001a2c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7ff fa3e 	bl	8000ea8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a48:	f7ff feee 	bl	8001828 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d101      	bne.n	8001a58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e099      	b.n	8001b8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f022 0201 	bic.w	r2, r2, #1
 8001a76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a78:	e00f      	b.n	8001a9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a7a:	f7ff fed5 	bl	8001828 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b05      	cmp	r3, #5
 8001a86:	d908      	bls.n	8001a9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2220      	movs	r2, #32
 8001a8c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2203      	movs	r2, #3
 8001a92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e078      	b.n	8001b8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1e8      	bne.n	8001a7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ab0:	697a      	ldr	r2, [r7, #20]
 8001ab2:	4b38      	ldr	r3, [pc, #224]	; (8001b94 <HAL_DMA_Init+0x158>)
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685a      	ldr	r2, [r3, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ac6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	691b      	ldr	r3, [r3, #16]
 8001acc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ad2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ade:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a1b      	ldr	r3, [r3, #32]
 8001ae4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af0:	2b04      	cmp	r3, #4
 8001af2:	d107      	bne.n	8001b04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afc:	4313      	orrs	r3, r2
 8001afe:	697a      	ldr	r2, [r7, #20]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	697a      	ldr	r2, [r7, #20]
 8001b0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	695b      	ldr	r3, [r3, #20]
 8001b12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	f023 0307 	bic.w	r3, r3, #7
 8001b1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b20:	697a      	ldr	r2, [r7, #20]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	d117      	bne.n	8001b5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b32:	697a      	ldr	r2, [r7, #20]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d00e      	beq.n	8001b5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 fb0f 	bl	8002164 <DMA_CheckFifoParam>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d008      	beq.n	8001b5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2240      	movs	r2, #64	; 0x40
 8001b50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2201      	movs	r2, #1
 8001b56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e016      	b.n	8001b8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	697a      	ldr	r2, [r7, #20]
 8001b64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 fac6 	bl	80020f8 <DMA_CalcBaseAndBitshift>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b74:	223f      	movs	r2, #63	; 0x3f
 8001b76:	409a      	lsls	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2201      	movs	r2, #1
 8001b86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3718      	adds	r7, #24
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	f010803f 	.word	0xf010803f

08001b98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
 8001ba4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d101      	bne.n	8001bbe <HAL_DMA_Start_IT+0x26>
 8001bba:	2302      	movs	r3, #2
 8001bbc:	e040      	b.n	8001c40 <HAL_DMA_Start_IT+0xa8>
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d12f      	bne.n	8001c32 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2202      	movs	r2, #2
 8001bd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	68b9      	ldr	r1, [r7, #8]
 8001be6:	68f8      	ldr	r0, [r7, #12]
 8001be8:	f000 fa58 	bl	800209c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf0:	223f      	movs	r2, #63	; 0x3f
 8001bf2:	409a      	lsls	r2, r3
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f042 0216 	orr.w	r2, r2, #22
 8001c06:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d007      	beq.n	8001c20 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f042 0208 	orr.w	r2, r2, #8
 8001c1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f042 0201 	orr.w	r2, r2, #1
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	e005      	b.n	8001c3e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3718      	adds	r7, #24
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c54:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c56:	f7ff fde7 	bl	8001828 <HAL_GetTick>
 8001c5a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d008      	beq.n	8001c7a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2280      	movs	r2, #128	; 0x80
 8001c6c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e052      	b.n	8001d20 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f022 0216 	bic.w	r2, r2, #22
 8001c88:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	695a      	ldr	r2, [r3, #20]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c98:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d103      	bne.n	8001caa <HAL_DMA_Abort+0x62>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d007      	beq.n	8001cba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f022 0208 	bic.w	r2, r2, #8
 8001cb8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f022 0201 	bic.w	r2, r2, #1
 8001cc8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cca:	e013      	b.n	8001cf4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ccc:	f7ff fdac 	bl	8001828 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b05      	cmp	r3, #5
 8001cd8:	d90c      	bls.n	8001cf4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2220      	movs	r2, #32
 8001cde:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2203      	movs	r2, #3
 8001ce4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e015      	b.n	8001d20 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1e4      	bne.n	8001ccc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d06:	223f      	movs	r2, #63	; 0x3f
 8001d08:	409a      	lsls	r2, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2201      	movs	r2, #1
 8001d12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d004      	beq.n	8001d46 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2280      	movs	r2, #128	; 0x80
 8001d40:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e00c      	b.n	8001d60 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2205      	movs	r2, #5
 8001d4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f022 0201 	bic.w	r2, r2, #1
 8001d5c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d74:	2300      	movs	r3, #0
 8001d76:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d78:	4b8e      	ldr	r3, [pc, #568]	; (8001fb4 <HAL_DMA_IRQHandler+0x248>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a8e      	ldr	r2, [pc, #568]	; (8001fb8 <HAL_DMA_IRQHandler+0x24c>)
 8001d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d82:	0a9b      	lsrs	r3, r3, #10
 8001d84:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d96:	2208      	movs	r2, #8
 8001d98:	409a      	lsls	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d01a      	beq.n	8001dd8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0304 	and.w	r3, r3, #4
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d013      	beq.n	8001dd8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f022 0204 	bic.w	r2, r2, #4
 8001dbe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc4:	2208      	movs	r2, #8
 8001dc6:	409a      	lsls	r2, r3
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd0:	f043 0201 	orr.w	r2, r3, #1
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ddc:	2201      	movs	r2, #1
 8001dde:	409a      	lsls	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	4013      	ands	r3, r2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d012      	beq.n	8001e0e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d00b      	beq.n	8001e0e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	409a      	lsls	r2, r3
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e06:	f043 0202 	orr.w	r2, r3, #2
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e12:	2204      	movs	r2, #4
 8001e14:	409a      	lsls	r2, r3
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d012      	beq.n	8001e44 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d00b      	beq.n	8001e44 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e30:	2204      	movs	r2, #4
 8001e32:	409a      	lsls	r2, r3
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e3c:	f043 0204 	orr.w	r2, r3, #4
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e48:	2210      	movs	r2, #16
 8001e4a:	409a      	lsls	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d043      	beq.n	8001edc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0308 	and.w	r3, r3, #8
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d03c      	beq.n	8001edc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e66:	2210      	movs	r2, #16
 8001e68:	409a      	lsls	r2, r3
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d018      	beq.n	8001eae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d108      	bne.n	8001e9c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d024      	beq.n	8001edc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	4798      	blx	r3
 8001e9a:	e01f      	b.n	8001edc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d01b      	beq.n	8001edc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	4798      	blx	r3
 8001eac:	e016      	b.n	8001edc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d107      	bne.n	8001ecc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f022 0208 	bic.w	r2, r2, #8
 8001eca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d003      	beq.n	8001edc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee0:	2220      	movs	r2, #32
 8001ee2:	409a      	lsls	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f000 808f 	beq.w	800200c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0310 	and.w	r3, r3, #16
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f000 8087 	beq.w	800200c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f02:	2220      	movs	r2, #32
 8001f04:	409a      	lsls	r2, r3
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b05      	cmp	r3, #5
 8001f14:	d136      	bne.n	8001f84 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f022 0216 	bic.w	r2, r2, #22
 8001f24:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	695a      	ldr	r2, [r3, #20]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f34:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d103      	bne.n	8001f46 <HAL_DMA_IRQHandler+0x1da>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d007      	beq.n	8001f56 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f022 0208 	bic.w	r2, r2, #8
 8001f54:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f5a:	223f      	movs	r2, #63	; 0x3f
 8001f5c:	409a      	lsls	r2, r3
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2201      	movs	r2, #1
 8001f66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d07e      	beq.n	8002078 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	4798      	blx	r3
        }
        return;
 8001f82:	e079      	b.n	8002078 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d01d      	beq.n	8001fce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d10d      	bne.n	8001fbc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d031      	beq.n	800200c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	4798      	blx	r3
 8001fb0:	e02c      	b.n	800200c <HAL_DMA_IRQHandler+0x2a0>
 8001fb2:	bf00      	nop
 8001fb4:	20000000 	.word	0x20000000
 8001fb8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d023      	beq.n	800200c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	4798      	blx	r3
 8001fcc:	e01e      	b.n	800200c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d10f      	bne.n	8001ffc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f022 0210 	bic.w	r2, r2, #16
 8001fea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002000:	2b00      	cmp	r3, #0
 8002002:	d003      	beq.n	800200c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002010:	2b00      	cmp	r3, #0
 8002012:	d032      	beq.n	800207a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	2b00      	cmp	r3, #0
 800201e:	d022      	beq.n	8002066 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2205      	movs	r2, #5
 8002024:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f022 0201 	bic.w	r2, r2, #1
 8002036:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	3301      	adds	r3, #1
 800203c:	60bb      	str	r3, [r7, #8]
 800203e:	697a      	ldr	r2, [r7, #20]
 8002040:	429a      	cmp	r2, r3
 8002042:	d307      	bcc.n	8002054 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1f2      	bne.n	8002038 <HAL_DMA_IRQHandler+0x2cc>
 8002052:	e000      	b.n	8002056 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002054:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2201      	movs	r2, #1
 800205a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800206a:	2b00      	cmp	r3, #0
 800206c:	d005      	beq.n	800207a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	4798      	blx	r3
 8002076:	e000      	b.n	800207a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002078:	bf00      	nop
    }
  }
}
 800207a:	3718      	adds	r7, #24
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800208e:	b2db      	uxtb	r3, r3
}
 8002090:	4618      	mov	r0, r3
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
 80020a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	2b40      	cmp	r3, #64	; 0x40
 80020c8:	d108      	bne.n	80020dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68ba      	ldr	r2, [r7, #8]
 80020d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80020da:	e007      	b.n	80020ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68ba      	ldr	r2, [r7, #8]
 80020e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	60da      	str	r2, [r3, #12]
}
 80020ec:	bf00      	nop
 80020ee:	3714      	adds	r7, #20
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	b2db      	uxtb	r3, r3
 8002106:	3b10      	subs	r3, #16
 8002108:	4a14      	ldr	r2, [pc, #80]	; (800215c <DMA_CalcBaseAndBitshift+0x64>)
 800210a:	fba2 2303 	umull	r2, r3, r2, r3
 800210e:	091b      	lsrs	r3, r3, #4
 8002110:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002112:	4a13      	ldr	r2, [pc, #76]	; (8002160 <DMA_CalcBaseAndBitshift+0x68>)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	4413      	add	r3, r2
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	461a      	mov	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2b03      	cmp	r3, #3
 8002124:	d909      	bls.n	800213a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800212e:	f023 0303 	bic.w	r3, r3, #3
 8002132:	1d1a      	adds	r2, r3, #4
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	659a      	str	r2, [r3, #88]	; 0x58
 8002138:	e007      	b.n	800214a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002142:	f023 0303 	bic.w	r3, r3, #3
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800214e:	4618      	mov	r0, r3
 8002150:	3714      	adds	r7, #20
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	aaaaaaab 	.word	0xaaaaaaab
 8002160:	0800a970 	.word	0x0800a970

08002164 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800216c:	2300      	movs	r3, #0
 800216e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002174:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d11f      	bne.n	80021be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	2b03      	cmp	r3, #3
 8002182:	d856      	bhi.n	8002232 <DMA_CheckFifoParam+0xce>
 8002184:	a201      	add	r2, pc, #4	; (adr r2, 800218c <DMA_CheckFifoParam+0x28>)
 8002186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800218a:	bf00      	nop
 800218c:	0800219d 	.word	0x0800219d
 8002190:	080021af 	.word	0x080021af
 8002194:	0800219d 	.word	0x0800219d
 8002198:	08002233 	.word	0x08002233
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d046      	beq.n	8002236 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021ac:	e043      	b.n	8002236 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021b6:	d140      	bne.n	800223a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021bc:	e03d      	b.n	800223a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021c6:	d121      	bne.n	800220c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	2b03      	cmp	r3, #3
 80021cc:	d837      	bhi.n	800223e <DMA_CheckFifoParam+0xda>
 80021ce:	a201      	add	r2, pc, #4	; (adr r2, 80021d4 <DMA_CheckFifoParam+0x70>)
 80021d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d4:	080021e5 	.word	0x080021e5
 80021d8:	080021eb 	.word	0x080021eb
 80021dc:	080021e5 	.word	0x080021e5
 80021e0:	080021fd 	.word	0x080021fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	73fb      	strb	r3, [r7, #15]
      break;
 80021e8:	e030      	b.n	800224c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d025      	beq.n	8002242 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021fa:	e022      	b.n	8002242 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002200:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002204:	d11f      	bne.n	8002246 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800220a:	e01c      	b.n	8002246 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	2b02      	cmp	r3, #2
 8002210:	d903      	bls.n	800221a <DMA_CheckFifoParam+0xb6>
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	2b03      	cmp	r3, #3
 8002216:	d003      	beq.n	8002220 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002218:	e018      	b.n	800224c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	73fb      	strb	r3, [r7, #15]
      break;
 800221e:	e015      	b.n	800224c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002224:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00e      	beq.n	800224a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	73fb      	strb	r3, [r7, #15]
      break;
 8002230:	e00b      	b.n	800224a <DMA_CheckFifoParam+0xe6>
      break;
 8002232:	bf00      	nop
 8002234:	e00a      	b.n	800224c <DMA_CheckFifoParam+0xe8>
      break;
 8002236:	bf00      	nop
 8002238:	e008      	b.n	800224c <DMA_CheckFifoParam+0xe8>
      break;
 800223a:	bf00      	nop
 800223c:	e006      	b.n	800224c <DMA_CheckFifoParam+0xe8>
      break;
 800223e:	bf00      	nop
 8002240:	e004      	b.n	800224c <DMA_CheckFifoParam+0xe8>
      break;
 8002242:	bf00      	nop
 8002244:	e002      	b.n	800224c <DMA_CheckFifoParam+0xe8>
      break;   
 8002246:	bf00      	nop
 8002248:	e000      	b.n	800224c <DMA_CheckFifoParam+0xe8>
      break;
 800224a:	bf00      	nop
    }
  } 
  
  return status; 
 800224c:	7bfb      	ldrb	r3, [r7, #15]
}
 800224e:	4618      	mov	r0, r3
 8002250:	3714      	adds	r7, #20
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop

0800225c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800225c:	b480      	push	{r7}
 800225e:	b089      	sub	sp, #36	; 0x24
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002266:	2300      	movs	r3, #0
 8002268:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800226a:	2300      	movs	r3, #0
 800226c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800226e:	2300      	movs	r3, #0
 8002270:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002272:	2300      	movs	r3, #0
 8002274:	61fb      	str	r3, [r7, #28]
 8002276:	e177      	b.n	8002568 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002278:	2201      	movs	r2, #1
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	4013      	ands	r3, r2
 800228a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	429a      	cmp	r2, r3
 8002292:	f040 8166 	bne.w	8002562 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f003 0303 	and.w	r3, r3, #3
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d005      	beq.n	80022ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d130      	bne.n	8002310 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	2203      	movs	r2, #3
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	43db      	mvns	r3, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4013      	ands	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	68da      	ldr	r2, [r3, #12]
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022e4:	2201      	movs	r2, #1
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	43db      	mvns	r3, r3
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4013      	ands	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	091b      	lsrs	r3, r3, #4
 80022fa:	f003 0201 	and.w	r2, r3, #1
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4313      	orrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f003 0303 	and.w	r3, r3, #3
 8002318:	2b03      	cmp	r3, #3
 800231a:	d017      	beq.n	800234c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	2203      	movs	r2, #3
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	43db      	mvns	r3, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4313      	orrs	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f003 0303 	and.w	r3, r3, #3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d123      	bne.n	80023a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	08da      	lsrs	r2, r3, #3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3208      	adds	r2, #8
 8002360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002364:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	f003 0307 	and.w	r3, r3, #7
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	220f      	movs	r2, #15
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4013      	ands	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	691a      	ldr	r2, [r3, #16]
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	4313      	orrs	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	08da      	lsrs	r2, r3, #3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	3208      	adds	r2, #8
 800239a:	69b9      	ldr	r1, [r7, #24]
 800239c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	2203      	movs	r2, #3
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4013      	ands	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f003 0203 	and.w	r2, r3, #3
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f000 80c0 	beq.w	8002562 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	4b66      	ldr	r3, [pc, #408]	; (8002580 <HAL_GPIO_Init+0x324>)
 80023e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ea:	4a65      	ldr	r2, [pc, #404]	; (8002580 <HAL_GPIO_Init+0x324>)
 80023ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023f0:	6453      	str	r3, [r2, #68]	; 0x44
 80023f2:	4b63      	ldr	r3, [pc, #396]	; (8002580 <HAL_GPIO_Init+0x324>)
 80023f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023fe:	4a61      	ldr	r2, [pc, #388]	; (8002584 <HAL_GPIO_Init+0x328>)
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	089b      	lsrs	r3, r3, #2
 8002404:	3302      	adds	r3, #2
 8002406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800240a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	220f      	movs	r2, #15
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	43db      	mvns	r3, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4013      	ands	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a58      	ldr	r2, [pc, #352]	; (8002588 <HAL_GPIO_Init+0x32c>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d037      	beq.n	800249a <HAL_GPIO_Init+0x23e>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a57      	ldr	r2, [pc, #348]	; (800258c <HAL_GPIO_Init+0x330>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d031      	beq.n	8002496 <HAL_GPIO_Init+0x23a>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a56      	ldr	r2, [pc, #344]	; (8002590 <HAL_GPIO_Init+0x334>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d02b      	beq.n	8002492 <HAL_GPIO_Init+0x236>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a55      	ldr	r2, [pc, #340]	; (8002594 <HAL_GPIO_Init+0x338>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d025      	beq.n	800248e <HAL_GPIO_Init+0x232>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a54      	ldr	r2, [pc, #336]	; (8002598 <HAL_GPIO_Init+0x33c>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d01f      	beq.n	800248a <HAL_GPIO_Init+0x22e>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a53      	ldr	r2, [pc, #332]	; (800259c <HAL_GPIO_Init+0x340>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d019      	beq.n	8002486 <HAL_GPIO_Init+0x22a>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a52      	ldr	r2, [pc, #328]	; (80025a0 <HAL_GPIO_Init+0x344>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d013      	beq.n	8002482 <HAL_GPIO_Init+0x226>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a51      	ldr	r2, [pc, #324]	; (80025a4 <HAL_GPIO_Init+0x348>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d00d      	beq.n	800247e <HAL_GPIO_Init+0x222>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a50      	ldr	r2, [pc, #320]	; (80025a8 <HAL_GPIO_Init+0x34c>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d007      	beq.n	800247a <HAL_GPIO_Init+0x21e>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a4f      	ldr	r2, [pc, #316]	; (80025ac <HAL_GPIO_Init+0x350>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d101      	bne.n	8002476 <HAL_GPIO_Init+0x21a>
 8002472:	2309      	movs	r3, #9
 8002474:	e012      	b.n	800249c <HAL_GPIO_Init+0x240>
 8002476:	230a      	movs	r3, #10
 8002478:	e010      	b.n	800249c <HAL_GPIO_Init+0x240>
 800247a:	2308      	movs	r3, #8
 800247c:	e00e      	b.n	800249c <HAL_GPIO_Init+0x240>
 800247e:	2307      	movs	r3, #7
 8002480:	e00c      	b.n	800249c <HAL_GPIO_Init+0x240>
 8002482:	2306      	movs	r3, #6
 8002484:	e00a      	b.n	800249c <HAL_GPIO_Init+0x240>
 8002486:	2305      	movs	r3, #5
 8002488:	e008      	b.n	800249c <HAL_GPIO_Init+0x240>
 800248a:	2304      	movs	r3, #4
 800248c:	e006      	b.n	800249c <HAL_GPIO_Init+0x240>
 800248e:	2303      	movs	r3, #3
 8002490:	e004      	b.n	800249c <HAL_GPIO_Init+0x240>
 8002492:	2302      	movs	r3, #2
 8002494:	e002      	b.n	800249c <HAL_GPIO_Init+0x240>
 8002496:	2301      	movs	r3, #1
 8002498:	e000      	b.n	800249c <HAL_GPIO_Init+0x240>
 800249a:	2300      	movs	r3, #0
 800249c:	69fa      	ldr	r2, [r7, #28]
 800249e:	f002 0203 	and.w	r2, r2, #3
 80024a2:	0092      	lsls	r2, r2, #2
 80024a4:	4093      	lsls	r3, r2
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024ac:	4935      	ldr	r1, [pc, #212]	; (8002584 <HAL_GPIO_Init+0x328>)
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	089b      	lsrs	r3, r3, #2
 80024b2:	3302      	adds	r3, #2
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024ba:	4b3d      	ldr	r3, [pc, #244]	; (80025b0 <HAL_GPIO_Init+0x354>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	43db      	mvns	r3, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4013      	ands	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	4313      	orrs	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024de:	4a34      	ldr	r2, [pc, #208]	; (80025b0 <HAL_GPIO_Init+0x354>)
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80024e4:	4b32      	ldr	r3, [pc, #200]	; (80025b0 <HAL_GPIO_Init+0x354>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	43db      	mvns	r3, r3
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4013      	ands	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d003      	beq.n	8002508 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	4313      	orrs	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002508:	4a29      	ldr	r2, [pc, #164]	; (80025b0 <HAL_GPIO_Init+0x354>)
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800250e:	4b28      	ldr	r3, [pc, #160]	; (80025b0 <HAL_GPIO_Init+0x354>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	43db      	mvns	r3, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4013      	ands	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	4313      	orrs	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002532:	4a1f      	ldr	r2, [pc, #124]	; (80025b0 <HAL_GPIO_Init+0x354>)
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002538:	4b1d      	ldr	r3, [pc, #116]	; (80025b0 <HAL_GPIO_Init+0x354>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	43db      	mvns	r3, r3
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	4013      	ands	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d003      	beq.n	800255c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	4313      	orrs	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800255c:	4a14      	ldr	r2, [pc, #80]	; (80025b0 <HAL_GPIO_Init+0x354>)
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	3301      	adds	r3, #1
 8002566:	61fb      	str	r3, [r7, #28]
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	2b0f      	cmp	r3, #15
 800256c:	f67f ae84 	bls.w	8002278 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002570:	bf00      	nop
 8002572:	bf00      	nop
 8002574:	3724      	adds	r7, #36	; 0x24
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	40023800 	.word	0x40023800
 8002584:	40013800 	.word	0x40013800
 8002588:	40020000 	.word	0x40020000
 800258c:	40020400 	.word	0x40020400
 8002590:	40020800 	.word	0x40020800
 8002594:	40020c00 	.word	0x40020c00
 8002598:	40021000 	.word	0x40021000
 800259c:	40021400 	.word	0x40021400
 80025a0:	40021800 	.word	0x40021800
 80025a4:	40021c00 	.word	0x40021c00
 80025a8:	40022000 	.word	0x40022000
 80025ac:	40022400 	.word	0x40022400
 80025b0:	40013c00 	.word	0x40013c00

080025b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	460b      	mov	r3, r1
 80025be:	807b      	strh	r3, [r7, #2]
 80025c0:	4613      	mov	r3, r2
 80025c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025c4:	787b      	ldrb	r3, [r7, #1]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d003      	beq.n	80025d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025ca:	887a      	ldrh	r2, [r7, #2]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025d0:	e003      	b.n	80025da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025d2:	887b      	ldrh	r3, [r7, #2]
 80025d4:	041a      	lsls	r2, r3, #16
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	619a      	str	r2, [r3, #24]
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b085      	sub	sp, #20
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
 80025ee:	460b      	mov	r3, r1
 80025f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025f8:	887a      	ldrh	r2, [r7, #2]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	4013      	ands	r3, r2
 80025fe:	041a      	lsls	r2, r3, #16
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	43d9      	mvns	r1, r3
 8002604:	887b      	ldrh	r3, [r7, #2]
 8002606:	400b      	ands	r3, r1
 8002608:	431a      	orrs	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	619a      	str	r2, [r3, #24]
}
 800260e:	bf00      	nop
 8002610:	3714      	adds	r7, #20
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
	...

0800261c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	4603      	mov	r3, r0
 8002624:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002626:	4b08      	ldr	r3, [pc, #32]	; (8002648 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002628:	695a      	ldr	r2, [r3, #20]
 800262a:	88fb      	ldrh	r3, [r7, #6]
 800262c:	4013      	ands	r3, r2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d006      	beq.n	8002640 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002632:	4a05      	ldr	r2, [pc, #20]	; (8002648 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002634:	88fb      	ldrh	r3, [r7, #6]
 8002636:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002638:	88fb      	ldrh	r3, [r7, #6]
 800263a:	4618      	mov	r0, r3
 800263c:	f7fe fbca 	bl	8000dd4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002640:	bf00      	nop
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40013c00 	.word	0x40013c00

0800264c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e12b      	b.n	80028b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d106      	bne.n	8002678 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f7fe fc3a 	bl	8000eec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2224      	movs	r2, #36	; 0x24
 800267c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 0201 	bic.w	r2, r2, #1
 800268e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800269e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026b0:	f002 fb1c 	bl	8004cec <HAL_RCC_GetPCLK1Freq>
 80026b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	4a81      	ldr	r2, [pc, #516]	; (80028c0 <HAL_I2C_Init+0x274>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d807      	bhi.n	80026d0 <HAL_I2C_Init+0x84>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	4a80      	ldr	r2, [pc, #512]	; (80028c4 <HAL_I2C_Init+0x278>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	bf94      	ite	ls
 80026c8:	2301      	movls	r3, #1
 80026ca:	2300      	movhi	r3, #0
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	e006      	b.n	80026de <HAL_I2C_Init+0x92>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	4a7d      	ldr	r2, [pc, #500]	; (80028c8 <HAL_I2C_Init+0x27c>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	bf94      	ite	ls
 80026d8:	2301      	movls	r3, #1
 80026da:	2300      	movhi	r3, #0
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e0e7      	b.n	80028b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	4a78      	ldr	r2, [pc, #480]	; (80028cc <HAL_I2C_Init+0x280>)
 80026ea:	fba2 2303 	umull	r2, r3, r2, r3
 80026ee:	0c9b      	lsrs	r3, r3, #18
 80026f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68ba      	ldr	r2, [r7, #8]
 8002702:	430a      	orrs	r2, r1
 8002704:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	4a6a      	ldr	r2, [pc, #424]	; (80028c0 <HAL_I2C_Init+0x274>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d802      	bhi.n	8002720 <HAL_I2C_Init+0xd4>
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	3301      	adds	r3, #1
 800271e:	e009      	b.n	8002734 <HAL_I2C_Init+0xe8>
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002726:	fb02 f303 	mul.w	r3, r2, r3
 800272a:	4a69      	ldr	r2, [pc, #420]	; (80028d0 <HAL_I2C_Init+0x284>)
 800272c:	fba2 2303 	umull	r2, r3, r2, r3
 8002730:	099b      	lsrs	r3, r3, #6
 8002732:	3301      	adds	r3, #1
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6812      	ldr	r2, [r2, #0]
 8002738:	430b      	orrs	r3, r1
 800273a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002746:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	495c      	ldr	r1, [pc, #368]	; (80028c0 <HAL_I2C_Init+0x274>)
 8002750:	428b      	cmp	r3, r1
 8002752:	d819      	bhi.n	8002788 <HAL_I2C_Init+0x13c>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	1e59      	subs	r1, r3, #1
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002762:	1c59      	adds	r1, r3, #1
 8002764:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002768:	400b      	ands	r3, r1
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00a      	beq.n	8002784 <HAL_I2C_Init+0x138>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	1e59      	subs	r1, r3, #1
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	fbb1 f3f3 	udiv	r3, r1, r3
 800277c:	3301      	adds	r3, #1
 800277e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002782:	e051      	b.n	8002828 <HAL_I2C_Init+0x1dc>
 8002784:	2304      	movs	r3, #4
 8002786:	e04f      	b.n	8002828 <HAL_I2C_Init+0x1dc>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d111      	bne.n	80027b4 <HAL_I2C_Init+0x168>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	1e58      	subs	r0, r3, #1
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6859      	ldr	r1, [r3, #4]
 8002798:	460b      	mov	r3, r1
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	440b      	add	r3, r1
 800279e:	fbb0 f3f3 	udiv	r3, r0, r3
 80027a2:	3301      	adds	r3, #1
 80027a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	bf0c      	ite	eq
 80027ac:	2301      	moveq	r3, #1
 80027ae:	2300      	movne	r3, #0
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	e012      	b.n	80027da <HAL_I2C_Init+0x18e>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	1e58      	subs	r0, r3, #1
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6859      	ldr	r1, [r3, #4]
 80027bc:	460b      	mov	r3, r1
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	440b      	add	r3, r1
 80027c2:	0099      	lsls	r1, r3, #2
 80027c4:	440b      	add	r3, r1
 80027c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80027ca:	3301      	adds	r3, #1
 80027cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	bf0c      	ite	eq
 80027d4:	2301      	moveq	r3, #1
 80027d6:	2300      	movne	r3, #0
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <HAL_I2C_Init+0x196>
 80027de:	2301      	movs	r3, #1
 80027e0:	e022      	b.n	8002828 <HAL_I2C_Init+0x1dc>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d10e      	bne.n	8002808 <HAL_I2C_Init+0x1bc>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	1e58      	subs	r0, r3, #1
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6859      	ldr	r1, [r3, #4]
 80027f2:	460b      	mov	r3, r1
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	440b      	add	r3, r1
 80027f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80027fc:	3301      	adds	r3, #1
 80027fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002802:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002806:	e00f      	b.n	8002828 <HAL_I2C_Init+0x1dc>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	1e58      	subs	r0, r3, #1
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6859      	ldr	r1, [r3, #4]
 8002810:	460b      	mov	r3, r1
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	440b      	add	r3, r1
 8002816:	0099      	lsls	r1, r3, #2
 8002818:	440b      	add	r3, r1
 800281a:	fbb0 f3f3 	udiv	r3, r0, r3
 800281e:	3301      	adds	r3, #1
 8002820:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002824:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002828:	6879      	ldr	r1, [r7, #4]
 800282a:	6809      	ldr	r1, [r1, #0]
 800282c:	4313      	orrs	r3, r2
 800282e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	69da      	ldr	r2, [r3, #28]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	431a      	orrs	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	430a      	orrs	r2, r1
 800284a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002856:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	6911      	ldr	r1, [r2, #16]
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	68d2      	ldr	r2, [r2, #12]
 8002862:	4311      	orrs	r1, r2
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6812      	ldr	r2, [r2, #0]
 8002868:	430b      	orrs	r3, r1
 800286a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	695a      	ldr	r2, [r3, #20]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	431a      	orrs	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	430a      	orrs	r2, r1
 8002886:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f042 0201 	orr.w	r2, r2, #1
 8002896:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2220      	movs	r2, #32
 80028a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	000186a0 	.word	0x000186a0
 80028c4:	001e847f 	.word	0x001e847f
 80028c8:	003d08ff 	.word	0x003d08ff
 80028cc:	431bde83 	.word	0x431bde83
 80028d0:	10624dd3 	.word	0x10624dd3

080028d4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b088      	sub	sp, #32
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80028dc:	2300      	movs	r3, #0
 80028de:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ec:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028f4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028fc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80028fe:	7bfb      	ldrb	r3, [r7, #15]
 8002900:	2b10      	cmp	r3, #16
 8002902:	d003      	beq.n	800290c <HAL_I2C_EV_IRQHandler+0x38>
 8002904:	7bfb      	ldrb	r3, [r7, #15]
 8002906:	2b40      	cmp	r3, #64	; 0x40
 8002908:	f040 80c1 	bne.w	8002a8e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10d      	bne.n	8002942 <HAL_I2C_EV_IRQHandler+0x6e>
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800292c:	d003      	beq.n	8002936 <HAL_I2C_EV_IRQHandler+0x62>
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002934:	d101      	bne.n	800293a <HAL_I2C_EV_IRQHandler+0x66>
 8002936:	2301      	movs	r3, #1
 8002938:	e000      	b.n	800293c <HAL_I2C_EV_IRQHandler+0x68>
 800293a:	2300      	movs	r3, #0
 800293c:	2b01      	cmp	r3, #1
 800293e:	f000 8132 	beq.w	8002ba6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00c      	beq.n	8002966 <HAL_I2C_EV_IRQHandler+0x92>
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	0a5b      	lsrs	r3, r3, #9
 8002950:	f003 0301 	and.w	r3, r3, #1
 8002954:	2b00      	cmp	r3, #0
 8002956:	d006      	beq.n	8002966 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f001 fc71 	bl	8004240 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 fd79 	bl	8003456 <I2C_Master_SB>
 8002964:	e092      	b.n	8002a8c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	08db      	lsrs	r3, r3, #3
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b00      	cmp	r3, #0
 8002970:	d009      	beq.n	8002986 <HAL_I2C_EV_IRQHandler+0xb2>
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	0a5b      	lsrs	r3, r3, #9
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b00      	cmp	r3, #0
 800297c:	d003      	beq.n	8002986 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 fdef 	bl	8003562 <I2C_Master_ADD10>
 8002984:	e082      	b.n	8002a8c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	085b      	lsrs	r3, r3, #1
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b00      	cmp	r3, #0
 8002990:	d009      	beq.n	80029a6 <HAL_I2C_EV_IRQHandler+0xd2>
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	0a5b      	lsrs	r3, r3, #9
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 fe09 	bl	80035b6 <I2C_Master_ADDR>
 80029a4:	e072      	b.n	8002a8c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	089b      	lsrs	r3, r3, #2
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d03b      	beq.n	8002a2a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029c0:	f000 80f3 	beq.w	8002baa <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	09db      	lsrs	r3, r3, #7
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00f      	beq.n	80029f0 <HAL_I2C_EV_IRQHandler+0x11c>
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	0a9b      	lsrs	r3, r3, #10
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d009      	beq.n	80029f0 <HAL_I2C_EV_IRQHandler+0x11c>
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	089b      	lsrs	r3, r3, #2
 80029e0:	f003 0301 	and.w	r3, r3, #1
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d103      	bne.n	80029f0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 f9f3 	bl	8002dd4 <I2C_MasterTransmit_TXE>
 80029ee:	e04d      	b.n	8002a8c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	089b      	lsrs	r3, r3, #2
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f000 80d6 	beq.w	8002baa <HAL_I2C_EV_IRQHandler+0x2d6>
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	0a5b      	lsrs	r3, r3, #9
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f000 80cf 	beq.w	8002baa <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002a0c:	7bbb      	ldrb	r3, [r7, #14]
 8002a0e:	2b21      	cmp	r3, #33	; 0x21
 8002a10:	d103      	bne.n	8002a1a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 fa7a 	bl	8002f0c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a18:	e0c7      	b.n	8002baa <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002a1a:	7bfb      	ldrb	r3, [r7, #15]
 8002a1c:	2b40      	cmp	r3, #64	; 0x40
 8002a1e:	f040 80c4 	bne.w	8002baa <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 fae8 	bl	8002ff8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a28:	e0bf      	b.n	8002baa <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a38:	f000 80b7 	beq.w	8002baa <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	099b      	lsrs	r3, r3, #6
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00f      	beq.n	8002a68 <HAL_I2C_EV_IRQHandler+0x194>
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	0a9b      	lsrs	r3, r3, #10
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d009      	beq.n	8002a68 <HAL_I2C_EV_IRQHandler+0x194>
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	089b      	lsrs	r3, r3, #2
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d103      	bne.n	8002a68 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 fb5d 	bl	8003120 <I2C_MasterReceive_RXNE>
 8002a66:	e011      	b.n	8002a8c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	089b      	lsrs	r3, r3, #2
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	f000 809a 	beq.w	8002baa <HAL_I2C_EV_IRQHandler+0x2d6>
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	0a5b      	lsrs	r3, r3, #9
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f000 8093 	beq.w	8002baa <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 fbfc 	bl	8003282 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a8a:	e08e      	b.n	8002baa <HAL_I2C_EV_IRQHandler+0x2d6>
 8002a8c:	e08d      	b.n	8002baa <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d004      	beq.n	8002aa0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	695b      	ldr	r3, [r3, #20]
 8002a9c:	61fb      	str	r3, [r7, #28]
 8002a9e:	e007      	b.n	8002ab0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	085b      	lsrs	r3, r3, #1
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d012      	beq.n	8002ae2 <HAL_I2C_EV_IRQHandler+0x20e>
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	0a5b      	lsrs	r3, r3, #9
 8002ac0:	f003 0301 	and.w	r3, r3, #1
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00c      	beq.n	8002ae2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d003      	beq.n	8002ad8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002ad8:	69b9      	ldr	r1, [r7, #24]
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 ffba 	bl	8003a54 <I2C_Slave_ADDR>
 8002ae0:	e066      	b.n	8002bb0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	091b      	lsrs	r3, r3, #4
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d009      	beq.n	8002b02 <HAL_I2C_EV_IRQHandler+0x22e>
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	0a5b      	lsrs	r3, r3, #9
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 fff4 	bl	8003ae8 <I2C_Slave_STOPF>
 8002b00:	e056      	b.n	8002bb0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002b02:	7bbb      	ldrb	r3, [r7, #14]
 8002b04:	2b21      	cmp	r3, #33	; 0x21
 8002b06:	d002      	beq.n	8002b0e <HAL_I2C_EV_IRQHandler+0x23a>
 8002b08:	7bbb      	ldrb	r3, [r7, #14]
 8002b0a:	2b29      	cmp	r3, #41	; 0x29
 8002b0c:	d125      	bne.n	8002b5a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	09db      	lsrs	r3, r3, #7
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00f      	beq.n	8002b3a <HAL_I2C_EV_IRQHandler+0x266>
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	0a9b      	lsrs	r3, r3, #10
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d009      	beq.n	8002b3a <HAL_I2C_EV_IRQHandler+0x266>
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	089b      	lsrs	r3, r3, #2
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d103      	bne.n	8002b3a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 fed0 	bl	80038d8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b38:	e039      	b.n	8002bae <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	089b      	lsrs	r3, r3, #2
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d033      	beq.n	8002bae <HAL_I2C_EV_IRQHandler+0x2da>
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	0a5b      	lsrs	r3, r3, #9
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d02d      	beq.n	8002bae <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 fefd 	bl	8003952 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b58:	e029      	b.n	8002bae <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	099b      	lsrs	r3, r3, #6
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00f      	beq.n	8002b86 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	0a9b      	lsrs	r3, r3, #10
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d009      	beq.n	8002b86 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	089b      	lsrs	r3, r3, #2
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d103      	bne.n	8002b86 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 ff08 	bl	8003994 <I2C_SlaveReceive_RXNE>
 8002b84:	e014      	b.n	8002bb0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	089b      	lsrs	r3, r3, #2
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00e      	beq.n	8002bb0 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	0a5b      	lsrs	r3, r3, #9
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d008      	beq.n	8002bb0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 ff36 	bl	8003a10 <I2C_SlaveReceive_BTF>
 8002ba4:	e004      	b.n	8002bb0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002ba6:	bf00      	nop
 8002ba8:	e002      	b.n	8002bb0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002baa:	bf00      	nop
 8002bac:	e000      	b.n	8002bb0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002bae:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002bb0:	3720      	adds	r7, #32
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b08a      	sub	sp, #40	; 0x28
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bd8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002bda:	6a3b      	ldr	r3, [r7, #32]
 8002bdc:	0a1b      	lsrs	r3, r3, #8
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00e      	beq.n	8002c04 <HAL_I2C_ER_IRQHandler+0x4e>
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	0a1b      	lsrs	r3, r3, #8
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d008      	beq.n	8002c04 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf4:	f043 0301 	orr.w	r3, r3, #1
 8002bf8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002c02:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002c04:	6a3b      	ldr	r3, [r7, #32]
 8002c06:	0a5b      	lsrs	r3, r3, #9
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00e      	beq.n	8002c2e <HAL_I2C_ER_IRQHandler+0x78>
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	0a1b      	lsrs	r3, r3, #8
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d008      	beq.n	8002c2e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1e:	f043 0302 	orr.w	r3, r3, #2
 8002c22:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002c2c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002c2e:	6a3b      	ldr	r3, [r7, #32]
 8002c30:	0a9b      	lsrs	r3, r3, #10
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d03f      	beq.n	8002cba <HAL_I2C_ER_IRQHandler+0x104>
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	0a1b      	lsrs	r3, r3, #8
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d039      	beq.n	8002cba <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8002c46:	7efb      	ldrb	r3, [r7, #27]
 8002c48:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c58:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002c60:	7ebb      	ldrb	r3, [r7, #26]
 8002c62:	2b20      	cmp	r3, #32
 8002c64:	d112      	bne.n	8002c8c <HAL_I2C_ER_IRQHandler+0xd6>
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d10f      	bne.n	8002c8c <HAL_I2C_ER_IRQHandler+0xd6>
 8002c6c:	7cfb      	ldrb	r3, [r7, #19]
 8002c6e:	2b21      	cmp	r3, #33	; 0x21
 8002c70:	d008      	beq.n	8002c84 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002c72:	7cfb      	ldrb	r3, [r7, #19]
 8002c74:	2b29      	cmp	r3, #41	; 0x29
 8002c76:	d005      	beq.n	8002c84 <HAL_I2C_ER_IRQHandler+0xce>
 8002c78:	7cfb      	ldrb	r3, [r7, #19]
 8002c7a:	2b28      	cmp	r3, #40	; 0x28
 8002c7c:	d106      	bne.n	8002c8c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2b21      	cmp	r3, #33	; 0x21
 8002c82:	d103      	bne.n	8002c8c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f001 f85f 	bl	8003d48 <I2C_Slave_AF>
 8002c8a:	e016      	b.n	8002cba <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c94:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c98:	f043 0304 	orr.w	r3, r3, #4
 8002c9c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002c9e:	7efb      	ldrb	r3, [r7, #27]
 8002ca0:	2b10      	cmp	r3, #16
 8002ca2:	d002      	beq.n	8002caa <HAL_I2C_ER_IRQHandler+0xf4>
 8002ca4:	7efb      	ldrb	r3, [r7, #27]
 8002ca6:	2b40      	cmp	r3, #64	; 0x40
 8002ca8:	d107      	bne.n	8002cba <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cb8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002cba:	6a3b      	ldr	r3, [r7, #32]
 8002cbc:	0adb      	lsrs	r3, r3, #11
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00e      	beq.n	8002ce4 <HAL_I2C_ER_IRQHandler+0x12e>
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	0a1b      	lsrs	r3, r3, #8
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d008      	beq.n	8002ce4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	f043 0308 	orr.w	r3, r3, #8
 8002cd8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002ce2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d008      	beq.n	8002cfc <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f001 f896 	bl	8003e28 <I2C_ITError>
  }
}
 8002cfc:	bf00      	nop
 8002cfe:	3728      	adds	r7, #40	; 0x28
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002d20:	bf00      	nop
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	70fb      	strb	r3, [r7, #3]
 8002d60:	4613      	mov	r3, r2
 8002d62:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dea:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d150      	bne.n	8002e9c <I2C_MasterTransmit_TXE+0xc8>
 8002dfa:	7bfb      	ldrb	r3, [r7, #15]
 8002dfc:	2b21      	cmp	r3, #33	; 0x21
 8002dfe:	d14d      	bne.n	8002e9c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	2b08      	cmp	r3, #8
 8002e04:	d01d      	beq.n	8002e42 <I2C_MasterTransmit_TXE+0x6e>
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	2b20      	cmp	r3, #32
 8002e0a:	d01a      	beq.n	8002e42 <I2C_MasterTransmit_TXE+0x6e>
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e12:	d016      	beq.n	8002e42 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	685a      	ldr	r2, [r3, #4]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e22:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2211      	movs	r2, #17
 8002e28:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2220      	movs	r2, #32
 8002e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f7ff ff62 	bl	8002d04 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e40:	e060      	b.n	8002f04 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e50:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e60:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	2b40      	cmp	r3, #64	; 0x40
 8002e7a:	d107      	bne.n	8002e8c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f7ff ff7d 	bl	8002d84 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e8a:	e03b      	b.n	8002f04 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f7ff ff35 	bl	8002d04 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e9a:	e033      	b.n	8002f04 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002e9c:	7bfb      	ldrb	r3, [r7, #15]
 8002e9e:	2b21      	cmp	r3, #33	; 0x21
 8002ea0:	d005      	beq.n	8002eae <I2C_MasterTransmit_TXE+0xda>
 8002ea2:	7bbb      	ldrb	r3, [r7, #14]
 8002ea4:	2b40      	cmp	r3, #64	; 0x40
 8002ea6:	d12d      	bne.n	8002f04 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002ea8:	7bfb      	ldrb	r3, [r7, #15]
 8002eaa:	2b22      	cmp	r3, #34	; 0x22
 8002eac:	d12a      	bne.n	8002f04 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d108      	bne.n	8002eca <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	685a      	ldr	r2, [r3, #4]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ec6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002ec8:	e01c      	b.n	8002f04 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b40      	cmp	r3, #64	; 0x40
 8002ed4:	d103      	bne.n	8002ede <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 f88e 	bl	8002ff8 <I2C_MemoryTransmit_TXE_BTF>
}
 8002edc:	e012      	b.n	8002f04 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee2:	781a      	ldrb	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eee:	1c5a      	adds	r2, r3, #1
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	3b01      	subs	r3, #1
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002f02:	e7ff      	b.n	8002f04 <I2C_MasterTransmit_TXE+0x130>
 8002f04:	bf00      	nop
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f18:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b21      	cmp	r3, #33	; 0x21
 8002f24:	d164      	bne.n	8002ff0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d012      	beq.n	8002f56 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f34:	781a      	ldrb	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f40:	1c5a      	adds	r2, r3, #1
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002f54:	e04c      	b.n	8002ff0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2b08      	cmp	r3, #8
 8002f5a:	d01d      	beq.n	8002f98 <I2C_MasterTransmit_BTF+0x8c>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2b20      	cmp	r3, #32
 8002f60:	d01a      	beq.n	8002f98 <I2C_MasterTransmit_BTF+0x8c>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f68:	d016      	beq.n	8002f98 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	685a      	ldr	r2, [r3, #4]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f78:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2211      	movs	r2, #17
 8002f7e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2220      	movs	r2, #32
 8002f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f7ff feb7 	bl	8002d04 <HAL_I2C_MasterTxCpltCallback>
}
 8002f96:	e02b      	b.n	8002ff0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002fa6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fb6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2220      	movs	r2, #32
 8002fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b40      	cmp	r3, #64	; 0x40
 8002fd0:	d107      	bne.n	8002fe2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7ff fed2 	bl	8002d84 <HAL_I2C_MemTxCpltCallback>
}
 8002fe0:	e006      	b.n	8002ff0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7ff fe8a 	bl	8002d04 <HAL_I2C_MasterTxCpltCallback>
}
 8002ff0:	bf00      	nop
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003006:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800300c:	2b00      	cmp	r3, #0
 800300e:	d11d      	bne.n	800304c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003014:	2b01      	cmp	r3, #1
 8003016:	d10b      	bne.n	8003030 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800301c:	b2da      	uxtb	r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003028:	1c9a      	adds	r2, r3, #2
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800302e:	e073      	b.n	8003118 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003034:	b29b      	uxth	r3, r3
 8003036:	121b      	asrs	r3, r3, #8
 8003038:	b2da      	uxtb	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003044:	1c5a      	adds	r2, r3, #1
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	651a      	str	r2, [r3, #80]	; 0x50
}
 800304a:	e065      	b.n	8003118 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003050:	2b01      	cmp	r3, #1
 8003052:	d10b      	bne.n	800306c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003058:	b2da      	uxtb	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003064:	1c5a      	adds	r2, r3, #1
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	651a      	str	r2, [r3, #80]	; 0x50
}
 800306a:	e055      	b.n	8003118 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003070:	2b02      	cmp	r3, #2
 8003072:	d151      	bne.n	8003118 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003074:	7bfb      	ldrb	r3, [r7, #15]
 8003076:	2b22      	cmp	r3, #34	; 0x22
 8003078:	d10d      	bne.n	8003096 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003088:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800308e:	1c5a      	adds	r2, r3, #1
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003094:	e040      	b.n	8003118 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800309a:	b29b      	uxth	r3, r3
 800309c:	2b00      	cmp	r3, #0
 800309e:	d015      	beq.n	80030cc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80030a0:	7bfb      	ldrb	r3, [r7, #15]
 80030a2:	2b21      	cmp	r3, #33	; 0x21
 80030a4:	d112      	bne.n	80030cc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030aa:	781a      	ldrb	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b6:	1c5a      	adds	r2, r3, #1
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	3b01      	subs	r3, #1
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80030ca:	e025      	b.n	8003118 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d120      	bne.n	8003118 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80030d6:	7bfb      	ldrb	r3, [r7, #15]
 80030d8:	2b21      	cmp	r3, #33	; 0x21
 80030da:	d11d      	bne.n	8003118 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685a      	ldr	r2, [r3, #4]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80030ea:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030fa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2220      	movs	r2, #32
 8003106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f7ff fe36 	bl	8002d84 <HAL_I2C_MemTxCpltCallback>
}
 8003118:	bf00      	nop
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2b22      	cmp	r3, #34	; 0x22
 8003132:	f040 80a2 	bne.w	800327a <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800313a:	b29b      	uxth	r3, r3
 800313c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2b03      	cmp	r3, #3
 8003142:	d921      	bls.n	8003188 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	691a      	ldr	r2, [r3, #16]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	b2d2      	uxtb	r2, r2
 8003150:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003156:	1c5a      	adds	r2, r3, #1
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003160:	b29b      	uxth	r3, r3
 8003162:	3b01      	subs	r3, #1
 8003164:	b29a      	uxth	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800316e:	b29b      	uxth	r3, r3
 8003170:	2b03      	cmp	r3, #3
 8003172:	f040 8082 	bne.w	800327a <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	685a      	ldr	r2, [r3, #4]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003184:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003186:	e078      	b.n	800327a <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318c:	2b02      	cmp	r3, #2
 800318e:	d074      	beq.n	800327a <I2C_MasterReceive_RXNE+0x15a>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d002      	beq.n	800319c <I2C_MasterReceive_RXNE+0x7c>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d16e      	bne.n	800327a <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f001 f81d 	bl	80041dc <I2C_WaitOnSTOPRequestThroughIT>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d142      	bne.n	800322e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031b6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	685a      	ldr	r2, [r3, #4]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80031c6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	691a      	ldr	r2, [r3, #16]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031da:	1c5a      	adds	r2, r3, #1
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	3b01      	subs	r3, #1
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2220      	movs	r2, #32
 80031f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b40      	cmp	r3, #64	; 0x40
 8003200:	d10a      	bne.n	8003218 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f7ff fdc1 	bl	8002d98 <HAL_I2C_MemRxCpltCallback>
}
 8003216:	e030      	b.n	800327a <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2212      	movs	r2, #18
 8003224:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f7ff fd76 	bl	8002d18 <HAL_I2C_MasterRxCpltCallback>
}
 800322c:	e025      	b.n	800327a <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	685a      	ldr	r2, [r3, #4]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800323c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	691a      	ldr	r2, [r3, #16]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003248:	b2d2      	uxtb	r2, r2
 800324a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003250:	1c5a      	adds	r2, r3, #1
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800325a:	b29b      	uxth	r3, r3
 800325c:	3b01      	subs	r3, #1
 800325e:	b29a      	uxth	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2220      	movs	r2, #32
 8003268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f7ff fd99 	bl	8002dac <HAL_I2C_ErrorCallback>
}
 800327a:	bf00      	nop
 800327c:	3710      	adds	r7, #16
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b084      	sub	sp, #16
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003294:	b29b      	uxth	r3, r3
 8003296:	2b04      	cmp	r3, #4
 8003298:	d11b      	bne.n	80032d2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	685a      	ldr	r2, [r3, #4]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032a8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	691a      	ldr	r2, [r3, #16]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b4:	b2d2      	uxtb	r2, r2
 80032b6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032bc:	1c5a      	adds	r2, r3, #1
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	3b01      	subs	r3, #1
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80032d0:	e0bd      	b.n	800344e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	2b03      	cmp	r3, #3
 80032da:	d129      	bne.n	8003330 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	685a      	ldr	r2, [r3, #4]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032ea:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	d00a      	beq.n	8003308 <I2C_MasterReceive_BTF+0x86>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d007      	beq.n	8003308 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003306:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	691a      	ldr	r2, [r3, #16]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003312:	b2d2      	uxtb	r2, r2
 8003314:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331a:	1c5a      	adds	r2, r3, #1
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003324:	b29b      	uxth	r3, r3
 8003326:	3b01      	subs	r3, #1
 8003328:	b29a      	uxth	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800332e:	e08e      	b.n	800344e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003334:	b29b      	uxth	r3, r3
 8003336:	2b02      	cmp	r3, #2
 8003338:	d176      	bne.n	8003428 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d002      	beq.n	8003346 <I2C_MasterReceive_BTF+0xc4>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2b10      	cmp	r3, #16
 8003344:	d108      	bne.n	8003358 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003354:	601a      	str	r2, [r3, #0]
 8003356:	e019      	b.n	800338c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2b04      	cmp	r3, #4
 800335c:	d002      	beq.n	8003364 <I2C_MasterReceive_BTF+0xe2>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2b02      	cmp	r3, #2
 8003362:	d108      	bne.n	8003376 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003372:	601a      	str	r2, [r3, #0]
 8003374:	e00a      	b.n	800338c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2b10      	cmp	r3, #16
 800337a:	d007      	beq.n	800338c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800338a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	691a      	ldr	r2, [r3, #16]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003396:	b2d2      	uxtb	r2, r2
 8003398:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339e:	1c5a      	adds	r2, r3, #1
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	3b01      	subs	r3, #1
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	691a      	ldr	r2, [r3, #16]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033bc:	b2d2      	uxtb	r2, r2
 80033be:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c4:	1c5a      	adds	r2, r3, #1
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	3b01      	subs	r3, #1
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80033e6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2220      	movs	r2, #32
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2b40      	cmp	r3, #64	; 0x40
 80033fa:	d10a      	bne.n	8003412 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f7ff fcc4 	bl	8002d98 <HAL_I2C_MemRxCpltCallback>
}
 8003410:	e01d      	b.n	800344e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2212      	movs	r2, #18
 800341e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f7ff fc79 	bl	8002d18 <HAL_I2C_MasterRxCpltCallback>
}
 8003426:	e012      	b.n	800344e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	691a      	ldr	r2, [r3, #16]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003432:	b2d2      	uxtb	r2, r2
 8003434:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343a:	1c5a      	adds	r2, r3, #1
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003444:	b29b      	uxth	r3, r3
 8003446:	3b01      	subs	r3, #1
 8003448:	b29a      	uxth	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800344e:	bf00      	nop
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003456:	b480      	push	{r7}
 8003458:	b083      	sub	sp, #12
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b40      	cmp	r3, #64	; 0x40
 8003468:	d117      	bne.n	800349a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800346e:	2b00      	cmp	r3, #0
 8003470:	d109      	bne.n	8003486 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003476:	b2db      	uxtb	r3, r3
 8003478:	461a      	mov	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003482:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003484:	e067      	b.n	8003556 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348a:	b2db      	uxtb	r3, r3
 800348c:	f043 0301 	orr.w	r3, r3, #1
 8003490:	b2da      	uxtb	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	611a      	str	r2, [r3, #16]
}
 8003498:	e05d      	b.n	8003556 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034a2:	d133      	bne.n	800350c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b21      	cmp	r3, #33	; 0x21
 80034ae:	d109      	bne.n	80034c4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	461a      	mov	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80034c0:	611a      	str	r2, [r3, #16]
 80034c2:	e008      	b.n	80034d6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	f043 0301 	orr.w	r3, r3, #1
 80034ce:	b2da      	uxtb	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d004      	beq.n	80034e8 <I2C_Master_SB+0x92>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d108      	bne.n	80034fa <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d032      	beq.n	8003556 <I2C_Master_SB+0x100>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d02d      	beq.n	8003556 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003508:	605a      	str	r2, [r3, #4]
}
 800350a:	e024      	b.n	8003556 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003510:	2b00      	cmp	r3, #0
 8003512:	d10e      	bne.n	8003532 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003518:	b29b      	uxth	r3, r3
 800351a:	11db      	asrs	r3, r3, #7
 800351c:	b2db      	uxtb	r3, r3
 800351e:	f003 0306 	and.w	r3, r3, #6
 8003522:	b2db      	uxtb	r3, r3
 8003524:	f063 030f 	orn	r3, r3, #15
 8003528:	b2da      	uxtb	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	611a      	str	r2, [r3, #16]
}
 8003530:	e011      	b.n	8003556 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003536:	2b01      	cmp	r3, #1
 8003538:	d10d      	bne.n	8003556 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353e:	b29b      	uxth	r3, r3
 8003540:	11db      	asrs	r3, r3, #7
 8003542:	b2db      	uxtb	r3, r3
 8003544:	f003 0306 	and.w	r3, r3, #6
 8003548:	b2db      	uxtb	r3, r3
 800354a:	f063 030e 	orn	r3, r3, #14
 800354e:	b2da      	uxtb	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	611a      	str	r2, [r3, #16]
}
 8003556:	bf00      	nop
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr

08003562 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003562:	b480      	push	{r7}
 8003564:	b083      	sub	sp, #12
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356e:	b2da      	uxtb	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800357a:	2b00      	cmp	r3, #0
 800357c:	d004      	beq.n	8003588 <I2C_Master_ADD10+0x26>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003584:	2b00      	cmp	r3, #0
 8003586:	d108      	bne.n	800359a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00c      	beq.n	80035aa <I2C_Master_ADD10+0x48>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003596:	2b00      	cmp	r3, #0
 8003598:	d007      	beq.n	80035aa <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035a8:	605a      	str	r2, [r3, #4]
  }
}
 80035aa:	bf00      	nop
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr

080035b6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80035b6:	b480      	push	{r7}
 80035b8:	b091      	sub	sp, #68	; 0x44
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035cc:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b22      	cmp	r3, #34	; 0x22
 80035de:	f040 8169 	bne.w	80038b4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10f      	bne.n	800360a <I2C_Master_ADDR+0x54>
 80035ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80035ee:	2b40      	cmp	r3, #64	; 0x40
 80035f0:	d10b      	bne.n	800360a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035f2:	2300      	movs	r3, #0
 80035f4:	633b      	str	r3, [r7, #48]	; 0x30
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	633b      	str	r3, [r7, #48]	; 0x30
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	633b      	str	r3, [r7, #48]	; 0x30
 8003606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003608:	e160      	b.n	80038cc <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800360e:	2b00      	cmp	r3, #0
 8003610:	d11d      	bne.n	800364e <I2C_Master_ADDR+0x98>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800361a:	d118      	bne.n	800364e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800361c:	2300      	movs	r3, #0
 800361e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003630:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003640:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003646:	1c5a      	adds	r2, r3, #1
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	651a      	str	r2, [r3, #80]	; 0x50
 800364c:	e13e      	b.n	80038cc <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003652:	b29b      	uxth	r3, r3
 8003654:	2b00      	cmp	r3, #0
 8003656:	d113      	bne.n	8003680 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003658:	2300      	movs	r3, #0
 800365a:	62bb      	str	r3, [r7, #40]	; 0x28
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	62bb      	str	r3, [r7, #40]	; 0x28
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	62bb      	str	r3, [r7, #40]	; 0x28
 800366c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800367c:	601a      	str	r2, [r3, #0]
 800367e:	e115      	b.n	80038ac <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003684:	b29b      	uxth	r3, r3
 8003686:	2b01      	cmp	r3, #1
 8003688:	f040 808a 	bne.w	80037a0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800368c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800368e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003692:	d137      	bne.n	8003704 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036a2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036b2:	d113      	bne.n	80036dc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036c2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036c4:	2300      	movs	r3, #0
 80036c6:	627b      	str	r3, [r7, #36]	; 0x24
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	627b      	str	r3, [r7, #36]	; 0x24
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	627b      	str	r3, [r7, #36]	; 0x24
 80036d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036da:	e0e7      	b.n	80038ac <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036dc:	2300      	movs	r3, #0
 80036de:	623b      	str	r3, [r7, #32]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	623b      	str	r3, [r7, #32]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	623b      	str	r3, [r7, #32]
 80036f0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	e0d3      	b.n	80038ac <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003706:	2b08      	cmp	r3, #8
 8003708:	d02e      	beq.n	8003768 <I2C_Master_ADDR+0x1b2>
 800370a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800370c:	2b20      	cmp	r3, #32
 800370e:	d02b      	beq.n	8003768 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003712:	2b12      	cmp	r3, #18
 8003714:	d102      	bne.n	800371c <I2C_Master_ADDR+0x166>
 8003716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003718:	2b01      	cmp	r3, #1
 800371a:	d125      	bne.n	8003768 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800371c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800371e:	2b04      	cmp	r3, #4
 8003720:	d00e      	beq.n	8003740 <I2C_Master_ADDR+0x18a>
 8003722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003724:	2b02      	cmp	r3, #2
 8003726:	d00b      	beq.n	8003740 <I2C_Master_ADDR+0x18a>
 8003728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800372a:	2b10      	cmp	r3, #16
 800372c:	d008      	beq.n	8003740 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800373c:	601a      	str	r2, [r3, #0]
 800373e:	e007      	b.n	8003750 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800374e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003750:	2300      	movs	r3, #0
 8003752:	61fb      	str	r3, [r7, #28]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	61fb      	str	r3, [r7, #28]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	61fb      	str	r3, [r7, #28]
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	e0a1      	b.n	80038ac <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003776:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003778:	2300      	movs	r3, #0
 800377a:	61bb      	str	r3, [r7, #24]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	61bb      	str	r3, [r7, #24]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	61bb      	str	r3, [r7, #24]
 800378c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800379c:	601a      	str	r2, [r3, #0]
 800379e:	e085      	b.n	80038ac <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d14d      	bne.n	8003846 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80037aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ac:	2b04      	cmp	r3, #4
 80037ae:	d016      	beq.n	80037de <I2C_Master_ADDR+0x228>
 80037b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d013      	beq.n	80037de <I2C_Master_ADDR+0x228>
 80037b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b8:	2b10      	cmp	r3, #16
 80037ba:	d010      	beq.n	80037de <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037ca:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037da:	601a      	str	r2, [r3, #0]
 80037dc:	e007      	b.n	80037ee <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037ec:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037fc:	d117      	bne.n	800382e <I2C_Master_ADDR+0x278>
 80037fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003800:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003804:	d00b      	beq.n	800381e <I2C_Master_ADDR+0x268>
 8003806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003808:	2b01      	cmp	r3, #1
 800380a:	d008      	beq.n	800381e <I2C_Master_ADDR+0x268>
 800380c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800380e:	2b08      	cmp	r3, #8
 8003810:	d005      	beq.n	800381e <I2C_Master_ADDR+0x268>
 8003812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003814:	2b10      	cmp	r3, #16
 8003816:	d002      	beq.n	800381e <I2C_Master_ADDR+0x268>
 8003818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800381a:	2b20      	cmp	r3, #32
 800381c:	d107      	bne.n	800382e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	685a      	ldr	r2, [r3, #4]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800382c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800382e:	2300      	movs	r3, #0
 8003830:	617b      	str	r3, [r7, #20]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	695b      	ldr	r3, [r3, #20]
 8003838:	617b      	str	r3, [r7, #20]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	617b      	str	r3, [r7, #20]
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	e032      	b.n	80038ac <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003854:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003860:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003864:	d117      	bne.n	8003896 <I2C_Master_ADDR+0x2e0>
 8003866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003868:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800386c:	d00b      	beq.n	8003886 <I2C_Master_ADDR+0x2d0>
 800386e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003870:	2b01      	cmp	r3, #1
 8003872:	d008      	beq.n	8003886 <I2C_Master_ADDR+0x2d0>
 8003874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003876:	2b08      	cmp	r3, #8
 8003878:	d005      	beq.n	8003886 <I2C_Master_ADDR+0x2d0>
 800387a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800387c:	2b10      	cmp	r3, #16
 800387e:	d002      	beq.n	8003886 <I2C_Master_ADDR+0x2d0>
 8003880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003882:	2b20      	cmp	r3, #32
 8003884:	d107      	bne.n	8003896 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	685a      	ldr	r2, [r3, #4]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003894:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003896:	2300      	movs	r3, #0
 8003898:	613b      	str	r3, [r7, #16]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	613b      	str	r3, [r7, #16]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	613b      	str	r3, [r7, #16]
 80038aa:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80038b2:	e00b      	b.n	80038cc <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038b4:	2300      	movs	r3, #0
 80038b6:	60fb      	str	r3, [r7, #12]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	60fb      	str	r3, [r7, #12]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	60fb      	str	r3, [r7, #12]
 80038c8:	68fb      	ldr	r3, [r7, #12]
}
 80038ca:	e7ff      	b.n	80038cc <I2C_Master_ADDR+0x316>
 80038cc:	bf00      	nop
 80038ce:	3744      	adds	r7, #68	; 0x44
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038e6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d02b      	beq.n	800394a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f6:	781a      	ldrb	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003902:	1c5a      	adds	r2, r3, #1
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800390c:	b29b      	uxth	r3, r3
 800390e:	3b01      	subs	r3, #1
 8003910:	b29a      	uxth	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391a:	b29b      	uxth	r3, r3
 800391c:	2b00      	cmp	r3, #0
 800391e:	d114      	bne.n	800394a <I2C_SlaveTransmit_TXE+0x72>
 8003920:	7bfb      	ldrb	r3, [r7, #15]
 8003922:	2b29      	cmp	r3, #41	; 0x29
 8003924:	d111      	bne.n	800394a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	685a      	ldr	r2, [r3, #4]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003934:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2221      	movs	r2, #33	; 0x21
 800393a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2228      	movs	r2, #40	; 0x28
 8003940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f7ff f9f1 	bl	8002d2c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800394a:	bf00      	nop
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003952:	b480      	push	{r7}
 8003954:	b083      	sub	sp, #12
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800395e:	b29b      	uxth	r3, r3
 8003960:	2b00      	cmp	r3, #0
 8003962:	d011      	beq.n	8003988 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003968:	781a      	ldrb	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	1c5a      	adds	r2, r3, #1
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800397e:	b29b      	uxth	r3, r3
 8003980:	3b01      	subs	r3, #1
 8003982:	b29a      	uxth	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039a2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d02c      	beq.n	8003a08 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	691a      	ldr	r2, [r3, #16]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	b2d2      	uxtb	r2, r2
 80039ba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c0:	1c5a      	adds	r2, r3, #1
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	3b01      	subs	r3, #1
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d8:	b29b      	uxth	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d114      	bne.n	8003a08 <I2C_SlaveReceive_RXNE+0x74>
 80039de:	7bfb      	ldrb	r3, [r7, #15]
 80039e0:	2b2a      	cmp	r3, #42	; 0x2a
 80039e2:	d111      	bne.n	8003a08 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039f2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2222      	movs	r2, #34	; 0x22
 80039f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2228      	movs	r2, #40	; 0x28
 80039fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f7ff f99c 	bl	8002d40 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003a08:	bf00      	nop
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d012      	beq.n	8003a48 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	691a      	ldr	r2, [r3, #16]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2c:	b2d2      	uxtb	r2, r2
 8003a2e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a34:	1c5a      	adds	r2, r3, #1
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	3b01      	subs	r3, #1
 8003a42:	b29a      	uxth	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003a6e:	2b28      	cmp	r3, #40	; 0x28
 8003a70:	d127      	bne.n	8003ac2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	685a      	ldr	r2, [r3, #4]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a80:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	089b      	lsrs	r3, r3, #2
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	09db      	lsrs	r3, r3, #7
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d103      	bne.n	8003aa6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	81bb      	strh	r3, [r7, #12]
 8003aa4:	e002      	b.n	8003aac <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003ab4:	89ba      	ldrh	r2, [r7, #12]
 8003ab6:	7bfb      	ldrb	r3, [r7, #15]
 8003ab8:	4619      	mov	r1, r3
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f7ff f94a 	bl	8002d54 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003ac0:	e00e      	b.n	8003ae0 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	60bb      	str	r3, [r7, #8]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	695b      	ldr	r3, [r3, #20]
 8003acc:	60bb      	str	r3, [r7, #8]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	60bb      	str	r3, [r7, #8]
 8003ad6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003ae0:	bf00      	nop
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003af6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b06:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003b08:	2300      	movs	r3, #0
 8003b0a:	60bb      	str	r3, [r7, #8]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	60bb      	str	r3, [r7, #8]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f042 0201 	orr.w	r2, r2, #1
 8003b22:	601a      	str	r2, [r3, #0]
 8003b24:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b34:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b44:	d172      	bne.n	8003c2c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003b46:	7bfb      	ldrb	r3, [r7, #15]
 8003b48:	2b22      	cmp	r3, #34	; 0x22
 8003b4a:	d002      	beq.n	8003b52 <I2C_Slave_STOPF+0x6a>
 8003b4c:	7bfb      	ldrb	r3, [r7, #15]
 8003b4e:	2b2a      	cmp	r3, #42	; 0x2a
 8003b50:	d135      	bne.n	8003bbe <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d005      	beq.n	8003b76 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	f043 0204 	orr.w	r2, r3, #4
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	685a      	ldr	r2, [r3, #4]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b84:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7fe fa78 	bl	8002080 <HAL_DMA_GetState>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d049      	beq.n	8003c2a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9a:	4a69      	ldr	r2, [pc, #420]	; (8003d40 <I2C_Slave_STOPF+0x258>)
 8003b9c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7fe f8c0 	bl	8001d28 <HAL_DMA_Abort_IT>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d03d      	beq.n	8003c2a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003bb8:	4610      	mov	r0, r2
 8003bba:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003bbc:	e035      	b.n	8003c2a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	b29a      	uxth	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d005      	beq.n	8003be2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	f043 0204 	orr.w	r2, r3, #4
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	685a      	ldr	r2, [r3, #4]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bf0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7fe fa42 	bl	8002080 <HAL_DMA_GetState>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d014      	beq.n	8003c2c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c06:	4a4e      	ldr	r2, [pc, #312]	; (8003d40 <I2C_Slave_STOPF+0x258>)
 8003c08:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7fe f88a 	bl	8001d28 <HAL_DMA_Abort_IT>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d008      	beq.n	8003c2c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c24:	4610      	mov	r0, r2
 8003c26:	4798      	blx	r3
 8003c28:	e000      	b.n	8003c2c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003c2a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d03e      	beq.n	8003cb4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	695b      	ldr	r3, [r3, #20]
 8003c3c:	f003 0304 	and.w	r3, r3, #4
 8003c40:	2b04      	cmp	r3, #4
 8003c42:	d112      	bne.n	8003c6a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	691a      	ldr	r2, [r3, #16]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4e:	b2d2      	uxtb	r2, r2
 8003c50:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c56:	1c5a      	adds	r2, r3, #1
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	3b01      	subs	r3, #1
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	695b      	ldr	r3, [r3, #20]
 8003c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c74:	2b40      	cmp	r3, #64	; 0x40
 8003c76:	d112      	bne.n	8003c9e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	691a      	ldr	r2, [r3, #16]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c82:	b2d2      	uxtb	r2, r2
 8003c84:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8a:	1c5a      	adds	r2, r3, #1
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	3b01      	subs	r3, #1
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d005      	beq.n	8003cb4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cac:	f043 0204 	orr.w	r2, r3, #4
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d003      	beq.n	8003cc4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 f8b3 	bl	8003e28 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003cc2:	e039      	b.n	8003d38 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003cc4:	7bfb      	ldrb	r3, [r7, #15]
 8003cc6:	2b2a      	cmp	r3, #42	; 0x2a
 8003cc8:	d109      	bne.n	8003cde <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2228      	movs	r2, #40	; 0x28
 8003cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f7ff f831 	bl	8002d40 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	2b28      	cmp	r3, #40	; 0x28
 8003ce8:	d111      	bne.n	8003d0e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a15      	ldr	r2, [pc, #84]	; (8003d44 <I2C_Slave_STOPF+0x25c>)
 8003cee:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2220      	movs	r2, #32
 8003cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f7ff f832 	bl	8002d70 <HAL_I2C_ListenCpltCallback>
}
 8003d0c:	e014      	b.n	8003d38 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d12:	2b22      	cmp	r3, #34	; 0x22
 8003d14:	d002      	beq.n	8003d1c <I2C_Slave_STOPF+0x234>
 8003d16:	7bfb      	ldrb	r3, [r7, #15]
 8003d18:	2b22      	cmp	r3, #34	; 0x22
 8003d1a:	d10d      	bne.n	8003d38 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2220      	movs	r2, #32
 8003d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7ff f804 	bl	8002d40 <HAL_I2C_SlaveRxCpltCallback>
}
 8003d38:	bf00      	nop
 8003d3a:	3710      	adds	r7, #16
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	0800408d 	.word	0x0800408d
 8003d44:	ffff0000 	.word	0xffff0000

08003d48 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d56:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	2b08      	cmp	r3, #8
 8003d62:	d002      	beq.n	8003d6a <I2C_Slave_AF+0x22>
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	2b20      	cmp	r3, #32
 8003d68:	d129      	bne.n	8003dbe <I2C_Slave_AF+0x76>
 8003d6a:	7bfb      	ldrb	r3, [r7, #15]
 8003d6c:	2b28      	cmp	r3, #40	; 0x28
 8003d6e:	d126      	bne.n	8003dbe <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a2c      	ldr	r2, [pc, #176]	; (8003e24 <I2C_Slave_AF+0xdc>)
 8003d74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	685a      	ldr	r2, [r3, #4]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d84:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d8e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d9e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2220      	movs	r2, #32
 8003daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f7fe ffda 	bl	8002d70 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003dbc:	e02e      	b.n	8003e1c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003dbe:	7bfb      	ldrb	r3, [r7, #15]
 8003dc0:	2b21      	cmp	r3, #33	; 0x21
 8003dc2:	d126      	bne.n	8003e12 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a17      	ldr	r2, [pc, #92]	; (8003e24 <I2C_Slave_AF+0xdc>)
 8003dc8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2221      	movs	r2, #33	; 0x21
 8003dce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003dee:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003df8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e08:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f7fe ff8e 	bl	8002d2c <HAL_I2C_SlaveTxCpltCallback>
}
 8003e10:	e004      	b.n	8003e1c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e1a:	615a      	str	r2, [r3, #20]
}
 8003e1c:	bf00      	nop
 8003e1e:	3710      	adds	r7, #16
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	ffff0000 	.word	0xffff0000

08003e28 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e36:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e3e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003e40:	7bbb      	ldrb	r3, [r7, #14]
 8003e42:	2b10      	cmp	r3, #16
 8003e44:	d002      	beq.n	8003e4c <I2C_ITError+0x24>
 8003e46:	7bbb      	ldrb	r3, [r7, #14]
 8003e48:	2b40      	cmp	r3, #64	; 0x40
 8003e4a:	d10a      	bne.n	8003e62 <I2C_ITError+0x3a>
 8003e4c:	7bfb      	ldrb	r3, [r7, #15]
 8003e4e:	2b22      	cmp	r3, #34	; 0x22
 8003e50:	d107      	bne.n	8003e62 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e60:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003e62:	7bfb      	ldrb	r3, [r7, #15]
 8003e64:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003e68:	2b28      	cmp	r3, #40	; 0x28
 8003e6a:	d107      	bne.n	8003e7c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2228      	movs	r2, #40	; 0x28
 8003e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003e7a:	e015      	b.n	8003ea8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e8a:	d00a      	beq.n	8003ea2 <I2C_ITError+0x7a>
 8003e8c:	7bfb      	ldrb	r3, [r7, #15]
 8003e8e:	2b60      	cmp	r3, #96	; 0x60
 8003e90:	d007      	beq.n	8003ea2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2220      	movs	r2, #32
 8003e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003eb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003eb6:	d162      	bne.n	8003f7e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	685a      	ldr	r2, [r3, #4]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ec6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ecc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d020      	beq.n	8003f18 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eda:	4a6a      	ldr	r2, [pc, #424]	; (8004084 <I2C_ITError+0x25c>)
 8003edc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7fd ff20 	bl	8001d28 <HAL_DMA_Abort_IT>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f000 8089 	beq.w	8004002 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f022 0201 	bic.w	r2, r2, #1
 8003efe:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2220      	movs	r2, #32
 8003f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f12:	4610      	mov	r0, r2
 8003f14:	4798      	blx	r3
 8003f16:	e074      	b.n	8004002 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1c:	4a59      	ldr	r2, [pc, #356]	; (8004084 <I2C_ITError+0x25c>)
 8003f1e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7fd feff 	bl	8001d28 <HAL_DMA_Abort_IT>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d068      	beq.n	8004002 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f3a:	2b40      	cmp	r3, #64	; 0x40
 8003f3c:	d10b      	bne.n	8003f56 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	691a      	ldr	r2, [r3, #16]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f48:	b2d2      	uxtb	r2, r2
 8003f4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f50:	1c5a      	adds	r2, r3, #1
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 0201 	bic.w	r2, r2, #1
 8003f64:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2220      	movs	r2, #32
 8003f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f78:	4610      	mov	r0, r2
 8003f7a:	4798      	blx	r3
 8003f7c:	e041      	b.n	8004002 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b60      	cmp	r3, #96	; 0x60
 8003f88:	d125      	bne.n	8003fd6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2220      	movs	r2, #32
 8003f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa2:	2b40      	cmp	r3, #64	; 0x40
 8003fa4:	d10b      	bne.n	8003fbe <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	691a      	ldr	r2, [r3, #16]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb0:	b2d2      	uxtb	r2, r2
 8003fb2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb8:	1c5a      	adds	r2, r3, #1
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f022 0201 	bic.w	r2, r2, #1
 8003fcc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7fe fef6 	bl	8002dc0 <HAL_I2C_AbortCpltCallback>
 8003fd4:	e015      	b.n	8004002 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe0:	2b40      	cmp	r3, #64	; 0x40
 8003fe2:	d10b      	bne.n	8003ffc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	691a      	ldr	r2, [r3, #16]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fee:	b2d2      	uxtb	r2, r2
 8003ff0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff6:	1c5a      	adds	r2, r3, #1
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f7fe fed5 	bl	8002dac <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004006:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10e      	bne.n	8004030 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004018:	2b00      	cmp	r3, #0
 800401a:	d109      	bne.n	8004030 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004022:	2b00      	cmp	r3, #0
 8004024:	d104      	bne.n	8004030 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800402c:	2b00      	cmp	r3, #0
 800402e:	d007      	beq.n	8004040 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	685a      	ldr	r2, [r3, #4]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800403e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004046:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404c:	f003 0304 	and.w	r3, r3, #4
 8004050:	2b04      	cmp	r3, #4
 8004052:	d113      	bne.n	800407c <I2C_ITError+0x254>
 8004054:	7bfb      	ldrb	r3, [r7, #15]
 8004056:	2b28      	cmp	r3, #40	; 0x28
 8004058:	d110      	bne.n	800407c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a0a      	ldr	r2, [pc, #40]	; (8004088 <I2C_ITError+0x260>)
 800405e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2220      	movs	r2, #32
 800406a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f7fe fe7a 	bl	8002d70 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800407c:	bf00      	nop
 800407e:	3710      	adds	r7, #16
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	0800408d 	.word	0x0800408d
 8004088:	ffff0000 	.word	0xffff0000

0800408c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004094:	2300      	movs	r3, #0
 8004096:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040a4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80040a6:	4b4b      	ldr	r3, [pc, #300]	; (80041d4 <I2C_DMAAbort+0x148>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	08db      	lsrs	r3, r3, #3
 80040ac:	4a4a      	ldr	r2, [pc, #296]	; (80041d8 <I2C_DMAAbort+0x14c>)
 80040ae:	fba2 2303 	umull	r2, r3, r2, r3
 80040b2:	0a1a      	lsrs	r2, r3, #8
 80040b4:	4613      	mov	r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	4413      	add	r3, r2
 80040ba:	00da      	lsls	r2, r3, #3
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d106      	bne.n	80040d4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	f043 0220 	orr.w	r2, r3, #32
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80040d2:	e00a      	b.n	80040ea <I2C_DMAAbort+0x5e>
    }
    count--;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	3b01      	subs	r3, #1
 80040d8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040e8:	d0ea      	beq.n	80040c0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d003      	beq.n	80040fa <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f6:	2200      	movs	r2, #0
 80040f8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d003      	beq.n	800410a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004106:	2200      	movs	r2, #0
 8004108:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004118:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	2200      	movs	r2, #0
 800411e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004124:	2b00      	cmp	r3, #0
 8004126:	d003      	beq.n	8004130 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800412c:	2200      	movs	r2, #0
 800412e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004134:	2b00      	cmp	r3, #0
 8004136:	d003      	beq.n	8004140 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413c:	2200      	movs	r2, #0
 800413e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f022 0201 	bic.w	r2, r2, #1
 800414e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004156:	b2db      	uxtb	r3, r3
 8004158:	2b60      	cmp	r3, #96	; 0x60
 800415a:	d10e      	bne.n	800417a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	2220      	movs	r2, #32
 8004160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	2200      	movs	r2, #0
 8004170:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004172:	6978      	ldr	r0, [r7, #20]
 8004174:	f7fe fe24 	bl	8002dc0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004178:	e027      	b.n	80041ca <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800417a:	7cfb      	ldrb	r3, [r7, #19]
 800417c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004180:	2b28      	cmp	r3, #40	; 0x28
 8004182:	d117      	bne.n	80041b4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f042 0201 	orr.w	r2, r2, #1
 8004192:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041a2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	2200      	movs	r2, #0
 80041a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	2228      	movs	r2, #40	; 0x28
 80041ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80041b2:	e007      	b.n	80041c4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	2220      	movs	r2, #32
 80041b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80041c4:	6978      	ldr	r0, [r7, #20]
 80041c6:	f7fe fdf1 	bl	8002dac <HAL_I2C_ErrorCallback>
}
 80041ca:	bf00      	nop
 80041cc:	3718      	adds	r7, #24
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	20000000 	.word	0x20000000
 80041d8:	14f8b589 	.word	0x14f8b589

080041dc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80041e4:	2300      	movs	r3, #0
 80041e6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80041e8:	4b13      	ldr	r3, [pc, #76]	; (8004238 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	08db      	lsrs	r3, r3, #3
 80041ee:	4a13      	ldr	r2, [pc, #76]	; (800423c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80041f0:	fba2 2303 	umull	r2, r3, r2, r3
 80041f4:	0a1a      	lsrs	r2, r3, #8
 80041f6:	4613      	mov	r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	4413      	add	r3, r2
 80041fc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	3b01      	subs	r3, #1
 8004202:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d107      	bne.n	800421a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420e:	f043 0220 	orr.w	r2, r3, #32
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e008      	b.n	800422c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004224:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004228:	d0e9      	beq.n	80041fe <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3714      	adds	r7, #20
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr
 8004238:	20000000 	.word	0x20000000
 800423c:	14f8b589 	.word	0x14f8b589

08004240 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004250:	d103      	bne.n	800425a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2201      	movs	r2, #1
 8004256:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004258:	e007      	b.n	800426a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004262:	d102      	bne.n	800426a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2208      	movs	r2, #8
 8004268:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800426a:	bf00      	nop
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr

08004276 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004276:	b480      	push	{r7}
 8004278:	b083      	sub	sp, #12
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
 800427e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004286:	b2db      	uxtb	r3, r3
 8004288:	2b20      	cmp	r3, #32
 800428a:	d129      	bne.n	80042e0 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2224      	movs	r2, #36	; 0x24
 8004290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f022 0201 	bic.w	r2, r2, #1
 80042a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f022 0210 	bic.w	r2, r2, #16
 80042b2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	683a      	ldr	r2, [r7, #0]
 80042c0:	430a      	orrs	r2, r1
 80042c2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f042 0201 	orr.w	r2, r2, #1
 80042d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2220      	movs	r2, #32
 80042d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80042dc:	2300      	movs	r3, #0
 80042de:	e000      	b.n	80042e2 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80042e0:	2302      	movs	r3, #2
  }
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	370c      	adds	r7, #12
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr

080042ee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80042ee:	b480      	push	{r7}
 80042f0:	b085      	sub	sp, #20
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
 80042f6:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80042f8:	2300      	movs	r3, #0
 80042fa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004302:	b2db      	uxtb	r3, r3
 8004304:	2b20      	cmp	r3, #32
 8004306:	d12a      	bne.n	800435e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2224      	movs	r2, #36	; 0x24
 800430c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f022 0201 	bic.w	r2, r2, #1
 800431e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004326:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004328:	89fb      	ldrh	r3, [r7, #14]
 800432a:	f023 030f 	bic.w	r3, r3, #15
 800432e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	b29a      	uxth	r2, r3
 8004334:	89fb      	ldrh	r3, [r7, #14]
 8004336:	4313      	orrs	r3, r2
 8004338:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	89fa      	ldrh	r2, [r7, #14]
 8004340:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f042 0201 	orr.w	r2, r2, #1
 8004350:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2220      	movs	r2, #32
 8004356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800435a:	2300      	movs	r3, #0
 800435c:	e000      	b.n	8004360 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800435e:	2302      	movs	r3, #2
  }
}
 8004360:	4618      	mov	r0, r3
 8004362:	3714      	adds	r7, #20
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004372:	2300      	movs	r3, #0
 8004374:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004376:	2300      	movs	r3, #0
 8004378:	603b      	str	r3, [r7, #0]
 800437a:	4b20      	ldr	r3, [pc, #128]	; (80043fc <HAL_PWREx_EnableOverDrive+0x90>)
 800437c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437e:	4a1f      	ldr	r2, [pc, #124]	; (80043fc <HAL_PWREx_EnableOverDrive+0x90>)
 8004380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004384:	6413      	str	r3, [r2, #64]	; 0x40
 8004386:	4b1d      	ldr	r3, [pc, #116]	; (80043fc <HAL_PWREx_EnableOverDrive+0x90>)
 8004388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800438e:	603b      	str	r3, [r7, #0]
 8004390:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004392:	4b1b      	ldr	r3, [pc, #108]	; (8004400 <HAL_PWREx_EnableOverDrive+0x94>)
 8004394:	2201      	movs	r2, #1
 8004396:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004398:	f7fd fa46 	bl	8001828 <HAL_GetTick>
 800439c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800439e:	e009      	b.n	80043b4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80043a0:	f7fd fa42 	bl	8001828 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043ae:	d901      	bls.n	80043b4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e01f      	b.n	80043f4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80043b4:	4b13      	ldr	r3, [pc, #76]	; (8004404 <HAL_PWREx_EnableOverDrive+0x98>)
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043c0:	d1ee      	bne.n	80043a0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80043c2:	4b11      	ldr	r3, [pc, #68]	; (8004408 <HAL_PWREx_EnableOverDrive+0x9c>)
 80043c4:	2201      	movs	r2, #1
 80043c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80043c8:	f7fd fa2e 	bl	8001828 <HAL_GetTick>
 80043cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80043ce:	e009      	b.n	80043e4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80043d0:	f7fd fa2a 	bl	8001828 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043de:	d901      	bls.n	80043e4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e007      	b.n	80043f4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80043e4:	4b07      	ldr	r3, [pc, #28]	; (8004404 <HAL_PWREx_EnableOverDrive+0x98>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043f0:	d1ee      	bne.n	80043d0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3708      	adds	r7, #8
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	40023800 	.word	0x40023800
 8004400:	420e0040 	.word	0x420e0040
 8004404:	40007000 	.word	0x40007000
 8004408:	420e0044 	.word	0x420e0044

0800440c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b086      	sub	sp, #24
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d101      	bne.n	800441e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e267      	b.n	80048ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b00      	cmp	r3, #0
 8004428:	d075      	beq.n	8004516 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800442a:	4b88      	ldr	r3, [pc, #544]	; (800464c <HAL_RCC_OscConfig+0x240>)
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f003 030c 	and.w	r3, r3, #12
 8004432:	2b04      	cmp	r3, #4
 8004434:	d00c      	beq.n	8004450 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004436:	4b85      	ldr	r3, [pc, #532]	; (800464c <HAL_RCC_OscConfig+0x240>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800443e:	2b08      	cmp	r3, #8
 8004440:	d112      	bne.n	8004468 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004442:	4b82      	ldr	r3, [pc, #520]	; (800464c <HAL_RCC_OscConfig+0x240>)
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800444a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800444e:	d10b      	bne.n	8004468 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004450:	4b7e      	ldr	r3, [pc, #504]	; (800464c <HAL_RCC_OscConfig+0x240>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d05b      	beq.n	8004514 <HAL_RCC_OscConfig+0x108>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d157      	bne.n	8004514 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e242      	b.n	80048ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004470:	d106      	bne.n	8004480 <HAL_RCC_OscConfig+0x74>
 8004472:	4b76      	ldr	r3, [pc, #472]	; (800464c <HAL_RCC_OscConfig+0x240>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a75      	ldr	r2, [pc, #468]	; (800464c <HAL_RCC_OscConfig+0x240>)
 8004478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800447c:	6013      	str	r3, [r2, #0]
 800447e:	e01d      	b.n	80044bc <HAL_RCC_OscConfig+0xb0>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004488:	d10c      	bne.n	80044a4 <HAL_RCC_OscConfig+0x98>
 800448a:	4b70      	ldr	r3, [pc, #448]	; (800464c <HAL_RCC_OscConfig+0x240>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a6f      	ldr	r2, [pc, #444]	; (800464c <HAL_RCC_OscConfig+0x240>)
 8004490:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004494:	6013      	str	r3, [r2, #0]
 8004496:	4b6d      	ldr	r3, [pc, #436]	; (800464c <HAL_RCC_OscConfig+0x240>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a6c      	ldr	r2, [pc, #432]	; (800464c <HAL_RCC_OscConfig+0x240>)
 800449c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044a0:	6013      	str	r3, [r2, #0]
 80044a2:	e00b      	b.n	80044bc <HAL_RCC_OscConfig+0xb0>
 80044a4:	4b69      	ldr	r3, [pc, #420]	; (800464c <HAL_RCC_OscConfig+0x240>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a68      	ldr	r2, [pc, #416]	; (800464c <HAL_RCC_OscConfig+0x240>)
 80044aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ae:	6013      	str	r3, [r2, #0]
 80044b0:	4b66      	ldr	r3, [pc, #408]	; (800464c <HAL_RCC_OscConfig+0x240>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a65      	ldr	r2, [pc, #404]	; (800464c <HAL_RCC_OscConfig+0x240>)
 80044b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d013      	beq.n	80044ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c4:	f7fd f9b0 	bl	8001828 <HAL_GetTick>
 80044c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ca:	e008      	b.n	80044de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044cc:	f7fd f9ac 	bl	8001828 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	2b64      	cmp	r3, #100	; 0x64
 80044d8:	d901      	bls.n	80044de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e207      	b.n	80048ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044de:	4b5b      	ldr	r3, [pc, #364]	; (800464c <HAL_RCC_OscConfig+0x240>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d0f0      	beq.n	80044cc <HAL_RCC_OscConfig+0xc0>
 80044ea:	e014      	b.n	8004516 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ec:	f7fd f99c 	bl	8001828 <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044f2:	e008      	b.n	8004506 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044f4:	f7fd f998 	bl	8001828 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b64      	cmp	r3, #100	; 0x64
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e1f3      	b.n	80048ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004506:	4b51      	ldr	r3, [pc, #324]	; (800464c <HAL_RCC_OscConfig+0x240>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1f0      	bne.n	80044f4 <HAL_RCC_OscConfig+0xe8>
 8004512:	e000      	b.n	8004516 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004514:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b00      	cmp	r3, #0
 8004520:	d063      	beq.n	80045ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004522:	4b4a      	ldr	r3, [pc, #296]	; (800464c <HAL_RCC_OscConfig+0x240>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f003 030c 	and.w	r3, r3, #12
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00b      	beq.n	8004546 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800452e:	4b47      	ldr	r3, [pc, #284]	; (800464c <HAL_RCC_OscConfig+0x240>)
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004536:	2b08      	cmp	r3, #8
 8004538:	d11c      	bne.n	8004574 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800453a:	4b44      	ldr	r3, [pc, #272]	; (800464c <HAL_RCC_OscConfig+0x240>)
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d116      	bne.n	8004574 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004546:	4b41      	ldr	r3, [pc, #260]	; (800464c <HAL_RCC_OscConfig+0x240>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d005      	beq.n	800455e <HAL_RCC_OscConfig+0x152>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d001      	beq.n	800455e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e1c7      	b.n	80048ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800455e:	4b3b      	ldr	r3, [pc, #236]	; (800464c <HAL_RCC_OscConfig+0x240>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	00db      	lsls	r3, r3, #3
 800456c:	4937      	ldr	r1, [pc, #220]	; (800464c <HAL_RCC_OscConfig+0x240>)
 800456e:	4313      	orrs	r3, r2
 8004570:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004572:	e03a      	b.n	80045ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d020      	beq.n	80045be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800457c:	4b34      	ldr	r3, [pc, #208]	; (8004650 <HAL_RCC_OscConfig+0x244>)
 800457e:	2201      	movs	r2, #1
 8004580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004582:	f7fd f951 	bl	8001828 <HAL_GetTick>
 8004586:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004588:	e008      	b.n	800459c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800458a:	f7fd f94d 	bl	8001828 <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	2b02      	cmp	r3, #2
 8004596:	d901      	bls.n	800459c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e1a8      	b.n	80048ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800459c:	4b2b      	ldr	r3, [pc, #172]	; (800464c <HAL_RCC_OscConfig+0x240>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0302 	and.w	r3, r3, #2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d0f0      	beq.n	800458a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045a8:	4b28      	ldr	r3, [pc, #160]	; (800464c <HAL_RCC_OscConfig+0x240>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	00db      	lsls	r3, r3, #3
 80045b6:	4925      	ldr	r1, [pc, #148]	; (800464c <HAL_RCC_OscConfig+0x240>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	600b      	str	r3, [r1, #0]
 80045bc:	e015      	b.n	80045ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045be:	4b24      	ldr	r3, [pc, #144]	; (8004650 <HAL_RCC_OscConfig+0x244>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c4:	f7fd f930 	bl	8001828 <HAL_GetTick>
 80045c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045cc:	f7fd f92c 	bl	8001828 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e187      	b.n	80048ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045de:	4b1b      	ldr	r3, [pc, #108]	; (800464c <HAL_RCC_OscConfig+0x240>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1f0      	bne.n	80045cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0308 	and.w	r3, r3, #8
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d036      	beq.n	8004664 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d016      	beq.n	800462c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045fe:	4b15      	ldr	r3, [pc, #84]	; (8004654 <HAL_RCC_OscConfig+0x248>)
 8004600:	2201      	movs	r2, #1
 8004602:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004604:	f7fd f910 	bl	8001828 <HAL_GetTick>
 8004608:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800460a:	e008      	b.n	800461e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800460c:	f7fd f90c 	bl	8001828 <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	2b02      	cmp	r3, #2
 8004618:	d901      	bls.n	800461e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e167      	b.n	80048ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800461e:	4b0b      	ldr	r3, [pc, #44]	; (800464c <HAL_RCC_OscConfig+0x240>)
 8004620:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d0f0      	beq.n	800460c <HAL_RCC_OscConfig+0x200>
 800462a:	e01b      	b.n	8004664 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800462c:	4b09      	ldr	r3, [pc, #36]	; (8004654 <HAL_RCC_OscConfig+0x248>)
 800462e:	2200      	movs	r2, #0
 8004630:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004632:	f7fd f8f9 	bl	8001828 <HAL_GetTick>
 8004636:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004638:	e00e      	b.n	8004658 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800463a:	f7fd f8f5 	bl	8001828 <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	2b02      	cmp	r3, #2
 8004646:	d907      	bls.n	8004658 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e150      	b.n	80048ee <HAL_RCC_OscConfig+0x4e2>
 800464c:	40023800 	.word	0x40023800
 8004650:	42470000 	.word	0x42470000
 8004654:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004658:	4b88      	ldr	r3, [pc, #544]	; (800487c <HAL_RCC_OscConfig+0x470>)
 800465a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800465c:	f003 0302 	and.w	r3, r3, #2
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1ea      	bne.n	800463a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0304 	and.w	r3, r3, #4
 800466c:	2b00      	cmp	r3, #0
 800466e:	f000 8097 	beq.w	80047a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004672:	2300      	movs	r3, #0
 8004674:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004676:	4b81      	ldr	r3, [pc, #516]	; (800487c <HAL_RCC_OscConfig+0x470>)
 8004678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d10f      	bne.n	80046a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004682:	2300      	movs	r3, #0
 8004684:	60bb      	str	r3, [r7, #8]
 8004686:	4b7d      	ldr	r3, [pc, #500]	; (800487c <HAL_RCC_OscConfig+0x470>)
 8004688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468a:	4a7c      	ldr	r2, [pc, #496]	; (800487c <HAL_RCC_OscConfig+0x470>)
 800468c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004690:	6413      	str	r3, [r2, #64]	; 0x40
 8004692:	4b7a      	ldr	r3, [pc, #488]	; (800487c <HAL_RCC_OscConfig+0x470>)
 8004694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800469a:	60bb      	str	r3, [r7, #8]
 800469c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800469e:	2301      	movs	r3, #1
 80046a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046a2:	4b77      	ldr	r3, [pc, #476]	; (8004880 <HAL_RCC_OscConfig+0x474>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d118      	bne.n	80046e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046ae:	4b74      	ldr	r3, [pc, #464]	; (8004880 <HAL_RCC_OscConfig+0x474>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a73      	ldr	r2, [pc, #460]	; (8004880 <HAL_RCC_OscConfig+0x474>)
 80046b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046ba:	f7fd f8b5 	bl	8001828 <HAL_GetTick>
 80046be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046c0:	e008      	b.n	80046d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046c2:	f7fd f8b1 	bl	8001828 <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d901      	bls.n	80046d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e10c      	b.n	80048ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046d4:	4b6a      	ldr	r3, [pc, #424]	; (8004880 <HAL_RCC_OscConfig+0x474>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d0f0      	beq.n	80046c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d106      	bne.n	80046f6 <HAL_RCC_OscConfig+0x2ea>
 80046e8:	4b64      	ldr	r3, [pc, #400]	; (800487c <HAL_RCC_OscConfig+0x470>)
 80046ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ec:	4a63      	ldr	r2, [pc, #396]	; (800487c <HAL_RCC_OscConfig+0x470>)
 80046ee:	f043 0301 	orr.w	r3, r3, #1
 80046f2:	6713      	str	r3, [r2, #112]	; 0x70
 80046f4:	e01c      	b.n	8004730 <HAL_RCC_OscConfig+0x324>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	2b05      	cmp	r3, #5
 80046fc:	d10c      	bne.n	8004718 <HAL_RCC_OscConfig+0x30c>
 80046fe:	4b5f      	ldr	r3, [pc, #380]	; (800487c <HAL_RCC_OscConfig+0x470>)
 8004700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004702:	4a5e      	ldr	r2, [pc, #376]	; (800487c <HAL_RCC_OscConfig+0x470>)
 8004704:	f043 0304 	orr.w	r3, r3, #4
 8004708:	6713      	str	r3, [r2, #112]	; 0x70
 800470a:	4b5c      	ldr	r3, [pc, #368]	; (800487c <HAL_RCC_OscConfig+0x470>)
 800470c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800470e:	4a5b      	ldr	r2, [pc, #364]	; (800487c <HAL_RCC_OscConfig+0x470>)
 8004710:	f043 0301 	orr.w	r3, r3, #1
 8004714:	6713      	str	r3, [r2, #112]	; 0x70
 8004716:	e00b      	b.n	8004730 <HAL_RCC_OscConfig+0x324>
 8004718:	4b58      	ldr	r3, [pc, #352]	; (800487c <HAL_RCC_OscConfig+0x470>)
 800471a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800471c:	4a57      	ldr	r2, [pc, #348]	; (800487c <HAL_RCC_OscConfig+0x470>)
 800471e:	f023 0301 	bic.w	r3, r3, #1
 8004722:	6713      	str	r3, [r2, #112]	; 0x70
 8004724:	4b55      	ldr	r3, [pc, #340]	; (800487c <HAL_RCC_OscConfig+0x470>)
 8004726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004728:	4a54      	ldr	r2, [pc, #336]	; (800487c <HAL_RCC_OscConfig+0x470>)
 800472a:	f023 0304 	bic.w	r3, r3, #4
 800472e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d015      	beq.n	8004764 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004738:	f7fd f876 	bl	8001828 <HAL_GetTick>
 800473c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800473e:	e00a      	b.n	8004756 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004740:	f7fd f872 	bl	8001828 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	f241 3288 	movw	r2, #5000	; 0x1388
 800474e:	4293      	cmp	r3, r2
 8004750:	d901      	bls.n	8004756 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e0cb      	b.n	80048ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004756:	4b49      	ldr	r3, [pc, #292]	; (800487c <HAL_RCC_OscConfig+0x470>)
 8004758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d0ee      	beq.n	8004740 <HAL_RCC_OscConfig+0x334>
 8004762:	e014      	b.n	800478e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004764:	f7fd f860 	bl	8001828 <HAL_GetTick>
 8004768:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800476a:	e00a      	b.n	8004782 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800476c:	f7fd f85c 	bl	8001828 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	f241 3288 	movw	r2, #5000	; 0x1388
 800477a:	4293      	cmp	r3, r2
 800477c:	d901      	bls.n	8004782 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e0b5      	b.n	80048ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004782:	4b3e      	ldr	r3, [pc, #248]	; (800487c <HAL_RCC_OscConfig+0x470>)
 8004784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004786:	f003 0302 	and.w	r3, r3, #2
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1ee      	bne.n	800476c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800478e:	7dfb      	ldrb	r3, [r7, #23]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d105      	bne.n	80047a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004794:	4b39      	ldr	r3, [pc, #228]	; (800487c <HAL_RCC_OscConfig+0x470>)
 8004796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004798:	4a38      	ldr	r2, [pc, #224]	; (800487c <HAL_RCC_OscConfig+0x470>)
 800479a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800479e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f000 80a1 	beq.w	80048ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047aa:	4b34      	ldr	r3, [pc, #208]	; (800487c <HAL_RCC_OscConfig+0x470>)
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f003 030c 	and.w	r3, r3, #12
 80047b2:	2b08      	cmp	r3, #8
 80047b4:	d05c      	beq.n	8004870 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d141      	bne.n	8004842 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047be:	4b31      	ldr	r3, [pc, #196]	; (8004884 <HAL_RCC_OscConfig+0x478>)
 80047c0:	2200      	movs	r2, #0
 80047c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047c4:	f7fd f830 	bl	8001828 <HAL_GetTick>
 80047c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ca:	e008      	b.n	80047de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047cc:	f7fd f82c 	bl	8001828 <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d901      	bls.n	80047de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e087      	b.n	80048ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047de:	4b27      	ldr	r3, [pc, #156]	; (800487c <HAL_RCC_OscConfig+0x470>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d1f0      	bne.n	80047cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	69da      	ldr	r2, [r3, #28]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	431a      	orrs	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f8:	019b      	lsls	r3, r3, #6
 80047fa:	431a      	orrs	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004800:	085b      	lsrs	r3, r3, #1
 8004802:	3b01      	subs	r3, #1
 8004804:	041b      	lsls	r3, r3, #16
 8004806:	431a      	orrs	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480c:	061b      	lsls	r3, r3, #24
 800480e:	491b      	ldr	r1, [pc, #108]	; (800487c <HAL_RCC_OscConfig+0x470>)
 8004810:	4313      	orrs	r3, r2
 8004812:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004814:	4b1b      	ldr	r3, [pc, #108]	; (8004884 <HAL_RCC_OscConfig+0x478>)
 8004816:	2201      	movs	r2, #1
 8004818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800481a:	f7fd f805 	bl	8001828 <HAL_GetTick>
 800481e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004820:	e008      	b.n	8004834 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004822:	f7fd f801 	bl	8001828 <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	2b02      	cmp	r3, #2
 800482e:	d901      	bls.n	8004834 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e05c      	b.n	80048ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004834:	4b11      	ldr	r3, [pc, #68]	; (800487c <HAL_RCC_OscConfig+0x470>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d0f0      	beq.n	8004822 <HAL_RCC_OscConfig+0x416>
 8004840:	e054      	b.n	80048ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004842:	4b10      	ldr	r3, [pc, #64]	; (8004884 <HAL_RCC_OscConfig+0x478>)
 8004844:	2200      	movs	r2, #0
 8004846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004848:	f7fc ffee 	bl	8001828 <HAL_GetTick>
 800484c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800484e:	e008      	b.n	8004862 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004850:	f7fc ffea 	bl	8001828 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b02      	cmp	r3, #2
 800485c:	d901      	bls.n	8004862 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e045      	b.n	80048ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004862:	4b06      	ldr	r3, [pc, #24]	; (800487c <HAL_RCC_OscConfig+0x470>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1f0      	bne.n	8004850 <HAL_RCC_OscConfig+0x444>
 800486e:	e03d      	b.n	80048ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	2b01      	cmp	r3, #1
 8004876:	d107      	bne.n	8004888 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e038      	b.n	80048ee <HAL_RCC_OscConfig+0x4e2>
 800487c:	40023800 	.word	0x40023800
 8004880:	40007000 	.word	0x40007000
 8004884:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004888:	4b1b      	ldr	r3, [pc, #108]	; (80048f8 <HAL_RCC_OscConfig+0x4ec>)
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	2b01      	cmp	r3, #1
 8004894:	d028      	beq.n	80048e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d121      	bne.n	80048e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d11a      	bne.n	80048e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80048b8:	4013      	ands	r3, r2
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80048be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d111      	bne.n	80048e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ce:	085b      	lsrs	r3, r3, #1
 80048d0:	3b01      	subs	r3, #1
 80048d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d107      	bne.n	80048e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d001      	beq.n	80048ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e000      	b.n	80048ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3718      	adds	r7, #24
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	40023800 	.word	0x40023800

080048fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d101      	bne.n	8004910 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e0cc      	b.n	8004aaa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004910:	4b68      	ldr	r3, [pc, #416]	; (8004ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 030f 	and.w	r3, r3, #15
 8004918:	683a      	ldr	r2, [r7, #0]
 800491a:	429a      	cmp	r2, r3
 800491c:	d90c      	bls.n	8004938 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800491e:	4b65      	ldr	r3, [pc, #404]	; (8004ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8004920:	683a      	ldr	r2, [r7, #0]
 8004922:	b2d2      	uxtb	r2, r2
 8004924:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004926:	4b63      	ldr	r3, [pc, #396]	; (8004ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 030f 	and.w	r3, r3, #15
 800492e:	683a      	ldr	r2, [r7, #0]
 8004930:	429a      	cmp	r2, r3
 8004932:	d001      	beq.n	8004938 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e0b8      	b.n	8004aaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0302 	and.w	r3, r3, #2
 8004940:	2b00      	cmp	r3, #0
 8004942:	d020      	beq.n	8004986 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0304 	and.w	r3, r3, #4
 800494c:	2b00      	cmp	r3, #0
 800494e:	d005      	beq.n	800495c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004950:	4b59      	ldr	r3, [pc, #356]	; (8004ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	4a58      	ldr	r2, [pc, #352]	; (8004ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8004956:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800495a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0308 	and.w	r3, r3, #8
 8004964:	2b00      	cmp	r3, #0
 8004966:	d005      	beq.n	8004974 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004968:	4b53      	ldr	r3, [pc, #332]	; (8004ab8 <HAL_RCC_ClockConfig+0x1bc>)
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	4a52      	ldr	r2, [pc, #328]	; (8004ab8 <HAL_RCC_ClockConfig+0x1bc>)
 800496e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004972:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004974:	4b50      	ldr	r3, [pc, #320]	; (8004ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	494d      	ldr	r1, [pc, #308]	; (8004ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8004982:	4313      	orrs	r3, r2
 8004984:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	2b00      	cmp	r3, #0
 8004990:	d044      	beq.n	8004a1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	2b01      	cmp	r3, #1
 8004998:	d107      	bne.n	80049aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800499a:	4b47      	ldr	r3, [pc, #284]	; (8004ab8 <HAL_RCC_ClockConfig+0x1bc>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d119      	bne.n	80049da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e07f      	b.n	8004aaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d003      	beq.n	80049ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049b6:	2b03      	cmp	r3, #3
 80049b8:	d107      	bne.n	80049ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049ba:	4b3f      	ldr	r3, [pc, #252]	; (8004ab8 <HAL_RCC_ClockConfig+0x1bc>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d109      	bne.n	80049da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e06f      	b.n	8004aaa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ca:	4b3b      	ldr	r3, [pc, #236]	; (8004ab8 <HAL_RCC_ClockConfig+0x1bc>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e067      	b.n	8004aaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049da:	4b37      	ldr	r3, [pc, #220]	; (8004ab8 <HAL_RCC_ClockConfig+0x1bc>)
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f023 0203 	bic.w	r2, r3, #3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	4934      	ldr	r1, [pc, #208]	; (8004ab8 <HAL_RCC_ClockConfig+0x1bc>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049ec:	f7fc ff1c 	bl	8001828 <HAL_GetTick>
 80049f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049f2:	e00a      	b.n	8004a0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049f4:	f7fc ff18 	bl	8001828 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d901      	bls.n	8004a0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e04f      	b.n	8004aaa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a0a:	4b2b      	ldr	r3, [pc, #172]	; (8004ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f003 020c 	and.w	r2, r3, #12
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d1eb      	bne.n	80049f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a1c:	4b25      	ldr	r3, [pc, #148]	; (8004ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 030f 	and.w	r3, r3, #15
 8004a24:	683a      	ldr	r2, [r7, #0]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d20c      	bcs.n	8004a44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a2a:	4b22      	ldr	r3, [pc, #136]	; (8004ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a2c:	683a      	ldr	r2, [r7, #0]
 8004a2e:	b2d2      	uxtb	r2, r2
 8004a30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a32:	4b20      	ldr	r3, [pc, #128]	; (8004ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 030f 	and.w	r3, r3, #15
 8004a3a:	683a      	ldr	r2, [r7, #0]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d001      	beq.n	8004a44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e032      	b.n	8004aaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0304 	and.w	r3, r3, #4
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d008      	beq.n	8004a62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a50:	4b19      	ldr	r3, [pc, #100]	; (8004ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	4916      	ldr	r1, [pc, #88]	; (8004ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0308 	and.w	r3, r3, #8
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d009      	beq.n	8004a82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a6e:	4b12      	ldr	r3, [pc, #72]	; (8004ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	00db      	lsls	r3, r3, #3
 8004a7c:	490e      	ldr	r1, [pc, #56]	; (8004ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a82:	f000 f821 	bl	8004ac8 <HAL_RCC_GetSysClockFreq>
 8004a86:	4602      	mov	r2, r0
 8004a88:	4b0b      	ldr	r3, [pc, #44]	; (8004ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	091b      	lsrs	r3, r3, #4
 8004a8e:	f003 030f 	and.w	r3, r3, #15
 8004a92:	490a      	ldr	r1, [pc, #40]	; (8004abc <HAL_RCC_ClockConfig+0x1c0>)
 8004a94:	5ccb      	ldrb	r3, [r1, r3]
 8004a96:	fa22 f303 	lsr.w	r3, r2, r3
 8004a9a:	4a09      	ldr	r2, [pc, #36]	; (8004ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a9e:	4b09      	ldr	r3, [pc, #36]	; (8004ac4 <HAL_RCC_ClockConfig+0x1c8>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7fc fc6c 	bl	8001380 <HAL_InitTick>

  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3710      	adds	r7, #16
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	40023c00 	.word	0x40023c00
 8004ab8:	40023800 	.word	0x40023800
 8004abc:	0800a958 	.word	0x0800a958
 8004ac0:	20000000 	.word	0x20000000
 8004ac4:	20000004 	.word	0x20000004

08004ac8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ac8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004acc:	b094      	sub	sp, #80	; 0x50
 8004ace:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	647b      	str	r3, [r7, #68]	; 0x44
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ad8:	2300      	movs	r3, #0
 8004ada:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004adc:	2300      	movs	r3, #0
 8004ade:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ae0:	4b79      	ldr	r3, [pc, #484]	; (8004cc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f003 030c 	and.w	r3, r3, #12
 8004ae8:	2b08      	cmp	r3, #8
 8004aea:	d00d      	beq.n	8004b08 <HAL_RCC_GetSysClockFreq+0x40>
 8004aec:	2b08      	cmp	r3, #8
 8004aee:	f200 80e1 	bhi.w	8004cb4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d002      	beq.n	8004afc <HAL_RCC_GetSysClockFreq+0x34>
 8004af6:	2b04      	cmp	r3, #4
 8004af8:	d003      	beq.n	8004b02 <HAL_RCC_GetSysClockFreq+0x3a>
 8004afa:	e0db      	b.n	8004cb4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004afc:	4b73      	ldr	r3, [pc, #460]	; (8004ccc <HAL_RCC_GetSysClockFreq+0x204>)
 8004afe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004b00:	e0db      	b.n	8004cba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b02:	4b73      	ldr	r3, [pc, #460]	; (8004cd0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004b04:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b06:	e0d8      	b.n	8004cba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b08:	4b6f      	ldr	r3, [pc, #444]	; (8004cc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b10:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b12:	4b6d      	ldr	r3, [pc, #436]	; (8004cc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d063      	beq.n	8004be6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b1e:	4b6a      	ldr	r3, [pc, #424]	; (8004cc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	099b      	lsrs	r3, r3, #6
 8004b24:	2200      	movs	r2, #0
 8004b26:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b28:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b30:	633b      	str	r3, [r7, #48]	; 0x30
 8004b32:	2300      	movs	r3, #0
 8004b34:	637b      	str	r3, [r7, #52]	; 0x34
 8004b36:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004b3a:	4622      	mov	r2, r4
 8004b3c:	462b      	mov	r3, r5
 8004b3e:	f04f 0000 	mov.w	r0, #0
 8004b42:	f04f 0100 	mov.w	r1, #0
 8004b46:	0159      	lsls	r1, r3, #5
 8004b48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b4c:	0150      	lsls	r0, r2, #5
 8004b4e:	4602      	mov	r2, r0
 8004b50:	460b      	mov	r3, r1
 8004b52:	4621      	mov	r1, r4
 8004b54:	1a51      	subs	r1, r2, r1
 8004b56:	6139      	str	r1, [r7, #16]
 8004b58:	4629      	mov	r1, r5
 8004b5a:	eb63 0301 	sbc.w	r3, r3, r1
 8004b5e:	617b      	str	r3, [r7, #20]
 8004b60:	f04f 0200 	mov.w	r2, #0
 8004b64:	f04f 0300 	mov.w	r3, #0
 8004b68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b6c:	4659      	mov	r1, fp
 8004b6e:	018b      	lsls	r3, r1, #6
 8004b70:	4651      	mov	r1, sl
 8004b72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b76:	4651      	mov	r1, sl
 8004b78:	018a      	lsls	r2, r1, #6
 8004b7a:	4651      	mov	r1, sl
 8004b7c:	ebb2 0801 	subs.w	r8, r2, r1
 8004b80:	4659      	mov	r1, fp
 8004b82:	eb63 0901 	sbc.w	r9, r3, r1
 8004b86:	f04f 0200 	mov.w	r2, #0
 8004b8a:	f04f 0300 	mov.w	r3, #0
 8004b8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b9a:	4690      	mov	r8, r2
 8004b9c:	4699      	mov	r9, r3
 8004b9e:	4623      	mov	r3, r4
 8004ba0:	eb18 0303 	adds.w	r3, r8, r3
 8004ba4:	60bb      	str	r3, [r7, #8]
 8004ba6:	462b      	mov	r3, r5
 8004ba8:	eb49 0303 	adc.w	r3, r9, r3
 8004bac:	60fb      	str	r3, [r7, #12]
 8004bae:	f04f 0200 	mov.w	r2, #0
 8004bb2:	f04f 0300 	mov.w	r3, #0
 8004bb6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004bba:	4629      	mov	r1, r5
 8004bbc:	024b      	lsls	r3, r1, #9
 8004bbe:	4621      	mov	r1, r4
 8004bc0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004bc4:	4621      	mov	r1, r4
 8004bc6:	024a      	lsls	r2, r1, #9
 8004bc8:	4610      	mov	r0, r2
 8004bca:	4619      	mov	r1, r3
 8004bcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bce:	2200      	movs	r2, #0
 8004bd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004bd4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004bd8:	f7fb fb5a 	bl	8000290 <__aeabi_uldivmod>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	460b      	mov	r3, r1
 8004be0:	4613      	mov	r3, r2
 8004be2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004be4:	e058      	b.n	8004c98 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004be6:	4b38      	ldr	r3, [pc, #224]	; (8004cc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	099b      	lsrs	r3, r3, #6
 8004bec:	2200      	movs	r2, #0
 8004bee:	4618      	mov	r0, r3
 8004bf0:	4611      	mov	r1, r2
 8004bf2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004bf6:	623b      	str	r3, [r7, #32]
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	627b      	str	r3, [r7, #36]	; 0x24
 8004bfc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004c00:	4642      	mov	r2, r8
 8004c02:	464b      	mov	r3, r9
 8004c04:	f04f 0000 	mov.w	r0, #0
 8004c08:	f04f 0100 	mov.w	r1, #0
 8004c0c:	0159      	lsls	r1, r3, #5
 8004c0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c12:	0150      	lsls	r0, r2, #5
 8004c14:	4602      	mov	r2, r0
 8004c16:	460b      	mov	r3, r1
 8004c18:	4641      	mov	r1, r8
 8004c1a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c1e:	4649      	mov	r1, r9
 8004c20:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c24:	f04f 0200 	mov.w	r2, #0
 8004c28:	f04f 0300 	mov.w	r3, #0
 8004c2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004c30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004c34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004c38:	ebb2 040a 	subs.w	r4, r2, sl
 8004c3c:	eb63 050b 	sbc.w	r5, r3, fp
 8004c40:	f04f 0200 	mov.w	r2, #0
 8004c44:	f04f 0300 	mov.w	r3, #0
 8004c48:	00eb      	lsls	r3, r5, #3
 8004c4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c4e:	00e2      	lsls	r2, r4, #3
 8004c50:	4614      	mov	r4, r2
 8004c52:	461d      	mov	r5, r3
 8004c54:	4643      	mov	r3, r8
 8004c56:	18e3      	adds	r3, r4, r3
 8004c58:	603b      	str	r3, [r7, #0]
 8004c5a:	464b      	mov	r3, r9
 8004c5c:	eb45 0303 	adc.w	r3, r5, r3
 8004c60:	607b      	str	r3, [r7, #4]
 8004c62:	f04f 0200 	mov.w	r2, #0
 8004c66:	f04f 0300 	mov.w	r3, #0
 8004c6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c6e:	4629      	mov	r1, r5
 8004c70:	028b      	lsls	r3, r1, #10
 8004c72:	4621      	mov	r1, r4
 8004c74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c78:	4621      	mov	r1, r4
 8004c7a:	028a      	lsls	r2, r1, #10
 8004c7c:	4610      	mov	r0, r2
 8004c7e:	4619      	mov	r1, r3
 8004c80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c82:	2200      	movs	r2, #0
 8004c84:	61bb      	str	r3, [r7, #24]
 8004c86:	61fa      	str	r2, [r7, #28]
 8004c88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c8c:	f7fb fb00 	bl	8000290 <__aeabi_uldivmod>
 8004c90:	4602      	mov	r2, r0
 8004c92:	460b      	mov	r3, r1
 8004c94:	4613      	mov	r3, r2
 8004c96:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c98:	4b0b      	ldr	r3, [pc, #44]	; (8004cc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	0c1b      	lsrs	r3, r3, #16
 8004c9e:	f003 0303 	and.w	r3, r3, #3
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	005b      	lsls	r3, r3, #1
 8004ca6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004ca8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004caa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004cb2:	e002      	b.n	8004cba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004cb4:	4b05      	ldr	r3, [pc, #20]	; (8004ccc <HAL_RCC_GetSysClockFreq+0x204>)
 8004cb6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004cb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3750      	adds	r7, #80	; 0x50
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cc6:	bf00      	nop
 8004cc8:	40023800 	.word	0x40023800
 8004ccc:	00f42400 	.word	0x00f42400
 8004cd0:	007a1200 	.word	0x007a1200

08004cd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cd8:	4b03      	ldr	r3, [pc, #12]	; (8004ce8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004cda:	681b      	ldr	r3, [r3, #0]
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	20000000 	.word	0x20000000

08004cec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004cf0:	f7ff fff0 	bl	8004cd4 <HAL_RCC_GetHCLKFreq>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	4b05      	ldr	r3, [pc, #20]	; (8004d0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	0a9b      	lsrs	r3, r3, #10
 8004cfc:	f003 0307 	and.w	r3, r3, #7
 8004d00:	4903      	ldr	r1, [pc, #12]	; (8004d10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d02:	5ccb      	ldrb	r3, [r1, r3]
 8004d04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	40023800 	.word	0x40023800
 8004d10:	0800a968 	.word	0x0800a968

08004d14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004d18:	f7ff ffdc 	bl	8004cd4 <HAL_RCC_GetHCLKFreq>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	4b05      	ldr	r3, [pc, #20]	; (8004d34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	0b5b      	lsrs	r3, r3, #13
 8004d24:	f003 0307 	and.w	r3, r3, #7
 8004d28:	4903      	ldr	r1, [pc, #12]	; (8004d38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d2a:	5ccb      	ldrb	r3, [r1, r3]
 8004d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	40023800 	.word	0x40023800
 8004d38:	0800a968 	.word	0x0800a968

08004d3c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	220f      	movs	r2, #15
 8004d4a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004d4c:	4b12      	ldr	r3, [pc, #72]	; (8004d98 <HAL_RCC_GetClockConfig+0x5c>)
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f003 0203 	and.w	r2, r3, #3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004d58:	4b0f      	ldr	r3, [pc, #60]	; (8004d98 <HAL_RCC_GetClockConfig+0x5c>)
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004d64:	4b0c      	ldr	r3, [pc, #48]	; (8004d98 <HAL_RCC_GetClockConfig+0x5c>)
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004d70:	4b09      	ldr	r3, [pc, #36]	; (8004d98 <HAL_RCC_GetClockConfig+0x5c>)
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	08db      	lsrs	r3, r3, #3
 8004d76:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004d7e:	4b07      	ldr	r3, [pc, #28]	; (8004d9c <HAL_RCC_GetClockConfig+0x60>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 020f 	and.w	r2, r3, #15
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	601a      	str	r2, [r3, #0]
}
 8004d8a:	bf00      	nop
 8004d8c:	370c      	adds	r7, #12
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	40023800 	.word	0x40023800
 8004d9c:	40023c00 	.word	0x40023c00

08004da0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d101      	bne.n	8004db2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e07b      	b.n	8004eaa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d108      	bne.n	8004dcc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dc2:	d009      	beq.n	8004dd8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	61da      	str	r2, [r3, #28]
 8004dca:	e005      	b.n	8004dd8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d106      	bne.n	8004df8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f7fc f938 	bl	8001068 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2202      	movs	r2, #2
 8004dfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e0e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004e20:	431a      	orrs	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e2a:	431a      	orrs	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	f003 0302 	and.w	r3, r3, #2
 8004e34:	431a      	orrs	r2, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	f003 0301 	and.w	r3, r3, #1
 8004e3e:	431a      	orrs	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	699b      	ldr	r3, [r3, #24]
 8004e44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e48:	431a      	orrs	r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	69db      	ldr	r3, [r3, #28]
 8004e4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e52:	431a      	orrs	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a1b      	ldr	r3, [r3, #32]
 8004e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e5c:	ea42 0103 	orr.w	r1, r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e64:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	699b      	ldr	r3, [r3, #24]
 8004e74:	0c1b      	lsrs	r3, r3, #16
 8004e76:	f003 0104 	and.w	r1, r3, #4
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7e:	f003 0210 	and.w	r2, r3, #16
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	430a      	orrs	r2, r1
 8004e88:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	69da      	ldr	r2, [r3, #28]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e98:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3708      	adds	r7, #8
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
	...

08004eb4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b088      	sub	sp, #32
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	099b      	lsrs	r3, r3, #6
 8004ed0:	f003 0301 	and.w	r3, r3, #1
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d10f      	bne.n	8004ef8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00a      	beq.n	8004ef8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	099b      	lsrs	r3, r3, #6
 8004ee6:	f003 0301 	and.w	r3, r3, #1
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d004      	beq.n	8004ef8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	4798      	blx	r3
    return;
 8004ef6:	e0d7      	b.n	80050a8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	085b      	lsrs	r3, r3, #1
 8004efc:	f003 0301 	and.w	r3, r3, #1
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d00a      	beq.n	8004f1a <HAL_SPI_IRQHandler+0x66>
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	09db      	lsrs	r3, r3, #7
 8004f08:	f003 0301 	and.w	r3, r3, #1
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d004      	beq.n	8004f1a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	4798      	blx	r3
    return;
 8004f18:	e0c6      	b.n	80050a8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	095b      	lsrs	r3, r3, #5
 8004f1e:	f003 0301 	and.w	r3, r3, #1
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d10c      	bne.n	8004f40 <HAL_SPI_IRQHandler+0x8c>
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	099b      	lsrs	r3, r3, #6
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d106      	bne.n	8004f40 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	0a1b      	lsrs	r3, r3, #8
 8004f36:	f003 0301 	and.w	r3, r3, #1
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	f000 80b4 	beq.w	80050a8 <HAL_SPI_IRQHandler+0x1f4>
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	095b      	lsrs	r3, r3, #5
 8004f44:	f003 0301 	and.w	r3, r3, #1
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f000 80ad 	beq.w	80050a8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	099b      	lsrs	r3, r3, #6
 8004f52:	f003 0301 	and.w	r3, r3, #1
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d023      	beq.n	8004fa2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b03      	cmp	r3, #3
 8004f64:	d011      	beq.n	8004f8a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f6a:	f043 0204 	orr.w	r2, r3, #4
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f72:	2300      	movs	r3, #0
 8004f74:	617b      	str	r3, [r7, #20]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	617b      	str	r3, [r7, #20]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	617b      	str	r3, [r7, #20]
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	e00b      	b.n	8004fa2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	613b      	str	r3, [r7, #16]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	613b      	str	r3, [r7, #16]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	613b      	str	r3, [r7, #16]
 8004f9e:	693b      	ldr	r3, [r7, #16]
        return;
 8004fa0:	e082      	b.n	80050a8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	095b      	lsrs	r3, r3, #5
 8004fa6:	f003 0301 	and.w	r3, r3, #1
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d014      	beq.n	8004fd8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fb2:	f043 0201 	orr.w	r2, r3, #1
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004fba:	2300      	movs	r3, #0
 8004fbc:	60fb      	str	r3, [r7, #12]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	60fb      	str	r3, [r7, #12]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fd4:	601a      	str	r2, [r3, #0]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	0a1b      	lsrs	r3, r3, #8
 8004fdc:	f003 0301 	and.w	r3, r3, #1
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00c      	beq.n	8004ffe <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe8:	f043 0208 	orr.w	r2, r3, #8
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	60bb      	str	r3, [r7, #8]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	60bb      	str	r3, [r7, #8]
 8004ffc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005002:	2b00      	cmp	r3, #0
 8005004:	d04f      	beq.n	80050a6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	685a      	ldr	r2, [r3, #4]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005014:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2201      	movs	r2, #1
 800501a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	f003 0302 	and.w	r3, r3, #2
 8005024:	2b00      	cmp	r3, #0
 8005026:	d104      	bne.n	8005032 <HAL_SPI_IRQHandler+0x17e>
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	f003 0301 	and.w	r3, r3, #1
 800502e:	2b00      	cmp	r3, #0
 8005030:	d034      	beq.n	800509c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	685a      	ldr	r2, [r3, #4]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f022 0203 	bic.w	r2, r2, #3
 8005040:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005046:	2b00      	cmp	r3, #0
 8005048:	d011      	beq.n	800506e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800504e:	4a18      	ldr	r2, [pc, #96]	; (80050b0 <HAL_SPI_IRQHandler+0x1fc>)
 8005050:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005056:	4618      	mov	r0, r3
 8005058:	f7fc fe66 	bl	8001d28 <HAL_DMA_Abort_IT>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d005      	beq.n	800506e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005066:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005072:	2b00      	cmp	r3, #0
 8005074:	d016      	beq.n	80050a4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800507a:	4a0d      	ldr	r2, [pc, #52]	; (80050b0 <HAL_SPI_IRQHandler+0x1fc>)
 800507c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005082:	4618      	mov	r0, r3
 8005084:	f7fc fe50 	bl	8001d28 <HAL_DMA_Abort_IT>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00a      	beq.n	80050a4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005092:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800509a:	e003      	b.n	80050a4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 f809 	bl	80050b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80050a2:	e000      	b.n	80050a6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80050a4:	bf00      	nop
    return;
 80050a6:	bf00      	nop
  }
}
 80050a8:	3720      	adds	r7, #32
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	080050c9 	.word	0x080050c9

080050b4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80050bc:	bf00      	nop
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2200      	movs	r2, #0
 80050e0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f7ff ffe6 	bl	80050b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80050e8:	bf00      	nop
 80050ea:	3710      	adds	r7, #16
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d101      	bne.n	8005102 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e041      	b.n	8005186 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005108:	b2db      	uxtb	r3, r3
 800510a:	2b00      	cmp	r3, #0
 800510c:	d106      	bne.n	800511c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 f839 	bl	800518e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2202      	movs	r2, #2
 8005120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	3304      	adds	r3, #4
 800512c:	4619      	mov	r1, r3
 800512e:	4610      	mov	r0, r2
 8005130:	f000 f9d8 	bl	80054e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3708      	adds	r7, #8
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800518e:	b480      	push	{r7}
 8005190:	b083      	sub	sp, #12
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005196:	bf00      	nop
 8005198:	370c      	adds	r7, #12
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
	...

080051a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d001      	beq.n	80051bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e04e      	b.n	800525a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2202      	movs	r2, #2
 80051c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68da      	ldr	r2, [r3, #12]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f042 0201 	orr.w	r2, r2, #1
 80051d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a23      	ldr	r2, [pc, #140]	; (8005268 <HAL_TIM_Base_Start_IT+0xc4>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d022      	beq.n	8005224 <HAL_TIM_Base_Start_IT+0x80>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051e6:	d01d      	beq.n	8005224 <HAL_TIM_Base_Start_IT+0x80>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a1f      	ldr	r2, [pc, #124]	; (800526c <HAL_TIM_Base_Start_IT+0xc8>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d018      	beq.n	8005224 <HAL_TIM_Base_Start_IT+0x80>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a1e      	ldr	r2, [pc, #120]	; (8005270 <HAL_TIM_Base_Start_IT+0xcc>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d013      	beq.n	8005224 <HAL_TIM_Base_Start_IT+0x80>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a1c      	ldr	r2, [pc, #112]	; (8005274 <HAL_TIM_Base_Start_IT+0xd0>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d00e      	beq.n	8005224 <HAL_TIM_Base_Start_IT+0x80>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a1b      	ldr	r2, [pc, #108]	; (8005278 <HAL_TIM_Base_Start_IT+0xd4>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d009      	beq.n	8005224 <HAL_TIM_Base_Start_IT+0x80>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a19      	ldr	r2, [pc, #100]	; (800527c <HAL_TIM_Base_Start_IT+0xd8>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d004      	beq.n	8005224 <HAL_TIM_Base_Start_IT+0x80>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a18      	ldr	r2, [pc, #96]	; (8005280 <HAL_TIM_Base_Start_IT+0xdc>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d111      	bne.n	8005248 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f003 0307 	and.w	r3, r3, #7
 800522e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2b06      	cmp	r3, #6
 8005234:	d010      	beq.n	8005258 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f042 0201 	orr.w	r2, r2, #1
 8005244:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005246:	e007      	b.n	8005258 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f042 0201 	orr.w	r2, r2, #1
 8005256:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3714      	adds	r7, #20
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	40010000 	.word	0x40010000
 800526c:	40000400 	.word	0x40000400
 8005270:	40000800 	.word	0x40000800
 8005274:	40000c00 	.word	0x40000c00
 8005278:	40010400 	.word	0x40010400
 800527c:	40014000 	.word	0x40014000
 8005280:	40001800 	.word	0x40001800

08005284 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b082      	sub	sp, #8
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	f003 0302 	and.w	r3, r3, #2
 8005296:	2b02      	cmp	r3, #2
 8005298:	d122      	bne.n	80052e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	f003 0302 	and.w	r3, r3, #2
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	d11b      	bne.n	80052e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f06f 0202 	mvn.w	r2, #2
 80052b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2201      	movs	r2, #1
 80052b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	699b      	ldr	r3, [r3, #24]
 80052be:	f003 0303 	and.w	r3, r3, #3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d003      	beq.n	80052ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 f8ee 	bl	80054a8 <HAL_TIM_IC_CaptureCallback>
 80052cc:	e005      	b.n	80052da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 f8e0 	bl	8005494 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 f8f1 	bl	80054bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	f003 0304 	and.w	r3, r3, #4
 80052ea:	2b04      	cmp	r3, #4
 80052ec:	d122      	bne.n	8005334 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	f003 0304 	and.w	r3, r3, #4
 80052f8:	2b04      	cmp	r3, #4
 80052fa:	d11b      	bne.n	8005334 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f06f 0204 	mvn.w	r2, #4
 8005304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2202      	movs	r2, #2
 800530a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	699b      	ldr	r3, [r3, #24]
 8005312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005316:	2b00      	cmp	r3, #0
 8005318:	d003      	beq.n	8005322 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 f8c4 	bl	80054a8 <HAL_TIM_IC_CaptureCallback>
 8005320:	e005      	b.n	800532e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 f8b6 	bl	8005494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 f8c7 	bl	80054bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	f003 0308 	and.w	r3, r3, #8
 800533e:	2b08      	cmp	r3, #8
 8005340:	d122      	bne.n	8005388 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	f003 0308 	and.w	r3, r3, #8
 800534c:	2b08      	cmp	r3, #8
 800534e:	d11b      	bne.n	8005388 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f06f 0208 	mvn.w	r2, #8
 8005358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2204      	movs	r2, #4
 800535e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	69db      	ldr	r3, [r3, #28]
 8005366:	f003 0303 	and.w	r3, r3, #3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d003      	beq.n	8005376 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 f89a 	bl	80054a8 <HAL_TIM_IC_CaptureCallback>
 8005374:	e005      	b.n	8005382 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 f88c 	bl	8005494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 f89d 	bl	80054bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	f003 0310 	and.w	r3, r3, #16
 8005392:	2b10      	cmp	r3, #16
 8005394:	d122      	bne.n	80053dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	f003 0310 	and.w	r3, r3, #16
 80053a0:	2b10      	cmp	r3, #16
 80053a2:	d11b      	bne.n	80053dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f06f 0210 	mvn.w	r2, #16
 80053ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2208      	movs	r2, #8
 80053b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	69db      	ldr	r3, [r3, #28]
 80053ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d003      	beq.n	80053ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 f870 	bl	80054a8 <HAL_TIM_IC_CaptureCallback>
 80053c8:	e005      	b.n	80053d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 f862 	bl	8005494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 f873 	bl	80054bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d10e      	bne.n	8005408 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	f003 0301 	and.w	r3, r3, #1
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d107      	bne.n	8005408 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f06f 0201 	mvn.w	r2, #1
 8005400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f7fb fd0c 	bl	8000e20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005412:	2b80      	cmp	r3, #128	; 0x80
 8005414:	d10e      	bne.n	8005434 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005420:	2b80      	cmp	r3, #128	; 0x80
 8005422:	d107      	bne.n	8005434 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800542c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 f902 	bl	8005638 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800543e:	2b40      	cmp	r3, #64	; 0x40
 8005440:	d10e      	bne.n	8005460 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800544c:	2b40      	cmp	r3, #64	; 0x40
 800544e:	d107      	bne.n	8005460 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 f838 	bl	80054d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	f003 0320 	and.w	r3, r3, #32
 800546a:	2b20      	cmp	r3, #32
 800546c:	d10e      	bne.n	800548c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	f003 0320 	and.w	r3, r3, #32
 8005478:	2b20      	cmp	r3, #32
 800547a:	d107      	bne.n	800548c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f06f 0220 	mvn.w	r2, #32
 8005484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 f8cc 	bl	8005624 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800548c:	bf00      	nop
 800548e:	3708      	adds	r7, #8
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800549c:	bf00      	nop
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054b0:	bf00      	nop
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054c4:	bf00      	nop
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054d8:	bf00      	nop
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a40      	ldr	r2, [pc, #256]	; (80055f8 <TIM_Base_SetConfig+0x114>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d013      	beq.n	8005524 <TIM_Base_SetConfig+0x40>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005502:	d00f      	beq.n	8005524 <TIM_Base_SetConfig+0x40>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a3d      	ldr	r2, [pc, #244]	; (80055fc <TIM_Base_SetConfig+0x118>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d00b      	beq.n	8005524 <TIM_Base_SetConfig+0x40>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a3c      	ldr	r2, [pc, #240]	; (8005600 <TIM_Base_SetConfig+0x11c>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d007      	beq.n	8005524 <TIM_Base_SetConfig+0x40>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a3b      	ldr	r2, [pc, #236]	; (8005604 <TIM_Base_SetConfig+0x120>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d003      	beq.n	8005524 <TIM_Base_SetConfig+0x40>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a3a      	ldr	r2, [pc, #232]	; (8005608 <TIM_Base_SetConfig+0x124>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d108      	bne.n	8005536 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800552a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	4313      	orrs	r3, r2
 8005534:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a2f      	ldr	r2, [pc, #188]	; (80055f8 <TIM_Base_SetConfig+0x114>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d02b      	beq.n	8005596 <TIM_Base_SetConfig+0xb2>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005544:	d027      	beq.n	8005596 <TIM_Base_SetConfig+0xb2>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a2c      	ldr	r2, [pc, #176]	; (80055fc <TIM_Base_SetConfig+0x118>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d023      	beq.n	8005596 <TIM_Base_SetConfig+0xb2>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a2b      	ldr	r2, [pc, #172]	; (8005600 <TIM_Base_SetConfig+0x11c>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d01f      	beq.n	8005596 <TIM_Base_SetConfig+0xb2>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a2a      	ldr	r2, [pc, #168]	; (8005604 <TIM_Base_SetConfig+0x120>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d01b      	beq.n	8005596 <TIM_Base_SetConfig+0xb2>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a29      	ldr	r2, [pc, #164]	; (8005608 <TIM_Base_SetConfig+0x124>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d017      	beq.n	8005596 <TIM_Base_SetConfig+0xb2>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a28      	ldr	r2, [pc, #160]	; (800560c <TIM_Base_SetConfig+0x128>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d013      	beq.n	8005596 <TIM_Base_SetConfig+0xb2>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a27      	ldr	r2, [pc, #156]	; (8005610 <TIM_Base_SetConfig+0x12c>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d00f      	beq.n	8005596 <TIM_Base_SetConfig+0xb2>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a26      	ldr	r2, [pc, #152]	; (8005614 <TIM_Base_SetConfig+0x130>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d00b      	beq.n	8005596 <TIM_Base_SetConfig+0xb2>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a25      	ldr	r2, [pc, #148]	; (8005618 <TIM_Base_SetConfig+0x134>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d007      	beq.n	8005596 <TIM_Base_SetConfig+0xb2>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a24      	ldr	r2, [pc, #144]	; (800561c <TIM_Base_SetConfig+0x138>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d003      	beq.n	8005596 <TIM_Base_SetConfig+0xb2>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a23      	ldr	r2, [pc, #140]	; (8005620 <TIM_Base_SetConfig+0x13c>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d108      	bne.n	80055a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800559c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	689a      	ldr	r2, [r3, #8]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a0a      	ldr	r2, [pc, #40]	; (80055f8 <TIM_Base_SetConfig+0x114>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d003      	beq.n	80055dc <TIM_Base_SetConfig+0xf8>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a0c      	ldr	r2, [pc, #48]	; (8005608 <TIM_Base_SetConfig+0x124>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d103      	bne.n	80055e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	691a      	ldr	r2, [r3, #16]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	615a      	str	r2, [r3, #20]
}
 80055ea:	bf00      	nop
 80055ec:	3714      	adds	r7, #20
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	40010000 	.word	0x40010000
 80055fc:	40000400 	.word	0x40000400
 8005600:	40000800 	.word	0x40000800
 8005604:	40000c00 	.word	0x40000c00
 8005608:	40010400 	.word	0x40010400
 800560c:	40014000 	.word	0x40014000
 8005610:	40014400 	.word	0x40014400
 8005614:	40014800 	.word	0x40014800
 8005618:	40001800 	.word	0x40001800
 800561c:	40001c00 	.word	0x40001c00
 8005620:	40002000 	.word	0x40002000

08005624 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800562c:	bf00      	nop
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005640:	bf00      	nop
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d101      	bne.n	800565e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e03f      	b.n	80056de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005664:	b2db      	uxtb	r3, r3
 8005666:	2b00      	cmp	r3, #0
 8005668:	d106      	bne.n	8005678 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f7fb fdce 	bl	8001214 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2224      	movs	r2, #36	; 0x24
 800567c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68da      	ldr	r2, [r3, #12]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800568e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 ffed 	bl	8006670 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	691a      	ldr	r2, [r3, #16]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	695a      	ldr	r2, [r3, #20]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	68da      	ldr	r2, [r3, #12]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2220      	movs	r2, #32
 80056d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2220      	movs	r2, #32
 80056d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3708      	adds	r7, #8
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}

080056e6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056e6:	b580      	push	{r7, lr}
 80056e8:	b08a      	sub	sp, #40	; 0x28
 80056ea:	af02      	add	r7, sp, #8
 80056ec:	60f8      	str	r0, [r7, #12]
 80056ee:	60b9      	str	r1, [r7, #8]
 80056f0:	603b      	str	r3, [r7, #0]
 80056f2:	4613      	mov	r3, r2
 80056f4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80056f6:	2300      	movs	r3, #0
 80056f8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005700:	b2db      	uxtb	r3, r3
 8005702:	2b20      	cmp	r3, #32
 8005704:	d17c      	bne.n	8005800 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d002      	beq.n	8005712 <HAL_UART_Transmit+0x2c>
 800570c:	88fb      	ldrh	r3, [r7, #6]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d101      	bne.n	8005716 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e075      	b.n	8005802 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800571c:	2b01      	cmp	r3, #1
 800571e:	d101      	bne.n	8005724 <HAL_UART_Transmit+0x3e>
 8005720:	2302      	movs	r3, #2
 8005722:	e06e      	b.n	8005802 <HAL_UART_Transmit+0x11c>
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2221      	movs	r2, #33	; 0x21
 8005736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800573a:	f7fc f875 	bl	8001828 <HAL_GetTick>
 800573e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	88fa      	ldrh	r2, [r7, #6]
 8005744:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	88fa      	ldrh	r2, [r7, #6]
 800574a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005754:	d108      	bne.n	8005768 <HAL_UART_Transmit+0x82>
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d104      	bne.n	8005768 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800575e:	2300      	movs	r3, #0
 8005760:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	61bb      	str	r3, [r7, #24]
 8005766:	e003      	b.n	8005770 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800576c:	2300      	movs	r3, #0
 800576e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2200      	movs	r2, #0
 8005774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005778:	e02a      	b.n	80057d0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	9300      	str	r3, [sp, #0]
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	2200      	movs	r2, #0
 8005782:	2180      	movs	r1, #128	; 0x80
 8005784:	68f8      	ldr	r0, [r7, #12]
 8005786:	f000 fca9 	bl	80060dc <UART_WaitOnFlagUntilTimeout>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d001      	beq.n	8005794 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005790:	2303      	movs	r3, #3
 8005792:	e036      	b.n	8005802 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d10b      	bne.n	80057b2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	881b      	ldrh	r3, [r3, #0]
 800579e:	461a      	mov	r2, r3
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	3302      	adds	r3, #2
 80057ae:	61bb      	str	r3, [r7, #24]
 80057b0:	e007      	b.n	80057c2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	781a      	ldrb	r2, [r3, #0]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	3301      	adds	r3, #1
 80057c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	3b01      	subs	r3, #1
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d1cf      	bne.n	800577a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	9300      	str	r3, [sp, #0]
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	2200      	movs	r2, #0
 80057e2:	2140      	movs	r1, #64	; 0x40
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f000 fc79 	bl	80060dc <UART_WaitOnFlagUntilTimeout>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d001      	beq.n	80057f4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e006      	b.n	8005802 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2220      	movs	r2, #32
 80057f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80057fc:	2300      	movs	r3, #0
 80057fe:	e000      	b.n	8005802 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005800:	2302      	movs	r3, #2
  }
}
 8005802:	4618      	mov	r0, r3
 8005804:	3720      	adds	r7, #32
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}

0800580a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800580a:	b580      	push	{r7, lr}
 800580c:	b084      	sub	sp, #16
 800580e:	af00      	add	r7, sp, #0
 8005810:	60f8      	str	r0, [r7, #12]
 8005812:	60b9      	str	r1, [r7, #8]
 8005814:	4613      	mov	r3, r2
 8005816:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800581e:	b2db      	uxtb	r3, r3
 8005820:	2b20      	cmp	r3, #32
 8005822:	d11d      	bne.n	8005860 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d002      	beq.n	8005830 <HAL_UART_Receive_DMA+0x26>
 800582a:	88fb      	ldrh	r3, [r7, #6]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d101      	bne.n	8005834 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e016      	b.n	8005862 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800583a:	2b01      	cmp	r3, #1
 800583c:	d101      	bne.n	8005842 <HAL_UART_Receive_DMA+0x38>
 800583e:	2302      	movs	r3, #2
 8005840:	e00f      	b.n	8005862 <HAL_UART_Receive_DMA+0x58>
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2201      	movs	r2, #1
 8005846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2200      	movs	r2, #0
 800584e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005850:	88fb      	ldrh	r3, [r7, #6]
 8005852:	461a      	mov	r2, r3
 8005854:	68b9      	ldr	r1, [r7, #8]
 8005856:	68f8      	ldr	r0, [r7, #12]
 8005858:	f000 fcae 	bl	80061b8 <UART_Start_Receive_DMA>
 800585c:	4603      	mov	r3, r0
 800585e:	e000      	b.n	8005862 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005860:	2302      	movs	r3, #2
  }
}
 8005862:	4618      	mov	r0, r3
 8005864:	3710      	adds	r7, #16
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}

0800586a <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800586a:	b580      	push	{r7, lr}
 800586c:	b090      	sub	sp, #64	; 0x40
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005872:	2300      	movs	r3, #0
 8005874:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	695b      	ldr	r3, [r3, #20]
 800587c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005880:	2b80      	cmp	r3, #128	; 0x80
 8005882:	bf0c      	ite	eq
 8005884:	2301      	moveq	r3, #1
 8005886:	2300      	movne	r3, #0
 8005888:	b2db      	uxtb	r3, r3
 800588a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005892:	b2db      	uxtb	r3, r3
 8005894:	2b21      	cmp	r3, #33	; 0x21
 8005896:	d128      	bne.n	80058ea <HAL_UART_DMAStop+0x80>
 8005898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800589a:	2b00      	cmp	r3, #0
 800589c:	d025      	beq.n	80058ea <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	3314      	adds	r3, #20
 80058a4:	627b      	str	r3, [r7, #36]	; 0x24
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a8:	e853 3f00 	ldrex	r3, [r3]
 80058ac:	623b      	str	r3, [r7, #32]
   return(result);
 80058ae:	6a3b      	ldr	r3, [r7, #32]
 80058b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	3314      	adds	r3, #20
 80058bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058be:	633a      	str	r2, [r7, #48]	; 0x30
 80058c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058c6:	e841 2300 	strex	r3, r2, [r1]
 80058ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1e5      	bne.n	800589e <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d004      	beq.n	80058e4 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058de:	4618      	mov	r0, r3
 80058e0:	f7fc f9b2 	bl	8001c48 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f000 fd01 	bl	80062ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	695b      	ldr	r3, [r3, #20]
 80058f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f4:	2b40      	cmp	r3, #64	; 0x40
 80058f6:	bf0c      	ite	eq
 80058f8:	2301      	moveq	r3, #1
 80058fa:	2300      	movne	r3, #0
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005906:	b2db      	uxtb	r3, r3
 8005908:	2b22      	cmp	r3, #34	; 0x22
 800590a:	d128      	bne.n	800595e <HAL_UART_DMAStop+0xf4>
 800590c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800590e:	2b00      	cmp	r3, #0
 8005910:	d025      	beq.n	800595e <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	3314      	adds	r3, #20
 8005918:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	e853 3f00 	ldrex	r3, [r3]
 8005920:	60fb      	str	r3, [r7, #12]
   return(result);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005928:	637b      	str	r3, [r7, #52]	; 0x34
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	3314      	adds	r3, #20
 8005930:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005932:	61fa      	str	r2, [r7, #28]
 8005934:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005936:	69b9      	ldr	r1, [r7, #24]
 8005938:	69fa      	ldr	r2, [r7, #28]
 800593a:	e841 2300 	strex	r3, r2, [r1]
 800593e:	617b      	str	r3, [r7, #20]
   return(result);
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1e5      	bne.n	8005912 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594a:	2b00      	cmp	r3, #0
 800594c:	d004      	beq.n	8005958 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005952:	4618      	mov	r0, r3
 8005954:	f7fc f978 	bl	8001c48 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f000 fcef 	bl	800633c <UART_EndRxTransfer>
  }

  return HAL_OK;
 800595e:	2300      	movs	r3, #0
}
 8005960:	4618      	mov	r0, r3
 8005962:	3740      	adds	r7, #64	; 0x40
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b0ba      	sub	sp, #232	; 0xe8
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	695b      	ldr	r3, [r3, #20]
 800598a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800598e:	2300      	movs	r3, #0
 8005990:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005994:	2300      	movs	r3, #0
 8005996:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800599a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800599e:	f003 030f 	and.w	r3, r3, #15
 80059a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80059a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d10f      	bne.n	80059ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059b2:	f003 0320 	and.w	r3, r3, #32
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d009      	beq.n	80059ce <HAL_UART_IRQHandler+0x66>
 80059ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059be:	f003 0320 	and.w	r3, r3, #32
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d003      	beq.n	80059ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 fd97 	bl	80064fa <UART_Receive_IT>
      return;
 80059cc:	e256      	b.n	8005e7c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80059ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	f000 80de 	beq.w	8005b94 <HAL_UART_IRQHandler+0x22c>
 80059d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059dc:	f003 0301 	and.w	r3, r3, #1
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d106      	bne.n	80059f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80059e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059e8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	f000 80d1 	beq.w	8005b94 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80059f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00b      	beq.n	8005a16 <HAL_UART_IRQHandler+0xae>
 80059fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d005      	beq.n	8005a16 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0e:	f043 0201 	orr.w	r2, r3, #1
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a1a:	f003 0304 	and.w	r3, r3, #4
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00b      	beq.n	8005a3a <HAL_UART_IRQHandler+0xd2>
 8005a22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a26:	f003 0301 	and.w	r3, r3, #1
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d005      	beq.n	8005a3a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a32:	f043 0202 	orr.w	r2, r3, #2
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a3e:	f003 0302 	and.w	r3, r3, #2
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00b      	beq.n	8005a5e <HAL_UART_IRQHandler+0xf6>
 8005a46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a4a:	f003 0301 	and.w	r3, r3, #1
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d005      	beq.n	8005a5e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a56:	f043 0204 	orr.w	r2, r3, #4
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a62:	f003 0308 	and.w	r3, r3, #8
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d011      	beq.n	8005a8e <HAL_UART_IRQHandler+0x126>
 8005a6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a6e:	f003 0320 	and.w	r3, r3, #32
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d105      	bne.n	8005a82 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005a76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a7a:	f003 0301 	and.w	r3, r3, #1
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d005      	beq.n	8005a8e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a86:	f043 0208 	orr.w	r2, r3, #8
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	f000 81ed 	beq.w	8005e72 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a9c:	f003 0320 	and.w	r3, r3, #32
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d008      	beq.n	8005ab6 <HAL_UART_IRQHandler+0x14e>
 8005aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005aa8:	f003 0320 	and.w	r3, r3, #32
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d002      	beq.n	8005ab6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 fd22 	bl	80064fa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	695b      	ldr	r3, [r3, #20]
 8005abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac0:	2b40      	cmp	r3, #64	; 0x40
 8005ac2:	bf0c      	ite	eq
 8005ac4:	2301      	moveq	r3, #1
 8005ac6:	2300      	movne	r3, #0
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad2:	f003 0308 	and.w	r3, r3, #8
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d103      	bne.n	8005ae2 <HAL_UART_IRQHandler+0x17a>
 8005ada:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d04f      	beq.n	8005b82 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 fc2a 	bl	800633c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	695b      	ldr	r3, [r3, #20]
 8005aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af2:	2b40      	cmp	r3, #64	; 0x40
 8005af4:	d141      	bne.n	8005b7a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	3314      	adds	r3, #20
 8005afc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b04:	e853 3f00 	ldrex	r3, [r3]
 8005b08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005b0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	3314      	adds	r3, #20
 8005b1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005b22:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005b26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005b2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005b32:	e841 2300 	strex	r3, r2, [r1]
 8005b36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005b3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1d9      	bne.n	8005af6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d013      	beq.n	8005b72 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b4e:	4a7d      	ldr	r2, [pc, #500]	; (8005d44 <HAL_UART_IRQHandler+0x3dc>)
 8005b50:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7fc f8e6 	bl	8001d28 <HAL_DMA_Abort_IT>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d016      	beq.n	8005b90 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b6c:	4610      	mov	r0, r2
 8005b6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b70:	e00e      	b.n	8005b90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 f9a4 	bl	8005ec0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b78:	e00a      	b.n	8005b90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 f9a0 	bl	8005ec0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b80:	e006      	b.n	8005b90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 f99c 	bl	8005ec0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005b8e:	e170      	b.n	8005e72 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b90:	bf00      	nop
    return;
 8005b92:	e16e      	b.n	8005e72 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	f040 814a 	bne.w	8005e32 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ba2:	f003 0310 	and.w	r3, r3, #16
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	f000 8143 	beq.w	8005e32 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bb0:	f003 0310 	and.w	r3, r3, #16
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	f000 813c 	beq.w	8005e32 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005bba:	2300      	movs	r3, #0
 8005bbc:	60bb      	str	r3, [r7, #8]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	60bb      	str	r3, [r7, #8]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	60bb      	str	r3, [r7, #8]
 8005bce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	695b      	ldr	r3, [r3, #20]
 8005bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bda:	2b40      	cmp	r3, #64	; 0x40
 8005bdc:	f040 80b4 	bne.w	8005d48 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005bec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f000 8140 	beq.w	8005e76 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005bfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	f080 8139 	bcs.w	8005e76 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c0a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c10:	69db      	ldr	r3, [r3, #28]
 8005c12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c16:	f000 8088 	beq.w	8005d2a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	330c      	adds	r3, #12
 8005c20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c28:	e853 3f00 	ldrex	r3, [r3]
 8005c2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005c30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	330c      	adds	r3, #12
 8005c42:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005c46:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005c4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005c52:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c56:	e841 2300 	strex	r3, r2, [r1]
 8005c5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005c5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1d9      	bne.n	8005c1a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	3314      	adds	r3, #20
 8005c6c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c70:	e853 3f00 	ldrex	r3, [r3]
 8005c74:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005c76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c78:	f023 0301 	bic.w	r3, r3, #1
 8005c7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	3314      	adds	r3, #20
 8005c86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c8a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c8e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c90:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c92:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c96:	e841 2300 	strex	r3, r2, [r1]
 8005c9a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005c9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1e1      	bne.n	8005c66 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	3314      	adds	r3, #20
 8005ca8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005caa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cac:	e853 3f00 	ldrex	r3, [r3]
 8005cb0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005cb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	3314      	adds	r3, #20
 8005cc2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005cc6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005cc8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ccc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005cce:	e841 2300 	strex	r3, r2, [r1]
 8005cd2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005cd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d1e3      	bne.n	8005ca2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2220      	movs	r2, #32
 8005cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	330c      	adds	r3, #12
 8005cee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cf2:	e853 3f00 	ldrex	r3, [r3]
 8005cf6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005cf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cfa:	f023 0310 	bic.w	r3, r3, #16
 8005cfe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	330c      	adds	r3, #12
 8005d08:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005d0c:	65ba      	str	r2, [r7, #88]	; 0x58
 8005d0e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d14:	e841 2300 	strex	r3, r2, [r1]
 8005d18:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005d1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d1e3      	bne.n	8005ce8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d24:	4618      	mov	r0, r3
 8005d26:	f7fb ff8f 	bl	8001c48 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	4619      	mov	r1, r3
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 f8ca 	bl	8005ed4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d40:	e099      	b.n	8005e76 <HAL_UART_IRQHandler+0x50e>
 8005d42:	bf00      	nop
 8005d44:	08006403 	.word	0x08006403
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	f000 808b 	beq.w	8005e7a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005d64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	f000 8086 	beq.w	8005e7a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	330c      	adds	r3, #12
 8005d74:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d78:	e853 3f00 	ldrex	r3, [r3]
 8005d7c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	330c      	adds	r3, #12
 8005d8e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005d92:	647a      	str	r2, [r7, #68]	; 0x44
 8005d94:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d96:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d9a:	e841 2300 	strex	r3, r2, [r1]
 8005d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005da0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d1e3      	bne.n	8005d6e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	3314      	adds	r3, #20
 8005dac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db0:	e853 3f00 	ldrex	r3, [r3]
 8005db4:	623b      	str	r3, [r7, #32]
   return(result);
 8005db6:	6a3b      	ldr	r3, [r7, #32]
 8005db8:	f023 0301 	bic.w	r3, r3, #1
 8005dbc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	3314      	adds	r3, #20
 8005dc6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005dca:	633a      	str	r2, [r7, #48]	; 0x30
 8005dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005dd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dd2:	e841 2300 	strex	r3, r2, [r1]
 8005dd6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d1e3      	bne.n	8005da6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2220      	movs	r2, #32
 8005de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	330c      	adds	r3, #12
 8005df2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	e853 3f00 	ldrex	r3, [r3]
 8005dfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f023 0310 	bic.w	r3, r3, #16
 8005e02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	330c      	adds	r3, #12
 8005e0c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005e10:	61fa      	str	r2, [r7, #28]
 8005e12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e14:	69b9      	ldr	r1, [r7, #24]
 8005e16:	69fa      	ldr	r2, [r7, #28]
 8005e18:	e841 2300 	strex	r3, r2, [r1]
 8005e1c:	617b      	str	r3, [r7, #20]
   return(result);
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d1e3      	bne.n	8005dec <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e28:	4619      	mov	r1, r3
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 f852 	bl	8005ed4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e30:	e023      	b.n	8005e7a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d009      	beq.n	8005e52 <HAL_UART_IRQHandler+0x4ea>
 8005e3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d003      	beq.n	8005e52 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 faed 	bl	800642a <UART_Transmit_IT>
    return;
 8005e50:	e014      	b.n	8005e7c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d00e      	beq.n	8005e7c <HAL_UART_IRQHandler+0x514>
 8005e5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d008      	beq.n	8005e7c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 fb2d 	bl	80064ca <UART_EndTransmit_IT>
    return;
 8005e70:	e004      	b.n	8005e7c <HAL_UART_IRQHandler+0x514>
    return;
 8005e72:	bf00      	nop
 8005e74:	e002      	b.n	8005e7c <HAL_UART_IRQHandler+0x514>
      return;
 8005e76:	bf00      	nop
 8005e78:	e000      	b.n	8005e7c <HAL_UART_IRQHandler+0x514>
      return;
 8005e7a:	bf00      	nop
  }
}
 8005e7c:	37e8      	adds	r7, #232	; 0xe8
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop

08005e84 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005e8c:	bf00      	nop
 8005e8e:	370c      	adds	r7, #12
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005ea0:	bf00      	nop
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005eb4:	bf00      	nop
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005ec8:	bf00      	nop
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	460b      	mov	r3, r1
 8005ede:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b09c      	sub	sp, #112	; 0x70
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef8:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d172      	bne.n	8005fee <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005f08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	330c      	adds	r3, #12
 8005f14:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f18:	e853 3f00 	ldrex	r3, [r3]
 8005f1c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005f1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f24:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	330c      	adds	r3, #12
 8005f2c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005f2e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005f30:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f32:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f36:	e841 2300 	strex	r3, r2, [r1]
 8005f3a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005f3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d1e5      	bne.n	8005f0e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	3314      	adds	r3, #20
 8005f48:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f4c:	e853 3f00 	ldrex	r3, [r3]
 8005f50:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f54:	f023 0301 	bic.w	r3, r3, #1
 8005f58:	667b      	str	r3, [r7, #100]	; 0x64
 8005f5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	3314      	adds	r3, #20
 8005f60:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005f62:	647a      	str	r2, [r7, #68]	; 0x44
 8005f64:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f66:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f6a:	e841 2300 	strex	r3, r2, [r1]
 8005f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d1e5      	bne.n	8005f42 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	3314      	adds	r3, #20
 8005f7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f80:	e853 3f00 	ldrex	r3, [r3]
 8005f84:	623b      	str	r3, [r7, #32]
   return(result);
 8005f86:	6a3b      	ldr	r3, [r7, #32]
 8005f88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f8c:	663b      	str	r3, [r7, #96]	; 0x60
 8005f8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	3314      	adds	r3, #20
 8005f94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005f96:	633a      	str	r2, [r7, #48]	; 0x30
 8005f98:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f9e:	e841 2300 	strex	r3, r2, [r1]
 8005fa2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d1e5      	bne.n	8005f76 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005faa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fac:	2220      	movs	r2, #32
 8005fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d119      	bne.n	8005fee <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	330c      	adds	r3, #12
 8005fc0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	e853 3f00 	ldrex	r3, [r3]
 8005fc8:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f023 0310 	bic.w	r3, r3, #16
 8005fd0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	330c      	adds	r3, #12
 8005fd8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005fda:	61fa      	str	r2, [r7, #28]
 8005fdc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fde:	69b9      	ldr	r1, [r7, #24]
 8005fe0:	69fa      	ldr	r2, [r7, #28]
 8005fe2:	e841 2300 	strex	r3, r2, [r1]
 8005fe6:	617b      	str	r3, [r7, #20]
   return(result);
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d1e5      	bne.n	8005fba <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d106      	bne.n	8006004 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ff6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ff8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005ffe:	f7ff ff69 	bl	8005ed4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006002:	e002      	b.n	800600a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006004:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006006:	f7ff ff47 	bl	8005e98 <HAL_UART_RxCpltCallback>
}
 800600a:	bf00      	nop
 800600c:	3770      	adds	r7, #112	; 0x70
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}

08006012 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006012:	b580      	push	{r7, lr}
 8006014:	b084      	sub	sp, #16
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800601e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006024:	2b01      	cmp	r3, #1
 8006026:	d108      	bne.n	800603a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800602c:	085b      	lsrs	r3, r3, #1
 800602e:	b29b      	uxth	r3, r3
 8006030:	4619      	mov	r1, r3
 8006032:	68f8      	ldr	r0, [r7, #12]
 8006034:	f7ff ff4e 	bl	8005ed4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006038:	e002      	b.n	8006040 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800603a:	68f8      	ldr	r0, [r7, #12]
 800603c:	f7ff ff36 	bl	8005eac <HAL_UART_RxHalfCpltCallback>
}
 8006040:	bf00      	nop
 8006042:	3710      	adds	r7, #16
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006050:	2300      	movs	r3, #0
 8006052:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006058:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	695b      	ldr	r3, [r3, #20]
 8006060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006064:	2b80      	cmp	r3, #128	; 0x80
 8006066:	bf0c      	ite	eq
 8006068:	2301      	moveq	r3, #1
 800606a:	2300      	movne	r3, #0
 800606c:	b2db      	uxtb	r3, r3
 800606e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006076:	b2db      	uxtb	r3, r3
 8006078:	2b21      	cmp	r3, #33	; 0x21
 800607a:	d108      	bne.n	800608e <UART_DMAError+0x46>
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d005      	beq.n	800608e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	2200      	movs	r2, #0
 8006086:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006088:	68b8      	ldr	r0, [r7, #8]
 800608a:	f000 f92f 	bl	80062ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	695b      	ldr	r3, [r3, #20]
 8006094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006098:	2b40      	cmp	r3, #64	; 0x40
 800609a:	bf0c      	ite	eq
 800609c:	2301      	moveq	r3, #1
 800609e:	2300      	movne	r3, #0
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	2b22      	cmp	r3, #34	; 0x22
 80060ae:	d108      	bne.n	80060c2 <UART_DMAError+0x7a>
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d005      	beq.n	80060c2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	2200      	movs	r2, #0
 80060ba:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80060bc:	68b8      	ldr	r0, [r7, #8]
 80060be:	f000 f93d 	bl	800633c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c6:	f043 0210 	orr.w	r2, r3, #16
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060ce:	68b8      	ldr	r0, [r7, #8]
 80060d0:	f7ff fef6 	bl	8005ec0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060d4:	bf00      	nop
 80060d6:	3710      	adds	r7, #16
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b090      	sub	sp, #64	; 0x40
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	603b      	str	r3, [r7, #0]
 80060e8:	4613      	mov	r3, r2
 80060ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060ec:	e050      	b.n	8006190 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f4:	d04c      	beq.n	8006190 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80060f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d007      	beq.n	800610c <UART_WaitOnFlagUntilTimeout+0x30>
 80060fc:	f7fb fb94 	bl	8001828 <HAL_GetTick>
 8006100:	4602      	mov	r2, r0
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006108:	429a      	cmp	r2, r3
 800610a:	d241      	bcs.n	8006190 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	330c      	adds	r3, #12
 8006112:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006116:	e853 3f00 	ldrex	r3, [r3]
 800611a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800611c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006122:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	330c      	adds	r3, #12
 800612a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800612c:	637a      	str	r2, [r7, #52]	; 0x34
 800612e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006130:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006132:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006134:	e841 2300 	strex	r3, r2, [r1]
 8006138:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800613a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800613c:	2b00      	cmp	r3, #0
 800613e:	d1e5      	bne.n	800610c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	3314      	adds	r3, #20
 8006146:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	e853 3f00 	ldrex	r3, [r3]
 800614e:	613b      	str	r3, [r7, #16]
   return(result);
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	f023 0301 	bic.w	r3, r3, #1
 8006156:	63bb      	str	r3, [r7, #56]	; 0x38
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	3314      	adds	r3, #20
 800615e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006160:	623a      	str	r2, [r7, #32]
 8006162:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006164:	69f9      	ldr	r1, [r7, #28]
 8006166:	6a3a      	ldr	r2, [r7, #32]
 8006168:	e841 2300 	strex	r3, r2, [r1]
 800616c:	61bb      	str	r3, [r7, #24]
   return(result);
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d1e5      	bne.n	8006140 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2220      	movs	r2, #32
 8006178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2220      	movs	r2, #32
 8006180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2200      	movs	r2, #0
 8006188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800618c:	2303      	movs	r3, #3
 800618e:	e00f      	b.n	80061b0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	4013      	ands	r3, r2
 800619a:	68ba      	ldr	r2, [r7, #8]
 800619c:	429a      	cmp	r2, r3
 800619e:	bf0c      	ite	eq
 80061a0:	2301      	moveq	r3, #1
 80061a2:	2300      	movne	r3, #0
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	461a      	mov	r2, r3
 80061a8:	79fb      	ldrb	r3, [r7, #7]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d09f      	beq.n	80060ee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3740      	adds	r7, #64	; 0x40
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b098      	sub	sp, #96	; 0x60
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	4613      	mov	r3, r2
 80061c4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80061c6:	68ba      	ldr	r2, [r7, #8]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	88fa      	ldrh	r2, [r7, #6]
 80061d0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2200      	movs	r2, #0
 80061d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2222      	movs	r2, #34	; 0x22
 80061dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e4:	4a3e      	ldr	r2, [pc, #248]	; (80062e0 <UART_Start_Receive_DMA+0x128>)
 80061e6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ec:	4a3d      	ldr	r2, [pc, #244]	; (80062e4 <UART_Start_Receive_DMA+0x12c>)
 80061ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f4:	4a3c      	ldr	r2, [pc, #240]	; (80062e8 <UART_Start_Receive_DMA+0x130>)
 80061f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061fc:	2200      	movs	r2, #0
 80061fe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006200:	f107 0308 	add.w	r3, r7, #8
 8006204:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	3304      	adds	r3, #4
 8006210:	4619      	mov	r1, r3
 8006212:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	88fb      	ldrh	r3, [r7, #6]
 8006218:	f7fb fcbe 	bl	8001b98 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800621c:	2300      	movs	r3, #0
 800621e:	613b      	str	r3, [r7, #16]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	613b      	str	r3, [r7, #16]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	613b      	str	r3, [r7, #16]
 8006230:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2200      	movs	r2, #0
 8006236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	330c      	adds	r3, #12
 8006240:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006242:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006244:	e853 3f00 	ldrex	r3, [r3]
 8006248:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800624a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800624c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006250:	65bb      	str	r3, [r7, #88]	; 0x58
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	330c      	adds	r3, #12
 8006258:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800625a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800625c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800625e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006260:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006262:	e841 2300 	strex	r3, r2, [r1]
 8006266:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006268:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800626a:	2b00      	cmp	r3, #0
 800626c:	d1e5      	bne.n	800623a <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	3314      	adds	r3, #20
 8006274:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006278:	e853 3f00 	ldrex	r3, [r3]
 800627c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800627e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006280:	f043 0301 	orr.w	r3, r3, #1
 8006284:	657b      	str	r3, [r7, #84]	; 0x54
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	3314      	adds	r3, #20
 800628c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800628e:	63ba      	str	r2, [r7, #56]	; 0x38
 8006290:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006292:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006294:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006296:	e841 2300 	strex	r3, r2, [r1]
 800629a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800629c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d1e5      	bne.n	800626e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	3314      	adds	r3, #20
 80062a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	e853 3f00 	ldrex	r3, [r3]
 80062b0:	617b      	str	r3, [r7, #20]
   return(result);
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062b8:	653b      	str	r3, [r7, #80]	; 0x50
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	3314      	adds	r3, #20
 80062c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80062c2:	627a      	str	r2, [r7, #36]	; 0x24
 80062c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c6:	6a39      	ldr	r1, [r7, #32]
 80062c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062ca:	e841 2300 	strex	r3, r2, [r1]
 80062ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d1e5      	bne.n	80062a2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3760      	adds	r7, #96	; 0x60
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	08005eed 	.word	0x08005eed
 80062e4:	08006013 	.word	0x08006013
 80062e8:	08006049 	.word	0x08006049

080062ec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b089      	sub	sp, #36	; 0x24
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	330c      	adds	r3, #12
 80062fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	e853 3f00 	ldrex	r3, [r3]
 8006302:	60bb      	str	r3, [r7, #8]
   return(result);
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800630a:	61fb      	str	r3, [r7, #28]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	330c      	adds	r3, #12
 8006312:	69fa      	ldr	r2, [r7, #28]
 8006314:	61ba      	str	r2, [r7, #24]
 8006316:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006318:	6979      	ldr	r1, [r7, #20]
 800631a:	69ba      	ldr	r2, [r7, #24]
 800631c:	e841 2300 	strex	r3, r2, [r1]
 8006320:	613b      	str	r3, [r7, #16]
   return(result);
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d1e5      	bne.n	80062f4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2220      	movs	r2, #32
 800632c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006330:	bf00      	nop
 8006332:	3724      	adds	r7, #36	; 0x24
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800633c:	b480      	push	{r7}
 800633e:	b095      	sub	sp, #84	; 0x54
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	330c      	adds	r3, #12
 800634a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800634c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800634e:	e853 3f00 	ldrex	r3, [r3]
 8006352:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006356:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800635a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	330c      	adds	r3, #12
 8006362:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006364:	643a      	str	r2, [r7, #64]	; 0x40
 8006366:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006368:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800636a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800636c:	e841 2300 	strex	r3, r2, [r1]
 8006370:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006374:	2b00      	cmp	r3, #0
 8006376:	d1e5      	bne.n	8006344 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	3314      	adds	r3, #20
 800637e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006380:	6a3b      	ldr	r3, [r7, #32]
 8006382:	e853 3f00 	ldrex	r3, [r3]
 8006386:	61fb      	str	r3, [r7, #28]
   return(result);
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	f023 0301 	bic.w	r3, r3, #1
 800638e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	3314      	adds	r3, #20
 8006396:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006398:	62fa      	str	r2, [r7, #44]	; 0x2c
 800639a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800639c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800639e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063a0:	e841 2300 	strex	r3, r2, [r1]
 80063a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d1e5      	bne.n	8006378 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d119      	bne.n	80063e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	330c      	adds	r3, #12
 80063ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	e853 3f00 	ldrex	r3, [r3]
 80063c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	f023 0310 	bic.w	r3, r3, #16
 80063ca:	647b      	str	r3, [r7, #68]	; 0x44
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	330c      	adds	r3, #12
 80063d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063d4:	61ba      	str	r2, [r7, #24]
 80063d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d8:	6979      	ldr	r1, [r7, #20]
 80063da:	69ba      	ldr	r2, [r7, #24]
 80063dc:	e841 2300 	strex	r3, r2, [r1]
 80063e0:	613b      	str	r3, [r7, #16]
   return(result);
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d1e5      	bne.n	80063b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2220      	movs	r2, #32
 80063ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80063f6:	bf00      	nop
 80063f8:	3754      	adds	r7, #84	; 0x54
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr

08006402 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006402:	b580      	push	{r7, lr}
 8006404:	b084      	sub	sp, #16
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800640e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2200      	movs	r2, #0
 8006414:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2200      	movs	r2, #0
 800641a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800641c:	68f8      	ldr	r0, [r7, #12]
 800641e:	f7ff fd4f 	bl	8005ec0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006422:	bf00      	nop
 8006424:	3710      	adds	r7, #16
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}

0800642a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800642a:	b480      	push	{r7}
 800642c:	b085      	sub	sp, #20
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006438:	b2db      	uxtb	r3, r3
 800643a:	2b21      	cmp	r3, #33	; 0x21
 800643c:	d13e      	bne.n	80064bc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006446:	d114      	bne.n	8006472 <UART_Transmit_IT+0x48>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	691b      	ldr	r3, [r3, #16]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d110      	bne.n	8006472 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6a1b      	ldr	r3, [r3, #32]
 8006454:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	881b      	ldrh	r3, [r3, #0]
 800645a:	461a      	mov	r2, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006464:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a1b      	ldr	r3, [r3, #32]
 800646a:	1c9a      	adds	r2, r3, #2
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	621a      	str	r2, [r3, #32]
 8006470:	e008      	b.n	8006484 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a1b      	ldr	r3, [r3, #32]
 8006476:	1c59      	adds	r1, r3, #1
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	6211      	str	r1, [r2, #32]
 800647c:	781a      	ldrb	r2, [r3, #0]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006488:	b29b      	uxth	r3, r3
 800648a:	3b01      	subs	r3, #1
 800648c:	b29b      	uxth	r3, r3
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	4619      	mov	r1, r3
 8006492:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006494:	2b00      	cmp	r3, #0
 8006496:	d10f      	bne.n	80064b8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68da      	ldr	r2, [r3, #12]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064a6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	68da      	ldr	r2, [r3, #12]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064b6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80064b8:	2300      	movs	r3, #0
 80064ba:	e000      	b.n	80064be <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80064bc:	2302      	movs	r3, #2
  }
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3714      	adds	r7, #20
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr

080064ca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80064ca:	b580      	push	{r7, lr}
 80064cc:	b082      	sub	sp, #8
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	68da      	ldr	r2, [r3, #12]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064e0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2220      	movs	r2, #32
 80064e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f7ff fcca 	bl	8005e84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3708      	adds	r7, #8
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}

080064fa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80064fa:	b580      	push	{r7, lr}
 80064fc:	b08c      	sub	sp, #48	; 0x30
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006508:	b2db      	uxtb	r3, r3
 800650a:	2b22      	cmp	r3, #34	; 0x22
 800650c:	f040 80ab 	bne.w	8006666 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006518:	d117      	bne.n	800654a <UART_Receive_IT+0x50>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d113      	bne.n	800654a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006522:	2300      	movs	r3, #0
 8006524:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800652a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	b29b      	uxth	r3, r3
 8006534:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006538:	b29a      	uxth	r2, r3
 800653a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006542:	1c9a      	adds	r2, r3, #2
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	629a      	str	r2, [r3, #40]	; 0x28
 8006548:	e026      	b.n	8006598 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800654e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006550:	2300      	movs	r3, #0
 8006552:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800655c:	d007      	beq.n	800656e <UART_Receive_IT+0x74>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d10a      	bne.n	800657c <UART_Receive_IT+0x82>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d106      	bne.n	800657c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	b2da      	uxtb	r2, r3
 8006576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006578:	701a      	strb	r2, [r3, #0]
 800657a:	e008      	b.n	800658e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	b2db      	uxtb	r3, r3
 8006584:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006588:	b2da      	uxtb	r2, r3
 800658a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800658c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006592:	1c5a      	adds	r2, r3, #1
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800659c:	b29b      	uxth	r3, r3
 800659e:	3b01      	subs	r3, #1
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	4619      	mov	r1, r3
 80065a6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d15a      	bne.n	8006662 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	68da      	ldr	r2, [r3, #12]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f022 0220 	bic.w	r2, r2, #32
 80065ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	68da      	ldr	r2, [r3, #12]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	695a      	ldr	r2, [r3, #20]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f022 0201 	bic.w	r2, r2, #1
 80065da:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2220      	movs	r2, #32
 80065e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d135      	bne.n	8006658 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	330c      	adds	r3, #12
 80065f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	e853 3f00 	ldrex	r3, [r3]
 8006600:	613b      	str	r3, [r7, #16]
   return(result);
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	f023 0310 	bic.w	r3, r3, #16
 8006608:	627b      	str	r3, [r7, #36]	; 0x24
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	330c      	adds	r3, #12
 8006610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006612:	623a      	str	r2, [r7, #32]
 8006614:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006616:	69f9      	ldr	r1, [r7, #28]
 8006618:	6a3a      	ldr	r2, [r7, #32]
 800661a:	e841 2300 	strex	r3, r2, [r1]
 800661e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006620:	69bb      	ldr	r3, [r7, #24]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d1e5      	bne.n	80065f2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 0310 	and.w	r3, r3, #16
 8006630:	2b10      	cmp	r3, #16
 8006632:	d10a      	bne.n	800664a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006634:	2300      	movs	r3, #0
 8006636:	60fb      	str	r3, [r7, #12]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	60fb      	str	r3, [r7, #12]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	60fb      	str	r3, [r7, #12]
 8006648:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800664e:	4619      	mov	r1, r3
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f7ff fc3f 	bl	8005ed4 <HAL_UARTEx_RxEventCallback>
 8006656:	e002      	b.n	800665e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f7ff fc1d 	bl	8005e98 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800665e:	2300      	movs	r3, #0
 8006660:	e002      	b.n	8006668 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006662:	2300      	movs	r3, #0
 8006664:	e000      	b.n	8006668 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006666:	2302      	movs	r3, #2
  }
}
 8006668:	4618      	mov	r0, r3
 800666a:	3730      	adds	r7, #48	; 0x30
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006670:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006674:	b0c0      	sub	sp, #256	; 0x100
 8006676:	af00      	add	r7, sp, #0
 8006678:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800667c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	691b      	ldr	r3, [r3, #16]
 8006684:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800668c:	68d9      	ldr	r1, [r3, #12]
 800668e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	ea40 0301 	orr.w	r3, r0, r1
 8006698:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800669a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800669e:	689a      	ldr	r2, [r3, #8]
 80066a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	431a      	orrs	r2, r3
 80066a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066ac:	695b      	ldr	r3, [r3, #20]
 80066ae:	431a      	orrs	r2, r3
 80066b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066b4:	69db      	ldr	r3, [r3, #28]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80066bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80066c8:	f021 010c 	bic.w	r1, r1, #12
 80066cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80066d6:	430b      	orrs	r3, r1
 80066d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80066da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	695b      	ldr	r3, [r3, #20]
 80066e2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80066e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066ea:	6999      	ldr	r1, [r3, #24]
 80066ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	ea40 0301 	orr.w	r3, r0, r1
 80066f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80066f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	4b8f      	ldr	r3, [pc, #572]	; (800693c <UART_SetConfig+0x2cc>)
 8006700:	429a      	cmp	r2, r3
 8006702:	d005      	beq.n	8006710 <UART_SetConfig+0xa0>
 8006704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	4b8d      	ldr	r3, [pc, #564]	; (8006940 <UART_SetConfig+0x2d0>)
 800670c:	429a      	cmp	r2, r3
 800670e:	d104      	bne.n	800671a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006710:	f7fe fb00 	bl	8004d14 <HAL_RCC_GetPCLK2Freq>
 8006714:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006718:	e003      	b.n	8006722 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800671a:	f7fe fae7 	bl	8004cec <HAL_RCC_GetPCLK1Freq>
 800671e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006726:	69db      	ldr	r3, [r3, #28]
 8006728:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800672c:	f040 810c 	bne.w	8006948 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006730:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006734:	2200      	movs	r2, #0
 8006736:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800673a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800673e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006742:	4622      	mov	r2, r4
 8006744:	462b      	mov	r3, r5
 8006746:	1891      	adds	r1, r2, r2
 8006748:	65b9      	str	r1, [r7, #88]	; 0x58
 800674a:	415b      	adcs	r3, r3
 800674c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800674e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006752:	4621      	mov	r1, r4
 8006754:	eb12 0801 	adds.w	r8, r2, r1
 8006758:	4629      	mov	r1, r5
 800675a:	eb43 0901 	adc.w	r9, r3, r1
 800675e:	f04f 0200 	mov.w	r2, #0
 8006762:	f04f 0300 	mov.w	r3, #0
 8006766:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800676a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800676e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006772:	4690      	mov	r8, r2
 8006774:	4699      	mov	r9, r3
 8006776:	4623      	mov	r3, r4
 8006778:	eb18 0303 	adds.w	r3, r8, r3
 800677c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006780:	462b      	mov	r3, r5
 8006782:	eb49 0303 	adc.w	r3, r9, r3
 8006786:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800678a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006796:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800679a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800679e:	460b      	mov	r3, r1
 80067a0:	18db      	adds	r3, r3, r3
 80067a2:	653b      	str	r3, [r7, #80]	; 0x50
 80067a4:	4613      	mov	r3, r2
 80067a6:	eb42 0303 	adc.w	r3, r2, r3
 80067aa:	657b      	str	r3, [r7, #84]	; 0x54
 80067ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80067b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80067b4:	f7f9 fd6c 	bl	8000290 <__aeabi_uldivmod>
 80067b8:	4602      	mov	r2, r0
 80067ba:	460b      	mov	r3, r1
 80067bc:	4b61      	ldr	r3, [pc, #388]	; (8006944 <UART_SetConfig+0x2d4>)
 80067be:	fba3 2302 	umull	r2, r3, r3, r2
 80067c2:	095b      	lsrs	r3, r3, #5
 80067c4:	011c      	lsls	r4, r3, #4
 80067c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067ca:	2200      	movs	r2, #0
 80067cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80067d0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80067d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80067d8:	4642      	mov	r2, r8
 80067da:	464b      	mov	r3, r9
 80067dc:	1891      	adds	r1, r2, r2
 80067de:	64b9      	str	r1, [r7, #72]	; 0x48
 80067e0:	415b      	adcs	r3, r3
 80067e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80067e8:	4641      	mov	r1, r8
 80067ea:	eb12 0a01 	adds.w	sl, r2, r1
 80067ee:	4649      	mov	r1, r9
 80067f0:	eb43 0b01 	adc.w	fp, r3, r1
 80067f4:	f04f 0200 	mov.w	r2, #0
 80067f8:	f04f 0300 	mov.w	r3, #0
 80067fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006800:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006804:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006808:	4692      	mov	sl, r2
 800680a:	469b      	mov	fp, r3
 800680c:	4643      	mov	r3, r8
 800680e:	eb1a 0303 	adds.w	r3, sl, r3
 8006812:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006816:	464b      	mov	r3, r9
 8006818:	eb4b 0303 	adc.w	r3, fp, r3
 800681c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800682c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006830:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006834:	460b      	mov	r3, r1
 8006836:	18db      	adds	r3, r3, r3
 8006838:	643b      	str	r3, [r7, #64]	; 0x40
 800683a:	4613      	mov	r3, r2
 800683c:	eb42 0303 	adc.w	r3, r2, r3
 8006840:	647b      	str	r3, [r7, #68]	; 0x44
 8006842:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006846:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800684a:	f7f9 fd21 	bl	8000290 <__aeabi_uldivmod>
 800684e:	4602      	mov	r2, r0
 8006850:	460b      	mov	r3, r1
 8006852:	4611      	mov	r1, r2
 8006854:	4b3b      	ldr	r3, [pc, #236]	; (8006944 <UART_SetConfig+0x2d4>)
 8006856:	fba3 2301 	umull	r2, r3, r3, r1
 800685a:	095b      	lsrs	r3, r3, #5
 800685c:	2264      	movs	r2, #100	; 0x64
 800685e:	fb02 f303 	mul.w	r3, r2, r3
 8006862:	1acb      	subs	r3, r1, r3
 8006864:	00db      	lsls	r3, r3, #3
 8006866:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800686a:	4b36      	ldr	r3, [pc, #216]	; (8006944 <UART_SetConfig+0x2d4>)
 800686c:	fba3 2302 	umull	r2, r3, r3, r2
 8006870:	095b      	lsrs	r3, r3, #5
 8006872:	005b      	lsls	r3, r3, #1
 8006874:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006878:	441c      	add	r4, r3
 800687a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800687e:	2200      	movs	r2, #0
 8006880:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006884:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006888:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800688c:	4642      	mov	r2, r8
 800688e:	464b      	mov	r3, r9
 8006890:	1891      	adds	r1, r2, r2
 8006892:	63b9      	str	r1, [r7, #56]	; 0x38
 8006894:	415b      	adcs	r3, r3
 8006896:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006898:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800689c:	4641      	mov	r1, r8
 800689e:	1851      	adds	r1, r2, r1
 80068a0:	6339      	str	r1, [r7, #48]	; 0x30
 80068a2:	4649      	mov	r1, r9
 80068a4:	414b      	adcs	r3, r1
 80068a6:	637b      	str	r3, [r7, #52]	; 0x34
 80068a8:	f04f 0200 	mov.w	r2, #0
 80068ac:	f04f 0300 	mov.w	r3, #0
 80068b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80068b4:	4659      	mov	r1, fp
 80068b6:	00cb      	lsls	r3, r1, #3
 80068b8:	4651      	mov	r1, sl
 80068ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068be:	4651      	mov	r1, sl
 80068c0:	00ca      	lsls	r2, r1, #3
 80068c2:	4610      	mov	r0, r2
 80068c4:	4619      	mov	r1, r3
 80068c6:	4603      	mov	r3, r0
 80068c8:	4642      	mov	r2, r8
 80068ca:	189b      	adds	r3, r3, r2
 80068cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80068d0:	464b      	mov	r3, r9
 80068d2:	460a      	mov	r2, r1
 80068d4:	eb42 0303 	adc.w	r3, r2, r3
 80068d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80068e8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80068ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80068f0:	460b      	mov	r3, r1
 80068f2:	18db      	adds	r3, r3, r3
 80068f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80068f6:	4613      	mov	r3, r2
 80068f8:	eb42 0303 	adc.w	r3, r2, r3
 80068fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006902:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006906:	f7f9 fcc3 	bl	8000290 <__aeabi_uldivmod>
 800690a:	4602      	mov	r2, r0
 800690c:	460b      	mov	r3, r1
 800690e:	4b0d      	ldr	r3, [pc, #52]	; (8006944 <UART_SetConfig+0x2d4>)
 8006910:	fba3 1302 	umull	r1, r3, r3, r2
 8006914:	095b      	lsrs	r3, r3, #5
 8006916:	2164      	movs	r1, #100	; 0x64
 8006918:	fb01 f303 	mul.w	r3, r1, r3
 800691c:	1ad3      	subs	r3, r2, r3
 800691e:	00db      	lsls	r3, r3, #3
 8006920:	3332      	adds	r3, #50	; 0x32
 8006922:	4a08      	ldr	r2, [pc, #32]	; (8006944 <UART_SetConfig+0x2d4>)
 8006924:	fba2 2303 	umull	r2, r3, r2, r3
 8006928:	095b      	lsrs	r3, r3, #5
 800692a:	f003 0207 	and.w	r2, r3, #7
 800692e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4422      	add	r2, r4
 8006936:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006938:	e105      	b.n	8006b46 <UART_SetConfig+0x4d6>
 800693a:	bf00      	nop
 800693c:	40011000 	.word	0x40011000
 8006940:	40011400 	.word	0x40011400
 8006944:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006948:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800694c:	2200      	movs	r2, #0
 800694e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006952:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006956:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800695a:	4642      	mov	r2, r8
 800695c:	464b      	mov	r3, r9
 800695e:	1891      	adds	r1, r2, r2
 8006960:	6239      	str	r1, [r7, #32]
 8006962:	415b      	adcs	r3, r3
 8006964:	627b      	str	r3, [r7, #36]	; 0x24
 8006966:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800696a:	4641      	mov	r1, r8
 800696c:	1854      	adds	r4, r2, r1
 800696e:	4649      	mov	r1, r9
 8006970:	eb43 0501 	adc.w	r5, r3, r1
 8006974:	f04f 0200 	mov.w	r2, #0
 8006978:	f04f 0300 	mov.w	r3, #0
 800697c:	00eb      	lsls	r3, r5, #3
 800697e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006982:	00e2      	lsls	r2, r4, #3
 8006984:	4614      	mov	r4, r2
 8006986:	461d      	mov	r5, r3
 8006988:	4643      	mov	r3, r8
 800698a:	18e3      	adds	r3, r4, r3
 800698c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006990:	464b      	mov	r3, r9
 8006992:	eb45 0303 	adc.w	r3, r5, r3
 8006996:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800699a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80069a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80069aa:	f04f 0200 	mov.w	r2, #0
 80069ae:	f04f 0300 	mov.w	r3, #0
 80069b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80069b6:	4629      	mov	r1, r5
 80069b8:	008b      	lsls	r3, r1, #2
 80069ba:	4621      	mov	r1, r4
 80069bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069c0:	4621      	mov	r1, r4
 80069c2:	008a      	lsls	r2, r1, #2
 80069c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80069c8:	f7f9 fc62 	bl	8000290 <__aeabi_uldivmod>
 80069cc:	4602      	mov	r2, r0
 80069ce:	460b      	mov	r3, r1
 80069d0:	4b60      	ldr	r3, [pc, #384]	; (8006b54 <UART_SetConfig+0x4e4>)
 80069d2:	fba3 2302 	umull	r2, r3, r3, r2
 80069d6:	095b      	lsrs	r3, r3, #5
 80069d8:	011c      	lsls	r4, r3, #4
 80069da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069de:	2200      	movs	r2, #0
 80069e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80069e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80069e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80069ec:	4642      	mov	r2, r8
 80069ee:	464b      	mov	r3, r9
 80069f0:	1891      	adds	r1, r2, r2
 80069f2:	61b9      	str	r1, [r7, #24]
 80069f4:	415b      	adcs	r3, r3
 80069f6:	61fb      	str	r3, [r7, #28]
 80069f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80069fc:	4641      	mov	r1, r8
 80069fe:	1851      	adds	r1, r2, r1
 8006a00:	6139      	str	r1, [r7, #16]
 8006a02:	4649      	mov	r1, r9
 8006a04:	414b      	adcs	r3, r1
 8006a06:	617b      	str	r3, [r7, #20]
 8006a08:	f04f 0200 	mov.w	r2, #0
 8006a0c:	f04f 0300 	mov.w	r3, #0
 8006a10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a14:	4659      	mov	r1, fp
 8006a16:	00cb      	lsls	r3, r1, #3
 8006a18:	4651      	mov	r1, sl
 8006a1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a1e:	4651      	mov	r1, sl
 8006a20:	00ca      	lsls	r2, r1, #3
 8006a22:	4610      	mov	r0, r2
 8006a24:	4619      	mov	r1, r3
 8006a26:	4603      	mov	r3, r0
 8006a28:	4642      	mov	r2, r8
 8006a2a:	189b      	adds	r3, r3, r2
 8006a2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a30:	464b      	mov	r3, r9
 8006a32:	460a      	mov	r2, r1
 8006a34:	eb42 0303 	adc.w	r3, r2, r3
 8006a38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a46:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006a48:	f04f 0200 	mov.w	r2, #0
 8006a4c:	f04f 0300 	mov.w	r3, #0
 8006a50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006a54:	4649      	mov	r1, r9
 8006a56:	008b      	lsls	r3, r1, #2
 8006a58:	4641      	mov	r1, r8
 8006a5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a5e:	4641      	mov	r1, r8
 8006a60:	008a      	lsls	r2, r1, #2
 8006a62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006a66:	f7f9 fc13 	bl	8000290 <__aeabi_uldivmod>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	4b39      	ldr	r3, [pc, #228]	; (8006b54 <UART_SetConfig+0x4e4>)
 8006a70:	fba3 1302 	umull	r1, r3, r3, r2
 8006a74:	095b      	lsrs	r3, r3, #5
 8006a76:	2164      	movs	r1, #100	; 0x64
 8006a78:	fb01 f303 	mul.w	r3, r1, r3
 8006a7c:	1ad3      	subs	r3, r2, r3
 8006a7e:	011b      	lsls	r3, r3, #4
 8006a80:	3332      	adds	r3, #50	; 0x32
 8006a82:	4a34      	ldr	r2, [pc, #208]	; (8006b54 <UART_SetConfig+0x4e4>)
 8006a84:	fba2 2303 	umull	r2, r3, r2, r3
 8006a88:	095b      	lsrs	r3, r3, #5
 8006a8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a8e:	441c      	add	r4, r3
 8006a90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a94:	2200      	movs	r2, #0
 8006a96:	673b      	str	r3, [r7, #112]	; 0x70
 8006a98:	677a      	str	r2, [r7, #116]	; 0x74
 8006a9a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006a9e:	4642      	mov	r2, r8
 8006aa0:	464b      	mov	r3, r9
 8006aa2:	1891      	adds	r1, r2, r2
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	415b      	adcs	r3, r3
 8006aa8:	60fb      	str	r3, [r7, #12]
 8006aaa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006aae:	4641      	mov	r1, r8
 8006ab0:	1851      	adds	r1, r2, r1
 8006ab2:	6039      	str	r1, [r7, #0]
 8006ab4:	4649      	mov	r1, r9
 8006ab6:	414b      	adcs	r3, r1
 8006ab8:	607b      	str	r3, [r7, #4]
 8006aba:	f04f 0200 	mov.w	r2, #0
 8006abe:	f04f 0300 	mov.w	r3, #0
 8006ac2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006ac6:	4659      	mov	r1, fp
 8006ac8:	00cb      	lsls	r3, r1, #3
 8006aca:	4651      	mov	r1, sl
 8006acc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ad0:	4651      	mov	r1, sl
 8006ad2:	00ca      	lsls	r2, r1, #3
 8006ad4:	4610      	mov	r0, r2
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	4603      	mov	r3, r0
 8006ada:	4642      	mov	r2, r8
 8006adc:	189b      	adds	r3, r3, r2
 8006ade:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ae0:	464b      	mov	r3, r9
 8006ae2:	460a      	mov	r2, r1
 8006ae4:	eb42 0303 	adc.w	r3, r2, r3
 8006ae8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	663b      	str	r3, [r7, #96]	; 0x60
 8006af4:	667a      	str	r2, [r7, #100]	; 0x64
 8006af6:	f04f 0200 	mov.w	r2, #0
 8006afa:	f04f 0300 	mov.w	r3, #0
 8006afe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006b02:	4649      	mov	r1, r9
 8006b04:	008b      	lsls	r3, r1, #2
 8006b06:	4641      	mov	r1, r8
 8006b08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b0c:	4641      	mov	r1, r8
 8006b0e:	008a      	lsls	r2, r1, #2
 8006b10:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006b14:	f7f9 fbbc 	bl	8000290 <__aeabi_uldivmod>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	460b      	mov	r3, r1
 8006b1c:	4b0d      	ldr	r3, [pc, #52]	; (8006b54 <UART_SetConfig+0x4e4>)
 8006b1e:	fba3 1302 	umull	r1, r3, r3, r2
 8006b22:	095b      	lsrs	r3, r3, #5
 8006b24:	2164      	movs	r1, #100	; 0x64
 8006b26:	fb01 f303 	mul.w	r3, r1, r3
 8006b2a:	1ad3      	subs	r3, r2, r3
 8006b2c:	011b      	lsls	r3, r3, #4
 8006b2e:	3332      	adds	r3, #50	; 0x32
 8006b30:	4a08      	ldr	r2, [pc, #32]	; (8006b54 <UART_SetConfig+0x4e4>)
 8006b32:	fba2 2303 	umull	r2, r3, r2, r3
 8006b36:	095b      	lsrs	r3, r3, #5
 8006b38:	f003 020f 	and.w	r2, r3, #15
 8006b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4422      	add	r2, r4
 8006b44:	609a      	str	r2, [r3, #8]
}
 8006b46:	bf00      	nop
 8006b48:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b52:	bf00      	nop
 8006b54:	51eb851f 	.word	0x51eb851f

08006b58 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	4603      	mov	r3, r0
 8006b60:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006b62:	2300      	movs	r3, #0
 8006b64:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006b66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006b6a:	2b84      	cmp	r3, #132	; 0x84
 8006b6c:	d005      	beq.n	8006b7a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006b6e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	4413      	add	r3, r2
 8006b76:	3303      	adds	r3, #3
 8006b78:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3714      	adds	r7, #20
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006b8c:	f001 faaa 	bl	80080e4 <vTaskStartScheduler>
  
  return osOK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	bd80      	pop	{r7, pc}

08006b96 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006b96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b98:	b089      	sub	sp, #36	; 0x24
 8006b9a:	af04      	add	r7, sp, #16
 8006b9c:	6078      	str	r0, [r7, #4]
 8006b9e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	695b      	ldr	r3, [r3, #20]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d020      	beq.n	8006bea <osThreadCreate+0x54>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	699b      	ldr	r3, [r3, #24]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d01c      	beq.n	8006bea <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	685c      	ldr	r4, [r3, #4]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681d      	ldr	r5, [r3, #0]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	691e      	ldr	r6, [r3, #16]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7ff ffc8 	bl	8006b58 <makeFreeRtosPriority>
 8006bc8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	695b      	ldr	r3, [r3, #20]
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006bd2:	9202      	str	r2, [sp, #8]
 8006bd4:	9301      	str	r3, [sp, #4]
 8006bd6:	9100      	str	r1, [sp, #0]
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	4632      	mov	r2, r6
 8006bdc:	4629      	mov	r1, r5
 8006bde:	4620      	mov	r0, r4
 8006be0:	f001 f8b8 	bl	8007d54 <xTaskCreateStatic>
 8006be4:	4603      	mov	r3, r0
 8006be6:	60fb      	str	r3, [r7, #12]
 8006be8:	e01c      	b.n	8006c24 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	685c      	ldr	r4, [r3, #4]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006bf6:	b29e      	uxth	r6, r3
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f7ff ffaa 	bl	8006b58 <makeFreeRtosPriority>
 8006c04:	4602      	mov	r2, r0
 8006c06:	f107 030c 	add.w	r3, r7, #12
 8006c0a:	9301      	str	r3, [sp, #4]
 8006c0c:	9200      	str	r2, [sp, #0]
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	4632      	mov	r2, r6
 8006c12:	4629      	mov	r1, r5
 8006c14:	4620      	mov	r0, r4
 8006c16:	f001 f8fa 	bl	8007e0e <xTaskCreate>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d001      	beq.n	8006c24 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006c20:	2300      	movs	r3, #0
 8006c22:	e000      	b.n	8006c26 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006c24:	68fb      	ldr	r3, [r7, #12]
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3714      	adds	r7, #20
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006c2e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006c2e:	b580      	push	{r7, lr}
 8006c30:	b084      	sub	sp, #16
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d001      	beq.n	8006c44 <osDelay+0x16>
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	e000      	b.n	8006c46 <osDelay+0x18>
 8006c44:	2301      	movs	r3, #1
 8006c46:	4618      	mov	r0, r3
 8006c48:	f001 fa18 	bl	800807c <vTaskDelay>
  
  return osOK;
 8006c4c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3710      	adds	r7, #16
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}

08006c56 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8006c56:	b580      	push	{r7, lr}
 8006c58:	b082      	sub	sp, #8
 8006c5a:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8006c5c:	201c      	movs	r0, #28
 8006c5e:	f002 fb63 	bl	8009328 <pvPortMalloc>
 8006c62:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d00a      	beq.n	8006c80 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	3304      	adds	r3, #4
 8006c74:	4618      	mov	r0, r3
 8006c76:	f000 f9bc 	bl	8006ff2 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8006c80:	687b      	ldr	r3, [r7, #4]
	}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3708      	adds	r7, #8
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
	...

08006c8c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b090      	sub	sp, #64	; 0x40
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	607a      	str	r2, [r7, #4]
 8006c98:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d10a      	bne.n	8006cc2 <xEventGroupWaitBits+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb0:	f383 8811 	msr	BASEPRI, r3
 8006cb4:	f3bf 8f6f 	isb	sy
 8006cb8:	f3bf 8f4f 	dsb	sy
 8006cbc:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006cbe:	bf00      	nop
 8006cc0:	e7fe      	b.n	8006cc0 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00a      	beq.n	8006ce2 <xEventGroupWaitBits+0x56>
	__asm volatile
 8006ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd0:	f383 8811 	msr	BASEPRI, r3
 8006cd4:	f3bf 8f6f 	isb	sy
 8006cd8:	f3bf 8f4f 	dsb	sy
 8006cdc:	61fb      	str	r3, [r7, #28]
}
 8006cde:	bf00      	nop
 8006ce0:	e7fe      	b.n	8006ce0 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d10a      	bne.n	8006cfe <xEventGroupWaitBits+0x72>
	__asm volatile
 8006ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cec:	f383 8811 	msr	BASEPRI, r3
 8006cf0:	f3bf 8f6f 	isb	sy
 8006cf4:	f3bf 8f4f 	dsb	sy
 8006cf8:	61bb      	str	r3, [r7, #24]
}
 8006cfa:	bf00      	nop
 8006cfc:	e7fe      	b.n	8006cfc <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006cfe:	f001 fe8d 	bl	8008a1c <xTaskGetSchedulerState>
 8006d02:	4603      	mov	r3, r0
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d102      	bne.n	8006d0e <xEventGroupWaitBits+0x82>
 8006d08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d101      	bne.n	8006d12 <xEventGroupWaitBits+0x86>
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e000      	b.n	8006d14 <xEventGroupWaitBits+0x88>
 8006d12:	2300      	movs	r3, #0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d10a      	bne.n	8006d2e <xEventGroupWaitBits+0xa2>
	__asm volatile
 8006d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d1c:	f383 8811 	msr	BASEPRI, r3
 8006d20:	f3bf 8f6f 	isb	sy
 8006d24:	f3bf 8f4f 	dsb	sy
 8006d28:	617b      	str	r3, [r7, #20]
}
 8006d2a:	bf00      	nop
 8006d2c:	e7fe      	b.n	8006d2c <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8006d2e:	f001 fa39 	bl	80081a4 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8006d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8006d38:	683a      	ldr	r2, [r7, #0]
 8006d3a:	68b9      	ldr	r1, [r7, #8]
 8006d3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d3e:	f000 f936 	bl	8006fae <prvTestWaitCondition>
 8006d42:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8006d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d00e      	beq.n	8006d68 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8006d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d028      	beq.n	8006daa <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8006d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	43db      	mvns	r3, r3
 8006d60:	401a      	ands	r2, r3
 8006d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d64:	601a      	str	r2, [r3, #0]
 8006d66:	e020      	b.n	8006daa <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8006d68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d104      	bne.n	8006d78 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8006d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d70:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8006d72:	2301      	movs	r3, #1
 8006d74:	633b      	str	r3, [r7, #48]	; 0x30
 8006d76:	e018      	b.n	8006daa <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d003      	beq.n	8006d86 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8006d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d84:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d003      	beq.n	8006d94 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8006d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d8e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006d92:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8006d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d96:	1d18      	adds	r0, r3, #4
 8006d98:	68ba      	ldr	r2, [r7, #8]
 8006d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006da0:	4619      	mov	r1, r3
 8006da2:	f001 fbe1 	bl	8008568 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8006da6:	2300      	movs	r3, #0
 8006da8:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8006daa:	f001 fa09 	bl	80081c0 <xTaskResumeAll>
 8006dae:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8006db0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d031      	beq.n	8006e1a <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8006db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d107      	bne.n	8006dcc <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8006dbc:	4b19      	ldr	r3, [pc, #100]	; (8006e24 <xEventGroupWaitBits+0x198>)
 8006dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dc2:	601a      	str	r2, [r3, #0]
 8006dc4:	f3bf 8f4f 	dsb	sy
 8006dc8:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8006dcc:	f001 ffce 	bl	8008d6c <uxTaskResetEventItemValue>
 8006dd0:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8006dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d11a      	bne.n	8006e12 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8006ddc:	f002 f982 	bl	80090e4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8006de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8006de6:	683a      	ldr	r2, [r7, #0]
 8006de8:	68b9      	ldr	r1, [r7, #8]
 8006dea:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006dec:	f000 f8df 	bl	8006fae <prvTestWaitCondition>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d009      	beq.n	8006e0a <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d006      	beq.n	8006e0a <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8006dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	43db      	mvns	r3, r3
 8006e04:	401a      	ands	r2, r3
 8006e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e08:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8006e0e:	f002 f999 	bl	8009144 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8006e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e14:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006e18:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8006e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3740      	adds	r7, #64	; 0x40
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}
 8006e24:	e000ed04 	.word	0xe000ed04

08006e28 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b086      	sub	sp, #24
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d10a      	bne.n	8006e52 <xEventGroupClearBits+0x2a>
	__asm volatile
 8006e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e40:	f383 8811 	msr	BASEPRI, r3
 8006e44:	f3bf 8f6f 	isb	sy
 8006e48:	f3bf 8f4f 	dsb	sy
 8006e4c:	60fb      	str	r3, [r7, #12]
}
 8006e4e:	bf00      	nop
 8006e50:	e7fe      	b.n	8006e50 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d00a      	beq.n	8006e72 <xEventGroupClearBits+0x4a>
	__asm volatile
 8006e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e60:	f383 8811 	msr	BASEPRI, r3
 8006e64:	f3bf 8f6f 	isb	sy
 8006e68:	f3bf 8f4f 	dsb	sy
 8006e6c:	60bb      	str	r3, [r7, #8]
}
 8006e6e:	bf00      	nop
 8006e70:	e7fe      	b.n	8006e70 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8006e72:	f002 f937 	bl	80090e4 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	43db      	mvns	r3, r3
 8006e84:	401a      	ands	r2, r3
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8006e8a:	f002 f95b 	bl	8009144 <vPortExitCritical>

	return uxReturn;
 8006e8e:	693b      	ldr	r3, [r7, #16]
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3718      	adds	r7, #24
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b08e      	sub	sp, #56	; 0x38
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d10a      	bne.n	8006eca <xEventGroupSetBits+0x32>
	__asm volatile
 8006eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb8:	f383 8811 	msr	BASEPRI, r3
 8006ebc:	f3bf 8f6f 	isb	sy
 8006ec0:	f3bf 8f4f 	dsb	sy
 8006ec4:	613b      	str	r3, [r7, #16]
}
 8006ec6:	bf00      	nop
 8006ec8:	e7fe      	b.n	8006ec8 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d00a      	beq.n	8006eea <xEventGroupSetBits+0x52>
	__asm volatile
 8006ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed8:	f383 8811 	msr	BASEPRI, r3
 8006edc:	f3bf 8f6f 	isb	sy
 8006ee0:	f3bf 8f4f 	dsb	sy
 8006ee4:	60fb      	str	r3, [r7, #12]
}
 8006ee6:	bf00      	nop
 8006ee8:	e7fe      	b.n	8006ee8 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8006eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eec:	3304      	adds	r3, #4
 8006eee:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef2:	3308      	adds	r3, #8
 8006ef4:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8006ef6:	f001 f955 	bl	80081a4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8006efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efc:	68db      	ldr	r3, [r3, #12]
 8006efe:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8006f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	431a      	orrs	r2, r3
 8006f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f0a:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8006f0c:	e03c      	b.n	8006f88 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8006f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8006f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8006f1e:	69bb      	ldr	r3, [r7, #24]
 8006f20:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006f24:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006f2c:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d108      	bne.n	8006f4a <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8006f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	69bb      	ldr	r3, [r7, #24]
 8006f3e:	4013      	ands	r3, r2
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d00b      	beq.n	8006f5c <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8006f44:	2301      	movs	r3, #1
 8006f46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f48:	e008      	b.n	8006f5c <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8006f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	69bb      	ldr	r3, [r7, #24]
 8006f50:	4013      	ands	r3, r2
 8006f52:	69ba      	ldr	r2, [r7, #24]
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d101      	bne.n	8006f5c <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8006f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d010      	beq.n	8006f84 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d003      	beq.n	8006f74 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8006f6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f6e:	69bb      	ldr	r3, [r7, #24]
 8006f70:	4313      	orrs	r3, r2
 8006f72:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8006f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006f80:	f001 fb90 	bl	80086a4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8006f88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f8a:	6a3b      	ldr	r3, [r7, #32]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d1be      	bne.n	8006f0e <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8006f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f96:	43db      	mvns	r3, r3
 8006f98:	401a      	ands	r2, r3
 8006f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f9c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8006f9e:	f001 f90f 	bl	80081c0 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8006fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa4:	681b      	ldr	r3, [r3, #0]
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3738      	adds	r7, #56	; 0x38
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}

08006fae <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8006fae:	b480      	push	{r7}
 8006fb0:	b087      	sub	sp, #28
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	60f8      	str	r0, [r7, #12]
 8006fb6:	60b9      	str	r1, [r7, #8]
 8006fb8:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d107      	bne.n	8006fd4 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	4013      	ands	r3, r2
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d00a      	beq.n	8006fe4 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	617b      	str	r3, [r7, #20]
 8006fd2:	e007      	b.n	8006fe4 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8006fd4:	68fa      	ldr	r2, [r7, #12]
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	4013      	ands	r3, r2
 8006fda:	68ba      	ldr	r2, [r7, #8]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d101      	bne.n	8006fe4 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8006fe4:	697b      	ldr	r3, [r7, #20]
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	371c      	adds	r7, #28
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr

08006ff2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006ff2:	b480      	push	{r7}
 8006ff4:	b083      	sub	sp, #12
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f103 0208 	add.w	r2, r3, #8
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f04f 32ff 	mov.w	r2, #4294967295
 800700a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f103 0208 	add.w	r2, r3, #8
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f103 0208 	add.w	r2, r3, #8
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007026:	bf00      	nop
 8007028:	370c      	adds	r7, #12
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr

08007032 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007032:	b480      	push	{r7}
 8007034:	b083      	sub	sp, #12
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007040:	bf00      	nop
 8007042:	370c      	adds	r7, #12
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr

0800704c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800704c:	b480      	push	{r7}
 800704e:	b085      	sub	sp, #20
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	68fa      	ldr	r2, [r7, #12]
 8007060:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	689a      	ldr	r2, [r3, #8]
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	683a      	ldr	r2, [r7, #0]
 8007070:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	683a      	ldr	r2, [r7, #0]
 8007076:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	1c5a      	adds	r2, r3, #1
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	601a      	str	r2, [r3, #0]
}
 8007088:	bf00      	nop
 800708a:	3714      	adds	r7, #20
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007094:	b480      	push	{r7}
 8007096:	b085      	sub	sp, #20
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070aa:	d103      	bne.n	80070b4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	691b      	ldr	r3, [r3, #16]
 80070b0:	60fb      	str	r3, [r7, #12]
 80070b2:	e00c      	b.n	80070ce <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	3308      	adds	r3, #8
 80070b8:	60fb      	str	r3, [r7, #12]
 80070ba:	e002      	b.n	80070c2 <vListInsert+0x2e>
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	60fb      	str	r3, [r7, #12]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	68ba      	ldr	r2, [r7, #8]
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d2f6      	bcs.n	80070bc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	685a      	ldr	r2, [r3, #4]
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	683a      	ldr	r2, [r7, #0]
 80070dc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	68fa      	ldr	r2, [r7, #12]
 80070e2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	683a      	ldr	r2, [r7, #0]
 80070e8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	687a      	ldr	r2, [r7, #4]
 80070ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	1c5a      	adds	r2, r3, #1
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	601a      	str	r2, [r3, #0]
}
 80070fa:	bf00      	nop
 80070fc:	3714      	adds	r7, #20
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr

08007106 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007106:	b480      	push	{r7}
 8007108:	b085      	sub	sp, #20
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	6892      	ldr	r2, [r2, #8]
 800711c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	6852      	ldr	r2, [r2, #4]
 8007126:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	429a      	cmp	r2, r3
 8007130:	d103      	bne.n	800713a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	689a      	ldr	r2, [r3, #8]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2200      	movs	r2, #0
 800713e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	1e5a      	subs	r2, r3, #1
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
}
 800714e:	4618      	mov	r0, r3
 8007150:	3714      	adds	r7, #20
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr
	...

0800715c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b084      	sub	sp, #16
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d10a      	bne.n	8007186 <xQueueGenericReset+0x2a>
	__asm volatile
 8007170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007174:	f383 8811 	msr	BASEPRI, r3
 8007178:	f3bf 8f6f 	isb	sy
 800717c:	f3bf 8f4f 	dsb	sy
 8007180:	60bb      	str	r3, [r7, #8]
}
 8007182:	bf00      	nop
 8007184:	e7fe      	b.n	8007184 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007186:	f001 ffad 	bl	80090e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007192:	68f9      	ldr	r1, [r7, #12]
 8007194:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007196:	fb01 f303 	mul.w	r3, r1, r3
 800719a:	441a      	add	r2, r3
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2200      	movs	r2, #0
 80071a4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071b6:	3b01      	subs	r3, #1
 80071b8:	68f9      	ldr	r1, [r7, #12]
 80071ba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80071bc:	fb01 f303 	mul.w	r3, r1, r3
 80071c0:	441a      	add	r2, r3
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	22ff      	movs	r2, #255	; 0xff
 80071ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	22ff      	movs	r2, #255	; 0xff
 80071d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d114      	bne.n	8007206 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	691b      	ldr	r3, [r3, #16]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d01a      	beq.n	800721a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	3310      	adds	r3, #16
 80071e8:	4618      	mov	r0, r3
 80071ea:	f001 f9f9 	bl	80085e0 <xTaskRemoveFromEventList>
 80071ee:	4603      	mov	r3, r0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d012      	beq.n	800721a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80071f4:	4b0c      	ldr	r3, [pc, #48]	; (8007228 <xQueueGenericReset+0xcc>)
 80071f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071fa:	601a      	str	r2, [r3, #0]
 80071fc:	f3bf 8f4f 	dsb	sy
 8007200:	f3bf 8f6f 	isb	sy
 8007204:	e009      	b.n	800721a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	3310      	adds	r3, #16
 800720a:	4618      	mov	r0, r3
 800720c:	f7ff fef1 	bl	8006ff2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	3324      	adds	r3, #36	; 0x24
 8007214:	4618      	mov	r0, r3
 8007216:	f7ff feec 	bl	8006ff2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800721a:	f001 ff93 	bl	8009144 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800721e:	2301      	movs	r3, #1
}
 8007220:	4618      	mov	r0, r3
 8007222:	3710      	adds	r7, #16
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}
 8007228:	e000ed04 	.word	0xe000ed04

0800722c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800722c:	b580      	push	{r7, lr}
 800722e:	b08a      	sub	sp, #40	; 0x28
 8007230:	af02      	add	r7, sp, #8
 8007232:	60f8      	str	r0, [r7, #12]
 8007234:	60b9      	str	r1, [r7, #8]
 8007236:	4613      	mov	r3, r2
 8007238:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d10a      	bne.n	8007256 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007244:	f383 8811 	msr	BASEPRI, r3
 8007248:	f3bf 8f6f 	isb	sy
 800724c:	f3bf 8f4f 	dsb	sy
 8007250:	613b      	str	r3, [r7, #16]
}
 8007252:	bf00      	nop
 8007254:	e7fe      	b.n	8007254 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	68ba      	ldr	r2, [r7, #8]
 800725a:	fb02 f303 	mul.w	r3, r2, r3
 800725e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007260:	69fb      	ldr	r3, [r7, #28]
 8007262:	3348      	adds	r3, #72	; 0x48
 8007264:	4618      	mov	r0, r3
 8007266:	f002 f85f 	bl	8009328 <pvPortMalloc>
 800726a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d011      	beq.n	8007296 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	3348      	adds	r3, #72	; 0x48
 800727a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800727c:	69bb      	ldr	r3, [r7, #24]
 800727e:	2200      	movs	r2, #0
 8007280:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007284:	79fa      	ldrb	r2, [r7, #7]
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	9300      	str	r3, [sp, #0]
 800728a:	4613      	mov	r3, r2
 800728c:	697a      	ldr	r2, [r7, #20]
 800728e:	68b9      	ldr	r1, [r7, #8]
 8007290:	68f8      	ldr	r0, [r7, #12]
 8007292:	f000 f805 	bl	80072a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007296:	69bb      	ldr	r3, [r7, #24]
	}
 8007298:	4618      	mov	r0, r3
 800729a:	3720      	adds	r7, #32
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	607a      	str	r2, [r7, #4]
 80072ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d103      	bne.n	80072bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	69ba      	ldr	r2, [r7, #24]
 80072b8:	601a      	str	r2, [r3, #0]
 80072ba:	e002      	b.n	80072c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80072bc:	69bb      	ldr	r3, [r7, #24]
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	68fa      	ldr	r2, [r7, #12]
 80072c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80072c8:	69bb      	ldr	r3, [r7, #24]
 80072ca:	68ba      	ldr	r2, [r7, #8]
 80072cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80072ce:	2101      	movs	r1, #1
 80072d0:	69b8      	ldr	r0, [r7, #24]
 80072d2:	f7ff ff43 	bl	800715c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80072d6:	bf00      	nop
 80072d8:	3710      	adds	r7, #16
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
	...

080072e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b08e      	sub	sp, #56	; 0x38
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	607a      	str	r2, [r7, #4]
 80072ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80072ee:	2300      	movs	r3, #0
 80072f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80072f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d10a      	bne.n	8007312 <xQueueGenericSend+0x32>
	__asm volatile
 80072fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007300:	f383 8811 	msr	BASEPRI, r3
 8007304:	f3bf 8f6f 	isb	sy
 8007308:	f3bf 8f4f 	dsb	sy
 800730c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800730e:	bf00      	nop
 8007310:	e7fe      	b.n	8007310 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d103      	bne.n	8007320 <xQueueGenericSend+0x40>
 8007318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800731a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731c:	2b00      	cmp	r3, #0
 800731e:	d101      	bne.n	8007324 <xQueueGenericSend+0x44>
 8007320:	2301      	movs	r3, #1
 8007322:	e000      	b.n	8007326 <xQueueGenericSend+0x46>
 8007324:	2300      	movs	r3, #0
 8007326:	2b00      	cmp	r3, #0
 8007328:	d10a      	bne.n	8007340 <xQueueGenericSend+0x60>
	__asm volatile
 800732a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800732e:	f383 8811 	msr	BASEPRI, r3
 8007332:	f3bf 8f6f 	isb	sy
 8007336:	f3bf 8f4f 	dsb	sy
 800733a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800733c:	bf00      	nop
 800733e:	e7fe      	b.n	800733e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	2b02      	cmp	r3, #2
 8007344:	d103      	bne.n	800734e <xQueueGenericSend+0x6e>
 8007346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800734a:	2b01      	cmp	r3, #1
 800734c:	d101      	bne.n	8007352 <xQueueGenericSend+0x72>
 800734e:	2301      	movs	r3, #1
 8007350:	e000      	b.n	8007354 <xQueueGenericSend+0x74>
 8007352:	2300      	movs	r3, #0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d10a      	bne.n	800736e <xQueueGenericSend+0x8e>
	__asm volatile
 8007358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800735c:	f383 8811 	msr	BASEPRI, r3
 8007360:	f3bf 8f6f 	isb	sy
 8007364:	f3bf 8f4f 	dsb	sy
 8007368:	623b      	str	r3, [r7, #32]
}
 800736a:	bf00      	nop
 800736c:	e7fe      	b.n	800736c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800736e:	f001 fb55 	bl	8008a1c <xTaskGetSchedulerState>
 8007372:	4603      	mov	r3, r0
 8007374:	2b00      	cmp	r3, #0
 8007376:	d102      	bne.n	800737e <xQueueGenericSend+0x9e>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d101      	bne.n	8007382 <xQueueGenericSend+0xa2>
 800737e:	2301      	movs	r3, #1
 8007380:	e000      	b.n	8007384 <xQueueGenericSend+0xa4>
 8007382:	2300      	movs	r3, #0
 8007384:	2b00      	cmp	r3, #0
 8007386:	d10a      	bne.n	800739e <xQueueGenericSend+0xbe>
	__asm volatile
 8007388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800738c:	f383 8811 	msr	BASEPRI, r3
 8007390:	f3bf 8f6f 	isb	sy
 8007394:	f3bf 8f4f 	dsb	sy
 8007398:	61fb      	str	r3, [r7, #28]
}
 800739a:	bf00      	nop
 800739c:	e7fe      	b.n	800739c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800739e:	f001 fea1 	bl	80090e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80073a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d302      	bcc.n	80073b4 <xQueueGenericSend+0xd4>
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	2b02      	cmp	r3, #2
 80073b2:	d129      	bne.n	8007408 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80073b4:	683a      	ldr	r2, [r7, #0]
 80073b6:	68b9      	ldr	r1, [r7, #8]
 80073b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073ba:	f000 fbbb 	bl	8007b34 <prvCopyDataToQueue>
 80073be:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d010      	beq.n	80073ea <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ca:	3324      	adds	r3, #36	; 0x24
 80073cc:	4618      	mov	r0, r3
 80073ce:	f001 f907 	bl	80085e0 <xTaskRemoveFromEventList>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d013      	beq.n	8007400 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80073d8:	4b3f      	ldr	r3, [pc, #252]	; (80074d8 <xQueueGenericSend+0x1f8>)
 80073da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073de:	601a      	str	r2, [r3, #0]
 80073e0:	f3bf 8f4f 	dsb	sy
 80073e4:	f3bf 8f6f 	isb	sy
 80073e8:	e00a      	b.n	8007400 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80073ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d007      	beq.n	8007400 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80073f0:	4b39      	ldr	r3, [pc, #228]	; (80074d8 <xQueueGenericSend+0x1f8>)
 80073f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073f6:	601a      	str	r2, [r3, #0]
 80073f8:	f3bf 8f4f 	dsb	sy
 80073fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007400:	f001 fea0 	bl	8009144 <vPortExitCritical>
				return pdPASS;
 8007404:	2301      	movs	r3, #1
 8007406:	e063      	b.n	80074d0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d103      	bne.n	8007416 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800740e:	f001 fe99 	bl	8009144 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007412:	2300      	movs	r3, #0
 8007414:	e05c      	b.n	80074d0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007418:	2b00      	cmp	r3, #0
 800741a:	d106      	bne.n	800742a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800741c:	f107 0314 	add.w	r3, r7, #20
 8007420:	4618      	mov	r0, r3
 8007422:	f001 f9a1 	bl	8008768 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007426:	2301      	movs	r3, #1
 8007428:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800742a:	f001 fe8b 	bl	8009144 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800742e:	f000 feb9 	bl	80081a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007432:	f001 fe57 	bl	80090e4 <vPortEnterCritical>
 8007436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007438:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800743c:	b25b      	sxtb	r3, r3
 800743e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007442:	d103      	bne.n	800744c <xQueueGenericSend+0x16c>
 8007444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007446:	2200      	movs	r2, #0
 8007448:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800744c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007452:	b25b      	sxtb	r3, r3
 8007454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007458:	d103      	bne.n	8007462 <xQueueGenericSend+0x182>
 800745a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800745c:	2200      	movs	r2, #0
 800745e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007462:	f001 fe6f 	bl	8009144 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007466:	1d3a      	adds	r2, r7, #4
 8007468:	f107 0314 	add.w	r3, r7, #20
 800746c:	4611      	mov	r1, r2
 800746e:	4618      	mov	r0, r3
 8007470:	f001 f990 	bl	8008794 <xTaskCheckForTimeOut>
 8007474:	4603      	mov	r3, r0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d124      	bne.n	80074c4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800747a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800747c:	f000 fc52 	bl	8007d24 <prvIsQueueFull>
 8007480:	4603      	mov	r3, r0
 8007482:	2b00      	cmp	r3, #0
 8007484:	d018      	beq.n	80074b8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007488:	3310      	adds	r3, #16
 800748a:	687a      	ldr	r2, [r7, #4]
 800748c:	4611      	mov	r1, r2
 800748e:	4618      	mov	r0, r3
 8007490:	f001 f846 	bl	8008520 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007494:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007496:	f000 fbdd 	bl	8007c54 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800749a:	f000 fe91 	bl	80081c0 <xTaskResumeAll>
 800749e:	4603      	mov	r3, r0
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	f47f af7c 	bne.w	800739e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80074a6:	4b0c      	ldr	r3, [pc, #48]	; (80074d8 <xQueueGenericSend+0x1f8>)
 80074a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074ac:	601a      	str	r2, [r3, #0]
 80074ae:	f3bf 8f4f 	dsb	sy
 80074b2:	f3bf 8f6f 	isb	sy
 80074b6:	e772      	b.n	800739e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80074b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074ba:	f000 fbcb 	bl	8007c54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80074be:	f000 fe7f 	bl	80081c0 <xTaskResumeAll>
 80074c2:	e76c      	b.n	800739e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80074c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074c6:	f000 fbc5 	bl	8007c54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80074ca:	f000 fe79 	bl	80081c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80074ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3738      	adds	r7, #56	; 0x38
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}
 80074d8:	e000ed04 	.word	0xe000ed04

080074dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b090      	sub	sp, #64	; 0x40
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	60f8      	str	r0, [r7, #12]
 80074e4:	60b9      	str	r1, [r7, #8]
 80074e6:	607a      	str	r2, [r7, #4]
 80074e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80074ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d10a      	bne.n	800750a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80074f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f8:	f383 8811 	msr	BASEPRI, r3
 80074fc:	f3bf 8f6f 	isb	sy
 8007500:	f3bf 8f4f 	dsb	sy
 8007504:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007506:	bf00      	nop
 8007508:	e7fe      	b.n	8007508 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d103      	bne.n	8007518 <xQueueGenericSendFromISR+0x3c>
 8007510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007514:	2b00      	cmp	r3, #0
 8007516:	d101      	bne.n	800751c <xQueueGenericSendFromISR+0x40>
 8007518:	2301      	movs	r3, #1
 800751a:	e000      	b.n	800751e <xQueueGenericSendFromISR+0x42>
 800751c:	2300      	movs	r3, #0
 800751e:	2b00      	cmp	r3, #0
 8007520:	d10a      	bne.n	8007538 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007526:	f383 8811 	msr	BASEPRI, r3
 800752a:	f3bf 8f6f 	isb	sy
 800752e:	f3bf 8f4f 	dsb	sy
 8007532:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007534:	bf00      	nop
 8007536:	e7fe      	b.n	8007536 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	2b02      	cmp	r3, #2
 800753c:	d103      	bne.n	8007546 <xQueueGenericSendFromISR+0x6a>
 800753e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007542:	2b01      	cmp	r3, #1
 8007544:	d101      	bne.n	800754a <xQueueGenericSendFromISR+0x6e>
 8007546:	2301      	movs	r3, #1
 8007548:	e000      	b.n	800754c <xQueueGenericSendFromISR+0x70>
 800754a:	2300      	movs	r3, #0
 800754c:	2b00      	cmp	r3, #0
 800754e:	d10a      	bne.n	8007566 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007554:	f383 8811 	msr	BASEPRI, r3
 8007558:	f3bf 8f6f 	isb	sy
 800755c:	f3bf 8f4f 	dsb	sy
 8007560:	623b      	str	r3, [r7, #32]
}
 8007562:	bf00      	nop
 8007564:	e7fe      	b.n	8007564 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007566:	f001 fe9f 	bl	80092a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800756a:	f3ef 8211 	mrs	r2, BASEPRI
 800756e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007572:	f383 8811 	msr	BASEPRI, r3
 8007576:	f3bf 8f6f 	isb	sy
 800757a:	f3bf 8f4f 	dsb	sy
 800757e:	61fa      	str	r2, [r7, #28]
 8007580:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007582:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007584:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007588:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800758a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800758c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800758e:	429a      	cmp	r2, r3
 8007590:	d302      	bcc.n	8007598 <xQueueGenericSendFromISR+0xbc>
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	2b02      	cmp	r3, #2
 8007596:	d12f      	bne.n	80075f8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800759a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800759e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80075a8:	683a      	ldr	r2, [r7, #0]
 80075aa:	68b9      	ldr	r1, [r7, #8]
 80075ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80075ae:	f000 fac1 	bl	8007b34 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80075b2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80075b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ba:	d112      	bne.n	80075e2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80075bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d016      	beq.n	80075f2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80075c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c6:	3324      	adds	r3, #36	; 0x24
 80075c8:	4618      	mov	r0, r3
 80075ca:	f001 f809 	bl	80085e0 <xTaskRemoveFromEventList>
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d00e      	beq.n	80075f2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d00b      	beq.n	80075f2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2201      	movs	r2, #1
 80075de:	601a      	str	r2, [r3, #0]
 80075e0:	e007      	b.n	80075f2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80075e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80075e6:	3301      	adds	r3, #1
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	b25a      	sxtb	r2, r3
 80075ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80075f2:	2301      	movs	r3, #1
 80075f4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80075f6:	e001      	b.n	80075fc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80075f8:	2300      	movs	r3, #0
 80075fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075fe:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007606:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800760a:	4618      	mov	r0, r3
 800760c:	3740      	adds	r7, #64	; 0x40
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}

08007612 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007612:	b580      	push	{r7, lr}
 8007614:	b08e      	sub	sp, #56	; 0x38
 8007616:	af00      	add	r7, sp, #0
 8007618:	6078      	str	r0, [r7, #4]
 800761a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007622:	2b00      	cmp	r3, #0
 8007624:	d10a      	bne.n	800763c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8007626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800762a:	f383 8811 	msr	BASEPRI, r3
 800762e:	f3bf 8f6f 	isb	sy
 8007632:	f3bf 8f4f 	dsb	sy
 8007636:	623b      	str	r3, [r7, #32]
}
 8007638:	bf00      	nop
 800763a:	e7fe      	b.n	800763a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800763c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800763e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007640:	2b00      	cmp	r3, #0
 8007642:	d00a      	beq.n	800765a <xQueueGiveFromISR+0x48>
	__asm volatile
 8007644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007648:	f383 8811 	msr	BASEPRI, r3
 800764c:	f3bf 8f6f 	isb	sy
 8007650:	f3bf 8f4f 	dsb	sy
 8007654:	61fb      	str	r3, [r7, #28]
}
 8007656:	bf00      	nop
 8007658:	e7fe      	b.n	8007658 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800765a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d103      	bne.n	800766a <xQueueGiveFromISR+0x58>
 8007662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d101      	bne.n	800766e <xQueueGiveFromISR+0x5c>
 800766a:	2301      	movs	r3, #1
 800766c:	e000      	b.n	8007670 <xQueueGiveFromISR+0x5e>
 800766e:	2300      	movs	r3, #0
 8007670:	2b00      	cmp	r3, #0
 8007672:	d10a      	bne.n	800768a <xQueueGiveFromISR+0x78>
	__asm volatile
 8007674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007678:	f383 8811 	msr	BASEPRI, r3
 800767c:	f3bf 8f6f 	isb	sy
 8007680:	f3bf 8f4f 	dsb	sy
 8007684:	61bb      	str	r3, [r7, #24]
}
 8007686:	bf00      	nop
 8007688:	e7fe      	b.n	8007688 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800768a:	f001 fe0d 	bl	80092a8 <vPortValidateInterruptPriority>
	__asm volatile
 800768e:	f3ef 8211 	mrs	r2, BASEPRI
 8007692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007696:	f383 8811 	msr	BASEPRI, r3
 800769a:	f3bf 8f6f 	isb	sy
 800769e:	f3bf 8f4f 	dsb	sy
 80076a2:	617a      	str	r2, [r7, #20]
 80076a4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80076a6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80076a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ae:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80076b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d22b      	bcs.n	8007712 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80076ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80076c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c6:	1c5a      	adds	r2, r3, #1
 80076c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ca:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80076cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80076d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076d4:	d112      	bne.n	80076fc <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d016      	beq.n	800770c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e0:	3324      	adds	r3, #36	; 0x24
 80076e2:	4618      	mov	r0, r3
 80076e4:	f000 ff7c 	bl	80085e0 <xTaskRemoveFromEventList>
 80076e8:	4603      	mov	r3, r0
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d00e      	beq.n	800770c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d00b      	beq.n	800770c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	2201      	movs	r2, #1
 80076f8:	601a      	str	r2, [r3, #0]
 80076fa:	e007      	b.n	800770c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80076fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007700:	3301      	adds	r3, #1
 8007702:	b2db      	uxtb	r3, r3
 8007704:	b25a      	sxtb	r2, r3
 8007706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007708:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800770c:	2301      	movs	r3, #1
 800770e:	637b      	str	r3, [r7, #52]	; 0x34
 8007710:	e001      	b.n	8007716 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007712:	2300      	movs	r3, #0
 8007714:	637b      	str	r3, [r7, #52]	; 0x34
 8007716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007718:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f383 8811 	msr	BASEPRI, r3
}
 8007720:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007724:	4618      	mov	r0, r3
 8007726:	3738      	adds	r7, #56	; 0x38
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b08c      	sub	sp, #48	; 0x30
 8007730:	af00      	add	r7, sp, #0
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	60b9      	str	r1, [r7, #8]
 8007736:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007738:	2300      	movs	r3, #0
 800773a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007742:	2b00      	cmp	r3, #0
 8007744:	d10a      	bne.n	800775c <xQueueReceive+0x30>
	__asm volatile
 8007746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800774a:	f383 8811 	msr	BASEPRI, r3
 800774e:	f3bf 8f6f 	isb	sy
 8007752:	f3bf 8f4f 	dsb	sy
 8007756:	623b      	str	r3, [r7, #32]
}
 8007758:	bf00      	nop
 800775a:	e7fe      	b.n	800775a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d103      	bne.n	800776a <xQueueReceive+0x3e>
 8007762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007766:	2b00      	cmp	r3, #0
 8007768:	d101      	bne.n	800776e <xQueueReceive+0x42>
 800776a:	2301      	movs	r3, #1
 800776c:	e000      	b.n	8007770 <xQueueReceive+0x44>
 800776e:	2300      	movs	r3, #0
 8007770:	2b00      	cmp	r3, #0
 8007772:	d10a      	bne.n	800778a <xQueueReceive+0x5e>
	__asm volatile
 8007774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007778:	f383 8811 	msr	BASEPRI, r3
 800777c:	f3bf 8f6f 	isb	sy
 8007780:	f3bf 8f4f 	dsb	sy
 8007784:	61fb      	str	r3, [r7, #28]
}
 8007786:	bf00      	nop
 8007788:	e7fe      	b.n	8007788 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800778a:	f001 f947 	bl	8008a1c <xTaskGetSchedulerState>
 800778e:	4603      	mov	r3, r0
 8007790:	2b00      	cmp	r3, #0
 8007792:	d102      	bne.n	800779a <xQueueReceive+0x6e>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d101      	bne.n	800779e <xQueueReceive+0x72>
 800779a:	2301      	movs	r3, #1
 800779c:	e000      	b.n	80077a0 <xQueueReceive+0x74>
 800779e:	2300      	movs	r3, #0
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d10a      	bne.n	80077ba <xQueueReceive+0x8e>
	__asm volatile
 80077a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a8:	f383 8811 	msr	BASEPRI, r3
 80077ac:	f3bf 8f6f 	isb	sy
 80077b0:	f3bf 8f4f 	dsb	sy
 80077b4:	61bb      	str	r3, [r7, #24]
}
 80077b6:	bf00      	nop
 80077b8:	e7fe      	b.n	80077b8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80077ba:	f001 fc93 	bl	80090e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80077be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077c2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80077c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d01f      	beq.n	800780a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80077ca:	68b9      	ldr	r1, [r7, #8]
 80077cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077ce:	f000 fa1b 	bl	8007c08 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80077d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d4:	1e5a      	subs	r2, r3, #1
 80077d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80077da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077dc:	691b      	ldr	r3, [r3, #16]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d00f      	beq.n	8007802 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80077e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e4:	3310      	adds	r3, #16
 80077e6:	4618      	mov	r0, r3
 80077e8:	f000 fefa 	bl	80085e0 <xTaskRemoveFromEventList>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d007      	beq.n	8007802 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80077f2:	4b3d      	ldr	r3, [pc, #244]	; (80078e8 <xQueueReceive+0x1bc>)
 80077f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077f8:	601a      	str	r2, [r3, #0]
 80077fa:	f3bf 8f4f 	dsb	sy
 80077fe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007802:	f001 fc9f 	bl	8009144 <vPortExitCritical>
				return pdPASS;
 8007806:	2301      	movs	r3, #1
 8007808:	e069      	b.n	80078de <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d103      	bne.n	8007818 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007810:	f001 fc98 	bl	8009144 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007814:	2300      	movs	r3, #0
 8007816:	e062      	b.n	80078de <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800781a:	2b00      	cmp	r3, #0
 800781c:	d106      	bne.n	800782c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800781e:	f107 0310 	add.w	r3, r7, #16
 8007822:	4618      	mov	r0, r3
 8007824:	f000 ffa0 	bl	8008768 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007828:	2301      	movs	r3, #1
 800782a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800782c:	f001 fc8a 	bl	8009144 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007830:	f000 fcb8 	bl	80081a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007834:	f001 fc56 	bl	80090e4 <vPortEnterCritical>
 8007838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800783a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800783e:	b25b      	sxtb	r3, r3
 8007840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007844:	d103      	bne.n	800784e <xQueueReceive+0x122>
 8007846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007848:	2200      	movs	r2, #0
 800784a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800784e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007850:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007854:	b25b      	sxtb	r3, r3
 8007856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800785a:	d103      	bne.n	8007864 <xQueueReceive+0x138>
 800785c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800785e:	2200      	movs	r2, #0
 8007860:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007864:	f001 fc6e 	bl	8009144 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007868:	1d3a      	adds	r2, r7, #4
 800786a:	f107 0310 	add.w	r3, r7, #16
 800786e:	4611      	mov	r1, r2
 8007870:	4618      	mov	r0, r3
 8007872:	f000 ff8f 	bl	8008794 <xTaskCheckForTimeOut>
 8007876:	4603      	mov	r3, r0
 8007878:	2b00      	cmp	r3, #0
 800787a:	d123      	bne.n	80078c4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800787c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800787e:	f000 fa3b 	bl	8007cf8 <prvIsQueueEmpty>
 8007882:	4603      	mov	r3, r0
 8007884:	2b00      	cmp	r3, #0
 8007886:	d017      	beq.n	80078b8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788a:	3324      	adds	r3, #36	; 0x24
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	4611      	mov	r1, r2
 8007890:	4618      	mov	r0, r3
 8007892:	f000 fe45 	bl	8008520 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007896:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007898:	f000 f9dc 	bl	8007c54 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800789c:	f000 fc90 	bl	80081c0 <xTaskResumeAll>
 80078a0:	4603      	mov	r3, r0
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d189      	bne.n	80077ba <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80078a6:	4b10      	ldr	r3, [pc, #64]	; (80078e8 <xQueueReceive+0x1bc>)
 80078a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078ac:	601a      	str	r2, [r3, #0]
 80078ae:	f3bf 8f4f 	dsb	sy
 80078b2:	f3bf 8f6f 	isb	sy
 80078b6:	e780      	b.n	80077ba <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80078b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078ba:	f000 f9cb 	bl	8007c54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80078be:	f000 fc7f 	bl	80081c0 <xTaskResumeAll>
 80078c2:	e77a      	b.n	80077ba <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80078c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078c6:	f000 f9c5 	bl	8007c54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80078ca:	f000 fc79 	bl	80081c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80078ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078d0:	f000 fa12 	bl	8007cf8 <prvIsQueueEmpty>
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	f43f af6f 	beq.w	80077ba <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80078dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3730      	adds	r7, #48	; 0x30
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	bf00      	nop
 80078e8:	e000ed04 	.word	0xe000ed04

080078ec <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b08e      	sub	sp, #56	; 0x38
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80078f6:	2300      	movs	r3, #0
 80078f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80078fe:	2300      	movs	r3, #0
 8007900:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007904:	2b00      	cmp	r3, #0
 8007906:	d10a      	bne.n	800791e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800790c:	f383 8811 	msr	BASEPRI, r3
 8007910:	f3bf 8f6f 	isb	sy
 8007914:	f3bf 8f4f 	dsb	sy
 8007918:	623b      	str	r3, [r7, #32]
}
 800791a:	bf00      	nop
 800791c:	e7fe      	b.n	800791c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800791e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007922:	2b00      	cmp	r3, #0
 8007924:	d00a      	beq.n	800793c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800792a:	f383 8811 	msr	BASEPRI, r3
 800792e:	f3bf 8f6f 	isb	sy
 8007932:	f3bf 8f4f 	dsb	sy
 8007936:	61fb      	str	r3, [r7, #28]
}
 8007938:	bf00      	nop
 800793a:	e7fe      	b.n	800793a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800793c:	f001 f86e 	bl	8008a1c <xTaskGetSchedulerState>
 8007940:	4603      	mov	r3, r0
 8007942:	2b00      	cmp	r3, #0
 8007944:	d102      	bne.n	800794c <xQueueSemaphoreTake+0x60>
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d101      	bne.n	8007950 <xQueueSemaphoreTake+0x64>
 800794c:	2301      	movs	r3, #1
 800794e:	e000      	b.n	8007952 <xQueueSemaphoreTake+0x66>
 8007950:	2300      	movs	r3, #0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d10a      	bne.n	800796c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8007956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800795a:	f383 8811 	msr	BASEPRI, r3
 800795e:	f3bf 8f6f 	isb	sy
 8007962:	f3bf 8f4f 	dsb	sy
 8007966:	61bb      	str	r3, [r7, #24]
}
 8007968:	bf00      	nop
 800796a:	e7fe      	b.n	800796a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800796c:	f001 fbba 	bl	80090e4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007974:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007978:	2b00      	cmp	r3, #0
 800797a:	d024      	beq.n	80079c6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800797c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800797e:	1e5a      	subs	r2, r3, #1
 8007980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007982:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d104      	bne.n	8007996 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800798c:	f001 fa06 	bl	8008d9c <pvTaskIncrementMutexHeldCount>
 8007990:	4602      	mov	r2, r0
 8007992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007994:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d00f      	beq.n	80079be <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800799e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a0:	3310      	adds	r3, #16
 80079a2:	4618      	mov	r0, r3
 80079a4:	f000 fe1c 	bl	80085e0 <xTaskRemoveFromEventList>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d007      	beq.n	80079be <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80079ae:	4b54      	ldr	r3, [pc, #336]	; (8007b00 <xQueueSemaphoreTake+0x214>)
 80079b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079b4:	601a      	str	r2, [r3, #0]
 80079b6:	f3bf 8f4f 	dsb	sy
 80079ba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80079be:	f001 fbc1 	bl	8009144 <vPortExitCritical>
				return pdPASS;
 80079c2:	2301      	movs	r3, #1
 80079c4:	e097      	b.n	8007af6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d111      	bne.n	80079f0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80079cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d00a      	beq.n	80079e8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80079d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d6:	f383 8811 	msr	BASEPRI, r3
 80079da:	f3bf 8f6f 	isb	sy
 80079de:	f3bf 8f4f 	dsb	sy
 80079e2:	617b      	str	r3, [r7, #20]
}
 80079e4:	bf00      	nop
 80079e6:	e7fe      	b.n	80079e6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80079e8:	f001 fbac 	bl	8009144 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80079ec:	2300      	movs	r3, #0
 80079ee:	e082      	b.n	8007af6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80079f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d106      	bne.n	8007a04 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80079f6:	f107 030c 	add.w	r3, r7, #12
 80079fa:	4618      	mov	r0, r3
 80079fc:	f000 feb4 	bl	8008768 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a00:	2301      	movs	r3, #1
 8007a02:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a04:	f001 fb9e 	bl	8009144 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a08:	f000 fbcc 	bl	80081a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a0c:	f001 fb6a 	bl	80090e4 <vPortEnterCritical>
 8007a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a16:	b25b      	sxtb	r3, r3
 8007a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a1c:	d103      	bne.n	8007a26 <xQueueSemaphoreTake+0x13a>
 8007a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a20:	2200      	movs	r2, #0
 8007a22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a2c:	b25b      	sxtb	r3, r3
 8007a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a32:	d103      	bne.n	8007a3c <xQueueSemaphoreTake+0x150>
 8007a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a36:	2200      	movs	r2, #0
 8007a38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a3c:	f001 fb82 	bl	8009144 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007a40:	463a      	mov	r2, r7
 8007a42:	f107 030c 	add.w	r3, r7, #12
 8007a46:	4611      	mov	r1, r2
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f000 fea3 	bl	8008794 <xTaskCheckForTimeOut>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d132      	bne.n	8007aba <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a56:	f000 f94f 	bl	8007cf8 <prvIsQueueEmpty>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d026      	beq.n	8007aae <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d109      	bne.n	8007a7c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007a68:	f001 fb3c 	bl	80090e4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	4618      	mov	r0, r3
 8007a72:	f000 fff1 	bl	8008a58 <xTaskPriorityInherit>
 8007a76:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007a78:	f001 fb64 	bl	8009144 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a7e:	3324      	adds	r3, #36	; 0x24
 8007a80:	683a      	ldr	r2, [r7, #0]
 8007a82:	4611      	mov	r1, r2
 8007a84:	4618      	mov	r0, r3
 8007a86:	f000 fd4b 	bl	8008520 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007a8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a8c:	f000 f8e2 	bl	8007c54 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007a90:	f000 fb96 	bl	80081c0 <xTaskResumeAll>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	f47f af68 	bne.w	800796c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007a9c:	4b18      	ldr	r3, [pc, #96]	; (8007b00 <xQueueSemaphoreTake+0x214>)
 8007a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007aa2:	601a      	str	r2, [r3, #0]
 8007aa4:	f3bf 8f4f 	dsb	sy
 8007aa8:	f3bf 8f6f 	isb	sy
 8007aac:	e75e      	b.n	800796c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007aae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ab0:	f000 f8d0 	bl	8007c54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ab4:	f000 fb84 	bl	80081c0 <xTaskResumeAll>
 8007ab8:	e758      	b.n	800796c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007aba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007abc:	f000 f8ca 	bl	8007c54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ac0:	f000 fb7e 	bl	80081c0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ac4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ac6:	f000 f917 	bl	8007cf8 <prvIsQueueEmpty>
 8007aca:	4603      	mov	r3, r0
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	f43f af4d 	beq.w	800796c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d00d      	beq.n	8007af4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007ad8:	f001 fb04 	bl	80090e4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007adc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ade:	f000 f811 	bl	8007b04 <prvGetDisinheritPriorityAfterTimeout>
 8007ae2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007aea:	4618      	mov	r0, r3
 8007aec:	f001 f8b0 	bl	8008c50 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007af0:	f001 fb28 	bl	8009144 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007af4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3738      	adds	r7, #56	; 0x38
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}
 8007afe:	bf00      	nop
 8007b00:	e000ed04 	.word	0xe000ed04

08007b04 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007b04:	b480      	push	{r7}
 8007b06:	b085      	sub	sp, #20
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d006      	beq.n	8007b22 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f1c3 0307 	rsb	r3, r3, #7
 8007b1e:	60fb      	str	r3, [r7, #12]
 8007b20:	e001      	b.n	8007b26 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007b22:	2300      	movs	r3, #0
 8007b24:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007b26:	68fb      	ldr	r3, [r7, #12]
	}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3714      	adds	r7, #20
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b086      	sub	sp, #24
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	60b9      	str	r1, [r7, #8]
 8007b3e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007b40:	2300      	movs	r3, #0
 8007b42:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b48:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d10d      	bne.n	8007b6e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d14d      	bne.n	8007bf6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	689b      	ldr	r3, [r3, #8]
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f000 fff0 	bl	8008b44 <xTaskPriorityDisinherit>
 8007b64:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	609a      	str	r2, [r3, #8]
 8007b6c:	e043      	b.n	8007bf6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d119      	bne.n	8007ba8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	6858      	ldr	r0, [r3, #4]
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	68b9      	ldr	r1, [r7, #8]
 8007b80:	f001 fde6 	bl	8009750 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	685a      	ldr	r2, [r3, #4]
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b8c:	441a      	add	r2, r3
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	685a      	ldr	r2, [r3, #4]
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d32b      	bcc.n	8007bf6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	605a      	str	r2, [r3, #4]
 8007ba6:	e026      	b.n	8007bf6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	68d8      	ldr	r0, [r3, #12]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	68b9      	ldr	r1, [r7, #8]
 8007bb4:	f001 fdcc 	bl	8009750 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	68da      	ldr	r2, [r3, #12]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc0:	425b      	negs	r3, r3
 8007bc2:	441a      	add	r2, r3
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	68da      	ldr	r2, [r3, #12]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d207      	bcs.n	8007be4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	689a      	ldr	r2, [r3, #8]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bdc:	425b      	negs	r3, r3
 8007bde:	441a      	add	r2, r3
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2b02      	cmp	r3, #2
 8007be8:	d105      	bne.n	8007bf6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d002      	beq.n	8007bf6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	3b01      	subs	r3, #1
 8007bf4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	1c5a      	adds	r2, r3, #1
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007bfe:	697b      	ldr	r3, [r7, #20]
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3718      	adds	r7, #24
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d018      	beq.n	8007c4c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	68da      	ldr	r2, [r3, #12]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c22:	441a      	add	r2, r3
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	68da      	ldr	r2, [r3, #12]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d303      	bcc.n	8007c3c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	68d9      	ldr	r1, [r3, #12]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c44:	461a      	mov	r2, r3
 8007c46:	6838      	ldr	r0, [r7, #0]
 8007c48:	f001 fd82 	bl	8009750 <memcpy>
	}
}
 8007c4c:	bf00      	nop
 8007c4e:	3708      	adds	r7, #8
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b084      	sub	sp, #16
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007c5c:	f001 fa42 	bl	80090e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c66:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007c68:	e011      	b.n	8007c8e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d012      	beq.n	8007c98 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	3324      	adds	r3, #36	; 0x24
 8007c76:	4618      	mov	r0, r3
 8007c78:	f000 fcb2 	bl	80085e0 <xTaskRemoveFromEventList>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d001      	beq.n	8007c86 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007c82:	f000 fde9 	bl	8008858 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007c86:	7bfb      	ldrb	r3, [r7, #15]
 8007c88:	3b01      	subs	r3, #1
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	dce9      	bgt.n	8007c6a <prvUnlockQueue+0x16>
 8007c96:	e000      	b.n	8007c9a <prvUnlockQueue+0x46>
					break;
 8007c98:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	22ff      	movs	r2, #255	; 0xff
 8007c9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007ca2:	f001 fa4f 	bl	8009144 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007ca6:	f001 fa1d 	bl	80090e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007cb0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007cb2:	e011      	b.n	8007cd8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	691b      	ldr	r3, [r3, #16]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d012      	beq.n	8007ce2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	3310      	adds	r3, #16
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f000 fc8d 	bl	80085e0 <xTaskRemoveFromEventList>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d001      	beq.n	8007cd0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007ccc:	f000 fdc4 	bl	8008858 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007cd0:	7bbb      	ldrb	r3, [r7, #14]
 8007cd2:	3b01      	subs	r3, #1
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007cd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	dce9      	bgt.n	8007cb4 <prvUnlockQueue+0x60>
 8007ce0:	e000      	b.n	8007ce4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007ce2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	22ff      	movs	r2, #255	; 0xff
 8007ce8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007cec:	f001 fa2a 	bl	8009144 <vPortExitCritical>
}
 8007cf0:	bf00      	nop
 8007cf2:	3710      	adds	r7, #16
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007d00:	f001 f9f0 	bl	80090e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d102      	bne.n	8007d12 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	60fb      	str	r3, [r7, #12]
 8007d10:	e001      	b.n	8007d16 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007d12:	2300      	movs	r3, #0
 8007d14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007d16:	f001 fa15 	bl	8009144 <vPortExitCritical>

	return xReturn;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3710      	adds	r7, #16
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b084      	sub	sp, #16
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007d2c:	f001 f9da 	bl	80090e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d102      	bne.n	8007d42 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	60fb      	str	r3, [r7, #12]
 8007d40:	e001      	b.n	8007d46 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007d42:	2300      	movs	r3, #0
 8007d44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007d46:	f001 f9fd 	bl	8009144 <vPortExitCritical>

	return xReturn;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3710      	adds	r7, #16
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b08e      	sub	sp, #56	; 0x38
 8007d58:	af04      	add	r7, sp, #16
 8007d5a:	60f8      	str	r0, [r7, #12]
 8007d5c:	60b9      	str	r1, [r7, #8]
 8007d5e:	607a      	str	r2, [r7, #4]
 8007d60:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d10a      	bne.n	8007d7e <xTaskCreateStatic+0x2a>
	__asm volatile
 8007d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d6c:	f383 8811 	msr	BASEPRI, r3
 8007d70:	f3bf 8f6f 	isb	sy
 8007d74:	f3bf 8f4f 	dsb	sy
 8007d78:	623b      	str	r3, [r7, #32]
}
 8007d7a:	bf00      	nop
 8007d7c:	e7fe      	b.n	8007d7c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d10a      	bne.n	8007d9a <xTaskCreateStatic+0x46>
	__asm volatile
 8007d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d88:	f383 8811 	msr	BASEPRI, r3
 8007d8c:	f3bf 8f6f 	isb	sy
 8007d90:	f3bf 8f4f 	dsb	sy
 8007d94:	61fb      	str	r3, [r7, #28]
}
 8007d96:	bf00      	nop
 8007d98:	e7fe      	b.n	8007d98 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007d9a:	2354      	movs	r3, #84	; 0x54
 8007d9c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	2b54      	cmp	r3, #84	; 0x54
 8007da2:	d00a      	beq.n	8007dba <xTaskCreateStatic+0x66>
	__asm volatile
 8007da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da8:	f383 8811 	msr	BASEPRI, r3
 8007dac:	f3bf 8f6f 	isb	sy
 8007db0:	f3bf 8f4f 	dsb	sy
 8007db4:	61bb      	str	r3, [r7, #24]
}
 8007db6:	bf00      	nop
 8007db8:	e7fe      	b.n	8007db8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007dba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d01e      	beq.n	8007e00 <xTaskCreateStatic+0xac>
 8007dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d01b      	beq.n	8007e00 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007dd0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd4:	2202      	movs	r2, #2
 8007dd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007dda:	2300      	movs	r3, #0
 8007ddc:	9303      	str	r3, [sp, #12]
 8007dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de0:	9302      	str	r3, [sp, #8]
 8007de2:	f107 0314 	add.w	r3, r7, #20
 8007de6:	9301      	str	r3, [sp, #4]
 8007de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dea:	9300      	str	r3, [sp, #0]
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	68b9      	ldr	r1, [r7, #8]
 8007df2:	68f8      	ldr	r0, [r7, #12]
 8007df4:	f000 f850 	bl	8007e98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007df8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007dfa:	f000 f8d5 	bl	8007fa8 <prvAddNewTaskToReadyList>
 8007dfe:	e001      	b.n	8007e04 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007e00:	2300      	movs	r3, #0
 8007e02:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007e04:	697b      	ldr	r3, [r7, #20]
	}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3728      	adds	r7, #40	; 0x28
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}

08007e0e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007e0e:	b580      	push	{r7, lr}
 8007e10:	b08c      	sub	sp, #48	; 0x30
 8007e12:	af04      	add	r7, sp, #16
 8007e14:	60f8      	str	r0, [r7, #12]
 8007e16:	60b9      	str	r1, [r7, #8]
 8007e18:	603b      	str	r3, [r7, #0]
 8007e1a:	4613      	mov	r3, r2
 8007e1c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007e1e:	88fb      	ldrh	r3, [r7, #6]
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	4618      	mov	r0, r3
 8007e24:	f001 fa80 	bl	8009328 <pvPortMalloc>
 8007e28:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d00e      	beq.n	8007e4e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007e30:	2054      	movs	r0, #84	; 0x54
 8007e32:	f001 fa79 	bl	8009328 <pvPortMalloc>
 8007e36:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007e38:	69fb      	ldr	r3, [r7, #28]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d003      	beq.n	8007e46 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007e3e:	69fb      	ldr	r3, [r7, #28]
 8007e40:	697a      	ldr	r2, [r7, #20]
 8007e42:	631a      	str	r2, [r3, #48]	; 0x30
 8007e44:	e005      	b.n	8007e52 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007e46:	6978      	ldr	r0, [r7, #20]
 8007e48:	f001 fb3a 	bl	80094c0 <vPortFree>
 8007e4c:	e001      	b.n	8007e52 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007e52:	69fb      	ldr	r3, [r7, #28]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d017      	beq.n	8007e88 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007e58:	69fb      	ldr	r3, [r7, #28]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007e60:	88fa      	ldrh	r2, [r7, #6]
 8007e62:	2300      	movs	r3, #0
 8007e64:	9303      	str	r3, [sp, #12]
 8007e66:	69fb      	ldr	r3, [r7, #28]
 8007e68:	9302      	str	r3, [sp, #8]
 8007e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e6c:	9301      	str	r3, [sp, #4]
 8007e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e70:	9300      	str	r3, [sp, #0]
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	68b9      	ldr	r1, [r7, #8]
 8007e76:	68f8      	ldr	r0, [r7, #12]
 8007e78:	f000 f80e 	bl	8007e98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007e7c:	69f8      	ldr	r0, [r7, #28]
 8007e7e:	f000 f893 	bl	8007fa8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007e82:	2301      	movs	r3, #1
 8007e84:	61bb      	str	r3, [r7, #24]
 8007e86:	e002      	b.n	8007e8e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007e88:	f04f 33ff 	mov.w	r3, #4294967295
 8007e8c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007e8e:	69bb      	ldr	r3, [r7, #24]
	}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3720      	adds	r7, #32
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b088      	sub	sp, #32
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	60f8      	str	r0, [r7, #12]
 8007ea0:	60b9      	str	r1, [r7, #8]
 8007ea2:	607a      	str	r2, [r7, #4]
 8007ea4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007eb0:	3b01      	subs	r3, #1
 8007eb2:	009b      	lsls	r3, r3, #2
 8007eb4:	4413      	add	r3, r2
 8007eb6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007eb8:	69bb      	ldr	r3, [r7, #24]
 8007eba:	f023 0307 	bic.w	r3, r3, #7
 8007ebe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007ec0:	69bb      	ldr	r3, [r7, #24]
 8007ec2:	f003 0307 	and.w	r3, r3, #7
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d00a      	beq.n	8007ee0 <prvInitialiseNewTask+0x48>
	__asm volatile
 8007eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ece:	f383 8811 	msr	BASEPRI, r3
 8007ed2:	f3bf 8f6f 	isb	sy
 8007ed6:	f3bf 8f4f 	dsb	sy
 8007eda:	617b      	str	r3, [r7, #20]
}
 8007edc:	bf00      	nop
 8007ede:	e7fe      	b.n	8007ede <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d01f      	beq.n	8007f26 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	61fb      	str	r3, [r7, #28]
 8007eea:	e012      	b.n	8007f12 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007eec:	68ba      	ldr	r2, [r7, #8]
 8007eee:	69fb      	ldr	r3, [r7, #28]
 8007ef0:	4413      	add	r3, r2
 8007ef2:	7819      	ldrb	r1, [r3, #0]
 8007ef4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ef6:	69fb      	ldr	r3, [r7, #28]
 8007ef8:	4413      	add	r3, r2
 8007efa:	3334      	adds	r3, #52	; 0x34
 8007efc:	460a      	mov	r2, r1
 8007efe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007f00:	68ba      	ldr	r2, [r7, #8]
 8007f02:	69fb      	ldr	r3, [r7, #28]
 8007f04:	4413      	add	r3, r2
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d006      	beq.n	8007f1a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007f0c:	69fb      	ldr	r3, [r7, #28]
 8007f0e:	3301      	adds	r3, #1
 8007f10:	61fb      	str	r3, [r7, #28]
 8007f12:	69fb      	ldr	r3, [r7, #28]
 8007f14:	2b0f      	cmp	r3, #15
 8007f16:	d9e9      	bls.n	8007eec <prvInitialiseNewTask+0x54>
 8007f18:	e000      	b.n	8007f1c <prvInitialiseNewTask+0x84>
			{
				break;
 8007f1a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f1e:	2200      	movs	r2, #0
 8007f20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f24:	e003      	b.n	8007f2e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f30:	2b06      	cmp	r3, #6
 8007f32:	d901      	bls.n	8007f38 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007f34:	2306      	movs	r3, #6
 8007f36:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f3c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f42:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f46:	2200      	movs	r2, #0
 8007f48:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f4c:	3304      	adds	r3, #4
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f7ff f86f 	bl	8007032 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f56:	3318      	adds	r3, #24
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f7ff f86a 	bl	8007032 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f62:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f66:	f1c3 0207 	rsb	r2, r3, #7
 8007f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f6c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f72:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f76:	2200      	movs	r2, #0
 8007f78:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007f82:	683a      	ldr	r2, [r7, #0]
 8007f84:	68f9      	ldr	r1, [r7, #12]
 8007f86:	69b8      	ldr	r0, [r7, #24]
 8007f88:	f000 ff82 	bl	8008e90 <pxPortInitialiseStack>
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f90:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d002      	beq.n	8007f9e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f9e:	bf00      	nop
 8007fa0:	3720      	adds	r7, #32
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
	...

08007fa8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b082      	sub	sp, #8
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007fb0:	f001 f898 	bl	80090e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007fb4:	4b2a      	ldr	r3, [pc, #168]	; (8008060 <prvAddNewTaskToReadyList+0xb8>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	3301      	adds	r3, #1
 8007fba:	4a29      	ldr	r2, [pc, #164]	; (8008060 <prvAddNewTaskToReadyList+0xb8>)
 8007fbc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007fbe:	4b29      	ldr	r3, [pc, #164]	; (8008064 <prvAddNewTaskToReadyList+0xbc>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d109      	bne.n	8007fda <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007fc6:	4a27      	ldr	r2, [pc, #156]	; (8008064 <prvAddNewTaskToReadyList+0xbc>)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007fcc:	4b24      	ldr	r3, [pc, #144]	; (8008060 <prvAddNewTaskToReadyList+0xb8>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d110      	bne.n	8007ff6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007fd4:	f000 fc64 	bl	80088a0 <prvInitialiseTaskLists>
 8007fd8:	e00d      	b.n	8007ff6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007fda:	4b23      	ldr	r3, [pc, #140]	; (8008068 <prvAddNewTaskToReadyList+0xc0>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d109      	bne.n	8007ff6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007fe2:	4b20      	ldr	r3, [pc, #128]	; (8008064 <prvAddNewTaskToReadyList+0xbc>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d802      	bhi.n	8007ff6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007ff0:	4a1c      	ldr	r2, [pc, #112]	; (8008064 <prvAddNewTaskToReadyList+0xbc>)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007ff6:	4b1d      	ldr	r3, [pc, #116]	; (800806c <prvAddNewTaskToReadyList+0xc4>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	4a1b      	ldr	r2, [pc, #108]	; (800806c <prvAddNewTaskToReadyList+0xc4>)
 8007ffe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008004:	2201      	movs	r2, #1
 8008006:	409a      	lsls	r2, r3
 8008008:	4b19      	ldr	r3, [pc, #100]	; (8008070 <prvAddNewTaskToReadyList+0xc8>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4313      	orrs	r3, r2
 800800e:	4a18      	ldr	r2, [pc, #96]	; (8008070 <prvAddNewTaskToReadyList+0xc8>)
 8008010:	6013      	str	r3, [r2, #0]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008016:	4613      	mov	r3, r2
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	4413      	add	r3, r2
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	4a15      	ldr	r2, [pc, #84]	; (8008074 <prvAddNewTaskToReadyList+0xcc>)
 8008020:	441a      	add	r2, r3
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	3304      	adds	r3, #4
 8008026:	4619      	mov	r1, r3
 8008028:	4610      	mov	r0, r2
 800802a:	f7ff f80f 	bl	800704c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800802e:	f001 f889 	bl	8009144 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008032:	4b0d      	ldr	r3, [pc, #52]	; (8008068 <prvAddNewTaskToReadyList+0xc0>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d00e      	beq.n	8008058 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800803a:	4b0a      	ldr	r3, [pc, #40]	; (8008064 <prvAddNewTaskToReadyList+0xbc>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008044:	429a      	cmp	r2, r3
 8008046:	d207      	bcs.n	8008058 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008048:	4b0b      	ldr	r3, [pc, #44]	; (8008078 <prvAddNewTaskToReadyList+0xd0>)
 800804a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800804e:	601a      	str	r2, [r3, #0]
 8008050:	f3bf 8f4f 	dsb	sy
 8008054:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008058:	bf00      	nop
 800805a:	3708      	adds	r7, #8
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}
 8008060:	2000088c 	.word	0x2000088c
 8008064:	2000078c 	.word	0x2000078c
 8008068:	20000898 	.word	0x20000898
 800806c:	200008a8 	.word	0x200008a8
 8008070:	20000894 	.word	0x20000894
 8008074:	20000790 	.word	0x20000790
 8008078:	e000ed04 	.word	0xe000ed04

0800807c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800807c:	b580      	push	{r7, lr}
 800807e:	b084      	sub	sp, #16
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008084:	2300      	movs	r3, #0
 8008086:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d017      	beq.n	80080be <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800808e:	4b13      	ldr	r3, [pc, #76]	; (80080dc <vTaskDelay+0x60>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d00a      	beq.n	80080ac <vTaskDelay+0x30>
	__asm volatile
 8008096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800809a:	f383 8811 	msr	BASEPRI, r3
 800809e:	f3bf 8f6f 	isb	sy
 80080a2:	f3bf 8f4f 	dsb	sy
 80080a6:	60bb      	str	r3, [r7, #8]
}
 80080a8:	bf00      	nop
 80080aa:	e7fe      	b.n	80080aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80080ac:	f000 f87a 	bl	80081a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80080b0:	2100      	movs	r1, #0
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 fe86 	bl	8008dc4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80080b8:	f000 f882 	bl	80081c0 <xTaskResumeAll>
 80080bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d107      	bne.n	80080d4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80080c4:	4b06      	ldr	r3, [pc, #24]	; (80080e0 <vTaskDelay+0x64>)
 80080c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080ca:	601a      	str	r2, [r3, #0]
 80080cc:	f3bf 8f4f 	dsb	sy
 80080d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80080d4:	bf00      	nop
 80080d6:	3710      	adds	r7, #16
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}
 80080dc:	200008b4 	.word	0x200008b4
 80080e0:	e000ed04 	.word	0xe000ed04

080080e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b08a      	sub	sp, #40	; 0x28
 80080e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80080ea:	2300      	movs	r3, #0
 80080ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80080ee:	2300      	movs	r3, #0
 80080f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80080f2:	463a      	mov	r2, r7
 80080f4:	1d39      	adds	r1, r7, #4
 80080f6:	f107 0308 	add.w	r3, r7, #8
 80080fa:	4618      	mov	r0, r3
 80080fc:	f7f8 fa4a 	bl	8000594 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008100:	6839      	ldr	r1, [r7, #0]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	68ba      	ldr	r2, [r7, #8]
 8008106:	9202      	str	r2, [sp, #8]
 8008108:	9301      	str	r3, [sp, #4]
 800810a:	2300      	movs	r3, #0
 800810c:	9300      	str	r3, [sp, #0]
 800810e:	2300      	movs	r3, #0
 8008110:	460a      	mov	r2, r1
 8008112:	491e      	ldr	r1, [pc, #120]	; (800818c <vTaskStartScheduler+0xa8>)
 8008114:	481e      	ldr	r0, [pc, #120]	; (8008190 <vTaskStartScheduler+0xac>)
 8008116:	f7ff fe1d 	bl	8007d54 <xTaskCreateStatic>
 800811a:	4603      	mov	r3, r0
 800811c:	4a1d      	ldr	r2, [pc, #116]	; (8008194 <vTaskStartScheduler+0xb0>)
 800811e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008120:	4b1c      	ldr	r3, [pc, #112]	; (8008194 <vTaskStartScheduler+0xb0>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d002      	beq.n	800812e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008128:	2301      	movs	r3, #1
 800812a:	617b      	str	r3, [r7, #20]
 800812c:	e001      	b.n	8008132 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800812e:	2300      	movs	r3, #0
 8008130:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	2b01      	cmp	r3, #1
 8008136:	d116      	bne.n	8008166 <vTaskStartScheduler+0x82>
	__asm volatile
 8008138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800813c:	f383 8811 	msr	BASEPRI, r3
 8008140:	f3bf 8f6f 	isb	sy
 8008144:	f3bf 8f4f 	dsb	sy
 8008148:	613b      	str	r3, [r7, #16]
}
 800814a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800814c:	4b12      	ldr	r3, [pc, #72]	; (8008198 <vTaskStartScheduler+0xb4>)
 800814e:	f04f 32ff 	mov.w	r2, #4294967295
 8008152:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008154:	4b11      	ldr	r3, [pc, #68]	; (800819c <vTaskStartScheduler+0xb8>)
 8008156:	2201      	movs	r2, #1
 8008158:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800815a:	4b11      	ldr	r3, [pc, #68]	; (80081a0 <vTaskStartScheduler+0xbc>)
 800815c:	2200      	movs	r2, #0
 800815e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008160:	f000 ff1e 	bl	8008fa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008164:	e00e      	b.n	8008184 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800816c:	d10a      	bne.n	8008184 <vTaskStartScheduler+0xa0>
	__asm volatile
 800816e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008172:	f383 8811 	msr	BASEPRI, r3
 8008176:	f3bf 8f6f 	isb	sy
 800817a:	f3bf 8f4f 	dsb	sy
 800817e:	60fb      	str	r3, [r7, #12]
}
 8008180:	bf00      	nop
 8008182:	e7fe      	b.n	8008182 <vTaskStartScheduler+0x9e>
}
 8008184:	bf00      	nop
 8008186:	3718      	adds	r7, #24
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}
 800818c:	0800a950 	.word	0x0800a950
 8008190:	08008871 	.word	0x08008871
 8008194:	200008b0 	.word	0x200008b0
 8008198:	200008ac 	.word	0x200008ac
 800819c:	20000898 	.word	0x20000898
 80081a0:	20000890 	.word	0x20000890

080081a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80081a4:	b480      	push	{r7}
 80081a6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80081a8:	4b04      	ldr	r3, [pc, #16]	; (80081bc <vTaskSuspendAll+0x18>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	3301      	adds	r3, #1
 80081ae:	4a03      	ldr	r2, [pc, #12]	; (80081bc <vTaskSuspendAll+0x18>)
 80081b0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80081b2:	bf00      	nop
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr
 80081bc:	200008b4 	.word	0x200008b4

080081c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b084      	sub	sp, #16
 80081c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80081c6:	2300      	movs	r3, #0
 80081c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80081ca:	2300      	movs	r3, #0
 80081cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80081ce:	4b41      	ldr	r3, [pc, #260]	; (80082d4 <xTaskResumeAll+0x114>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d10a      	bne.n	80081ec <xTaskResumeAll+0x2c>
	__asm volatile
 80081d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081da:	f383 8811 	msr	BASEPRI, r3
 80081de:	f3bf 8f6f 	isb	sy
 80081e2:	f3bf 8f4f 	dsb	sy
 80081e6:	603b      	str	r3, [r7, #0]
}
 80081e8:	bf00      	nop
 80081ea:	e7fe      	b.n	80081ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80081ec:	f000 ff7a 	bl	80090e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80081f0:	4b38      	ldr	r3, [pc, #224]	; (80082d4 <xTaskResumeAll+0x114>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	3b01      	subs	r3, #1
 80081f6:	4a37      	ldr	r2, [pc, #220]	; (80082d4 <xTaskResumeAll+0x114>)
 80081f8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081fa:	4b36      	ldr	r3, [pc, #216]	; (80082d4 <xTaskResumeAll+0x114>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d161      	bne.n	80082c6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008202:	4b35      	ldr	r3, [pc, #212]	; (80082d8 <xTaskResumeAll+0x118>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d05d      	beq.n	80082c6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800820a:	e02e      	b.n	800826a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800820c:	4b33      	ldr	r3, [pc, #204]	; (80082dc <xTaskResumeAll+0x11c>)
 800820e:	68db      	ldr	r3, [r3, #12]
 8008210:	68db      	ldr	r3, [r3, #12]
 8008212:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	3318      	adds	r3, #24
 8008218:	4618      	mov	r0, r3
 800821a:	f7fe ff74 	bl	8007106 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	3304      	adds	r3, #4
 8008222:	4618      	mov	r0, r3
 8008224:	f7fe ff6f 	bl	8007106 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800822c:	2201      	movs	r2, #1
 800822e:	409a      	lsls	r2, r3
 8008230:	4b2b      	ldr	r3, [pc, #172]	; (80082e0 <xTaskResumeAll+0x120>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4313      	orrs	r3, r2
 8008236:	4a2a      	ldr	r2, [pc, #168]	; (80082e0 <xTaskResumeAll+0x120>)
 8008238:	6013      	str	r3, [r2, #0]
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800823e:	4613      	mov	r3, r2
 8008240:	009b      	lsls	r3, r3, #2
 8008242:	4413      	add	r3, r2
 8008244:	009b      	lsls	r3, r3, #2
 8008246:	4a27      	ldr	r2, [pc, #156]	; (80082e4 <xTaskResumeAll+0x124>)
 8008248:	441a      	add	r2, r3
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	3304      	adds	r3, #4
 800824e:	4619      	mov	r1, r3
 8008250:	4610      	mov	r0, r2
 8008252:	f7fe fefb 	bl	800704c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800825a:	4b23      	ldr	r3, [pc, #140]	; (80082e8 <xTaskResumeAll+0x128>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008260:	429a      	cmp	r2, r3
 8008262:	d302      	bcc.n	800826a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008264:	4b21      	ldr	r3, [pc, #132]	; (80082ec <xTaskResumeAll+0x12c>)
 8008266:	2201      	movs	r2, #1
 8008268:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800826a:	4b1c      	ldr	r3, [pc, #112]	; (80082dc <xTaskResumeAll+0x11c>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d1cc      	bne.n	800820c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d001      	beq.n	800827c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008278:	f000 fbb0 	bl	80089dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800827c:	4b1c      	ldr	r3, [pc, #112]	; (80082f0 <xTaskResumeAll+0x130>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d010      	beq.n	80082aa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008288:	f000 f836 	bl	80082f8 <xTaskIncrementTick>
 800828c:	4603      	mov	r3, r0
 800828e:	2b00      	cmp	r3, #0
 8008290:	d002      	beq.n	8008298 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008292:	4b16      	ldr	r3, [pc, #88]	; (80082ec <xTaskResumeAll+0x12c>)
 8008294:	2201      	movs	r2, #1
 8008296:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	3b01      	subs	r3, #1
 800829c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d1f1      	bne.n	8008288 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80082a4:	4b12      	ldr	r3, [pc, #72]	; (80082f0 <xTaskResumeAll+0x130>)
 80082a6:	2200      	movs	r2, #0
 80082a8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80082aa:	4b10      	ldr	r3, [pc, #64]	; (80082ec <xTaskResumeAll+0x12c>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d009      	beq.n	80082c6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80082b2:	2301      	movs	r3, #1
 80082b4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80082b6:	4b0f      	ldr	r3, [pc, #60]	; (80082f4 <xTaskResumeAll+0x134>)
 80082b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082bc:	601a      	str	r2, [r3, #0]
 80082be:	f3bf 8f4f 	dsb	sy
 80082c2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80082c6:	f000 ff3d 	bl	8009144 <vPortExitCritical>

	return xAlreadyYielded;
 80082ca:	68bb      	ldr	r3, [r7, #8]
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3710      	adds	r7, #16
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	200008b4 	.word	0x200008b4
 80082d8:	2000088c 	.word	0x2000088c
 80082dc:	2000084c 	.word	0x2000084c
 80082e0:	20000894 	.word	0x20000894
 80082e4:	20000790 	.word	0x20000790
 80082e8:	2000078c 	.word	0x2000078c
 80082ec:	200008a0 	.word	0x200008a0
 80082f0:	2000089c 	.word	0x2000089c
 80082f4:	e000ed04 	.word	0xe000ed04

080082f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b086      	sub	sp, #24
 80082fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80082fe:	2300      	movs	r3, #0
 8008300:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008302:	4b4e      	ldr	r3, [pc, #312]	; (800843c <xTaskIncrementTick+0x144>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	2b00      	cmp	r3, #0
 8008308:	f040 808e 	bne.w	8008428 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800830c:	4b4c      	ldr	r3, [pc, #304]	; (8008440 <xTaskIncrementTick+0x148>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	3301      	adds	r3, #1
 8008312:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008314:	4a4a      	ldr	r2, [pc, #296]	; (8008440 <xTaskIncrementTick+0x148>)
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d120      	bne.n	8008362 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008320:	4b48      	ldr	r3, [pc, #288]	; (8008444 <xTaskIncrementTick+0x14c>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d00a      	beq.n	8008340 <xTaskIncrementTick+0x48>
	__asm volatile
 800832a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800832e:	f383 8811 	msr	BASEPRI, r3
 8008332:	f3bf 8f6f 	isb	sy
 8008336:	f3bf 8f4f 	dsb	sy
 800833a:	603b      	str	r3, [r7, #0]
}
 800833c:	bf00      	nop
 800833e:	e7fe      	b.n	800833e <xTaskIncrementTick+0x46>
 8008340:	4b40      	ldr	r3, [pc, #256]	; (8008444 <xTaskIncrementTick+0x14c>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	60fb      	str	r3, [r7, #12]
 8008346:	4b40      	ldr	r3, [pc, #256]	; (8008448 <xTaskIncrementTick+0x150>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a3e      	ldr	r2, [pc, #248]	; (8008444 <xTaskIncrementTick+0x14c>)
 800834c:	6013      	str	r3, [r2, #0]
 800834e:	4a3e      	ldr	r2, [pc, #248]	; (8008448 <xTaskIncrementTick+0x150>)
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	6013      	str	r3, [r2, #0]
 8008354:	4b3d      	ldr	r3, [pc, #244]	; (800844c <xTaskIncrementTick+0x154>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	3301      	adds	r3, #1
 800835a:	4a3c      	ldr	r2, [pc, #240]	; (800844c <xTaskIncrementTick+0x154>)
 800835c:	6013      	str	r3, [r2, #0]
 800835e:	f000 fb3d 	bl	80089dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008362:	4b3b      	ldr	r3, [pc, #236]	; (8008450 <xTaskIncrementTick+0x158>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	693a      	ldr	r2, [r7, #16]
 8008368:	429a      	cmp	r2, r3
 800836a:	d348      	bcc.n	80083fe <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800836c:	4b35      	ldr	r3, [pc, #212]	; (8008444 <xTaskIncrementTick+0x14c>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d104      	bne.n	8008380 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008376:	4b36      	ldr	r3, [pc, #216]	; (8008450 <xTaskIncrementTick+0x158>)
 8008378:	f04f 32ff 	mov.w	r2, #4294967295
 800837c:	601a      	str	r2, [r3, #0]
					break;
 800837e:	e03e      	b.n	80083fe <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008380:	4b30      	ldr	r3, [pc, #192]	; (8008444 <xTaskIncrementTick+0x14c>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	68db      	ldr	r3, [r3, #12]
 8008386:	68db      	ldr	r3, [r3, #12]
 8008388:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008390:	693a      	ldr	r2, [r7, #16]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	429a      	cmp	r2, r3
 8008396:	d203      	bcs.n	80083a0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008398:	4a2d      	ldr	r2, [pc, #180]	; (8008450 <xTaskIncrementTick+0x158>)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800839e:	e02e      	b.n	80083fe <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	3304      	adds	r3, #4
 80083a4:	4618      	mov	r0, r3
 80083a6:	f7fe feae 	bl	8007106 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d004      	beq.n	80083bc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	3318      	adds	r3, #24
 80083b6:	4618      	mov	r0, r3
 80083b8:	f7fe fea5 	bl	8007106 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c0:	2201      	movs	r2, #1
 80083c2:	409a      	lsls	r2, r3
 80083c4:	4b23      	ldr	r3, [pc, #140]	; (8008454 <xTaskIncrementTick+0x15c>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4313      	orrs	r3, r2
 80083ca:	4a22      	ldr	r2, [pc, #136]	; (8008454 <xTaskIncrementTick+0x15c>)
 80083cc:	6013      	str	r3, [r2, #0]
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083d2:	4613      	mov	r3, r2
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	4413      	add	r3, r2
 80083d8:	009b      	lsls	r3, r3, #2
 80083da:	4a1f      	ldr	r2, [pc, #124]	; (8008458 <xTaskIncrementTick+0x160>)
 80083dc:	441a      	add	r2, r3
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	3304      	adds	r3, #4
 80083e2:	4619      	mov	r1, r3
 80083e4:	4610      	mov	r0, r2
 80083e6:	f7fe fe31 	bl	800704c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083ee:	4b1b      	ldr	r3, [pc, #108]	; (800845c <xTaskIncrementTick+0x164>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d3b9      	bcc.n	800836c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80083f8:	2301      	movs	r3, #1
 80083fa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80083fc:	e7b6      	b.n	800836c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80083fe:	4b17      	ldr	r3, [pc, #92]	; (800845c <xTaskIncrementTick+0x164>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008404:	4914      	ldr	r1, [pc, #80]	; (8008458 <xTaskIncrementTick+0x160>)
 8008406:	4613      	mov	r3, r2
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	4413      	add	r3, r2
 800840c:	009b      	lsls	r3, r3, #2
 800840e:	440b      	add	r3, r1
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	2b01      	cmp	r3, #1
 8008414:	d901      	bls.n	800841a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8008416:	2301      	movs	r3, #1
 8008418:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800841a:	4b11      	ldr	r3, [pc, #68]	; (8008460 <xTaskIncrementTick+0x168>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d007      	beq.n	8008432 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8008422:	2301      	movs	r3, #1
 8008424:	617b      	str	r3, [r7, #20]
 8008426:	e004      	b.n	8008432 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008428:	4b0e      	ldr	r3, [pc, #56]	; (8008464 <xTaskIncrementTick+0x16c>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	3301      	adds	r3, #1
 800842e:	4a0d      	ldr	r2, [pc, #52]	; (8008464 <xTaskIncrementTick+0x16c>)
 8008430:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008432:	697b      	ldr	r3, [r7, #20]
}
 8008434:	4618      	mov	r0, r3
 8008436:	3718      	adds	r7, #24
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}
 800843c:	200008b4 	.word	0x200008b4
 8008440:	20000890 	.word	0x20000890
 8008444:	20000844 	.word	0x20000844
 8008448:	20000848 	.word	0x20000848
 800844c:	200008a4 	.word	0x200008a4
 8008450:	200008ac 	.word	0x200008ac
 8008454:	20000894 	.word	0x20000894
 8008458:	20000790 	.word	0x20000790
 800845c:	2000078c 	.word	0x2000078c
 8008460:	200008a0 	.word	0x200008a0
 8008464:	2000089c 	.word	0x2000089c

08008468 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008468:	b480      	push	{r7}
 800846a:	b087      	sub	sp, #28
 800846c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800846e:	4b27      	ldr	r3, [pc, #156]	; (800850c <vTaskSwitchContext+0xa4>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d003      	beq.n	800847e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008476:	4b26      	ldr	r3, [pc, #152]	; (8008510 <vTaskSwitchContext+0xa8>)
 8008478:	2201      	movs	r2, #1
 800847a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800847c:	e03f      	b.n	80084fe <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800847e:	4b24      	ldr	r3, [pc, #144]	; (8008510 <vTaskSwitchContext+0xa8>)
 8008480:	2200      	movs	r2, #0
 8008482:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008484:	4b23      	ldr	r3, [pc, #140]	; (8008514 <vTaskSwitchContext+0xac>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	fab3 f383 	clz	r3, r3
 8008490:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008492:	7afb      	ldrb	r3, [r7, #11]
 8008494:	f1c3 031f 	rsb	r3, r3, #31
 8008498:	617b      	str	r3, [r7, #20]
 800849a:	491f      	ldr	r1, [pc, #124]	; (8008518 <vTaskSwitchContext+0xb0>)
 800849c:	697a      	ldr	r2, [r7, #20]
 800849e:	4613      	mov	r3, r2
 80084a0:	009b      	lsls	r3, r3, #2
 80084a2:	4413      	add	r3, r2
 80084a4:	009b      	lsls	r3, r3, #2
 80084a6:	440b      	add	r3, r1
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d10a      	bne.n	80084c4 <vTaskSwitchContext+0x5c>
	__asm volatile
 80084ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b2:	f383 8811 	msr	BASEPRI, r3
 80084b6:	f3bf 8f6f 	isb	sy
 80084ba:	f3bf 8f4f 	dsb	sy
 80084be:	607b      	str	r3, [r7, #4]
}
 80084c0:	bf00      	nop
 80084c2:	e7fe      	b.n	80084c2 <vTaskSwitchContext+0x5a>
 80084c4:	697a      	ldr	r2, [r7, #20]
 80084c6:	4613      	mov	r3, r2
 80084c8:	009b      	lsls	r3, r3, #2
 80084ca:	4413      	add	r3, r2
 80084cc:	009b      	lsls	r3, r3, #2
 80084ce:	4a12      	ldr	r2, [pc, #72]	; (8008518 <vTaskSwitchContext+0xb0>)
 80084d0:	4413      	add	r3, r2
 80084d2:	613b      	str	r3, [r7, #16]
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	685a      	ldr	r2, [r3, #4]
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	605a      	str	r2, [r3, #4]
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	685a      	ldr	r2, [r3, #4]
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	3308      	adds	r3, #8
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d104      	bne.n	80084f4 <vTaskSwitchContext+0x8c>
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	685a      	ldr	r2, [r3, #4]
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	605a      	str	r2, [r3, #4]
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	68db      	ldr	r3, [r3, #12]
 80084fa:	4a08      	ldr	r2, [pc, #32]	; (800851c <vTaskSwitchContext+0xb4>)
 80084fc:	6013      	str	r3, [r2, #0]
}
 80084fe:	bf00      	nop
 8008500:	371c      	adds	r7, #28
 8008502:	46bd      	mov	sp, r7
 8008504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008508:	4770      	bx	lr
 800850a:	bf00      	nop
 800850c:	200008b4 	.word	0x200008b4
 8008510:	200008a0 	.word	0x200008a0
 8008514:	20000894 	.word	0x20000894
 8008518:	20000790 	.word	0x20000790
 800851c:	2000078c 	.word	0x2000078c

08008520 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b084      	sub	sp, #16
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d10a      	bne.n	8008546 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008534:	f383 8811 	msr	BASEPRI, r3
 8008538:	f3bf 8f6f 	isb	sy
 800853c:	f3bf 8f4f 	dsb	sy
 8008540:	60fb      	str	r3, [r7, #12]
}
 8008542:	bf00      	nop
 8008544:	e7fe      	b.n	8008544 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008546:	4b07      	ldr	r3, [pc, #28]	; (8008564 <vTaskPlaceOnEventList+0x44>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	3318      	adds	r3, #24
 800854c:	4619      	mov	r1, r3
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f7fe fda0 	bl	8007094 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008554:	2101      	movs	r1, #1
 8008556:	6838      	ldr	r0, [r7, #0]
 8008558:	f000 fc34 	bl	8008dc4 <prvAddCurrentTaskToDelayedList>
}
 800855c:	bf00      	nop
 800855e:	3710      	adds	r7, #16
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}
 8008564:	2000078c 	.word	0x2000078c

08008568 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b086      	sub	sp, #24
 800856c:	af00      	add	r7, sp, #0
 800856e:	60f8      	str	r0, [r7, #12]
 8008570:	60b9      	str	r1, [r7, #8]
 8008572:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d10a      	bne.n	8008590 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800857a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800857e:	f383 8811 	msr	BASEPRI, r3
 8008582:	f3bf 8f6f 	isb	sy
 8008586:	f3bf 8f4f 	dsb	sy
 800858a:	617b      	str	r3, [r7, #20]
}
 800858c:	bf00      	nop
 800858e:	e7fe      	b.n	800858e <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8008590:	4b11      	ldr	r3, [pc, #68]	; (80085d8 <vTaskPlaceOnUnorderedEventList+0x70>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d10a      	bne.n	80085ae <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8008598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800859c:	f383 8811 	msr	BASEPRI, r3
 80085a0:	f3bf 8f6f 	isb	sy
 80085a4:	f3bf 8f4f 	dsb	sy
 80085a8:	613b      	str	r3, [r7, #16]
}
 80085aa:	bf00      	nop
 80085ac:	e7fe      	b.n	80085ac <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80085ae:	4b0b      	ldr	r3, [pc, #44]	; (80085dc <vTaskPlaceOnUnorderedEventList+0x74>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	68ba      	ldr	r2, [r7, #8]
 80085b4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80085b8:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80085ba:	4b08      	ldr	r3, [pc, #32]	; (80085dc <vTaskPlaceOnUnorderedEventList+0x74>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	3318      	adds	r3, #24
 80085c0:	4619      	mov	r1, r3
 80085c2:	68f8      	ldr	r0, [r7, #12]
 80085c4:	f7fe fd42 	bl	800704c <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80085c8:	2101      	movs	r1, #1
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f000 fbfa 	bl	8008dc4 <prvAddCurrentTaskToDelayedList>
}
 80085d0:	bf00      	nop
 80085d2:	3718      	adds	r7, #24
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}
 80085d8:	200008b4 	.word	0x200008b4
 80085dc:	2000078c 	.word	0x2000078c

080085e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b086      	sub	sp, #24
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	68db      	ldr	r3, [r3, #12]
 80085ec:	68db      	ldr	r3, [r3, #12]
 80085ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d10a      	bne.n	800860c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80085f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085fa:	f383 8811 	msr	BASEPRI, r3
 80085fe:	f3bf 8f6f 	isb	sy
 8008602:	f3bf 8f4f 	dsb	sy
 8008606:	60fb      	str	r3, [r7, #12]
}
 8008608:	bf00      	nop
 800860a:	e7fe      	b.n	800860a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	3318      	adds	r3, #24
 8008610:	4618      	mov	r0, r3
 8008612:	f7fe fd78 	bl	8007106 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008616:	4b1d      	ldr	r3, [pc, #116]	; (800868c <xTaskRemoveFromEventList+0xac>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d11c      	bne.n	8008658 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	3304      	adds	r3, #4
 8008622:	4618      	mov	r0, r3
 8008624:	f7fe fd6f 	bl	8007106 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800862c:	2201      	movs	r2, #1
 800862e:	409a      	lsls	r2, r3
 8008630:	4b17      	ldr	r3, [pc, #92]	; (8008690 <xTaskRemoveFromEventList+0xb0>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4313      	orrs	r3, r2
 8008636:	4a16      	ldr	r2, [pc, #88]	; (8008690 <xTaskRemoveFromEventList+0xb0>)
 8008638:	6013      	str	r3, [r2, #0]
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800863e:	4613      	mov	r3, r2
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	4413      	add	r3, r2
 8008644:	009b      	lsls	r3, r3, #2
 8008646:	4a13      	ldr	r2, [pc, #76]	; (8008694 <xTaskRemoveFromEventList+0xb4>)
 8008648:	441a      	add	r2, r3
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	3304      	adds	r3, #4
 800864e:	4619      	mov	r1, r3
 8008650:	4610      	mov	r0, r2
 8008652:	f7fe fcfb 	bl	800704c <vListInsertEnd>
 8008656:	e005      	b.n	8008664 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	3318      	adds	r3, #24
 800865c:	4619      	mov	r1, r3
 800865e:	480e      	ldr	r0, [pc, #56]	; (8008698 <xTaskRemoveFromEventList+0xb8>)
 8008660:	f7fe fcf4 	bl	800704c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008668:	4b0c      	ldr	r3, [pc, #48]	; (800869c <xTaskRemoveFromEventList+0xbc>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800866e:	429a      	cmp	r2, r3
 8008670:	d905      	bls.n	800867e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008672:	2301      	movs	r3, #1
 8008674:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008676:	4b0a      	ldr	r3, [pc, #40]	; (80086a0 <xTaskRemoveFromEventList+0xc0>)
 8008678:	2201      	movs	r2, #1
 800867a:	601a      	str	r2, [r3, #0]
 800867c:	e001      	b.n	8008682 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800867e:	2300      	movs	r3, #0
 8008680:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008682:	697b      	ldr	r3, [r7, #20]
}
 8008684:	4618      	mov	r0, r3
 8008686:	3718      	adds	r7, #24
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}
 800868c:	200008b4 	.word	0x200008b4
 8008690:	20000894 	.word	0x20000894
 8008694:	20000790 	.word	0x20000790
 8008698:	2000084c 	.word	0x2000084c
 800869c:	2000078c 	.word	0x2000078c
 80086a0:	200008a0 	.word	0x200008a0

080086a4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b086      	sub	sp, #24
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80086ae:	4b29      	ldr	r3, [pc, #164]	; (8008754 <vTaskRemoveFromUnorderedEventList+0xb0>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d10a      	bne.n	80086cc <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 80086b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ba:	f383 8811 	msr	BASEPRI, r3
 80086be:	f3bf 8f6f 	isb	sy
 80086c2:	f3bf 8f4f 	dsb	sy
 80086c6:	613b      	str	r3, [r7, #16]
}
 80086c8:	bf00      	nop
 80086ca:	e7fe      	b.n	80086ca <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	68db      	ldr	r3, [r3, #12]
 80086da:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d10a      	bne.n	80086f8 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 80086e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e6:	f383 8811 	msr	BASEPRI, r3
 80086ea:	f3bf 8f6f 	isb	sy
 80086ee:	f3bf 8f4f 	dsb	sy
 80086f2:	60fb      	str	r3, [r7, #12]
}
 80086f4:	bf00      	nop
 80086f6:	e7fe      	b.n	80086f6 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f7fe fd04 	bl	8007106 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	3304      	adds	r3, #4
 8008702:	4618      	mov	r0, r3
 8008704:	f7fe fcff 	bl	8007106 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800870c:	2201      	movs	r2, #1
 800870e:	409a      	lsls	r2, r3
 8008710:	4b11      	ldr	r3, [pc, #68]	; (8008758 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4313      	orrs	r3, r2
 8008716:	4a10      	ldr	r2, [pc, #64]	; (8008758 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8008718:	6013      	str	r3, [r2, #0]
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800871e:	4613      	mov	r3, r2
 8008720:	009b      	lsls	r3, r3, #2
 8008722:	4413      	add	r3, r2
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	4a0d      	ldr	r2, [pc, #52]	; (800875c <vTaskRemoveFromUnorderedEventList+0xb8>)
 8008728:	441a      	add	r2, r3
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	3304      	adds	r3, #4
 800872e:	4619      	mov	r1, r3
 8008730:	4610      	mov	r0, r2
 8008732:	f7fe fc8b 	bl	800704c <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800873a:	4b09      	ldr	r3, [pc, #36]	; (8008760 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008740:	429a      	cmp	r2, r3
 8008742:	d902      	bls.n	800874a <vTaskRemoveFromUnorderedEventList+0xa6>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8008744:	4b07      	ldr	r3, [pc, #28]	; (8008764 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8008746:	2201      	movs	r2, #1
 8008748:	601a      	str	r2, [r3, #0]
	}
}
 800874a:	bf00      	nop
 800874c:	3718      	adds	r7, #24
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
 8008752:	bf00      	nop
 8008754:	200008b4 	.word	0x200008b4
 8008758:	20000894 	.word	0x20000894
 800875c:	20000790 	.word	0x20000790
 8008760:	2000078c 	.word	0x2000078c
 8008764:	200008a0 	.word	0x200008a0

08008768 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008768:	b480      	push	{r7}
 800876a:	b083      	sub	sp, #12
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008770:	4b06      	ldr	r3, [pc, #24]	; (800878c <vTaskInternalSetTimeOutState+0x24>)
 8008772:	681a      	ldr	r2, [r3, #0]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008778:	4b05      	ldr	r3, [pc, #20]	; (8008790 <vTaskInternalSetTimeOutState+0x28>)
 800877a:	681a      	ldr	r2, [r3, #0]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	605a      	str	r2, [r3, #4]
}
 8008780:	bf00      	nop
 8008782:	370c      	adds	r7, #12
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr
 800878c:	200008a4 	.word	0x200008a4
 8008790:	20000890 	.word	0x20000890

08008794 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b088      	sub	sp, #32
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d10a      	bne.n	80087ba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80087a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a8:	f383 8811 	msr	BASEPRI, r3
 80087ac:	f3bf 8f6f 	isb	sy
 80087b0:	f3bf 8f4f 	dsb	sy
 80087b4:	613b      	str	r3, [r7, #16]
}
 80087b6:	bf00      	nop
 80087b8:	e7fe      	b.n	80087b8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d10a      	bne.n	80087d6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80087c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c4:	f383 8811 	msr	BASEPRI, r3
 80087c8:	f3bf 8f6f 	isb	sy
 80087cc:	f3bf 8f4f 	dsb	sy
 80087d0:	60fb      	str	r3, [r7, #12]
}
 80087d2:	bf00      	nop
 80087d4:	e7fe      	b.n	80087d4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80087d6:	f000 fc85 	bl	80090e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80087da:	4b1d      	ldr	r3, [pc, #116]	; (8008850 <xTaskCheckForTimeOut+0xbc>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	69ba      	ldr	r2, [r7, #24]
 80087e6:	1ad3      	subs	r3, r2, r3
 80087e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087f2:	d102      	bne.n	80087fa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80087f4:	2300      	movs	r3, #0
 80087f6:	61fb      	str	r3, [r7, #28]
 80087f8:	e023      	b.n	8008842 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681a      	ldr	r2, [r3, #0]
 80087fe:	4b15      	ldr	r3, [pc, #84]	; (8008854 <xTaskCheckForTimeOut+0xc0>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	429a      	cmp	r2, r3
 8008804:	d007      	beq.n	8008816 <xTaskCheckForTimeOut+0x82>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	685b      	ldr	r3, [r3, #4]
 800880a:	69ba      	ldr	r2, [r7, #24]
 800880c:	429a      	cmp	r2, r3
 800880e:	d302      	bcc.n	8008816 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008810:	2301      	movs	r3, #1
 8008812:	61fb      	str	r3, [r7, #28]
 8008814:	e015      	b.n	8008842 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	697a      	ldr	r2, [r7, #20]
 800881c:	429a      	cmp	r2, r3
 800881e:	d20b      	bcs.n	8008838 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	681a      	ldr	r2, [r3, #0]
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	1ad2      	subs	r2, r2, r3
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f7ff ff9b 	bl	8008768 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008832:	2300      	movs	r3, #0
 8008834:	61fb      	str	r3, [r7, #28]
 8008836:	e004      	b.n	8008842 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	2200      	movs	r2, #0
 800883c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800883e:	2301      	movs	r3, #1
 8008840:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008842:	f000 fc7f 	bl	8009144 <vPortExitCritical>

	return xReturn;
 8008846:	69fb      	ldr	r3, [r7, #28]
}
 8008848:	4618      	mov	r0, r3
 800884a:	3720      	adds	r7, #32
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}
 8008850:	20000890 	.word	0x20000890
 8008854:	200008a4 	.word	0x200008a4

08008858 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008858:	b480      	push	{r7}
 800885a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800885c:	4b03      	ldr	r3, [pc, #12]	; (800886c <vTaskMissedYield+0x14>)
 800885e:	2201      	movs	r2, #1
 8008860:	601a      	str	r2, [r3, #0]
}
 8008862:	bf00      	nop
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr
 800886c:	200008a0 	.word	0x200008a0

08008870 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b082      	sub	sp, #8
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008878:	f000 f852 	bl	8008920 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800887c:	4b06      	ldr	r3, [pc, #24]	; (8008898 <prvIdleTask+0x28>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	2b01      	cmp	r3, #1
 8008882:	d9f9      	bls.n	8008878 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008884:	4b05      	ldr	r3, [pc, #20]	; (800889c <prvIdleTask+0x2c>)
 8008886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800888a:	601a      	str	r2, [r3, #0]
 800888c:	f3bf 8f4f 	dsb	sy
 8008890:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008894:	e7f0      	b.n	8008878 <prvIdleTask+0x8>
 8008896:	bf00      	nop
 8008898:	20000790 	.word	0x20000790
 800889c:	e000ed04 	.word	0xe000ed04

080088a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b082      	sub	sp, #8
 80088a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80088a6:	2300      	movs	r3, #0
 80088a8:	607b      	str	r3, [r7, #4]
 80088aa:	e00c      	b.n	80088c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80088ac:	687a      	ldr	r2, [r7, #4]
 80088ae:	4613      	mov	r3, r2
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	4413      	add	r3, r2
 80088b4:	009b      	lsls	r3, r3, #2
 80088b6:	4a12      	ldr	r2, [pc, #72]	; (8008900 <prvInitialiseTaskLists+0x60>)
 80088b8:	4413      	add	r3, r2
 80088ba:	4618      	mov	r0, r3
 80088bc:	f7fe fb99 	bl	8006ff2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	3301      	adds	r3, #1
 80088c4:	607b      	str	r3, [r7, #4]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2b06      	cmp	r3, #6
 80088ca:	d9ef      	bls.n	80088ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80088cc:	480d      	ldr	r0, [pc, #52]	; (8008904 <prvInitialiseTaskLists+0x64>)
 80088ce:	f7fe fb90 	bl	8006ff2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80088d2:	480d      	ldr	r0, [pc, #52]	; (8008908 <prvInitialiseTaskLists+0x68>)
 80088d4:	f7fe fb8d 	bl	8006ff2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80088d8:	480c      	ldr	r0, [pc, #48]	; (800890c <prvInitialiseTaskLists+0x6c>)
 80088da:	f7fe fb8a 	bl	8006ff2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80088de:	480c      	ldr	r0, [pc, #48]	; (8008910 <prvInitialiseTaskLists+0x70>)
 80088e0:	f7fe fb87 	bl	8006ff2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80088e4:	480b      	ldr	r0, [pc, #44]	; (8008914 <prvInitialiseTaskLists+0x74>)
 80088e6:	f7fe fb84 	bl	8006ff2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80088ea:	4b0b      	ldr	r3, [pc, #44]	; (8008918 <prvInitialiseTaskLists+0x78>)
 80088ec:	4a05      	ldr	r2, [pc, #20]	; (8008904 <prvInitialiseTaskLists+0x64>)
 80088ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80088f0:	4b0a      	ldr	r3, [pc, #40]	; (800891c <prvInitialiseTaskLists+0x7c>)
 80088f2:	4a05      	ldr	r2, [pc, #20]	; (8008908 <prvInitialiseTaskLists+0x68>)
 80088f4:	601a      	str	r2, [r3, #0]
}
 80088f6:	bf00      	nop
 80088f8:	3708      	adds	r7, #8
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}
 80088fe:	bf00      	nop
 8008900:	20000790 	.word	0x20000790
 8008904:	2000081c 	.word	0x2000081c
 8008908:	20000830 	.word	0x20000830
 800890c:	2000084c 	.word	0x2000084c
 8008910:	20000860 	.word	0x20000860
 8008914:	20000878 	.word	0x20000878
 8008918:	20000844 	.word	0x20000844
 800891c:	20000848 	.word	0x20000848

08008920 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b082      	sub	sp, #8
 8008924:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008926:	e019      	b.n	800895c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008928:	f000 fbdc 	bl	80090e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800892c:	4b10      	ldr	r3, [pc, #64]	; (8008970 <prvCheckTasksWaitingTermination+0x50>)
 800892e:	68db      	ldr	r3, [r3, #12]
 8008930:	68db      	ldr	r3, [r3, #12]
 8008932:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	3304      	adds	r3, #4
 8008938:	4618      	mov	r0, r3
 800893a:	f7fe fbe4 	bl	8007106 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800893e:	4b0d      	ldr	r3, [pc, #52]	; (8008974 <prvCheckTasksWaitingTermination+0x54>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	3b01      	subs	r3, #1
 8008944:	4a0b      	ldr	r2, [pc, #44]	; (8008974 <prvCheckTasksWaitingTermination+0x54>)
 8008946:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008948:	4b0b      	ldr	r3, [pc, #44]	; (8008978 <prvCheckTasksWaitingTermination+0x58>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	3b01      	subs	r3, #1
 800894e:	4a0a      	ldr	r2, [pc, #40]	; (8008978 <prvCheckTasksWaitingTermination+0x58>)
 8008950:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008952:	f000 fbf7 	bl	8009144 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 f810 	bl	800897c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800895c:	4b06      	ldr	r3, [pc, #24]	; (8008978 <prvCheckTasksWaitingTermination+0x58>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d1e1      	bne.n	8008928 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008964:	bf00      	nop
 8008966:	bf00      	nop
 8008968:	3708      	adds	r7, #8
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
 800896e:	bf00      	nop
 8008970:	20000860 	.word	0x20000860
 8008974:	2000088c 	.word	0x2000088c
 8008978:	20000874 	.word	0x20000874

0800897c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800897c:	b580      	push	{r7, lr}
 800897e:	b084      	sub	sp, #16
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800898a:	2b00      	cmp	r3, #0
 800898c:	d108      	bne.n	80089a0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008992:	4618      	mov	r0, r3
 8008994:	f000 fd94 	bl	80094c0 <vPortFree>
				vPortFree( pxTCB );
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f000 fd91 	bl	80094c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800899e:	e018      	b.n	80089d2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80089a6:	2b01      	cmp	r3, #1
 80089a8:	d103      	bne.n	80089b2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 fd88 	bl	80094c0 <vPortFree>
	}
 80089b0:	e00f      	b.n	80089d2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80089b8:	2b02      	cmp	r3, #2
 80089ba:	d00a      	beq.n	80089d2 <prvDeleteTCB+0x56>
	__asm volatile
 80089bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c0:	f383 8811 	msr	BASEPRI, r3
 80089c4:	f3bf 8f6f 	isb	sy
 80089c8:	f3bf 8f4f 	dsb	sy
 80089cc:	60fb      	str	r3, [r7, #12]
}
 80089ce:	bf00      	nop
 80089d0:	e7fe      	b.n	80089d0 <prvDeleteTCB+0x54>
	}
 80089d2:	bf00      	nop
 80089d4:	3710      	adds	r7, #16
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
	...

080089dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80089dc:	b480      	push	{r7}
 80089de:	b083      	sub	sp, #12
 80089e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089e2:	4b0c      	ldr	r3, [pc, #48]	; (8008a14 <prvResetNextTaskUnblockTime+0x38>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d104      	bne.n	80089f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80089ec:	4b0a      	ldr	r3, [pc, #40]	; (8008a18 <prvResetNextTaskUnblockTime+0x3c>)
 80089ee:	f04f 32ff 	mov.w	r2, #4294967295
 80089f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80089f4:	e008      	b.n	8008a08 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089f6:	4b07      	ldr	r3, [pc, #28]	; (8008a14 <prvResetNextTaskUnblockTime+0x38>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	68db      	ldr	r3, [r3, #12]
 80089fc:	68db      	ldr	r3, [r3, #12]
 80089fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	4a04      	ldr	r2, [pc, #16]	; (8008a18 <prvResetNextTaskUnblockTime+0x3c>)
 8008a06:	6013      	str	r3, [r2, #0]
}
 8008a08:	bf00      	nop
 8008a0a:	370c      	adds	r7, #12
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr
 8008a14:	20000844 	.word	0x20000844
 8008a18:	200008ac 	.word	0x200008ac

08008a1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b083      	sub	sp, #12
 8008a20:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008a22:	4b0b      	ldr	r3, [pc, #44]	; (8008a50 <xTaskGetSchedulerState+0x34>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d102      	bne.n	8008a30 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	607b      	str	r3, [r7, #4]
 8008a2e:	e008      	b.n	8008a42 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a30:	4b08      	ldr	r3, [pc, #32]	; (8008a54 <xTaskGetSchedulerState+0x38>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d102      	bne.n	8008a3e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008a38:	2302      	movs	r3, #2
 8008a3a:	607b      	str	r3, [r7, #4]
 8008a3c:	e001      	b.n	8008a42 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008a42:	687b      	ldr	r3, [r7, #4]
	}
 8008a44:	4618      	mov	r0, r3
 8008a46:	370c      	adds	r7, #12
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr
 8008a50:	20000898 	.word	0x20000898
 8008a54:	200008b4 	.word	0x200008b4

08008a58 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b084      	sub	sp, #16
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008a64:	2300      	movs	r3, #0
 8008a66:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d05e      	beq.n	8008b2c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a72:	4b31      	ldr	r3, [pc, #196]	; (8008b38 <xTaskPriorityInherit+0xe0>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d24e      	bcs.n	8008b1a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	699b      	ldr	r3, [r3, #24]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	db06      	blt.n	8008a92 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a84:	4b2c      	ldr	r3, [pc, #176]	; (8008b38 <xTaskPriorityInherit+0xe0>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a8a:	f1c3 0207 	rsb	r2, r3, #7
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	6959      	ldr	r1, [r3, #20]
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a9a:	4613      	mov	r3, r2
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	4413      	add	r3, r2
 8008aa0:	009b      	lsls	r3, r3, #2
 8008aa2:	4a26      	ldr	r2, [pc, #152]	; (8008b3c <xTaskPriorityInherit+0xe4>)
 8008aa4:	4413      	add	r3, r2
 8008aa6:	4299      	cmp	r1, r3
 8008aa8:	d12f      	bne.n	8008b0a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	3304      	adds	r3, #4
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f7fe fb29 	bl	8007106 <uxListRemove>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d10a      	bne.n	8008ad0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008abe:	2201      	movs	r2, #1
 8008ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ac4:	43da      	mvns	r2, r3
 8008ac6:	4b1e      	ldr	r3, [pc, #120]	; (8008b40 <xTaskPriorityInherit+0xe8>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4013      	ands	r3, r2
 8008acc:	4a1c      	ldr	r2, [pc, #112]	; (8008b40 <xTaskPriorityInherit+0xe8>)
 8008ace:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008ad0:	4b19      	ldr	r3, [pc, #100]	; (8008b38 <xTaskPriorityInherit+0xe0>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ade:	2201      	movs	r2, #1
 8008ae0:	409a      	lsls	r2, r3
 8008ae2:	4b17      	ldr	r3, [pc, #92]	; (8008b40 <xTaskPriorityInherit+0xe8>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	4a15      	ldr	r2, [pc, #84]	; (8008b40 <xTaskPriorityInherit+0xe8>)
 8008aea:	6013      	str	r3, [r2, #0]
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008af0:	4613      	mov	r3, r2
 8008af2:	009b      	lsls	r3, r3, #2
 8008af4:	4413      	add	r3, r2
 8008af6:	009b      	lsls	r3, r3, #2
 8008af8:	4a10      	ldr	r2, [pc, #64]	; (8008b3c <xTaskPriorityInherit+0xe4>)
 8008afa:	441a      	add	r2, r3
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	3304      	adds	r3, #4
 8008b00:	4619      	mov	r1, r3
 8008b02:	4610      	mov	r0, r2
 8008b04:	f7fe faa2 	bl	800704c <vListInsertEnd>
 8008b08:	e004      	b.n	8008b14 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008b0a:	4b0b      	ldr	r3, [pc, #44]	; (8008b38 <xTaskPriorityInherit+0xe0>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008b14:	2301      	movs	r3, #1
 8008b16:	60fb      	str	r3, [r7, #12]
 8008b18:	e008      	b.n	8008b2c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b1e:	4b06      	ldr	r3, [pc, #24]	; (8008b38 <xTaskPriorityInherit+0xe0>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d201      	bcs.n	8008b2c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
	}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3710      	adds	r7, #16
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	2000078c 	.word	0x2000078c
 8008b3c:	20000790 	.word	0x20000790
 8008b40:	20000894 	.word	0x20000894

08008b44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b086      	sub	sp, #24
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008b50:	2300      	movs	r3, #0
 8008b52:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d06e      	beq.n	8008c38 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008b5a:	4b3a      	ldr	r3, [pc, #232]	; (8008c44 <xTaskPriorityDisinherit+0x100>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	693a      	ldr	r2, [r7, #16]
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d00a      	beq.n	8008b7a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b68:	f383 8811 	msr	BASEPRI, r3
 8008b6c:	f3bf 8f6f 	isb	sy
 8008b70:	f3bf 8f4f 	dsb	sy
 8008b74:	60fb      	str	r3, [r7, #12]
}
 8008b76:	bf00      	nop
 8008b78:	e7fe      	b.n	8008b78 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d10a      	bne.n	8008b98 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b86:	f383 8811 	msr	BASEPRI, r3
 8008b8a:	f3bf 8f6f 	isb	sy
 8008b8e:	f3bf 8f4f 	dsb	sy
 8008b92:	60bb      	str	r3, [r7, #8]
}
 8008b94:	bf00      	nop
 8008b96:	e7fe      	b.n	8008b96 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b9c:	1e5a      	subs	r2, r3, #1
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d044      	beq.n	8008c38 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d140      	bne.n	8008c38 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	3304      	adds	r3, #4
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f7fe faa3 	bl	8007106 <uxListRemove>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d115      	bne.n	8008bf2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bca:	491f      	ldr	r1, [pc, #124]	; (8008c48 <xTaskPriorityDisinherit+0x104>)
 8008bcc:	4613      	mov	r3, r2
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	4413      	add	r3, r2
 8008bd2:	009b      	lsls	r3, r3, #2
 8008bd4:	440b      	add	r3, r1
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d10a      	bne.n	8008bf2 <xTaskPriorityDisinherit+0xae>
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008be0:	2201      	movs	r2, #1
 8008be2:	fa02 f303 	lsl.w	r3, r2, r3
 8008be6:	43da      	mvns	r2, r3
 8008be8:	4b18      	ldr	r3, [pc, #96]	; (8008c4c <xTaskPriorityDisinherit+0x108>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4013      	ands	r3, r2
 8008bee:	4a17      	ldr	r2, [pc, #92]	; (8008c4c <xTaskPriorityDisinherit+0x108>)
 8008bf0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bfe:	f1c3 0207 	rsb	r2, r3, #7
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	409a      	lsls	r2, r3
 8008c0e:	4b0f      	ldr	r3, [pc, #60]	; (8008c4c <xTaskPriorityDisinherit+0x108>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4313      	orrs	r3, r2
 8008c14:	4a0d      	ldr	r2, [pc, #52]	; (8008c4c <xTaskPriorityDisinherit+0x108>)
 8008c16:	6013      	str	r3, [r2, #0]
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c1c:	4613      	mov	r3, r2
 8008c1e:	009b      	lsls	r3, r3, #2
 8008c20:	4413      	add	r3, r2
 8008c22:	009b      	lsls	r3, r3, #2
 8008c24:	4a08      	ldr	r2, [pc, #32]	; (8008c48 <xTaskPriorityDisinherit+0x104>)
 8008c26:	441a      	add	r2, r3
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	3304      	adds	r3, #4
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	4610      	mov	r0, r2
 8008c30:	f7fe fa0c 	bl	800704c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008c34:	2301      	movs	r3, #1
 8008c36:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008c38:	697b      	ldr	r3, [r7, #20]
	}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3718      	adds	r7, #24
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}
 8008c42:	bf00      	nop
 8008c44:	2000078c 	.word	0x2000078c
 8008c48:	20000790 	.word	0x20000790
 8008c4c:	20000894 	.word	0x20000894

08008c50 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b088      	sub	sp, #32
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008c5e:	2301      	movs	r3, #1
 8008c60:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d077      	beq.n	8008d58 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008c68:	69bb      	ldr	r3, [r7, #24]
 8008c6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d10a      	bne.n	8008c86 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c74:	f383 8811 	msr	BASEPRI, r3
 8008c78:	f3bf 8f6f 	isb	sy
 8008c7c:	f3bf 8f4f 	dsb	sy
 8008c80:	60fb      	str	r3, [r7, #12]
}
 8008c82:	bf00      	nop
 8008c84:	e7fe      	b.n	8008c84 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008c86:	69bb      	ldr	r3, [r7, #24]
 8008c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c8a:	683a      	ldr	r2, [r7, #0]
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d902      	bls.n	8008c96 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	61fb      	str	r3, [r7, #28]
 8008c94:	e002      	b.n	8008c9c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008c96:	69bb      	ldr	r3, [r7, #24]
 8008c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c9a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008c9c:	69bb      	ldr	r3, [r7, #24]
 8008c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ca0:	69fa      	ldr	r2, [r7, #28]
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d058      	beq.n	8008d58 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008ca6:	69bb      	ldr	r3, [r7, #24]
 8008ca8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008caa:	697a      	ldr	r2, [r7, #20]
 8008cac:	429a      	cmp	r2, r3
 8008cae:	d153      	bne.n	8008d58 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008cb0:	4b2b      	ldr	r3, [pc, #172]	; (8008d60 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	69ba      	ldr	r2, [r7, #24]
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d10a      	bne.n	8008cd0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cbe:	f383 8811 	msr	BASEPRI, r3
 8008cc2:	f3bf 8f6f 	isb	sy
 8008cc6:	f3bf 8f4f 	dsb	sy
 8008cca:	60bb      	str	r3, [r7, #8]
}
 8008ccc:	bf00      	nop
 8008cce:	e7fe      	b.n	8008cce <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008cd0:	69bb      	ldr	r3, [r7, #24]
 8008cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008cd6:	69bb      	ldr	r3, [r7, #24]
 8008cd8:	69fa      	ldr	r2, [r7, #28]
 8008cda:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008cdc:	69bb      	ldr	r3, [r7, #24]
 8008cde:	699b      	ldr	r3, [r3, #24]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	db04      	blt.n	8008cee <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ce4:	69fb      	ldr	r3, [r7, #28]
 8008ce6:	f1c3 0207 	rsb	r2, r3, #7
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008cee:	69bb      	ldr	r3, [r7, #24]
 8008cf0:	6959      	ldr	r1, [r3, #20]
 8008cf2:	693a      	ldr	r2, [r7, #16]
 8008cf4:	4613      	mov	r3, r2
 8008cf6:	009b      	lsls	r3, r3, #2
 8008cf8:	4413      	add	r3, r2
 8008cfa:	009b      	lsls	r3, r3, #2
 8008cfc:	4a19      	ldr	r2, [pc, #100]	; (8008d64 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008cfe:	4413      	add	r3, r2
 8008d00:	4299      	cmp	r1, r3
 8008d02:	d129      	bne.n	8008d58 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d04:	69bb      	ldr	r3, [r7, #24]
 8008d06:	3304      	adds	r3, #4
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f7fe f9fc 	bl	8007106 <uxListRemove>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d10a      	bne.n	8008d2a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8008d14:	69bb      	ldr	r3, [r7, #24]
 8008d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d18:	2201      	movs	r2, #1
 8008d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d1e:	43da      	mvns	r2, r3
 8008d20:	4b11      	ldr	r3, [pc, #68]	; (8008d68 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4013      	ands	r3, r2
 8008d26:	4a10      	ldr	r2, [pc, #64]	; (8008d68 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008d28:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008d2a:	69bb      	ldr	r3, [r7, #24]
 8008d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d2e:	2201      	movs	r2, #1
 8008d30:	409a      	lsls	r2, r3
 8008d32:	4b0d      	ldr	r3, [pc, #52]	; (8008d68 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4313      	orrs	r3, r2
 8008d38:	4a0b      	ldr	r2, [pc, #44]	; (8008d68 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008d3a:	6013      	str	r3, [r2, #0]
 8008d3c:	69bb      	ldr	r3, [r7, #24]
 8008d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d40:	4613      	mov	r3, r2
 8008d42:	009b      	lsls	r3, r3, #2
 8008d44:	4413      	add	r3, r2
 8008d46:	009b      	lsls	r3, r3, #2
 8008d48:	4a06      	ldr	r2, [pc, #24]	; (8008d64 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008d4a:	441a      	add	r2, r3
 8008d4c:	69bb      	ldr	r3, [r7, #24]
 8008d4e:	3304      	adds	r3, #4
 8008d50:	4619      	mov	r1, r3
 8008d52:	4610      	mov	r0, r2
 8008d54:	f7fe f97a 	bl	800704c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008d58:	bf00      	nop
 8008d5a:	3720      	adds	r7, #32
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}
 8008d60:	2000078c 	.word	0x2000078c
 8008d64:	20000790 	.word	0x20000790
 8008d68:	20000894 	.word	0x20000894

08008d6c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b083      	sub	sp, #12
 8008d70:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8008d72:	4b09      	ldr	r3, [pc, #36]	; (8008d98 <uxTaskResetEventItemValue+0x2c>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	699b      	ldr	r3, [r3, #24]
 8008d78:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d7a:	4b07      	ldr	r3, [pc, #28]	; (8008d98 <uxTaskResetEventItemValue+0x2c>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d80:	4b05      	ldr	r3, [pc, #20]	; (8008d98 <uxTaskResetEventItemValue+0x2c>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f1c2 0207 	rsb	r2, r2, #7
 8008d88:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8008d8a:	687b      	ldr	r3, [r7, #4]
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	370c      	adds	r7, #12
 8008d90:	46bd      	mov	sp, r7
 8008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d96:	4770      	bx	lr
 8008d98:	2000078c 	.word	0x2000078c

08008d9c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008d9c:	b480      	push	{r7}
 8008d9e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008da0:	4b07      	ldr	r3, [pc, #28]	; (8008dc0 <pvTaskIncrementMutexHeldCount+0x24>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d004      	beq.n	8008db2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008da8:	4b05      	ldr	r3, [pc, #20]	; (8008dc0 <pvTaskIncrementMutexHeldCount+0x24>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008dae:	3201      	adds	r2, #1
 8008db0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8008db2:	4b03      	ldr	r3, [pc, #12]	; (8008dc0 <pvTaskIncrementMutexHeldCount+0x24>)
 8008db4:	681b      	ldr	r3, [r3, #0]
	}
 8008db6:	4618      	mov	r0, r3
 8008db8:	46bd      	mov	sp, r7
 8008dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbe:	4770      	bx	lr
 8008dc0:	2000078c 	.word	0x2000078c

08008dc4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b084      	sub	sp, #16
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008dce:	4b29      	ldr	r3, [pc, #164]	; (8008e74 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008dd4:	4b28      	ldr	r3, [pc, #160]	; (8008e78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	3304      	adds	r3, #4
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f7fe f993 	bl	8007106 <uxListRemove>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d10b      	bne.n	8008dfe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008de6:	4b24      	ldr	r3, [pc, #144]	; (8008e78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dec:	2201      	movs	r2, #1
 8008dee:	fa02 f303 	lsl.w	r3, r2, r3
 8008df2:	43da      	mvns	r2, r3
 8008df4:	4b21      	ldr	r3, [pc, #132]	; (8008e7c <prvAddCurrentTaskToDelayedList+0xb8>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	4013      	ands	r3, r2
 8008dfa:	4a20      	ldr	r2, [pc, #128]	; (8008e7c <prvAddCurrentTaskToDelayedList+0xb8>)
 8008dfc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e04:	d10a      	bne.n	8008e1c <prvAddCurrentTaskToDelayedList+0x58>
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d007      	beq.n	8008e1c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e0c:	4b1a      	ldr	r3, [pc, #104]	; (8008e78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	3304      	adds	r3, #4
 8008e12:	4619      	mov	r1, r3
 8008e14:	481a      	ldr	r0, [pc, #104]	; (8008e80 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008e16:	f7fe f919 	bl	800704c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008e1a:	e026      	b.n	8008e6a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008e1c:	68fa      	ldr	r2, [r7, #12]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	4413      	add	r3, r2
 8008e22:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008e24:	4b14      	ldr	r3, [pc, #80]	; (8008e78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	68ba      	ldr	r2, [r7, #8]
 8008e2a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008e2c:	68ba      	ldr	r2, [r7, #8]
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d209      	bcs.n	8008e48 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e34:	4b13      	ldr	r3, [pc, #76]	; (8008e84 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008e36:	681a      	ldr	r2, [r3, #0]
 8008e38:	4b0f      	ldr	r3, [pc, #60]	; (8008e78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	3304      	adds	r3, #4
 8008e3e:	4619      	mov	r1, r3
 8008e40:	4610      	mov	r0, r2
 8008e42:	f7fe f927 	bl	8007094 <vListInsert>
}
 8008e46:	e010      	b.n	8008e6a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e48:	4b0f      	ldr	r3, [pc, #60]	; (8008e88 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008e4a:	681a      	ldr	r2, [r3, #0]
 8008e4c:	4b0a      	ldr	r3, [pc, #40]	; (8008e78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	3304      	adds	r3, #4
 8008e52:	4619      	mov	r1, r3
 8008e54:	4610      	mov	r0, r2
 8008e56:	f7fe f91d 	bl	8007094 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008e5a:	4b0c      	ldr	r3, [pc, #48]	; (8008e8c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	68ba      	ldr	r2, [r7, #8]
 8008e60:	429a      	cmp	r2, r3
 8008e62:	d202      	bcs.n	8008e6a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008e64:	4a09      	ldr	r2, [pc, #36]	; (8008e8c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	6013      	str	r3, [r2, #0]
}
 8008e6a:	bf00      	nop
 8008e6c:	3710      	adds	r7, #16
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	bf00      	nop
 8008e74:	20000890 	.word	0x20000890
 8008e78:	2000078c 	.word	0x2000078c
 8008e7c:	20000894 	.word	0x20000894
 8008e80:	20000878 	.word	0x20000878
 8008e84:	20000848 	.word	0x20000848
 8008e88:	20000844 	.word	0x20000844
 8008e8c:	200008ac 	.word	0x200008ac

08008e90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008e90:	b480      	push	{r7}
 8008e92:	b085      	sub	sp, #20
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	60f8      	str	r0, [r7, #12]
 8008e98:	60b9      	str	r1, [r7, #8]
 8008e9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	3b04      	subs	r3, #4
 8008ea0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008ea8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	3b04      	subs	r3, #4
 8008eae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	f023 0201 	bic.w	r2, r3, #1
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	3b04      	subs	r3, #4
 8008ebe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008ec0:	4a0c      	ldr	r2, [pc, #48]	; (8008ef4 <pxPortInitialiseStack+0x64>)
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	3b14      	subs	r3, #20
 8008eca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008ecc:	687a      	ldr	r2, [r7, #4]
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	3b04      	subs	r3, #4
 8008ed6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f06f 0202 	mvn.w	r2, #2
 8008ede:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	3b20      	subs	r3, #32
 8008ee4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3714      	adds	r7, #20
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr
 8008ef4:	08008ef9 	.word	0x08008ef9

08008ef8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b085      	sub	sp, #20
 8008efc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008efe:	2300      	movs	r3, #0
 8008f00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008f02:	4b12      	ldr	r3, [pc, #72]	; (8008f4c <prvTaskExitError+0x54>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f0a:	d00a      	beq.n	8008f22 <prvTaskExitError+0x2a>
	__asm volatile
 8008f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f10:	f383 8811 	msr	BASEPRI, r3
 8008f14:	f3bf 8f6f 	isb	sy
 8008f18:	f3bf 8f4f 	dsb	sy
 8008f1c:	60fb      	str	r3, [r7, #12]
}
 8008f1e:	bf00      	nop
 8008f20:	e7fe      	b.n	8008f20 <prvTaskExitError+0x28>
	__asm volatile
 8008f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f26:	f383 8811 	msr	BASEPRI, r3
 8008f2a:	f3bf 8f6f 	isb	sy
 8008f2e:	f3bf 8f4f 	dsb	sy
 8008f32:	60bb      	str	r3, [r7, #8]
}
 8008f34:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008f36:	bf00      	nop
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d0fc      	beq.n	8008f38 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008f3e:	bf00      	nop
 8008f40:	bf00      	nop
 8008f42:	3714      	adds	r7, #20
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr
 8008f4c:	2000000c 	.word	0x2000000c

08008f50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008f50:	4b07      	ldr	r3, [pc, #28]	; (8008f70 <pxCurrentTCBConst2>)
 8008f52:	6819      	ldr	r1, [r3, #0]
 8008f54:	6808      	ldr	r0, [r1, #0]
 8008f56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f5a:	f380 8809 	msr	PSP, r0
 8008f5e:	f3bf 8f6f 	isb	sy
 8008f62:	f04f 0000 	mov.w	r0, #0
 8008f66:	f380 8811 	msr	BASEPRI, r0
 8008f6a:	4770      	bx	lr
 8008f6c:	f3af 8000 	nop.w

08008f70 <pxCurrentTCBConst2>:
 8008f70:	2000078c 	.word	0x2000078c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008f74:	bf00      	nop
 8008f76:	bf00      	nop

08008f78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008f78:	4808      	ldr	r0, [pc, #32]	; (8008f9c <prvPortStartFirstTask+0x24>)
 8008f7a:	6800      	ldr	r0, [r0, #0]
 8008f7c:	6800      	ldr	r0, [r0, #0]
 8008f7e:	f380 8808 	msr	MSP, r0
 8008f82:	f04f 0000 	mov.w	r0, #0
 8008f86:	f380 8814 	msr	CONTROL, r0
 8008f8a:	b662      	cpsie	i
 8008f8c:	b661      	cpsie	f
 8008f8e:	f3bf 8f4f 	dsb	sy
 8008f92:	f3bf 8f6f 	isb	sy
 8008f96:	df00      	svc	0
 8008f98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008f9a:	bf00      	nop
 8008f9c:	e000ed08 	.word	0xe000ed08

08008fa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b086      	sub	sp, #24
 8008fa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008fa6:	4b46      	ldr	r3, [pc, #280]	; (80090c0 <xPortStartScheduler+0x120>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4a46      	ldr	r2, [pc, #280]	; (80090c4 <xPortStartScheduler+0x124>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d10a      	bne.n	8008fc6 <xPortStartScheduler+0x26>
	__asm volatile
 8008fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb4:	f383 8811 	msr	BASEPRI, r3
 8008fb8:	f3bf 8f6f 	isb	sy
 8008fbc:	f3bf 8f4f 	dsb	sy
 8008fc0:	613b      	str	r3, [r7, #16]
}
 8008fc2:	bf00      	nop
 8008fc4:	e7fe      	b.n	8008fc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008fc6:	4b3e      	ldr	r3, [pc, #248]	; (80090c0 <xPortStartScheduler+0x120>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4a3f      	ldr	r2, [pc, #252]	; (80090c8 <xPortStartScheduler+0x128>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d10a      	bne.n	8008fe6 <xPortStartScheduler+0x46>
	__asm volatile
 8008fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd4:	f383 8811 	msr	BASEPRI, r3
 8008fd8:	f3bf 8f6f 	isb	sy
 8008fdc:	f3bf 8f4f 	dsb	sy
 8008fe0:	60fb      	str	r3, [r7, #12]
}
 8008fe2:	bf00      	nop
 8008fe4:	e7fe      	b.n	8008fe4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008fe6:	4b39      	ldr	r3, [pc, #228]	; (80090cc <xPortStartScheduler+0x12c>)
 8008fe8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	b2db      	uxtb	r3, r3
 8008ff0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	22ff      	movs	r2, #255	; 0xff
 8008ff6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	b2db      	uxtb	r3, r3
 8008ffe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009000:	78fb      	ldrb	r3, [r7, #3]
 8009002:	b2db      	uxtb	r3, r3
 8009004:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009008:	b2da      	uxtb	r2, r3
 800900a:	4b31      	ldr	r3, [pc, #196]	; (80090d0 <xPortStartScheduler+0x130>)
 800900c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800900e:	4b31      	ldr	r3, [pc, #196]	; (80090d4 <xPortStartScheduler+0x134>)
 8009010:	2207      	movs	r2, #7
 8009012:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009014:	e009      	b.n	800902a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009016:	4b2f      	ldr	r3, [pc, #188]	; (80090d4 <xPortStartScheduler+0x134>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	3b01      	subs	r3, #1
 800901c:	4a2d      	ldr	r2, [pc, #180]	; (80090d4 <xPortStartScheduler+0x134>)
 800901e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009020:	78fb      	ldrb	r3, [r7, #3]
 8009022:	b2db      	uxtb	r3, r3
 8009024:	005b      	lsls	r3, r3, #1
 8009026:	b2db      	uxtb	r3, r3
 8009028:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800902a:	78fb      	ldrb	r3, [r7, #3]
 800902c:	b2db      	uxtb	r3, r3
 800902e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009032:	2b80      	cmp	r3, #128	; 0x80
 8009034:	d0ef      	beq.n	8009016 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009036:	4b27      	ldr	r3, [pc, #156]	; (80090d4 <xPortStartScheduler+0x134>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f1c3 0307 	rsb	r3, r3, #7
 800903e:	2b04      	cmp	r3, #4
 8009040:	d00a      	beq.n	8009058 <xPortStartScheduler+0xb8>
	__asm volatile
 8009042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009046:	f383 8811 	msr	BASEPRI, r3
 800904a:	f3bf 8f6f 	isb	sy
 800904e:	f3bf 8f4f 	dsb	sy
 8009052:	60bb      	str	r3, [r7, #8]
}
 8009054:	bf00      	nop
 8009056:	e7fe      	b.n	8009056 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009058:	4b1e      	ldr	r3, [pc, #120]	; (80090d4 <xPortStartScheduler+0x134>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	021b      	lsls	r3, r3, #8
 800905e:	4a1d      	ldr	r2, [pc, #116]	; (80090d4 <xPortStartScheduler+0x134>)
 8009060:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009062:	4b1c      	ldr	r3, [pc, #112]	; (80090d4 <xPortStartScheduler+0x134>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800906a:	4a1a      	ldr	r2, [pc, #104]	; (80090d4 <xPortStartScheduler+0x134>)
 800906c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	b2da      	uxtb	r2, r3
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009076:	4b18      	ldr	r3, [pc, #96]	; (80090d8 <xPortStartScheduler+0x138>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	4a17      	ldr	r2, [pc, #92]	; (80090d8 <xPortStartScheduler+0x138>)
 800907c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009080:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009082:	4b15      	ldr	r3, [pc, #84]	; (80090d8 <xPortStartScheduler+0x138>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4a14      	ldr	r2, [pc, #80]	; (80090d8 <xPortStartScheduler+0x138>)
 8009088:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800908c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800908e:	f000 f8dd 	bl	800924c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009092:	4b12      	ldr	r3, [pc, #72]	; (80090dc <xPortStartScheduler+0x13c>)
 8009094:	2200      	movs	r2, #0
 8009096:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009098:	f000 f8fc 	bl	8009294 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800909c:	4b10      	ldr	r3, [pc, #64]	; (80090e0 <xPortStartScheduler+0x140>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a0f      	ldr	r2, [pc, #60]	; (80090e0 <xPortStartScheduler+0x140>)
 80090a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80090a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80090a8:	f7ff ff66 	bl	8008f78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80090ac:	f7ff f9dc 	bl	8008468 <vTaskSwitchContext>
	prvTaskExitError();
 80090b0:	f7ff ff22 	bl	8008ef8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80090b4:	2300      	movs	r3, #0
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3718      	adds	r7, #24
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	bf00      	nop
 80090c0:	e000ed00 	.word	0xe000ed00
 80090c4:	410fc271 	.word	0x410fc271
 80090c8:	410fc270 	.word	0x410fc270
 80090cc:	e000e400 	.word	0xe000e400
 80090d0:	200008b8 	.word	0x200008b8
 80090d4:	200008bc 	.word	0x200008bc
 80090d8:	e000ed20 	.word	0xe000ed20
 80090dc:	2000000c 	.word	0x2000000c
 80090e0:	e000ef34 	.word	0xe000ef34

080090e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80090e4:	b480      	push	{r7}
 80090e6:	b083      	sub	sp, #12
 80090e8:	af00      	add	r7, sp, #0
	__asm volatile
 80090ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ee:	f383 8811 	msr	BASEPRI, r3
 80090f2:	f3bf 8f6f 	isb	sy
 80090f6:	f3bf 8f4f 	dsb	sy
 80090fa:	607b      	str	r3, [r7, #4]
}
 80090fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80090fe:	4b0f      	ldr	r3, [pc, #60]	; (800913c <vPortEnterCritical+0x58>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	3301      	adds	r3, #1
 8009104:	4a0d      	ldr	r2, [pc, #52]	; (800913c <vPortEnterCritical+0x58>)
 8009106:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009108:	4b0c      	ldr	r3, [pc, #48]	; (800913c <vPortEnterCritical+0x58>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	2b01      	cmp	r3, #1
 800910e:	d10f      	bne.n	8009130 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009110:	4b0b      	ldr	r3, [pc, #44]	; (8009140 <vPortEnterCritical+0x5c>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	b2db      	uxtb	r3, r3
 8009116:	2b00      	cmp	r3, #0
 8009118:	d00a      	beq.n	8009130 <vPortEnterCritical+0x4c>
	__asm volatile
 800911a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800911e:	f383 8811 	msr	BASEPRI, r3
 8009122:	f3bf 8f6f 	isb	sy
 8009126:	f3bf 8f4f 	dsb	sy
 800912a:	603b      	str	r3, [r7, #0]
}
 800912c:	bf00      	nop
 800912e:	e7fe      	b.n	800912e <vPortEnterCritical+0x4a>
	}
}
 8009130:	bf00      	nop
 8009132:	370c      	adds	r7, #12
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr
 800913c:	2000000c 	.word	0x2000000c
 8009140:	e000ed04 	.word	0xe000ed04

08009144 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009144:	b480      	push	{r7}
 8009146:	b083      	sub	sp, #12
 8009148:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800914a:	4b12      	ldr	r3, [pc, #72]	; (8009194 <vPortExitCritical+0x50>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d10a      	bne.n	8009168 <vPortExitCritical+0x24>
	__asm volatile
 8009152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009156:	f383 8811 	msr	BASEPRI, r3
 800915a:	f3bf 8f6f 	isb	sy
 800915e:	f3bf 8f4f 	dsb	sy
 8009162:	607b      	str	r3, [r7, #4]
}
 8009164:	bf00      	nop
 8009166:	e7fe      	b.n	8009166 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009168:	4b0a      	ldr	r3, [pc, #40]	; (8009194 <vPortExitCritical+0x50>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	3b01      	subs	r3, #1
 800916e:	4a09      	ldr	r2, [pc, #36]	; (8009194 <vPortExitCritical+0x50>)
 8009170:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009172:	4b08      	ldr	r3, [pc, #32]	; (8009194 <vPortExitCritical+0x50>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d105      	bne.n	8009186 <vPortExitCritical+0x42>
 800917a:	2300      	movs	r3, #0
 800917c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	f383 8811 	msr	BASEPRI, r3
}
 8009184:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009186:	bf00      	nop
 8009188:	370c      	adds	r7, #12
 800918a:	46bd      	mov	sp, r7
 800918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009190:	4770      	bx	lr
 8009192:	bf00      	nop
 8009194:	2000000c 	.word	0x2000000c
	...

080091a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80091a0:	f3ef 8009 	mrs	r0, PSP
 80091a4:	f3bf 8f6f 	isb	sy
 80091a8:	4b15      	ldr	r3, [pc, #84]	; (8009200 <pxCurrentTCBConst>)
 80091aa:	681a      	ldr	r2, [r3, #0]
 80091ac:	f01e 0f10 	tst.w	lr, #16
 80091b0:	bf08      	it	eq
 80091b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80091b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091ba:	6010      	str	r0, [r2, #0]
 80091bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80091c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80091c4:	f380 8811 	msr	BASEPRI, r0
 80091c8:	f3bf 8f4f 	dsb	sy
 80091cc:	f3bf 8f6f 	isb	sy
 80091d0:	f7ff f94a 	bl	8008468 <vTaskSwitchContext>
 80091d4:	f04f 0000 	mov.w	r0, #0
 80091d8:	f380 8811 	msr	BASEPRI, r0
 80091dc:	bc09      	pop	{r0, r3}
 80091de:	6819      	ldr	r1, [r3, #0]
 80091e0:	6808      	ldr	r0, [r1, #0]
 80091e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091e6:	f01e 0f10 	tst.w	lr, #16
 80091ea:	bf08      	it	eq
 80091ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80091f0:	f380 8809 	msr	PSP, r0
 80091f4:	f3bf 8f6f 	isb	sy
 80091f8:	4770      	bx	lr
 80091fa:	bf00      	nop
 80091fc:	f3af 8000 	nop.w

08009200 <pxCurrentTCBConst>:
 8009200:	2000078c 	.word	0x2000078c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009204:	bf00      	nop
 8009206:	bf00      	nop

08009208 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b082      	sub	sp, #8
 800920c:	af00      	add	r7, sp, #0
	__asm volatile
 800920e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009212:	f383 8811 	msr	BASEPRI, r3
 8009216:	f3bf 8f6f 	isb	sy
 800921a:	f3bf 8f4f 	dsb	sy
 800921e:	607b      	str	r3, [r7, #4]
}
 8009220:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009222:	f7ff f869 	bl	80082f8 <xTaskIncrementTick>
 8009226:	4603      	mov	r3, r0
 8009228:	2b00      	cmp	r3, #0
 800922a:	d003      	beq.n	8009234 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800922c:	4b06      	ldr	r3, [pc, #24]	; (8009248 <SysTick_Handler+0x40>)
 800922e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009232:	601a      	str	r2, [r3, #0]
 8009234:	2300      	movs	r3, #0
 8009236:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	f383 8811 	msr	BASEPRI, r3
}
 800923e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009240:	bf00      	nop
 8009242:	3708      	adds	r7, #8
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}
 8009248:	e000ed04 	.word	0xe000ed04

0800924c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800924c:	b480      	push	{r7}
 800924e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009250:	4b0b      	ldr	r3, [pc, #44]	; (8009280 <vPortSetupTimerInterrupt+0x34>)
 8009252:	2200      	movs	r2, #0
 8009254:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009256:	4b0b      	ldr	r3, [pc, #44]	; (8009284 <vPortSetupTimerInterrupt+0x38>)
 8009258:	2200      	movs	r2, #0
 800925a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800925c:	4b0a      	ldr	r3, [pc, #40]	; (8009288 <vPortSetupTimerInterrupt+0x3c>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a0a      	ldr	r2, [pc, #40]	; (800928c <vPortSetupTimerInterrupt+0x40>)
 8009262:	fba2 2303 	umull	r2, r3, r2, r3
 8009266:	099b      	lsrs	r3, r3, #6
 8009268:	4a09      	ldr	r2, [pc, #36]	; (8009290 <vPortSetupTimerInterrupt+0x44>)
 800926a:	3b01      	subs	r3, #1
 800926c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800926e:	4b04      	ldr	r3, [pc, #16]	; (8009280 <vPortSetupTimerInterrupt+0x34>)
 8009270:	2207      	movs	r2, #7
 8009272:	601a      	str	r2, [r3, #0]
}
 8009274:	bf00      	nop
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr
 800927e:	bf00      	nop
 8009280:	e000e010 	.word	0xe000e010
 8009284:	e000e018 	.word	0xe000e018
 8009288:	20000000 	.word	0x20000000
 800928c:	10624dd3 	.word	0x10624dd3
 8009290:	e000e014 	.word	0xe000e014

08009294 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009294:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80092a4 <vPortEnableVFP+0x10>
 8009298:	6801      	ldr	r1, [r0, #0]
 800929a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800929e:	6001      	str	r1, [r0, #0]
 80092a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80092a2:	bf00      	nop
 80092a4:	e000ed88 	.word	0xe000ed88

080092a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80092a8:	b480      	push	{r7}
 80092aa:	b085      	sub	sp, #20
 80092ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80092ae:	f3ef 8305 	mrs	r3, IPSR
 80092b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	2b0f      	cmp	r3, #15
 80092b8:	d914      	bls.n	80092e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80092ba:	4a17      	ldr	r2, [pc, #92]	; (8009318 <vPortValidateInterruptPriority+0x70>)
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	4413      	add	r3, r2
 80092c0:	781b      	ldrb	r3, [r3, #0]
 80092c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80092c4:	4b15      	ldr	r3, [pc, #84]	; (800931c <vPortValidateInterruptPriority+0x74>)
 80092c6:	781b      	ldrb	r3, [r3, #0]
 80092c8:	7afa      	ldrb	r2, [r7, #11]
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d20a      	bcs.n	80092e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80092ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d2:	f383 8811 	msr	BASEPRI, r3
 80092d6:	f3bf 8f6f 	isb	sy
 80092da:	f3bf 8f4f 	dsb	sy
 80092de:	607b      	str	r3, [r7, #4]
}
 80092e0:	bf00      	nop
 80092e2:	e7fe      	b.n	80092e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80092e4:	4b0e      	ldr	r3, [pc, #56]	; (8009320 <vPortValidateInterruptPriority+0x78>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80092ec:	4b0d      	ldr	r3, [pc, #52]	; (8009324 <vPortValidateInterruptPriority+0x7c>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d90a      	bls.n	800930a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80092f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f8:	f383 8811 	msr	BASEPRI, r3
 80092fc:	f3bf 8f6f 	isb	sy
 8009300:	f3bf 8f4f 	dsb	sy
 8009304:	603b      	str	r3, [r7, #0]
}
 8009306:	bf00      	nop
 8009308:	e7fe      	b.n	8009308 <vPortValidateInterruptPriority+0x60>
	}
 800930a:	bf00      	nop
 800930c:	3714      	adds	r7, #20
 800930e:	46bd      	mov	sp, r7
 8009310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009314:	4770      	bx	lr
 8009316:	bf00      	nop
 8009318:	e000e3f0 	.word	0xe000e3f0
 800931c:	200008b8 	.word	0x200008b8
 8009320:	e000ed0c 	.word	0xe000ed0c
 8009324:	200008bc 	.word	0x200008bc

08009328 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b08a      	sub	sp, #40	; 0x28
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009330:	2300      	movs	r3, #0
 8009332:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009334:	f7fe ff36 	bl	80081a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009338:	4b5b      	ldr	r3, [pc, #364]	; (80094a8 <pvPortMalloc+0x180>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d101      	bne.n	8009344 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009340:	f000 f920 	bl	8009584 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009344:	4b59      	ldr	r3, [pc, #356]	; (80094ac <pvPortMalloc+0x184>)
 8009346:	681a      	ldr	r2, [r3, #0]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	4013      	ands	r3, r2
 800934c:	2b00      	cmp	r3, #0
 800934e:	f040 8093 	bne.w	8009478 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d01d      	beq.n	8009394 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009358:	2208      	movs	r2, #8
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	4413      	add	r3, r2
 800935e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f003 0307 	and.w	r3, r3, #7
 8009366:	2b00      	cmp	r3, #0
 8009368:	d014      	beq.n	8009394 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f023 0307 	bic.w	r3, r3, #7
 8009370:	3308      	adds	r3, #8
 8009372:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f003 0307 	and.w	r3, r3, #7
 800937a:	2b00      	cmp	r3, #0
 800937c:	d00a      	beq.n	8009394 <pvPortMalloc+0x6c>
	__asm volatile
 800937e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009382:	f383 8811 	msr	BASEPRI, r3
 8009386:	f3bf 8f6f 	isb	sy
 800938a:	f3bf 8f4f 	dsb	sy
 800938e:	617b      	str	r3, [r7, #20]
}
 8009390:	bf00      	nop
 8009392:	e7fe      	b.n	8009392 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d06e      	beq.n	8009478 <pvPortMalloc+0x150>
 800939a:	4b45      	ldr	r3, [pc, #276]	; (80094b0 <pvPortMalloc+0x188>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	687a      	ldr	r2, [r7, #4]
 80093a0:	429a      	cmp	r2, r3
 80093a2:	d869      	bhi.n	8009478 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80093a4:	4b43      	ldr	r3, [pc, #268]	; (80094b4 <pvPortMalloc+0x18c>)
 80093a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80093a8:	4b42      	ldr	r3, [pc, #264]	; (80094b4 <pvPortMalloc+0x18c>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80093ae:	e004      	b.n	80093ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80093b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80093b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80093ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093bc:	685b      	ldr	r3, [r3, #4]
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	429a      	cmp	r2, r3
 80093c2:	d903      	bls.n	80093cc <pvPortMalloc+0xa4>
 80093c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d1f1      	bne.n	80093b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80093cc:	4b36      	ldr	r3, [pc, #216]	; (80094a8 <pvPortMalloc+0x180>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093d2:	429a      	cmp	r2, r3
 80093d4:	d050      	beq.n	8009478 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80093d6:	6a3b      	ldr	r3, [r7, #32]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	2208      	movs	r2, #8
 80093dc:	4413      	add	r3, r2
 80093de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80093e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e2:	681a      	ldr	r2, [r3, #0]
 80093e4:	6a3b      	ldr	r3, [r7, #32]
 80093e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80093e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ea:	685a      	ldr	r2, [r3, #4]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	1ad2      	subs	r2, r2, r3
 80093f0:	2308      	movs	r3, #8
 80093f2:	005b      	lsls	r3, r3, #1
 80093f4:	429a      	cmp	r2, r3
 80093f6:	d91f      	bls.n	8009438 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80093f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	4413      	add	r3, r2
 80093fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009400:	69bb      	ldr	r3, [r7, #24]
 8009402:	f003 0307 	and.w	r3, r3, #7
 8009406:	2b00      	cmp	r3, #0
 8009408:	d00a      	beq.n	8009420 <pvPortMalloc+0xf8>
	__asm volatile
 800940a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800940e:	f383 8811 	msr	BASEPRI, r3
 8009412:	f3bf 8f6f 	isb	sy
 8009416:	f3bf 8f4f 	dsb	sy
 800941a:	613b      	str	r3, [r7, #16]
}
 800941c:	bf00      	nop
 800941e:	e7fe      	b.n	800941e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009422:	685a      	ldr	r2, [r3, #4]
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	1ad2      	subs	r2, r2, r3
 8009428:	69bb      	ldr	r3, [r7, #24]
 800942a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800942c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800942e:	687a      	ldr	r2, [r7, #4]
 8009430:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009432:	69b8      	ldr	r0, [r7, #24]
 8009434:	f000 f908 	bl	8009648 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009438:	4b1d      	ldr	r3, [pc, #116]	; (80094b0 <pvPortMalloc+0x188>)
 800943a:	681a      	ldr	r2, [r3, #0]
 800943c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	1ad3      	subs	r3, r2, r3
 8009442:	4a1b      	ldr	r2, [pc, #108]	; (80094b0 <pvPortMalloc+0x188>)
 8009444:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009446:	4b1a      	ldr	r3, [pc, #104]	; (80094b0 <pvPortMalloc+0x188>)
 8009448:	681a      	ldr	r2, [r3, #0]
 800944a:	4b1b      	ldr	r3, [pc, #108]	; (80094b8 <pvPortMalloc+0x190>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	429a      	cmp	r2, r3
 8009450:	d203      	bcs.n	800945a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009452:	4b17      	ldr	r3, [pc, #92]	; (80094b0 <pvPortMalloc+0x188>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4a18      	ldr	r2, [pc, #96]	; (80094b8 <pvPortMalloc+0x190>)
 8009458:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800945a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800945c:	685a      	ldr	r2, [r3, #4]
 800945e:	4b13      	ldr	r3, [pc, #76]	; (80094ac <pvPortMalloc+0x184>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	431a      	orrs	r2, r3
 8009464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009466:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800946a:	2200      	movs	r2, #0
 800946c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800946e:	4b13      	ldr	r3, [pc, #76]	; (80094bc <pvPortMalloc+0x194>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	3301      	adds	r3, #1
 8009474:	4a11      	ldr	r2, [pc, #68]	; (80094bc <pvPortMalloc+0x194>)
 8009476:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009478:	f7fe fea2 	bl	80081c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800947c:	69fb      	ldr	r3, [r7, #28]
 800947e:	f003 0307 	and.w	r3, r3, #7
 8009482:	2b00      	cmp	r3, #0
 8009484:	d00a      	beq.n	800949c <pvPortMalloc+0x174>
	__asm volatile
 8009486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800948a:	f383 8811 	msr	BASEPRI, r3
 800948e:	f3bf 8f6f 	isb	sy
 8009492:	f3bf 8f4f 	dsb	sy
 8009496:	60fb      	str	r3, [r7, #12]
}
 8009498:	bf00      	nop
 800949a:	e7fe      	b.n	800949a <pvPortMalloc+0x172>
	return pvReturn;
 800949c:	69fb      	ldr	r3, [r7, #28]
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3728      	adds	r7, #40	; 0x28
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}
 80094a6:	bf00      	nop
 80094a8:	200044c8 	.word	0x200044c8
 80094ac:	200044dc 	.word	0x200044dc
 80094b0:	200044cc 	.word	0x200044cc
 80094b4:	200044c0 	.word	0x200044c0
 80094b8:	200044d0 	.word	0x200044d0
 80094bc:	200044d4 	.word	0x200044d4

080094c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b086      	sub	sp, #24
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d04d      	beq.n	800956e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80094d2:	2308      	movs	r3, #8
 80094d4:	425b      	negs	r3, r3
 80094d6:	697a      	ldr	r2, [r7, #20]
 80094d8:	4413      	add	r3, r2
 80094da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	685a      	ldr	r2, [r3, #4]
 80094e4:	4b24      	ldr	r3, [pc, #144]	; (8009578 <vPortFree+0xb8>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	4013      	ands	r3, r2
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d10a      	bne.n	8009504 <vPortFree+0x44>
	__asm volatile
 80094ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f2:	f383 8811 	msr	BASEPRI, r3
 80094f6:	f3bf 8f6f 	isb	sy
 80094fa:	f3bf 8f4f 	dsb	sy
 80094fe:	60fb      	str	r3, [r7, #12]
}
 8009500:	bf00      	nop
 8009502:	e7fe      	b.n	8009502 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d00a      	beq.n	8009522 <vPortFree+0x62>
	__asm volatile
 800950c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009510:	f383 8811 	msr	BASEPRI, r3
 8009514:	f3bf 8f6f 	isb	sy
 8009518:	f3bf 8f4f 	dsb	sy
 800951c:	60bb      	str	r3, [r7, #8]
}
 800951e:	bf00      	nop
 8009520:	e7fe      	b.n	8009520 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	685a      	ldr	r2, [r3, #4]
 8009526:	4b14      	ldr	r3, [pc, #80]	; (8009578 <vPortFree+0xb8>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4013      	ands	r3, r2
 800952c:	2b00      	cmp	r3, #0
 800952e:	d01e      	beq.n	800956e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d11a      	bne.n	800956e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	685a      	ldr	r2, [r3, #4]
 800953c:	4b0e      	ldr	r3, [pc, #56]	; (8009578 <vPortFree+0xb8>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	43db      	mvns	r3, r3
 8009542:	401a      	ands	r2, r3
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009548:	f7fe fe2c 	bl	80081a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	685a      	ldr	r2, [r3, #4]
 8009550:	4b0a      	ldr	r3, [pc, #40]	; (800957c <vPortFree+0xbc>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	4413      	add	r3, r2
 8009556:	4a09      	ldr	r2, [pc, #36]	; (800957c <vPortFree+0xbc>)
 8009558:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800955a:	6938      	ldr	r0, [r7, #16]
 800955c:	f000 f874 	bl	8009648 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009560:	4b07      	ldr	r3, [pc, #28]	; (8009580 <vPortFree+0xc0>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	3301      	adds	r3, #1
 8009566:	4a06      	ldr	r2, [pc, #24]	; (8009580 <vPortFree+0xc0>)
 8009568:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800956a:	f7fe fe29 	bl	80081c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800956e:	bf00      	nop
 8009570:	3718      	adds	r7, #24
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}
 8009576:	bf00      	nop
 8009578:	200044dc 	.word	0x200044dc
 800957c:	200044cc 	.word	0x200044cc
 8009580:	200044d8 	.word	0x200044d8

08009584 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009584:	b480      	push	{r7}
 8009586:	b085      	sub	sp, #20
 8009588:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800958a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800958e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009590:	4b27      	ldr	r3, [pc, #156]	; (8009630 <prvHeapInit+0xac>)
 8009592:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	f003 0307 	and.w	r3, r3, #7
 800959a:	2b00      	cmp	r3, #0
 800959c:	d00c      	beq.n	80095b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	3307      	adds	r3, #7
 80095a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f023 0307 	bic.w	r3, r3, #7
 80095aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80095ac:	68ba      	ldr	r2, [r7, #8]
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	1ad3      	subs	r3, r2, r3
 80095b2:	4a1f      	ldr	r2, [pc, #124]	; (8009630 <prvHeapInit+0xac>)
 80095b4:	4413      	add	r3, r2
 80095b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80095bc:	4a1d      	ldr	r2, [pc, #116]	; (8009634 <prvHeapInit+0xb0>)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80095c2:	4b1c      	ldr	r3, [pc, #112]	; (8009634 <prvHeapInit+0xb0>)
 80095c4:	2200      	movs	r2, #0
 80095c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	68ba      	ldr	r2, [r7, #8]
 80095cc:	4413      	add	r3, r2
 80095ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80095d0:	2208      	movs	r2, #8
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	1a9b      	subs	r3, r3, r2
 80095d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f023 0307 	bic.w	r3, r3, #7
 80095de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	4a15      	ldr	r2, [pc, #84]	; (8009638 <prvHeapInit+0xb4>)
 80095e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80095e6:	4b14      	ldr	r3, [pc, #80]	; (8009638 <prvHeapInit+0xb4>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	2200      	movs	r2, #0
 80095ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80095ee:	4b12      	ldr	r3, [pc, #72]	; (8009638 <prvHeapInit+0xb4>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	2200      	movs	r2, #0
 80095f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	68fa      	ldr	r2, [r7, #12]
 80095fe:	1ad2      	subs	r2, r2, r3
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009604:	4b0c      	ldr	r3, [pc, #48]	; (8009638 <prvHeapInit+0xb4>)
 8009606:	681a      	ldr	r2, [r3, #0]
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	685b      	ldr	r3, [r3, #4]
 8009610:	4a0a      	ldr	r2, [pc, #40]	; (800963c <prvHeapInit+0xb8>)
 8009612:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	4a09      	ldr	r2, [pc, #36]	; (8009640 <prvHeapInit+0xbc>)
 800961a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800961c:	4b09      	ldr	r3, [pc, #36]	; (8009644 <prvHeapInit+0xc0>)
 800961e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009622:	601a      	str	r2, [r3, #0]
}
 8009624:	bf00      	nop
 8009626:	3714      	adds	r7, #20
 8009628:	46bd      	mov	sp, r7
 800962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962e:	4770      	bx	lr
 8009630:	200008c0 	.word	0x200008c0
 8009634:	200044c0 	.word	0x200044c0
 8009638:	200044c8 	.word	0x200044c8
 800963c:	200044d0 	.word	0x200044d0
 8009640:	200044cc 	.word	0x200044cc
 8009644:	200044dc 	.word	0x200044dc

08009648 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009648:	b480      	push	{r7}
 800964a:	b085      	sub	sp, #20
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009650:	4b28      	ldr	r3, [pc, #160]	; (80096f4 <prvInsertBlockIntoFreeList+0xac>)
 8009652:	60fb      	str	r3, [r7, #12]
 8009654:	e002      	b.n	800965c <prvInsertBlockIntoFreeList+0x14>
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	60fb      	str	r3, [r7, #12]
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	687a      	ldr	r2, [r7, #4]
 8009662:	429a      	cmp	r2, r3
 8009664:	d8f7      	bhi.n	8009656 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	685b      	ldr	r3, [r3, #4]
 800966e:	68ba      	ldr	r2, [r7, #8]
 8009670:	4413      	add	r3, r2
 8009672:	687a      	ldr	r2, [r7, #4]
 8009674:	429a      	cmp	r2, r3
 8009676:	d108      	bne.n	800968a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	685a      	ldr	r2, [r3, #4]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	685b      	ldr	r3, [r3, #4]
 8009680:	441a      	add	r2, r3
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	685b      	ldr	r3, [r3, #4]
 8009692:	68ba      	ldr	r2, [r7, #8]
 8009694:	441a      	add	r2, r3
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	429a      	cmp	r2, r3
 800969c:	d118      	bne.n	80096d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681a      	ldr	r2, [r3, #0]
 80096a2:	4b15      	ldr	r3, [pc, #84]	; (80096f8 <prvInsertBlockIntoFreeList+0xb0>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	429a      	cmp	r2, r3
 80096a8:	d00d      	beq.n	80096c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	685a      	ldr	r2, [r3, #4]
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	685b      	ldr	r3, [r3, #4]
 80096b4:	441a      	add	r2, r3
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	681a      	ldr	r2, [r3, #0]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	601a      	str	r2, [r3, #0]
 80096c4:	e008      	b.n	80096d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80096c6:	4b0c      	ldr	r3, [pc, #48]	; (80096f8 <prvInsertBlockIntoFreeList+0xb0>)
 80096c8:	681a      	ldr	r2, [r3, #0]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	601a      	str	r2, [r3, #0]
 80096ce:	e003      	b.n	80096d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681a      	ldr	r2, [r3, #0]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80096d8:	68fa      	ldr	r2, [r7, #12]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	429a      	cmp	r2, r3
 80096de:	d002      	beq.n	80096e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	687a      	ldr	r2, [r7, #4]
 80096e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80096e6:	bf00      	nop
 80096e8:	3714      	adds	r7, #20
 80096ea:	46bd      	mov	sp, r7
 80096ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f0:	4770      	bx	lr
 80096f2:	bf00      	nop
 80096f4:	200044c0 	.word	0x200044c0
 80096f8:	200044c8 	.word	0x200044c8

080096fc <__errno>:
 80096fc:	4b01      	ldr	r3, [pc, #4]	; (8009704 <__errno+0x8>)
 80096fe:	6818      	ldr	r0, [r3, #0]
 8009700:	4770      	bx	lr
 8009702:	bf00      	nop
 8009704:	20000010 	.word	0x20000010

08009708 <__libc_init_array>:
 8009708:	b570      	push	{r4, r5, r6, lr}
 800970a:	4d0d      	ldr	r5, [pc, #52]	; (8009740 <__libc_init_array+0x38>)
 800970c:	4c0d      	ldr	r4, [pc, #52]	; (8009744 <__libc_init_array+0x3c>)
 800970e:	1b64      	subs	r4, r4, r5
 8009710:	10a4      	asrs	r4, r4, #2
 8009712:	2600      	movs	r6, #0
 8009714:	42a6      	cmp	r6, r4
 8009716:	d109      	bne.n	800972c <__libc_init_array+0x24>
 8009718:	4d0b      	ldr	r5, [pc, #44]	; (8009748 <__libc_init_array+0x40>)
 800971a:	4c0c      	ldr	r4, [pc, #48]	; (800974c <__libc_init_array+0x44>)
 800971c:	f001 f846 	bl	800a7ac <_init>
 8009720:	1b64      	subs	r4, r4, r5
 8009722:	10a4      	asrs	r4, r4, #2
 8009724:	2600      	movs	r6, #0
 8009726:	42a6      	cmp	r6, r4
 8009728:	d105      	bne.n	8009736 <__libc_init_array+0x2e>
 800972a:	bd70      	pop	{r4, r5, r6, pc}
 800972c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009730:	4798      	blx	r3
 8009732:	3601      	adds	r6, #1
 8009734:	e7ee      	b.n	8009714 <__libc_init_array+0xc>
 8009736:	f855 3b04 	ldr.w	r3, [r5], #4
 800973a:	4798      	blx	r3
 800973c:	3601      	adds	r6, #1
 800973e:	e7f2      	b.n	8009726 <__libc_init_array+0x1e>
 8009740:	0800aa18 	.word	0x0800aa18
 8009744:	0800aa18 	.word	0x0800aa18
 8009748:	0800aa18 	.word	0x0800aa18
 800974c:	0800aa1c 	.word	0x0800aa1c

08009750 <memcpy>:
 8009750:	440a      	add	r2, r1
 8009752:	4291      	cmp	r1, r2
 8009754:	f100 33ff 	add.w	r3, r0, #4294967295
 8009758:	d100      	bne.n	800975c <memcpy+0xc>
 800975a:	4770      	bx	lr
 800975c:	b510      	push	{r4, lr}
 800975e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009762:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009766:	4291      	cmp	r1, r2
 8009768:	d1f9      	bne.n	800975e <memcpy+0xe>
 800976a:	bd10      	pop	{r4, pc}

0800976c <memset>:
 800976c:	4402      	add	r2, r0
 800976e:	4603      	mov	r3, r0
 8009770:	4293      	cmp	r3, r2
 8009772:	d100      	bne.n	8009776 <memset+0xa>
 8009774:	4770      	bx	lr
 8009776:	f803 1b01 	strb.w	r1, [r3], #1
 800977a:	e7f9      	b.n	8009770 <memset+0x4>

0800977c <iprintf>:
 800977c:	b40f      	push	{r0, r1, r2, r3}
 800977e:	4b0a      	ldr	r3, [pc, #40]	; (80097a8 <iprintf+0x2c>)
 8009780:	b513      	push	{r0, r1, r4, lr}
 8009782:	681c      	ldr	r4, [r3, #0]
 8009784:	b124      	cbz	r4, 8009790 <iprintf+0x14>
 8009786:	69a3      	ldr	r3, [r4, #24]
 8009788:	b913      	cbnz	r3, 8009790 <iprintf+0x14>
 800978a:	4620      	mov	r0, r4
 800978c:	f000 fa72 	bl	8009c74 <__sinit>
 8009790:	ab05      	add	r3, sp, #20
 8009792:	9a04      	ldr	r2, [sp, #16]
 8009794:	68a1      	ldr	r1, [r4, #8]
 8009796:	9301      	str	r3, [sp, #4]
 8009798:	4620      	mov	r0, r4
 800979a:	f000 fc7b 	bl	800a094 <_vfiprintf_r>
 800979e:	b002      	add	sp, #8
 80097a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097a4:	b004      	add	sp, #16
 80097a6:	4770      	bx	lr
 80097a8:	20000010 	.word	0x20000010

080097ac <_puts_r>:
 80097ac:	b570      	push	{r4, r5, r6, lr}
 80097ae:	460e      	mov	r6, r1
 80097b0:	4605      	mov	r5, r0
 80097b2:	b118      	cbz	r0, 80097bc <_puts_r+0x10>
 80097b4:	6983      	ldr	r3, [r0, #24]
 80097b6:	b90b      	cbnz	r3, 80097bc <_puts_r+0x10>
 80097b8:	f000 fa5c 	bl	8009c74 <__sinit>
 80097bc:	69ab      	ldr	r3, [r5, #24]
 80097be:	68ac      	ldr	r4, [r5, #8]
 80097c0:	b913      	cbnz	r3, 80097c8 <_puts_r+0x1c>
 80097c2:	4628      	mov	r0, r5
 80097c4:	f000 fa56 	bl	8009c74 <__sinit>
 80097c8:	4b2c      	ldr	r3, [pc, #176]	; (800987c <_puts_r+0xd0>)
 80097ca:	429c      	cmp	r4, r3
 80097cc:	d120      	bne.n	8009810 <_puts_r+0x64>
 80097ce:	686c      	ldr	r4, [r5, #4]
 80097d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097d2:	07db      	lsls	r3, r3, #31
 80097d4:	d405      	bmi.n	80097e2 <_puts_r+0x36>
 80097d6:	89a3      	ldrh	r3, [r4, #12]
 80097d8:	0598      	lsls	r0, r3, #22
 80097da:	d402      	bmi.n	80097e2 <_puts_r+0x36>
 80097dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097de:	f000 fae7 	bl	8009db0 <__retarget_lock_acquire_recursive>
 80097e2:	89a3      	ldrh	r3, [r4, #12]
 80097e4:	0719      	lsls	r1, r3, #28
 80097e6:	d51d      	bpl.n	8009824 <_puts_r+0x78>
 80097e8:	6923      	ldr	r3, [r4, #16]
 80097ea:	b1db      	cbz	r3, 8009824 <_puts_r+0x78>
 80097ec:	3e01      	subs	r6, #1
 80097ee:	68a3      	ldr	r3, [r4, #8]
 80097f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80097f4:	3b01      	subs	r3, #1
 80097f6:	60a3      	str	r3, [r4, #8]
 80097f8:	bb39      	cbnz	r1, 800984a <_puts_r+0x9e>
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	da38      	bge.n	8009870 <_puts_r+0xc4>
 80097fe:	4622      	mov	r2, r4
 8009800:	210a      	movs	r1, #10
 8009802:	4628      	mov	r0, r5
 8009804:	f000 f85c 	bl	80098c0 <__swbuf_r>
 8009808:	3001      	adds	r0, #1
 800980a:	d011      	beq.n	8009830 <_puts_r+0x84>
 800980c:	250a      	movs	r5, #10
 800980e:	e011      	b.n	8009834 <_puts_r+0x88>
 8009810:	4b1b      	ldr	r3, [pc, #108]	; (8009880 <_puts_r+0xd4>)
 8009812:	429c      	cmp	r4, r3
 8009814:	d101      	bne.n	800981a <_puts_r+0x6e>
 8009816:	68ac      	ldr	r4, [r5, #8]
 8009818:	e7da      	b.n	80097d0 <_puts_r+0x24>
 800981a:	4b1a      	ldr	r3, [pc, #104]	; (8009884 <_puts_r+0xd8>)
 800981c:	429c      	cmp	r4, r3
 800981e:	bf08      	it	eq
 8009820:	68ec      	ldreq	r4, [r5, #12]
 8009822:	e7d5      	b.n	80097d0 <_puts_r+0x24>
 8009824:	4621      	mov	r1, r4
 8009826:	4628      	mov	r0, r5
 8009828:	f000 f89c 	bl	8009964 <__swsetup_r>
 800982c:	2800      	cmp	r0, #0
 800982e:	d0dd      	beq.n	80097ec <_puts_r+0x40>
 8009830:	f04f 35ff 	mov.w	r5, #4294967295
 8009834:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009836:	07da      	lsls	r2, r3, #31
 8009838:	d405      	bmi.n	8009846 <_puts_r+0x9a>
 800983a:	89a3      	ldrh	r3, [r4, #12]
 800983c:	059b      	lsls	r3, r3, #22
 800983e:	d402      	bmi.n	8009846 <_puts_r+0x9a>
 8009840:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009842:	f000 fab6 	bl	8009db2 <__retarget_lock_release_recursive>
 8009846:	4628      	mov	r0, r5
 8009848:	bd70      	pop	{r4, r5, r6, pc}
 800984a:	2b00      	cmp	r3, #0
 800984c:	da04      	bge.n	8009858 <_puts_r+0xac>
 800984e:	69a2      	ldr	r2, [r4, #24]
 8009850:	429a      	cmp	r2, r3
 8009852:	dc06      	bgt.n	8009862 <_puts_r+0xb6>
 8009854:	290a      	cmp	r1, #10
 8009856:	d004      	beq.n	8009862 <_puts_r+0xb6>
 8009858:	6823      	ldr	r3, [r4, #0]
 800985a:	1c5a      	adds	r2, r3, #1
 800985c:	6022      	str	r2, [r4, #0]
 800985e:	7019      	strb	r1, [r3, #0]
 8009860:	e7c5      	b.n	80097ee <_puts_r+0x42>
 8009862:	4622      	mov	r2, r4
 8009864:	4628      	mov	r0, r5
 8009866:	f000 f82b 	bl	80098c0 <__swbuf_r>
 800986a:	3001      	adds	r0, #1
 800986c:	d1bf      	bne.n	80097ee <_puts_r+0x42>
 800986e:	e7df      	b.n	8009830 <_puts_r+0x84>
 8009870:	6823      	ldr	r3, [r4, #0]
 8009872:	250a      	movs	r5, #10
 8009874:	1c5a      	adds	r2, r3, #1
 8009876:	6022      	str	r2, [r4, #0]
 8009878:	701d      	strb	r5, [r3, #0]
 800987a:	e7db      	b.n	8009834 <_puts_r+0x88>
 800987c:	0800a99c 	.word	0x0800a99c
 8009880:	0800a9bc 	.word	0x0800a9bc
 8009884:	0800a97c 	.word	0x0800a97c

08009888 <puts>:
 8009888:	4b02      	ldr	r3, [pc, #8]	; (8009894 <puts+0xc>)
 800988a:	4601      	mov	r1, r0
 800988c:	6818      	ldr	r0, [r3, #0]
 800988e:	f7ff bf8d 	b.w	80097ac <_puts_r>
 8009892:	bf00      	nop
 8009894:	20000010 	.word	0x20000010

08009898 <strncpy>:
 8009898:	b510      	push	{r4, lr}
 800989a:	3901      	subs	r1, #1
 800989c:	4603      	mov	r3, r0
 800989e:	b132      	cbz	r2, 80098ae <strncpy+0x16>
 80098a0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80098a4:	f803 4b01 	strb.w	r4, [r3], #1
 80098a8:	3a01      	subs	r2, #1
 80098aa:	2c00      	cmp	r4, #0
 80098ac:	d1f7      	bne.n	800989e <strncpy+0x6>
 80098ae:	441a      	add	r2, r3
 80098b0:	2100      	movs	r1, #0
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d100      	bne.n	80098b8 <strncpy+0x20>
 80098b6:	bd10      	pop	{r4, pc}
 80098b8:	f803 1b01 	strb.w	r1, [r3], #1
 80098bc:	e7f9      	b.n	80098b2 <strncpy+0x1a>
	...

080098c0 <__swbuf_r>:
 80098c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098c2:	460e      	mov	r6, r1
 80098c4:	4614      	mov	r4, r2
 80098c6:	4605      	mov	r5, r0
 80098c8:	b118      	cbz	r0, 80098d2 <__swbuf_r+0x12>
 80098ca:	6983      	ldr	r3, [r0, #24]
 80098cc:	b90b      	cbnz	r3, 80098d2 <__swbuf_r+0x12>
 80098ce:	f000 f9d1 	bl	8009c74 <__sinit>
 80098d2:	4b21      	ldr	r3, [pc, #132]	; (8009958 <__swbuf_r+0x98>)
 80098d4:	429c      	cmp	r4, r3
 80098d6:	d12b      	bne.n	8009930 <__swbuf_r+0x70>
 80098d8:	686c      	ldr	r4, [r5, #4]
 80098da:	69a3      	ldr	r3, [r4, #24]
 80098dc:	60a3      	str	r3, [r4, #8]
 80098de:	89a3      	ldrh	r3, [r4, #12]
 80098e0:	071a      	lsls	r2, r3, #28
 80098e2:	d52f      	bpl.n	8009944 <__swbuf_r+0x84>
 80098e4:	6923      	ldr	r3, [r4, #16]
 80098e6:	b36b      	cbz	r3, 8009944 <__swbuf_r+0x84>
 80098e8:	6923      	ldr	r3, [r4, #16]
 80098ea:	6820      	ldr	r0, [r4, #0]
 80098ec:	1ac0      	subs	r0, r0, r3
 80098ee:	6963      	ldr	r3, [r4, #20]
 80098f0:	b2f6      	uxtb	r6, r6
 80098f2:	4283      	cmp	r3, r0
 80098f4:	4637      	mov	r7, r6
 80098f6:	dc04      	bgt.n	8009902 <__swbuf_r+0x42>
 80098f8:	4621      	mov	r1, r4
 80098fa:	4628      	mov	r0, r5
 80098fc:	f000 f926 	bl	8009b4c <_fflush_r>
 8009900:	bb30      	cbnz	r0, 8009950 <__swbuf_r+0x90>
 8009902:	68a3      	ldr	r3, [r4, #8]
 8009904:	3b01      	subs	r3, #1
 8009906:	60a3      	str	r3, [r4, #8]
 8009908:	6823      	ldr	r3, [r4, #0]
 800990a:	1c5a      	adds	r2, r3, #1
 800990c:	6022      	str	r2, [r4, #0]
 800990e:	701e      	strb	r6, [r3, #0]
 8009910:	6963      	ldr	r3, [r4, #20]
 8009912:	3001      	adds	r0, #1
 8009914:	4283      	cmp	r3, r0
 8009916:	d004      	beq.n	8009922 <__swbuf_r+0x62>
 8009918:	89a3      	ldrh	r3, [r4, #12]
 800991a:	07db      	lsls	r3, r3, #31
 800991c:	d506      	bpl.n	800992c <__swbuf_r+0x6c>
 800991e:	2e0a      	cmp	r6, #10
 8009920:	d104      	bne.n	800992c <__swbuf_r+0x6c>
 8009922:	4621      	mov	r1, r4
 8009924:	4628      	mov	r0, r5
 8009926:	f000 f911 	bl	8009b4c <_fflush_r>
 800992a:	b988      	cbnz	r0, 8009950 <__swbuf_r+0x90>
 800992c:	4638      	mov	r0, r7
 800992e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009930:	4b0a      	ldr	r3, [pc, #40]	; (800995c <__swbuf_r+0x9c>)
 8009932:	429c      	cmp	r4, r3
 8009934:	d101      	bne.n	800993a <__swbuf_r+0x7a>
 8009936:	68ac      	ldr	r4, [r5, #8]
 8009938:	e7cf      	b.n	80098da <__swbuf_r+0x1a>
 800993a:	4b09      	ldr	r3, [pc, #36]	; (8009960 <__swbuf_r+0xa0>)
 800993c:	429c      	cmp	r4, r3
 800993e:	bf08      	it	eq
 8009940:	68ec      	ldreq	r4, [r5, #12]
 8009942:	e7ca      	b.n	80098da <__swbuf_r+0x1a>
 8009944:	4621      	mov	r1, r4
 8009946:	4628      	mov	r0, r5
 8009948:	f000 f80c 	bl	8009964 <__swsetup_r>
 800994c:	2800      	cmp	r0, #0
 800994e:	d0cb      	beq.n	80098e8 <__swbuf_r+0x28>
 8009950:	f04f 37ff 	mov.w	r7, #4294967295
 8009954:	e7ea      	b.n	800992c <__swbuf_r+0x6c>
 8009956:	bf00      	nop
 8009958:	0800a99c 	.word	0x0800a99c
 800995c:	0800a9bc 	.word	0x0800a9bc
 8009960:	0800a97c 	.word	0x0800a97c

08009964 <__swsetup_r>:
 8009964:	4b32      	ldr	r3, [pc, #200]	; (8009a30 <__swsetup_r+0xcc>)
 8009966:	b570      	push	{r4, r5, r6, lr}
 8009968:	681d      	ldr	r5, [r3, #0]
 800996a:	4606      	mov	r6, r0
 800996c:	460c      	mov	r4, r1
 800996e:	b125      	cbz	r5, 800997a <__swsetup_r+0x16>
 8009970:	69ab      	ldr	r3, [r5, #24]
 8009972:	b913      	cbnz	r3, 800997a <__swsetup_r+0x16>
 8009974:	4628      	mov	r0, r5
 8009976:	f000 f97d 	bl	8009c74 <__sinit>
 800997a:	4b2e      	ldr	r3, [pc, #184]	; (8009a34 <__swsetup_r+0xd0>)
 800997c:	429c      	cmp	r4, r3
 800997e:	d10f      	bne.n	80099a0 <__swsetup_r+0x3c>
 8009980:	686c      	ldr	r4, [r5, #4]
 8009982:	89a3      	ldrh	r3, [r4, #12]
 8009984:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009988:	0719      	lsls	r1, r3, #28
 800998a:	d42c      	bmi.n	80099e6 <__swsetup_r+0x82>
 800998c:	06dd      	lsls	r5, r3, #27
 800998e:	d411      	bmi.n	80099b4 <__swsetup_r+0x50>
 8009990:	2309      	movs	r3, #9
 8009992:	6033      	str	r3, [r6, #0]
 8009994:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009998:	81a3      	strh	r3, [r4, #12]
 800999a:	f04f 30ff 	mov.w	r0, #4294967295
 800999e:	e03e      	b.n	8009a1e <__swsetup_r+0xba>
 80099a0:	4b25      	ldr	r3, [pc, #148]	; (8009a38 <__swsetup_r+0xd4>)
 80099a2:	429c      	cmp	r4, r3
 80099a4:	d101      	bne.n	80099aa <__swsetup_r+0x46>
 80099a6:	68ac      	ldr	r4, [r5, #8]
 80099a8:	e7eb      	b.n	8009982 <__swsetup_r+0x1e>
 80099aa:	4b24      	ldr	r3, [pc, #144]	; (8009a3c <__swsetup_r+0xd8>)
 80099ac:	429c      	cmp	r4, r3
 80099ae:	bf08      	it	eq
 80099b0:	68ec      	ldreq	r4, [r5, #12]
 80099b2:	e7e6      	b.n	8009982 <__swsetup_r+0x1e>
 80099b4:	0758      	lsls	r0, r3, #29
 80099b6:	d512      	bpl.n	80099de <__swsetup_r+0x7a>
 80099b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80099ba:	b141      	cbz	r1, 80099ce <__swsetup_r+0x6a>
 80099bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80099c0:	4299      	cmp	r1, r3
 80099c2:	d002      	beq.n	80099ca <__swsetup_r+0x66>
 80099c4:	4630      	mov	r0, r6
 80099c6:	f000 fa5b 	bl	8009e80 <_free_r>
 80099ca:	2300      	movs	r3, #0
 80099cc:	6363      	str	r3, [r4, #52]	; 0x34
 80099ce:	89a3      	ldrh	r3, [r4, #12]
 80099d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80099d4:	81a3      	strh	r3, [r4, #12]
 80099d6:	2300      	movs	r3, #0
 80099d8:	6063      	str	r3, [r4, #4]
 80099da:	6923      	ldr	r3, [r4, #16]
 80099dc:	6023      	str	r3, [r4, #0]
 80099de:	89a3      	ldrh	r3, [r4, #12]
 80099e0:	f043 0308 	orr.w	r3, r3, #8
 80099e4:	81a3      	strh	r3, [r4, #12]
 80099e6:	6923      	ldr	r3, [r4, #16]
 80099e8:	b94b      	cbnz	r3, 80099fe <__swsetup_r+0x9a>
 80099ea:	89a3      	ldrh	r3, [r4, #12]
 80099ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80099f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099f4:	d003      	beq.n	80099fe <__swsetup_r+0x9a>
 80099f6:	4621      	mov	r1, r4
 80099f8:	4630      	mov	r0, r6
 80099fa:	f000 fa01 	bl	8009e00 <__smakebuf_r>
 80099fe:	89a0      	ldrh	r0, [r4, #12]
 8009a00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a04:	f010 0301 	ands.w	r3, r0, #1
 8009a08:	d00a      	beq.n	8009a20 <__swsetup_r+0xbc>
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	60a3      	str	r3, [r4, #8]
 8009a0e:	6963      	ldr	r3, [r4, #20]
 8009a10:	425b      	negs	r3, r3
 8009a12:	61a3      	str	r3, [r4, #24]
 8009a14:	6923      	ldr	r3, [r4, #16]
 8009a16:	b943      	cbnz	r3, 8009a2a <__swsetup_r+0xc6>
 8009a18:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009a1c:	d1ba      	bne.n	8009994 <__swsetup_r+0x30>
 8009a1e:	bd70      	pop	{r4, r5, r6, pc}
 8009a20:	0781      	lsls	r1, r0, #30
 8009a22:	bf58      	it	pl
 8009a24:	6963      	ldrpl	r3, [r4, #20]
 8009a26:	60a3      	str	r3, [r4, #8]
 8009a28:	e7f4      	b.n	8009a14 <__swsetup_r+0xb0>
 8009a2a:	2000      	movs	r0, #0
 8009a2c:	e7f7      	b.n	8009a1e <__swsetup_r+0xba>
 8009a2e:	bf00      	nop
 8009a30:	20000010 	.word	0x20000010
 8009a34:	0800a99c 	.word	0x0800a99c
 8009a38:	0800a9bc 	.word	0x0800a9bc
 8009a3c:	0800a97c 	.word	0x0800a97c

08009a40 <__sflush_r>:
 8009a40:	898a      	ldrh	r2, [r1, #12]
 8009a42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a46:	4605      	mov	r5, r0
 8009a48:	0710      	lsls	r0, r2, #28
 8009a4a:	460c      	mov	r4, r1
 8009a4c:	d458      	bmi.n	8009b00 <__sflush_r+0xc0>
 8009a4e:	684b      	ldr	r3, [r1, #4]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	dc05      	bgt.n	8009a60 <__sflush_r+0x20>
 8009a54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	dc02      	bgt.n	8009a60 <__sflush_r+0x20>
 8009a5a:	2000      	movs	r0, #0
 8009a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a62:	2e00      	cmp	r6, #0
 8009a64:	d0f9      	beq.n	8009a5a <__sflush_r+0x1a>
 8009a66:	2300      	movs	r3, #0
 8009a68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009a6c:	682f      	ldr	r7, [r5, #0]
 8009a6e:	602b      	str	r3, [r5, #0]
 8009a70:	d032      	beq.n	8009ad8 <__sflush_r+0x98>
 8009a72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009a74:	89a3      	ldrh	r3, [r4, #12]
 8009a76:	075a      	lsls	r2, r3, #29
 8009a78:	d505      	bpl.n	8009a86 <__sflush_r+0x46>
 8009a7a:	6863      	ldr	r3, [r4, #4]
 8009a7c:	1ac0      	subs	r0, r0, r3
 8009a7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009a80:	b10b      	cbz	r3, 8009a86 <__sflush_r+0x46>
 8009a82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009a84:	1ac0      	subs	r0, r0, r3
 8009a86:	2300      	movs	r3, #0
 8009a88:	4602      	mov	r2, r0
 8009a8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a8c:	6a21      	ldr	r1, [r4, #32]
 8009a8e:	4628      	mov	r0, r5
 8009a90:	47b0      	blx	r6
 8009a92:	1c43      	adds	r3, r0, #1
 8009a94:	89a3      	ldrh	r3, [r4, #12]
 8009a96:	d106      	bne.n	8009aa6 <__sflush_r+0x66>
 8009a98:	6829      	ldr	r1, [r5, #0]
 8009a9a:	291d      	cmp	r1, #29
 8009a9c:	d82c      	bhi.n	8009af8 <__sflush_r+0xb8>
 8009a9e:	4a2a      	ldr	r2, [pc, #168]	; (8009b48 <__sflush_r+0x108>)
 8009aa0:	40ca      	lsrs	r2, r1
 8009aa2:	07d6      	lsls	r6, r2, #31
 8009aa4:	d528      	bpl.n	8009af8 <__sflush_r+0xb8>
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	6062      	str	r2, [r4, #4]
 8009aaa:	04d9      	lsls	r1, r3, #19
 8009aac:	6922      	ldr	r2, [r4, #16]
 8009aae:	6022      	str	r2, [r4, #0]
 8009ab0:	d504      	bpl.n	8009abc <__sflush_r+0x7c>
 8009ab2:	1c42      	adds	r2, r0, #1
 8009ab4:	d101      	bne.n	8009aba <__sflush_r+0x7a>
 8009ab6:	682b      	ldr	r3, [r5, #0]
 8009ab8:	b903      	cbnz	r3, 8009abc <__sflush_r+0x7c>
 8009aba:	6560      	str	r0, [r4, #84]	; 0x54
 8009abc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009abe:	602f      	str	r7, [r5, #0]
 8009ac0:	2900      	cmp	r1, #0
 8009ac2:	d0ca      	beq.n	8009a5a <__sflush_r+0x1a>
 8009ac4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ac8:	4299      	cmp	r1, r3
 8009aca:	d002      	beq.n	8009ad2 <__sflush_r+0x92>
 8009acc:	4628      	mov	r0, r5
 8009ace:	f000 f9d7 	bl	8009e80 <_free_r>
 8009ad2:	2000      	movs	r0, #0
 8009ad4:	6360      	str	r0, [r4, #52]	; 0x34
 8009ad6:	e7c1      	b.n	8009a5c <__sflush_r+0x1c>
 8009ad8:	6a21      	ldr	r1, [r4, #32]
 8009ada:	2301      	movs	r3, #1
 8009adc:	4628      	mov	r0, r5
 8009ade:	47b0      	blx	r6
 8009ae0:	1c41      	adds	r1, r0, #1
 8009ae2:	d1c7      	bne.n	8009a74 <__sflush_r+0x34>
 8009ae4:	682b      	ldr	r3, [r5, #0]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d0c4      	beq.n	8009a74 <__sflush_r+0x34>
 8009aea:	2b1d      	cmp	r3, #29
 8009aec:	d001      	beq.n	8009af2 <__sflush_r+0xb2>
 8009aee:	2b16      	cmp	r3, #22
 8009af0:	d101      	bne.n	8009af6 <__sflush_r+0xb6>
 8009af2:	602f      	str	r7, [r5, #0]
 8009af4:	e7b1      	b.n	8009a5a <__sflush_r+0x1a>
 8009af6:	89a3      	ldrh	r3, [r4, #12]
 8009af8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009afc:	81a3      	strh	r3, [r4, #12]
 8009afe:	e7ad      	b.n	8009a5c <__sflush_r+0x1c>
 8009b00:	690f      	ldr	r7, [r1, #16]
 8009b02:	2f00      	cmp	r7, #0
 8009b04:	d0a9      	beq.n	8009a5a <__sflush_r+0x1a>
 8009b06:	0793      	lsls	r3, r2, #30
 8009b08:	680e      	ldr	r6, [r1, #0]
 8009b0a:	bf08      	it	eq
 8009b0c:	694b      	ldreq	r3, [r1, #20]
 8009b0e:	600f      	str	r7, [r1, #0]
 8009b10:	bf18      	it	ne
 8009b12:	2300      	movne	r3, #0
 8009b14:	eba6 0807 	sub.w	r8, r6, r7
 8009b18:	608b      	str	r3, [r1, #8]
 8009b1a:	f1b8 0f00 	cmp.w	r8, #0
 8009b1e:	dd9c      	ble.n	8009a5a <__sflush_r+0x1a>
 8009b20:	6a21      	ldr	r1, [r4, #32]
 8009b22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009b24:	4643      	mov	r3, r8
 8009b26:	463a      	mov	r2, r7
 8009b28:	4628      	mov	r0, r5
 8009b2a:	47b0      	blx	r6
 8009b2c:	2800      	cmp	r0, #0
 8009b2e:	dc06      	bgt.n	8009b3e <__sflush_r+0xfe>
 8009b30:	89a3      	ldrh	r3, [r4, #12]
 8009b32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b36:	81a3      	strh	r3, [r4, #12]
 8009b38:	f04f 30ff 	mov.w	r0, #4294967295
 8009b3c:	e78e      	b.n	8009a5c <__sflush_r+0x1c>
 8009b3e:	4407      	add	r7, r0
 8009b40:	eba8 0800 	sub.w	r8, r8, r0
 8009b44:	e7e9      	b.n	8009b1a <__sflush_r+0xda>
 8009b46:	bf00      	nop
 8009b48:	20400001 	.word	0x20400001

08009b4c <_fflush_r>:
 8009b4c:	b538      	push	{r3, r4, r5, lr}
 8009b4e:	690b      	ldr	r3, [r1, #16]
 8009b50:	4605      	mov	r5, r0
 8009b52:	460c      	mov	r4, r1
 8009b54:	b913      	cbnz	r3, 8009b5c <_fflush_r+0x10>
 8009b56:	2500      	movs	r5, #0
 8009b58:	4628      	mov	r0, r5
 8009b5a:	bd38      	pop	{r3, r4, r5, pc}
 8009b5c:	b118      	cbz	r0, 8009b66 <_fflush_r+0x1a>
 8009b5e:	6983      	ldr	r3, [r0, #24]
 8009b60:	b90b      	cbnz	r3, 8009b66 <_fflush_r+0x1a>
 8009b62:	f000 f887 	bl	8009c74 <__sinit>
 8009b66:	4b14      	ldr	r3, [pc, #80]	; (8009bb8 <_fflush_r+0x6c>)
 8009b68:	429c      	cmp	r4, r3
 8009b6a:	d11b      	bne.n	8009ba4 <_fflush_r+0x58>
 8009b6c:	686c      	ldr	r4, [r5, #4]
 8009b6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d0ef      	beq.n	8009b56 <_fflush_r+0xa>
 8009b76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009b78:	07d0      	lsls	r0, r2, #31
 8009b7a:	d404      	bmi.n	8009b86 <_fflush_r+0x3a>
 8009b7c:	0599      	lsls	r1, r3, #22
 8009b7e:	d402      	bmi.n	8009b86 <_fflush_r+0x3a>
 8009b80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b82:	f000 f915 	bl	8009db0 <__retarget_lock_acquire_recursive>
 8009b86:	4628      	mov	r0, r5
 8009b88:	4621      	mov	r1, r4
 8009b8a:	f7ff ff59 	bl	8009a40 <__sflush_r>
 8009b8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b90:	07da      	lsls	r2, r3, #31
 8009b92:	4605      	mov	r5, r0
 8009b94:	d4e0      	bmi.n	8009b58 <_fflush_r+0xc>
 8009b96:	89a3      	ldrh	r3, [r4, #12]
 8009b98:	059b      	lsls	r3, r3, #22
 8009b9a:	d4dd      	bmi.n	8009b58 <_fflush_r+0xc>
 8009b9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b9e:	f000 f908 	bl	8009db2 <__retarget_lock_release_recursive>
 8009ba2:	e7d9      	b.n	8009b58 <_fflush_r+0xc>
 8009ba4:	4b05      	ldr	r3, [pc, #20]	; (8009bbc <_fflush_r+0x70>)
 8009ba6:	429c      	cmp	r4, r3
 8009ba8:	d101      	bne.n	8009bae <_fflush_r+0x62>
 8009baa:	68ac      	ldr	r4, [r5, #8]
 8009bac:	e7df      	b.n	8009b6e <_fflush_r+0x22>
 8009bae:	4b04      	ldr	r3, [pc, #16]	; (8009bc0 <_fflush_r+0x74>)
 8009bb0:	429c      	cmp	r4, r3
 8009bb2:	bf08      	it	eq
 8009bb4:	68ec      	ldreq	r4, [r5, #12]
 8009bb6:	e7da      	b.n	8009b6e <_fflush_r+0x22>
 8009bb8:	0800a99c 	.word	0x0800a99c
 8009bbc:	0800a9bc 	.word	0x0800a9bc
 8009bc0:	0800a97c 	.word	0x0800a97c

08009bc4 <std>:
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	b510      	push	{r4, lr}
 8009bc8:	4604      	mov	r4, r0
 8009bca:	e9c0 3300 	strd	r3, r3, [r0]
 8009bce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009bd2:	6083      	str	r3, [r0, #8]
 8009bd4:	8181      	strh	r1, [r0, #12]
 8009bd6:	6643      	str	r3, [r0, #100]	; 0x64
 8009bd8:	81c2      	strh	r2, [r0, #14]
 8009bda:	6183      	str	r3, [r0, #24]
 8009bdc:	4619      	mov	r1, r3
 8009bde:	2208      	movs	r2, #8
 8009be0:	305c      	adds	r0, #92	; 0x5c
 8009be2:	f7ff fdc3 	bl	800976c <memset>
 8009be6:	4b05      	ldr	r3, [pc, #20]	; (8009bfc <std+0x38>)
 8009be8:	6263      	str	r3, [r4, #36]	; 0x24
 8009bea:	4b05      	ldr	r3, [pc, #20]	; (8009c00 <std+0x3c>)
 8009bec:	62a3      	str	r3, [r4, #40]	; 0x28
 8009bee:	4b05      	ldr	r3, [pc, #20]	; (8009c04 <std+0x40>)
 8009bf0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009bf2:	4b05      	ldr	r3, [pc, #20]	; (8009c08 <std+0x44>)
 8009bf4:	6224      	str	r4, [r4, #32]
 8009bf6:	6323      	str	r3, [r4, #48]	; 0x30
 8009bf8:	bd10      	pop	{r4, pc}
 8009bfa:	bf00      	nop
 8009bfc:	0800a63d 	.word	0x0800a63d
 8009c00:	0800a65f 	.word	0x0800a65f
 8009c04:	0800a697 	.word	0x0800a697
 8009c08:	0800a6bb 	.word	0x0800a6bb

08009c0c <_cleanup_r>:
 8009c0c:	4901      	ldr	r1, [pc, #4]	; (8009c14 <_cleanup_r+0x8>)
 8009c0e:	f000 b8af 	b.w	8009d70 <_fwalk_reent>
 8009c12:	bf00      	nop
 8009c14:	08009b4d 	.word	0x08009b4d

08009c18 <__sfmoreglue>:
 8009c18:	b570      	push	{r4, r5, r6, lr}
 8009c1a:	2268      	movs	r2, #104	; 0x68
 8009c1c:	1e4d      	subs	r5, r1, #1
 8009c1e:	4355      	muls	r5, r2
 8009c20:	460e      	mov	r6, r1
 8009c22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009c26:	f000 f997 	bl	8009f58 <_malloc_r>
 8009c2a:	4604      	mov	r4, r0
 8009c2c:	b140      	cbz	r0, 8009c40 <__sfmoreglue+0x28>
 8009c2e:	2100      	movs	r1, #0
 8009c30:	e9c0 1600 	strd	r1, r6, [r0]
 8009c34:	300c      	adds	r0, #12
 8009c36:	60a0      	str	r0, [r4, #8]
 8009c38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009c3c:	f7ff fd96 	bl	800976c <memset>
 8009c40:	4620      	mov	r0, r4
 8009c42:	bd70      	pop	{r4, r5, r6, pc}

08009c44 <__sfp_lock_acquire>:
 8009c44:	4801      	ldr	r0, [pc, #4]	; (8009c4c <__sfp_lock_acquire+0x8>)
 8009c46:	f000 b8b3 	b.w	8009db0 <__retarget_lock_acquire_recursive>
 8009c4a:	bf00      	nop
 8009c4c:	200044e1 	.word	0x200044e1

08009c50 <__sfp_lock_release>:
 8009c50:	4801      	ldr	r0, [pc, #4]	; (8009c58 <__sfp_lock_release+0x8>)
 8009c52:	f000 b8ae 	b.w	8009db2 <__retarget_lock_release_recursive>
 8009c56:	bf00      	nop
 8009c58:	200044e1 	.word	0x200044e1

08009c5c <__sinit_lock_acquire>:
 8009c5c:	4801      	ldr	r0, [pc, #4]	; (8009c64 <__sinit_lock_acquire+0x8>)
 8009c5e:	f000 b8a7 	b.w	8009db0 <__retarget_lock_acquire_recursive>
 8009c62:	bf00      	nop
 8009c64:	200044e2 	.word	0x200044e2

08009c68 <__sinit_lock_release>:
 8009c68:	4801      	ldr	r0, [pc, #4]	; (8009c70 <__sinit_lock_release+0x8>)
 8009c6a:	f000 b8a2 	b.w	8009db2 <__retarget_lock_release_recursive>
 8009c6e:	bf00      	nop
 8009c70:	200044e2 	.word	0x200044e2

08009c74 <__sinit>:
 8009c74:	b510      	push	{r4, lr}
 8009c76:	4604      	mov	r4, r0
 8009c78:	f7ff fff0 	bl	8009c5c <__sinit_lock_acquire>
 8009c7c:	69a3      	ldr	r3, [r4, #24]
 8009c7e:	b11b      	cbz	r3, 8009c88 <__sinit+0x14>
 8009c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c84:	f7ff bff0 	b.w	8009c68 <__sinit_lock_release>
 8009c88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009c8c:	6523      	str	r3, [r4, #80]	; 0x50
 8009c8e:	4b13      	ldr	r3, [pc, #76]	; (8009cdc <__sinit+0x68>)
 8009c90:	4a13      	ldr	r2, [pc, #76]	; (8009ce0 <__sinit+0x6c>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	62a2      	str	r2, [r4, #40]	; 0x28
 8009c96:	42a3      	cmp	r3, r4
 8009c98:	bf04      	itt	eq
 8009c9a:	2301      	moveq	r3, #1
 8009c9c:	61a3      	streq	r3, [r4, #24]
 8009c9e:	4620      	mov	r0, r4
 8009ca0:	f000 f820 	bl	8009ce4 <__sfp>
 8009ca4:	6060      	str	r0, [r4, #4]
 8009ca6:	4620      	mov	r0, r4
 8009ca8:	f000 f81c 	bl	8009ce4 <__sfp>
 8009cac:	60a0      	str	r0, [r4, #8]
 8009cae:	4620      	mov	r0, r4
 8009cb0:	f000 f818 	bl	8009ce4 <__sfp>
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	60e0      	str	r0, [r4, #12]
 8009cb8:	2104      	movs	r1, #4
 8009cba:	6860      	ldr	r0, [r4, #4]
 8009cbc:	f7ff ff82 	bl	8009bc4 <std>
 8009cc0:	68a0      	ldr	r0, [r4, #8]
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	2109      	movs	r1, #9
 8009cc6:	f7ff ff7d 	bl	8009bc4 <std>
 8009cca:	68e0      	ldr	r0, [r4, #12]
 8009ccc:	2202      	movs	r2, #2
 8009cce:	2112      	movs	r1, #18
 8009cd0:	f7ff ff78 	bl	8009bc4 <std>
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	61a3      	str	r3, [r4, #24]
 8009cd8:	e7d2      	b.n	8009c80 <__sinit+0xc>
 8009cda:	bf00      	nop
 8009cdc:	0800a978 	.word	0x0800a978
 8009ce0:	08009c0d 	.word	0x08009c0d

08009ce4 <__sfp>:
 8009ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ce6:	4607      	mov	r7, r0
 8009ce8:	f7ff ffac 	bl	8009c44 <__sfp_lock_acquire>
 8009cec:	4b1e      	ldr	r3, [pc, #120]	; (8009d68 <__sfp+0x84>)
 8009cee:	681e      	ldr	r6, [r3, #0]
 8009cf0:	69b3      	ldr	r3, [r6, #24]
 8009cf2:	b913      	cbnz	r3, 8009cfa <__sfp+0x16>
 8009cf4:	4630      	mov	r0, r6
 8009cf6:	f7ff ffbd 	bl	8009c74 <__sinit>
 8009cfa:	3648      	adds	r6, #72	; 0x48
 8009cfc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009d00:	3b01      	subs	r3, #1
 8009d02:	d503      	bpl.n	8009d0c <__sfp+0x28>
 8009d04:	6833      	ldr	r3, [r6, #0]
 8009d06:	b30b      	cbz	r3, 8009d4c <__sfp+0x68>
 8009d08:	6836      	ldr	r6, [r6, #0]
 8009d0a:	e7f7      	b.n	8009cfc <__sfp+0x18>
 8009d0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009d10:	b9d5      	cbnz	r5, 8009d48 <__sfp+0x64>
 8009d12:	4b16      	ldr	r3, [pc, #88]	; (8009d6c <__sfp+0x88>)
 8009d14:	60e3      	str	r3, [r4, #12]
 8009d16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009d1a:	6665      	str	r5, [r4, #100]	; 0x64
 8009d1c:	f000 f847 	bl	8009dae <__retarget_lock_init_recursive>
 8009d20:	f7ff ff96 	bl	8009c50 <__sfp_lock_release>
 8009d24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009d28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009d2c:	6025      	str	r5, [r4, #0]
 8009d2e:	61a5      	str	r5, [r4, #24]
 8009d30:	2208      	movs	r2, #8
 8009d32:	4629      	mov	r1, r5
 8009d34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009d38:	f7ff fd18 	bl	800976c <memset>
 8009d3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009d40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009d44:	4620      	mov	r0, r4
 8009d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d48:	3468      	adds	r4, #104	; 0x68
 8009d4a:	e7d9      	b.n	8009d00 <__sfp+0x1c>
 8009d4c:	2104      	movs	r1, #4
 8009d4e:	4638      	mov	r0, r7
 8009d50:	f7ff ff62 	bl	8009c18 <__sfmoreglue>
 8009d54:	4604      	mov	r4, r0
 8009d56:	6030      	str	r0, [r6, #0]
 8009d58:	2800      	cmp	r0, #0
 8009d5a:	d1d5      	bne.n	8009d08 <__sfp+0x24>
 8009d5c:	f7ff ff78 	bl	8009c50 <__sfp_lock_release>
 8009d60:	230c      	movs	r3, #12
 8009d62:	603b      	str	r3, [r7, #0]
 8009d64:	e7ee      	b.n	8009d44 <__sfp+0x60>
 8009d66:	bf00      	nop
 8009d68:	0800a978 	.word	0x0800a978
 8009d6c:	ffff0001 	.word	0xffff0001

08009d70 <_fwalk_reent>:
 8009d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d74:	4606      	mov	r6, r0
 8009d76:	4688      	mov	r8, r1
 8009d78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009d7c:	2700      	movs	r7, #0
 8009d7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d82:	f1b9 0901 	subs.w	r9, r9, #1
 8009d86:	d505      	bpl.n	8009d94 <_fwalk_reent+0x24>
 8009d88:	6824      	ldr	r4, [r4, #0]
 8009d8a:	2c00      	cmp	r4, #0
 8009d8c:	d1f7      	bne.n	8009d7e <_fwalk_reent+0xe>
 8009d8e:	4638      	mov	r0, r7
 8009d90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d94:	89ab      	ldrh	r3, [r5, #12]
 8009d96:	2b01      	cmp	r3, #1
 8009d98:	d907      	bls.n	8009daa <_fwalk_reent+0x3a>
 8009d9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d9e:	3301      	adds	r3, #1
 8009da0:	d003      	beq.n	8009daa <_fwalk_reent+0x3a>
 8009da2:	4629      	mov	r1, r5
 8009da4:	4630      	mov	r0, r6
 8009da6:	47c0      	blx	r8
 8009da8:	4307      	orrs	r7, r0
 8009daa:	3568      	adds	r5, #104	; 0x68
 8009dac:	e7e9      	b.n	8009d82 <_fwalk_reent+0x12>

08009dae <__retarget_lock_init_recursive>:
 8009dae:	4770      	bx	lr

08009db0 <__retarget_lock_acquire_recursive>:
 8009db0:	4770      	bx	lr

08009db2 <__retarget_lock_release_recursive>:
 8009db2:	4770      	bx	lr

08009db4 <__swhatbuf_r>:
 8009db4:	b570      	push	{r4, r5, r6, lr}
 8009db6:	460e      	mov	r6, r1
 8009db8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dbc:	2900      	cmp	r1, #0
 8009dbe:	b096      	sub	sp, #88	; 0x58
 8009dc0:	4614      	mov	r4, r2
 8009dc2:	461d      	mov	r5, r3
 8009dc4:	da08      	bge.n	8009dd8 <__swhatbuf_r+0x24>
 8009dc6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	602a      	str	r2, [r5, #0]
 8009dce:	061a      	lsls	r2, r3, #24
 8009dd0:	d410      	bmi.n	8009df4 <__swhatbuf_r+0x40>
 8009dd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009dd6:	e00e      	b.n	8009df6 <__swhatbuf_r+0x42>
 8009dd8:	466a      	mov	r2, sp
 8009dda:	f000 fc95 	bl	800a708 <_fstat_r>
 8009dde:	2800      	cmp	r0, #0
 8009de0:	dbf1      	blt.n	8009dc6 <__swhatbuf_r+0x12>
 8009de2:	9a01      	ldr	r2, [sp, #4]
 8009de4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009de8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009dec:	425a      	negs	r2, r3
 8009dee:	415a      	adcs	r2, r3
 8009df0:	602a      	str	r2, [r5, #0]
 8009df2:	e7ee      	b.n	8009dd2 <__swhatbuf_r+0x1e>
 8009df4:	2340      	movs	r3, #64	; 0x40
 8009df6:	2000      	movs	r0, #0
 8009df8:	6023      	str	r3, [r4, #0]
 8009dfa:	b016      	add	sp, #88	; 0x58
 8009dfc:	bd70      	pop	{r4, r5, r6, pc}
	...

08009e00 <__smakebuf_r>:
 8009e00:	898b      	ldrh	r3, [r1, #12]
 8009e02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009e04:	079d      	lsls	r5, r3, #30
 8009e06:	4606      	mov	r6, r0
 8009e08:	460c      	mov	r4, r1
 8009e0a:	d507      	bpl.n	8009e1c <__smakebuf_r+0x1c>
 8009e0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009e10:	6023      	str	r3, [r4, #0]
 8009e12:	6123      	str	r3, [r4, #16]
 8009e14:	2301      	movs	r3, #1
 8009e16:	6163      	str	r3, [r4, #20]
 8009e18:	b002      	add	sp, #8
 8009e1a:	bd70      	pop	{r4, r5, r6, pc}
 8009e1c:	ab01      	add	r3, sp, #4
 8009e1e:	466a      	mov	r2, sp
 8009e20:	f7ff ffc8 	bl	8009db4 <__swhatbuf_r>
 8009e24:	9900      	ldr	r1, [sp, #0]
 8009e26:	4605      	mov	r5, r0
 8009e28:	4630      	mov	r0, r6
 8009e2a:	f000 f895 	bl	8009f58 <_malloc_r>
 8009e2e:	b948      	cbnz	r0, 8009e44 <__smakebuf_r+0x44>
 8009e30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e34:	059a      	lsls	r2, r3, #22
 8009e36:	d4ef      	bmi.n	8009e18 <__smakebuf_r+0x18>
 8009e38:	f023 0303 	bic.w	r3, r3, #3
 8009e3c:	f043 0302 	orr.w	r3, r3, #2
 8009e40:	81a3      	strh	r3, [r4, #12]
 8009e42:	e7e3      	b.n	8009e0c <__smakebuf_r+0xc>
 8009e44:	4b0d      	ldr	r3, [pc, #52]	; (8009e7c <__smakebuf_r+0x7c>)
 8009e46:	62b3      	str	r3, [r6, #40]	; 0x28
 8009e48:	89a3      	ldrh	r3, [r4, #12]
 8009e4a:	6020      	str	r0, [r4, #0]
 8009e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e50:	81a3      	strh	r3, [r4, #12]
 8009e52:	9b00      	ldr	r3, [sp, #0]
 8009e54:	6163      	str	r3, [r4, #20]
 8009e56:	9b01      	ldr	r3, [sp, #4]
 8009e58:	6120      	str	r0, [r4, #16]
 8009e5a:	b15b      	cbz	r3, 8009e74 <__smakebuf_r+0x74>
 8009e5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e60:	4630      	mov	r0, r6
 8009e62:	f000 fc63 	bl	800a72c <_isatty_r>
 8009e66:	b128      	cbz	r0, 8009e74 <__smakebuf_r+0x74>
 8009e68:	89a3      	ldrh	r3, [r4, #12]
 8009e6a:	f023 0303 	bic.w	r3, r3, #3
 8009e6e:	f043 0301 	orr.w	r3, r3, #1
 8009e72:	81a3      	strh	r3, [r4, #12]
 8009e74:	89a0      	ldrh	r0, [r4, #12]
 8009e76:	4305      	orrs	r5, r0
 8009e78:	81a5      	strh	r5, [r4, #12]
 8009e7a:	e7cd      	b.n	8009e18 <__smakebuf_r+0x18>
 8009e7c:	08009c0d 	.word	0x08009c0d

08009e80 <_free_r>:
 8009e80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e82:	2900      	cmp	r1, #0
 8009e84:	d044      	beq.n	8009f10 <_free_r+0x90>
 8009e86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e8a:	9001      	str	r0, [sp, #4]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	f1a1 0404 	sub.w	r4, r1, #4
 8009e92:	bfb8      	it	lt
 8009e94:	18e4      	addlt	r4, r4, r3
 8009e96:	f000 fc6b 	bl	800a770 <__malloc_lock>
 8009e9a:	4a1e      	ldr	r2, [pc, #120]	; (8009f14 <_free_r+0x94>)
 8009e9c:	9801      	ldr	r0, [sp, #4]
 8009e9e:	6813      	ldr	r3, [r2, #0]
 8009ea0:	b933      	cbnz	r3, 8009eb0 <_free_r+0x30>
 8009ea2:	6063      	str	r3, [r4, #4]
 8009ea4:	6014      	str	r4, [r2, #0]
 8009ea6:	b003      	add	sp, #12
 8009ea8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009eac:	f000 bc66 	b.w	800a77c <__malloc_unlock>
 8009eb0:	42a3      	cmp	r3, r4
 8009eb2:	d908      	bls.n	8009ec6 <_free_r+0x46>
 8009eb4:	6825      	ldr	r5, [r4, #0]
 8009eb6:	1961      	adds	r1, r4, r5
 8009eb8:	428b      	cmp	r3, r1
 8009eba:	bf01      	itttt	eq
 8009ebc:	6819      	ldreq	r1, [r3, #0]
 8009ebe:	685b      	ldreq	r3, [r3, #4]
 8009ec0:	1949      	addeq	r1, r1, r5
 8009ec2:	6021      	streq	r1, [r4, #0]
 8009ec4:	e7ed      	b.n	8009ea2 <_free_r+0x22>
 8009ec6:	461a      	mov	r2, r3
 8009ec8:	685b      	ldr	r3, [r3, #4]
 8009eca:	b10b      	cbz	r3, 8009ed0 <_free_r+0x50>
 8009ecc:	42a3      	cmp	r3, r4
 8009ece:	d9fa      	bls.n	8009ec6 <_free_r+0x46>
 8009ed0:	6811      	ldr	r1, [r2, #0]
 8009ed2:	1855      	adds	r5, r2, r1
 8009ed4:	42a5      	cmp	r5, r4
 8009ed6:	d10b      	bne.n	8009ef0 <_free_r+0x70>
 8009ed8:	6824      	ldr	r4, [r4, #0]
 8009eda:	4421      	add	r1, r4
 8009edc:	1854      	adds	r4, r2, r1
 8009ede:	42a3      	cmp	r3, r4
 8009ee0:	6011      	str	r1, [r2, #0]
 8009ee2:	d1e0      	bne.n	8009ea6 <_free_r+0x26>
 8009ee4:	681c      	ldr	r4, [r3, #0]
 8009ee6:	685b      	ldr	r3, [r3, #4]
 8009ee8:	6053      	str	r3, [r2, #4]
 8009eea:	4421      	add	r1, r4
 8009eec:	6011      	str	r1, [r2, #0]
 8009eee:	e7da      	b.n	8009ea6 <_free_r+0x26>
 8009ef0:	d902      	bls.n	8009ef8 <_free_r+0x78>
 8009ef2:	230c      	movs	r3, #12
 8009ef4:	6003      	str	r3, [r0, #0]
 8009ef6:	e7d6      	b.n	8009ea6 <_free_r+0x26>
 8009ef8:	6825      	ldr	r5, [r4, #0]
 8009efa:	1961      	adds	r1, r4, r5
 8009efc:	428b      	cmp	r3, r1
 8009efe:	bf04      	itt	eq
 8009f00:	6819      	ldreq	r1, [r3, #0]
 8009f02:	685b      	ldreq	r3, [r3, #4]
 8009f04:	6063      	str	r3, [r4, #4]
 8009f06:	bf04      	itt	eq
 8009f08:	1949      	addeq	r1, r1, r5
 8009f0a:	6021      	streq	r1, [r4, #0]
 8009f0c:	6054      	str	r4, [r2, #4]
 8009f0e:	e7ca      	b.n	8009ea6 <_free_r+0x26>
 8009f10:	b003      	add	sp, #12
 8009f12:	bd30      	pop	{r4, r5, pc}
 8009f14:	200044e4 	.word	0x200044e4

08009f18 <sbrk_aligned>:
 8009f18:	b570      	push	{r4, r5, r6, lr}
 8009f1a:	4e0e      	ldr	r6, [pc, #56]	; (8009f54 <sbrk_aligned+0x3c>)
 8009f1c:	460c      	mov	r4, r1
 8009f1e:	6831      	ldr	r1, [r6, #0]
 8009f20:	4605      	mov	r5, r0
 8009f22:	b911      	cbnz	r1, 8009f2a <sbrk_aligned+0x12>
 8009f24:	f000 fb7a 	bl	800a61c <_sbrk_r>
 8009f28:	6030      	str	r0, [r6, #0]
 8009f2a:	4621      	mov	r1, r4
 8009f2c:	4628      	mov	r0, r5
 8009f2e:	f000 fb75 	bl	800a61c <_sbrk_r>
 8009f32:	1c43      	adds	r3, r0, #1
 8009f34:	d00a      	beq.n	8009f4c <sbrk_aligned+0x34>
 8009f36:	1cc4      	adds	r4, r0, #3
 8009f38:	f024 0403 	bic.w	r4, r4, #3
 8009f3c:	42a0      	cmp	r0, r4
 8009f3e:	d007      	beq.n	8009f50 <sbrk_aligned+0x38>
 8009f40:	1a21      	subs	r1, r4, r0
 8009f42:	4628      	mov	r0, r5
 8009f44:	f000 fb6a 	bl	800a61c <_sbrk_r>
 8009f48:	3001      	adds	r0, #1
 8009f4a:	d101      	bne.n	8009f50 <sbrk_aligned+0x38>
 8009f4c:	f04f 34ff 	mov.w	r4, #4294967295
 8009f50:	4620      	mov	r0, r4
 8009f52:	bd70      	pop	{r4, r5, r6, pc}
 8009f54:	200044e8 	.word	0x200044e8

08009f58 <_malloc_r>:
 8009f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f5c:	1ccd      	adds	r5, r1, #3
 8009f5e:	f025 0503 	bic.w	r5, r5, #3
 8009f62:	3508      	adds	r5, #8
 8009f64:	2d0c      	cmp	r5, #12
 8009f66:	bf38      	it	cc
 8009f68:	250c      	movcc	r5, #12
 8009f6a:	2d00      	cmp	r5, #0
 8009f6c:	4607      	mov	r7, r0
 8009f6e:	db01      	blt.n	8009f74 <_malloc_r+0x1c>
 8009f70:	42a9      	cmp	r1, r5
 8009f72:	d905      	bls.n	8009f80 <_malloc_r+0x28>
 8009f74:	230c      	movs	r3, #12
 8009f76:	603b      	str	r3, [r7, #0]
 8009f78:	2600      	movs	r6, #0
 8009f7a:	4630      	mov	r0, r6
 8009f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f80:	4e2e      	ldr	r6, [pc, #184]	; (800a03c <_malloc_r+0xe4>)
 8009f82:	f000 fbf5 	bl	800a770 <__malloc_lock>
 8009f86:	6833      	ldr	r3, [r6, #0]
 8009f88:	461c      	mov	r4, r3
 8009f8a:	bb34      	cbnz	r4, 8009fda <_malloc_r+0x82>
 8009f8c:	4629      	mov	r1, r5
 8009f8e:	4638      	mov	r0, r7
 8009f90:	f7ff ffc2 	bl	8009f18 <sbrk_aligned>
 8009f94:	1c43      	adds	r3, r0, #1
 8009f96:	4604      	mov	r4, r0
 8009f98:	d14d      	bne.n	800a036 <_malloc_r+0xde>
 8009f9a:	6834      	ldr	r4, [r6, #0]
 8009f9c:	4626      	mov	r6, r4
 8009f9e:	2e00      	cmp	r6, #0
 8009fa0:	d140      	bne.n	800a024 <_malloc_r+0xcc>
 8009fa2:	6823      	ldr	r3, [r4, #0]
 8009fa4:	4631      	mov	r1, r6
 8009fa6:	4638      	mov	r0, r7
 8009fa8:	eb04 0803 	add.w	r8, r4, r3
 8009fac:	f000 fb36 	bl	800a61c <_sbrk_r>
 8009fb0:	4580      	cmp	r8, r0
 8009fb2:	d13a      	bne.n	800a02a <_malloc_r+0xd2>
 8009fb4:	6821      	ldr	r1, [r4, #0]
 8009fb6:	3503      	adds	r5, #3
 8009fb8:	1a6d      	subs	r5, r5, r1
 8009fba:	f025 0503 	bic.w	r5, r5, #3
 8009fbe:	3508      	adds	r5, #8
 8009fc0:	2d0c      	cmp	r5, #12
 8009fc2:	bf38      	it	cc
 8009fc4:	250c      	movcc	r5, #12
 8009fc6:	4629      	mov	r1, r5
 8009fc8:	4638      	mov	r0, r7
 8009fca:	f7ff ffa5 	bl	8009f18 <sbrk_aligned>
 8009fce:	3001      	adds	r0, #1
 8009fd0:	d02b      	beq.n	800a02a <_malloc_r+0xd2>
 8009fd2:	6823      	ldr	r3, [r4, #0]
 8009fd4:	442b      	add	r3, r5
 8009fd6:	6023      	str	r3, [r4, #0]
 8009fd8:	e00e      	b.n	8009ff8 <_malloc_r+0xa0>
 8009fda:	6822      	ldr	r2, [r4, #0]
 8009fdc:	1b52      	subs	r2, r2, r5
 8009fde:	d41e      	bmi.n	800a01e <_malloc_r+0xc6>
 8009fe0:	2a0b      	cmp	r2, #11
 8009fe2:	d916      	bls.n	800a012 <_malloc_r+0xba>
 8009fe4:	1961      	adds	r1, r4, r5
 8009fe6:	42a3      	cmp	r3, r4
 8009fe8:	6025      	str	r5, [r4, #0]
 8009fea:	bf18      	it	ne
 8009fec:	6059      	strne	r1, [r3, #4]
 8009fee:	6863      	ldr	r3, [r4, #4]
 8009ff0:	bf08      	it	eq
 8009ff2:	6031      	streq	r1, [r6, #0]
 8009ff4:	5162      	str	r2, [r4, r5]
 8009ff6:	604b      	str	r3, [r1, #4]
 8009ff8:	4638      	mov	r0, r7
 8009ffa:	f104 060b 	add.w	r6, r4, #11
 8009ffe:	f000 fbbd 	bl	800a77c <__malloc_unlock>
 800a002:	f026 0607 	bic.w	r6, r6, #7
 800a006:	1d23      	adds	r3, r4, #4
 800a008:	1af2      	subs	r2, r6, r3
 800a00a:	d0b6      	beq.n	8009f7a <_malloc_r+0x22>
 800a00c:	1b9b      	subs	r3, r3, r6
 800a00e:	50a3      	str	r3, [r4, r2]
 800a010:	e7b3      	b.n	8009f7a <_malloc_r+0x22>
 800a012:	6862      	ldr	r2, [r4, #4]
 800a014:	42a3      	cmp	r3, r4
 800a016:	bf0c      	ite	eq
 800a018:	6032      	streq	r2, [r6, #0]
 800a01a:	605a      	strne	r2, [r3, #4]
 800a01c:	e7ec      	b.n	8009ff8 <_malloc_r+0xa0>
 800a01e:	4623      	mov	r3, r4
 800a020:	6864      	ldr	r4, [r4, #4]
 800a022:	e7b2      	b.n	8009f8a <_malloc_r+0x32>
 800a024:	4634      	mov	r4, r6
 800a026:	6876      	ldr	r6, [r6, #4]
 800a028:	e7b9      	b.n	8009f9e <_malloc_r+0x46>
 800a02a:	230c      	movs	r3, #12
 800a02c:	603b      	str	r3, [r7, #0]
 800a02e:	4638      	mov	r0, r7
 800a030:	f000 fba4 	bl	800a77c <__malloc_unlock>
 800a034:	e7a1      	b.n	8009f7a <_malloc_r+0x22>
 800a036:	6025      	str	r5, [r4, #0]
 800a038:	e7de      	b.n	8009ff8 <_malloc_r+0xa0>
 800a03a:	bf00      	nop
 800a03c:	200044e4 	.word	0x200044e4

0800a040 <__sfputc_r>:
 800a040:	6893      	ldr	r3, [r2, #8]
 800a042:	3b01      	subs	r3, #1
 800a044:	2b00      	cmp	r3, #0
 800a046:	b410      	push	{r4}
 800a048:	6093      	str	r3, [r2, #8]
 800a04a:	da08      	bge.n	800a05e <__sfputc_r+0x1e>
 800a04c:	6994      	ldr	r4, [r2, #24]
 800a04e:	42a3      	cmp	r3, r4
 800a050:	db01      	blt.n	800a056 <__sfputc_r+0x16>
 800a052:	290a      	cmp	r1, #10
 800a054:	d103      	bne.n	800a05e <__sfputc_r+0x1e>
 800a056:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a05a:	f7ff bc31 	b.w	80098c0 <__swbuf_r>
 800a05e:	6813      	ldr	r3, [r2, #0]
 800a060:	1c58      	adds	r0, r3, #1
 800a062:	6010      	str	r0, [r2, #0]
 800a064:	7019      	strb	r1, [r3, #0]
 800a066:	4608      	mov	r0, r1
 800a068:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a06c:	4770      	bx	lr

0800a06e <__sfputs_r>:
 800a06e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a070:	4606      	mov	r6, r0
 800a072:	460f      	mov	r7, r1
 800a074:	4614      	mov	r4, r2
 800a076:	18d5      	adds	r5, r2, r3
 800a078:	42ac      	cmp	r4, r5
 800a07a:	d101      	bne.n	800a080 <__sfputs_r+0x12>
 800a07c:	2000      	movs	r0, #0
 800a07e:	e007      	b.n	800a090 <__sfputs_r+0x22>
 800a080:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a084:	463a      	mov	r2, r7
 800a086:	4630      	mov	r0, r6
 800a088:	f7ff ffda 	bl	800a040 <__sfputc_r>
 800a08c:	1c43      	adds	r3, r0, #1
 800a08e:	d1f3      	bne.n	800a078 <__sfputs_r+0xa>
 800a090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a094 <_vfiprintf_r>:
 800a094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a098:	460d      	mov	r5, r1
 800a09a:	b09d      	sub	sp, #116	; 0x74
 800a09c:	4614      	mov	r4, r2
 800a09e:	4698      	mov	r8, r3
 800a0a0:	4606      	mov	r6, r0
 800a0a2:	b118      	cbz	r0, 800a0ac <_vfiprintf_r+0x18>
 800a0a4:	6983      	ldr	r3, [r0, #24]
 800a0a6:	b90b      	cbnz	r3, 800a0ac <_vfiprintf_r+0x18>
 800a0a8:	f7ff fde4 	bl	8009c74 <__sinit>
 800a0ac:	4b89      	ldr	r3, [pc, #548]	; (800a2d4 <_vfiprintf_r+0x240>)
 800a0ae:	429d      	cmp	r5, r3
 800a0b0:	d11b      	bne.n	800a0ea <_vfiprintf_r+0x56>
 800a0b2:	6875      	ldr	r5, [r6, #4]
 800a0b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0b6:	07d9      	lsls	r1, r3, #31
 800a0b8:	d405      	bmi.n	800a0c6 <_vfiprintf_r+0x32>
 800a0ba:	89ab      	ldrh	r3, [r5, #12]
 800a0bc:	059a      	lsls	r2, r3, #22
 800a0be:	d402      	bmi.n	800a0c6 <_vfiprintf_r+0x32>
 800a0c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0c2:	f7ff fe75 	bl	8009db0 <__retarget_lock_acquire_recursive>
 800a0c6:	89ab      	ldrh	r3, [r5, #12]
 800a0c8:	071b      	lsls	r3, r3, #28
 800a0ca:	d501      	bpl.n	800a0d0 <_vfiprintf_r+0x3c>
 800a0cc:	692b      	ldr	r3, [r5, #16]
 800a0ce:	b9eb      	cbnz	r3, 800a10c <_vfiprintf_r+0x78>
 800a0d0:	4629      	mov	r1, r5
 800a0d2:	4630      	mov	r0, r6
 800a0d4:	f7ff fc46 	bl	8009964 <__swsetup_r>
 800a0d8:	b1c0      	cbz	r0, 800a10c <_vfiprintf_r+0x78>
 800a0da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0dc:	07dc      	lsls	r4, r3, #31
 800a0de:	d50e      	bpl.n	800a0fe <_vfiprintf_r+0x6a>
 800a0e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a0e4:	b01d      	add	sp, #116	; 0x74
 800a0e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0ea:	4b7b      	ldr	r3, [pc, #492]	; (800a2d8 <_vfiprintf_r+0x244>)
 800a0ec:	429d      	cmp	r5, r3
 800a0ee:	d101      	bne.n	800a0f4 <_vfiprintf_r+0x60>
 800a0f0:	68b5      	ldr	r5, [r6, #8]
 800a0f2:	e7df      	b.n	800a0b4 <_vfiprintf_r+0x20>
 800a0f4:	4b79      	ldr	r3, [pc, #484]	; (800a2dc <_vfiprintf_r+0x248>)
 800a0f6:	429d      	cmp	r5, r3
 800a0f8:	bf08      	it	eq
 800a0fa:	68f5      	ldreq	r5, [r6, #12]
 800a0fc:	e7da      	b.n	800a0b4 <_vfiprintf_r+0x20>
 800a0fe:	89ab      	ldrh	r3, [r5, #12]
 800a100:	0598      	lsls	r0, r3, #22
 800a102:	d4ed      	bmi.n	800a0e0 <_vfiprintf_r+0x4c>
 800a104:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a106:	f7ff fe54 	bl	8009db2 <__retarget_lock_release_recursive>
 800a10a:	e7e9      	b.n	800a0e0 <_vfiprintf_r+0x4c>
 800a10c:	2300      	movs	r3, #0
 800a10e:	9309      	str	r3, [sp, #36]	; 0x24
 800a110:	2320      	movs	r3, #32
 800a112:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a116:	f8cd 800c 	str.w	r8, [sp, #12]
 800a11a:	2330      	movs	r3, #48	; 0x30
 800a11c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a2e0 <_vfiprintf_r+0x24c>
 800a120:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a124:	f04f 0901 	mov.w	r9, #1
 800a128:	4623      	mov	r3, r4
 800a12a:	469a      	mov	sl, r3
 800a12c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a130:	b10a      	cbz	r2, 800a136 <_vfiprintf_r+0xa2>
 800a132:	2a25      	cmp	r2, #37	; 0x25
 800a134:	d1f9      	bne.n	800a12a <_vfiprintf_r+0x96>
 800a136:	ebba 0b04 	subs.w	fp, sl, r4
 800a13a:	d00b      	beq.n	800a154 <_vfiprintf_r+0xc0>
 800a13c:	465b      	mov	r3, fp
 800a13e:	4622      	mov	r2, r4
 800a140:	4629      	mov	r1, r5
 800a142:	4630      	mov	r0, r6
 800a144:	f7ff ff93 	bl	800a06e <__sfputs_r>
 800a148:	3001      	adds	r0, #1
 800a14a:	f000 80aa 	beq.w	800a2a2 <_vfiprintf_r+0x20e>
 800a14e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a150:	445a      	add	r2, fp
 800a152:	9209      	str	r2, [sp, #36]	; 0x24
 800a154:	f89a 3000 	ldrb.w	r3, [sl]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	f000 80a2 	beq.w	800a2a2 <_vfiprintf_r+0x20e>
 800a15e:	2300      	movs	r3, #0
 800a160:	f04f 32ff 	mov.w	r2, #4294967295
 800a164:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a168:	f10a 0a01 	add.w	sl, sl, #1
 800a16c:	9304      	str	r3, [sp, #16]
 800a16e:	9307      	str	r3, [sp, #28]
 800a170:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a174:	931a      	str	r3, [sp, #104]	; 0x68
 800a176:	4654      	mov	r4, sl
 800a178:	2205      	movs	r2, #5
 800a17a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a17e:	4858      	ldr	r0, [pc, #352]	; (800a2e0 <_vfiprintf_r+0x24c>)
 800a180:	f7f6 f836 	bl	80001f0 <memchr>
 800a184:	9a04      	ldr	r2, [sp, #16]
 800a186:	b9d8      	cbnz	r0, 800a1c0 <_vfiprintf_r+0x12c>
 800a188:	06d1      	lsls	r1, r2, #27
 800a18a:	bf44      	itt	mi
 800a18c:	2320      	movmi	r3, #32
 800a18e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a192:	0713      	lsls	r3, r2, #28
 800a194:	bf44      	itt	mi
 800a196:	232b      	movmi	r3, #43	; 0x2b
 800a198:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a19c:	f89a 3000 	ldrb.w	r3, [sl]
 800a1a0:	2b2a      	cmp	r3, #42	; 0x2a
 800a1a2:	d015      	beq.n	800a1d0 <_vfiprintf_r+0x13c>
 800a1a4:	9a07      	ldr	r2, [sp, #28]
 800a1a6:	4654      	mov	r4, sl
 800a1a8:	2000      	movs	r0, #0
 800a1aa:	f04f 0c0a 	mov.w	ip, #10
 800a1ae:	4621      	mov	r1, r4
 800a1b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1b4:	3b30      	subs	r3, #48	; 0x30
 800a1b6:	2b09      	cmp	r3, #9
 800a1b8:	d94e      	bls.n	800a258 <_vfiprintf_r+0x1c4>
 800a1ba:	b1b0      	cbz	r0, 800a1ea <_vfiprintf_r+0x156>
 800a1bc:	9207      	str	r2, [sp, #28]
 800a1be:	e014      	b.n	800a1ea <_vfiprintf_r+0x156>
 800a1c0:	eba0 0308 	sub.w	r3, r0, r8
 800a1c4:	fa09 f303 	lsl.w	r3, r9, r3
 800a1c8:	4313      	orrs	r3, r2
 800a1ca:	9304      	str	r3, [sp, #16]
 800a1cc:	46a2      	mov	sl, r4
 800a1ce:	e7d2      	b.n	800a176 <_vfiprintf_r+0xe2>
 800a1d0:	9b03      	ldr	r3, [sp, #12]
 800a1d2:	1d19      	adds	r1, r3, #4
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	9103      	str	r1, [sp, #12]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	bfbb      	ittet	lt
 800a1dc:	425b      	neglt	r3, r3
 800a1de:	f042 0202 	orrlt.w	r2, r2, #2
 800a1e2:	9307      	strge	r3, [sp, #28]
 800a1e4:	9307      	strlt	r3, [sp, #28]
 800a1e6:	bfb8      	it	lt
 800a1e8:	9204      	strlt	r2, [sp, #16]
 800a1ea:	7823      	ldrb	r3, [r4, #0]
 800a1ec:	2b2e      	cmp	r3, #46	; 0x2e
 800a1ee:	d10c      	bne.n	800a20a <_vfiprintf_r+0x176>
 800a1f0:	7863      	ldrb	r3, [r4, #1]
 800a1f2:	2b2a      	cmp	r3, #42	; 0x2a
 800a1f4:	d135      	bne.n	800a262 <_vfiprintf_r+0x1ce>
 800a1f6:	9b03      	ldr	r3, [sp, #12]
 800a1f8:	1d1a      	adds	r2, r3, #4
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	9203      	str	r2, [sp, #12]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	bfb8      	it	lt
 800a202:	f04f 33ff 	movlt.w	r3, #4294967295
 800a206:	3402      	adds	r4, #2
 800a208:	9305      	str	r3, [sp, #20]
 800a20a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a2f0 <_vfiprintf_r+0x25c>
 800a20e:	7821      	ldrb	r1, [r4, #0]
 800a210:	2203      	movs	r2, #3
 800a212:	4650      	mov	r0, sl
 800a214:	f7f5 ffec 	bl	80001f0 <memchr>
 800a218:	b140      	cbz	r0, 800a22c <_vfiprintf_r+0x198>
 800a21a:	2340      	movs	r3, #64	; 0x40
 800a21c:	eba0 000a 	sub.w	r0, r0, sl
 800a220:	fa03 f000 	lsl.w	r0, r3, r0
 800a224:	9b04      	ldr	r3, [sp, #16]
 800a226:	4303      	orrs	r3, r0
 800a228:	3401      	adds	r4, #1
 800a22a:	9304      	str	r3, [sp, #16]
 800a22c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a230:	482c      	ldr	r0, [pc, #176]	; (800a2e4 <_vfiprintf_r+0x250>)
 800a232:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a236:	2206      	movs	r2, #6
 800a238:	f7f5 ffda 	bl	80001f0 <memchr>
 800a23c:	2800      	cmp	r0, #0
 800a23e:	d03f      	beq.n	800a2c0 <_vfiprintf_r+0x22c>
 800a240:	4b29      	ldr	r3, [pc, #164]	; (800a2e8 <_vfiprintf_r+0x254>)
 800a242:	bb1b      	cbnz	r3, 800a28c <_vfiprintf_r+0x1f8>
 800a244:	9b03      	ldr	r3, [sp, #12]
 800a246:	3307      	adds	r3, #7
 800a248:	f023 0307 	bic.w	r3, r3, #7
 800a24c:	3308      	adds	r3, #8
 800a24e:	9303      	str	r3, [sp, #12]
 800a250:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a252:	443b      	add	r3, r7
 800a254:	9309      	str	r3, [sp, #36]	; 0x24
 800a256:	e767      	b.n	800a128 <_vfiprintf_r+0x94>
 800a258:	fb0c 3202 	mla	r2, ip, r2, r3
 800a25c:	460c      	mov	r4, r1
 800a25e:	2001      	movs	r0, #1
 800a260:	e7a5      	b.n	800a1ae <_vfiprintf_r+0x11a>
 800a262:	2300      	movs	r3, #0
 800a264:	3401      	adds	r4, #1
 800a266:	9305      	str	r3, [sp, #20]
 800a268:	4619      	mov	r1, r3
 800a26a:	f04f 0c0a 	mov.w	ip, #10
 800a26e:	4620      	mov	r0, r4
 800a270:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a274:	3a30      	subs	r2, #48	; 0x30
 800a276:	2a09      	cmp	r2, #9
 800a278:	d903      	bls.n	800a282 <_vfiprintf_r+0x1ee>
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d0c5      	beq.n	800a20a <_vfiprintf_r+0x176>
 800a27e:	9105      	str	r1, [sp, #20]
 800a280:	e7c3      	b.n	800a20a <_vfiprintf_r+0x176>
 800a282:	fb0c 2101 	mla	r1, ip, r1, r2
 800a286:	4604      	mov	r4, r0
 800a288:	2301      	movs	r3, #1
 800a28a:	e7f0      	b.n	800a26e <_vfiprintf_r+0x1da>
 800a28c:	ab03      	add	r3, sp, #12
 800a28e:	9300      	str	r3, [sp, #0]
 800a290:	462a      	mov	r2, r5
 800a292:	4b16      	ldr	r3, [pc, #88]	; (800a2ec <_vfiprintf_r+0x258>)
 800a294:	a904      	add	r1, sp, #16
 800a296:	4630      	mov	r0, r6
 800a298:	f3af 8000 	nop.w
 800a29c:	4607      	mov	r7, r0
 800a29e:	1c78      	adds	r0, r7, #1
 800a2a0:	d1d6      	bne.n	800a250 <_vfiprintf_r+0x1bc>
 800a2a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2a4:	07d9      	lsls	r1, r3, #31
 800a2a6:	d405      	bmi.n	800a2b4 <_vfiprintf_r+0x220>
 800a2a8:	89ab      	ldrh	r3, [r5, #12]
 800a2aa:	059a      	lsls	r2, r3, #22
 800a2ac:	d402      	bmi.n	800a2b4 <_vfiprintf_r+0x220>
 800a2ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2b0:	f7ff fd7f 	bl	8009db2 <__retarget_lock_release_recursive>
 800a2b4:	89ab      	ldrh	r3, [r5, #12]
 800a2b6:	065b      	lsls	r3, r3, #25
 800a2b8:	f53f af12 	bmi.w	800a0e0 <_vfiprintf_r+0x4c>
 800a2bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2be:	e711      	b.n	800a0e4 <_vfiprintf_r+0x50>
 800a2c0:	ab03      	add	r3, sp, #12
 800a2c2:	9300      	str	r3, [sp, #0]
 800a2c4:	462a      	mov	r2, r5
 800a2c6:	4b09      	ldr	r3, [pc, #36]	; (800a2ec <_vfiprintf_r+0x258>)
 800a2c8:	a904      	add	r1, sp, #16
 800a2ca:	4630      	mov	r0, r6
 800a2cc:	f000 f880 	bl	800a3d0 <_printf_i>
 800a2d0:	e7e4      	b.n	800a29c <_vfiprintf_r+0x208>
 800a2d2:	bf00      	nop
 800a2d4:	0800a99c 	.word	0x0800a99c
 800a2d8:	0800a9bc 	.word	0x0800a9bc
 800a2dc:	0800a97c 	.word	0x0800a97c
 800a2e0:	0800a9dc 	.word	0x0800a9dc
 800a2e4:	0800a9e6 	.word	0x0800a9e6
 800a2e8:	00000000 	.word	0x00000000
 800a2ec:	0800a06f 	.word	0x0800a06f
 800a2f0:	0800a9e2 	.word	0x0800a9e2

0800a2f4 <_printf_common>:
 800a2f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2f8:	4616      	mov	r6, r2
 800a2fa:	4699      	mov	r9, r3
 800a2fc:	688a      	ldr	r2, [r1, #8]
 800a2fe:	690b      	ldr	r3, [r1, #16]
 800a300:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a304:	4293      	cmp	r3, r2
 800a306:	bfb8      	it	lt
 800a308:	4613      	movlt	r3, r2
 800a30a:	6033      	str	r3, [r6, #0]
 800a30c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a310:	4607      	mov	r7, r0
 800a312:	460c      	mov	r4, r1
 800a314:	b10a      	cbz	r2, 800a31a <_printf_common+0x26>
 800a316:	3301      	adds	r3, #1
 800a318:	6033      	str	r3, [r6, #0]
 800a31a:	6823      	ldr	r3, [r4, #0]
 800a31c:	0699      	lsls	r1, r3, #26
 800a31e:	bf42      	ittt	mi
 800a320:	6833      	ldrmi	r3, [r6, #0]
 800a322:	3302      	addmi	r3, #2
 800a324:	6033      	strmi	r3, [r6, #0]
 800a326:	6825      	ldr	r5, [r4, #0]
 800a328:	f015 0506 	ands.w	r5, r5, #6
 800a32c:	d106      	bne.n	800a33c <_printf_common+0x48>
 800a32e:	f104 0a19 	add.w	sl, r4, #25
 800a332:	68e3      	ldr	r3, [r4, #12]
 800a334:	6832      	ldr	r2, [r6, #0]
 800a336:	1a9b      	subs	r3, r3, r2
 800a338:	42ab      	cmp	r3, r5
 800a33a:	dc26      	bgt.n	800a38a <_printf_common+0x96>
 800a33c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a340:	1e13      	subs	r3, r2, #0
 800a342:	6822      	ldr	r2, [r4, #0]
 800a344:	bf18      	it	ne
 800a346:	2301      	movne	r3, #1
 800a348:	0692      	lsls	r2, r2, #26
 800a34a:	d42b      	bmi.n	800a3a4 <_printf_common+0xb0>
 800a34c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a350:	4649      	mov	r1, r9
 800a352:	4638      	mov	r0, r7
 800a354:	47c0      	blx	r8
 800a356:	3001      	adds	r0, #1
 800a358:	d01e      	beq.n	800a398 <_printf_common+0xa4>
 800a35a:	6823      	ldr	r3, [r4, #0]
 800a35c:	68e5      	ldr	r5, [r4, #12]
 800a35e:	6832      	ldr	r2, [r6, #0]
 800a360:	f003 0306 	and.w	r3, r3, #6
 800a364:	2b04      	cmp	r3, #4
 800a366:	bf08      	it	eq
 800a368:	1aad      	subeq	r5, r5, r2
 800a36a:	68a3      	ldr	r3, [r4, #8]
 800a36c:	6922      	ldr	r2, [r4, #16]
 800a36e:	bf0c      	ite	eq
 800a370:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a374:	2500      	movne	r5, #0
 800a376:	4293      	cmp	r3, r2
 800a378:	bfc4      	itt	gt
 800a37a:	1a9b      	subgt	r3, r3, r2
 800a37c:	18ed      	addgt	r5, r5, r3
 800a37e:	2600      	movs	r6, #0
 800a380:	341a      	adds	r4, #26
 800a382:	42b5      	cmp	r5, r6
 800a384:	d11a      	bne.n	800a3bc <_printf_common+0xc8>
 800a386:	2000      	movs	r0, #0
 800a388:	e008      	b.n	800a39c <_printf_common+0xa8>
 800a38a:	2301      	movs	r3, #1
 800a38c:	4652      	mov	r2, sl
 800a38e:	4649      	mov	r1, r9
 800a390:	4638      	mov	r0, r7
 800a392:	47c0      	blx	r8
 800a394:	3001      	adds	r0, #1
 800a396:	d103      	bne.n	800a3a0 <_printf_common+0xac>
 800a398:	f04f 30ff 	mov.w	r0, #4294967295
 800a39c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3a0:	3501      	adds	r5, #1
 800a3a2:	e7c6      	b.n	800a332 <_printf_common+0x3e>
 800a3a4:	18e1      	adds	r1, r4, r3
 800a3a6:	1c5a      	adds	r2, r3, #1
 800a3a8:	2030      	movs	r0, #48	; 0x30
 800a3aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a3ae:	4422      	add	r2, r4
 800a3b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a3b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a3b8:	3302      	adds	r3, #2
 800a3ba:	e7c7      	b.n	800a34c <_printf_common+0x58>
 800a3bc:	2301      	movs	r3, #1
 800a3be:	4622      	mov	r2, r4
 800a3c0:	4649      	mov	r1, r9
 800a3c2:	4638      	mov	r0, r7
 800a3c4:	47c0      	blx	r8
 800a3c6:	3001      	adds	r0, #1
 800a3c8:	d0e6      	beq.n	800a398 <_printf_common+0xa4>
 800a3ca:	3601      	adds	r6, #1
 800a3cc:	e7d9      	b.n	800a382 <_printf_common+0x8e>
	...

0800a3d0 <_printf_i>:
 800a3d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a3d4:	7e0f      	ldrb	r7, [r1, #24]
 800a3d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a3d8:	2f78      	cmp	r7, #120	; 0x78
 800a3da:	4691      	mov	r9, r2
 800a3dc:	4680      	mov	r8, r0
 800a3de:	460c      	mov	r4, r1
 800a3e0:	469a      	mov	sl, r3
 800a3e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a3e6:	d807      	bhi.n	800a3f8 <_printf_i+0x28>
 800a3e8:	2f62      	cmp	r7, #98	; 0x62
 800a3ea:	d80a      	bhi.n	800a402 <_printf_i+0x32>
 800a3ec:	2f00      	cmp	r7, #0
 800a3ee:	f000 80d8 	beq.w	800a5a2 <_printf_i+0x1d2>
 800a3f2:	2f58      	cmp	r7, #88	; 0x58
 800a3f4:	f000 80a3 	beq.w	800a53e <_printf_i+0x16e>
 800a3f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a3fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a400:	e03a      	b.n	800a478 <_printf_i+0xa8>
 800a402:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a406:	2b15      	cmp	r3, #21
 800a408:	d8f6      	bhi.n	800a3f8 <_printf_i+0x28>
 800a40a:	a101      	add	r1, pc, #4	; (adr r1, 800a410 <_printf_i+0x40>)
 800a40c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a410:	0800a469 	.word	0x0800a469
 800a414:	0800a47d 	.word	0x0800a47d
 800a418:	0800a3f9 	.word	0x0800a3f9
 800a41c:	0800a3f9 	.word	0x0800a3f9
 800a420:	0800a3f9 	.word	0x0800a3f9
 800a424:	0800a3f9 	.word	0x0800a3f9
 800a428:	0800a47d 	.word	0x0800a47d
 800a42c:	0800a3f9 	.word	0x0800a3f9
 800a430:	0800a3f9 	.word	0x0800a3f9
 800a434:	0800a3f9 	.word	0x0800a3f9
 800a438:	0800a3f9 	.word	0x0800a3f9
 800a43c:	0800a589 	.word	0x0800a589
 800a440:	0800a4ad 	.word	0x0800a4ad
 800a444:	0800a56b 	.word	0x0800a56b
 800a448:	0800a3f9 	.word	0x0800a3f9
 800a44c:	0800a3f9 	.word	0x0800a3f9
 800a450:	0800a5ab 	.word	0x0800a5ab
 800a454:	0800a3f9 	.word	0x0800a3f9
 800a458:	0800a4ad 	.word	0x0800a4ad
 800a45c:	0800a3f9 	.word	0x0800a3f9
 800a460:	0800a3f9 	.word	0x0800a3f9
 800a464:	0800a573 	.word	0x0800a573
 800a468:	682b      	ldr	r3, [r5, #0]
 800a46a:	1d1a      	adds	r2, r3, #4
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	602a      	str	r2, [r5, #0]
 800a470:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a474:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a478:	2301      	movs	r3, #1
 800a47a:	e0a3      	b.n	800a5c4 <_printf_i+0x1f4>
 800a47c:	6820      	ldr	r0, [r4, #0]
 800a47e:	6829      	ldr	r1, [r5, #0]
 800a480:	0606      	lsls	r6, r0, #24
 800a482:	f101 0304 	add.w	r3, r1, #4
 800a486:	d50a      	bpl.n	800a49e <_printf_i+0xce>
 800a488:	680e      	ldr	r6, [r1, #0]
 800a48a:	602b      	str	r3, [r5, #0]
 800a48c:	2e00      	cmp	r6, #0
 800a48e:	da03      	bge.n	800a498 <_printf_i+0xc8>
 800a490:	232d      	movs	r3, #45	; 0x2d
 800a492:	4276      	negs	r6, r6
 800a494:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a498:	485e      	ldr	r0, [pc, #376]	; (800a614 <_printf_i+0x244>)
 800a49a:	230a      	movs	r3, #10
 800a49c:	e019      	b.n	800a4d2 <_printf_i+0x102>
 800a49e:	680e      	ldr	r6, [r1, #0]
 800a4a0:	602b      	str	r3, [r5, #0]
 800a4a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a4a6:	bf18      	it	ne
 800a4a8:	b236      	sxthne	r6, r6
 800a4aa:	e7ef      	b.n	800a48c <_printf_i+0xbc>
 800a4ac:	682b      	ldr	r3, [r5, #0]
 800a4ae:	6820      	ldr	r0, [r4, #0]
 800a4b0:	1d19      	adds	r1, r3, #4
 800a4b2:	6029      	str	r1, [r5, #0]
 800a4b4:	0601      	lsls	r1, r0, #24
 800a4b6:	d501      	bpl.n	800a4bc <_printf_i+0xec>
 800a4b8:	681e      	ldr	r6, [r3, #0]
 800a4ba:	e002      	b.n	800a4c2 <_printf_i+0xf2>
 800a4bc:	0646      	lsls	r6, r0, #25
 800a4be:	d5fb      	bpl.n	800a4b8 <_printf_i+0xe8>
 800a4c0:	881e      	ldrh	r6, [r3, #0]
 800a4c2:	4854      	ldr	r0, [pc, #336]	; (800a614 <_printf_i+0x244>)
 800a4c4:	2f6f      	cmp	r7, #111	; 0x6f
 800a4c6:	bf0c      	ite	eq
 800a4c8:	2308      	moveq	r3, #8
 800a4ca:	230a      	movne	r3, #10
 800a4cc:	2100      	movs	r1, #0
 800a4ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a4d2:	6865      	ldr	r5, [r4, #4]
 800a4d4:	60a5      	str	r5, [r4, #8]
 800a4d6:	2d00      	cmp	r5, #0
 800a4d8:	bfa2      	ittt	ge
 800a4da:	6821      	ldrge	r1, [r4, #0]
 800a4dc:	f021 0104 	bicge.w	r1, r1, #4
 800a4e0:	6021      	strge	r1, [r4, #0]
 800a4e2:	b90e      	cbnz	r6, 800a4e8 <_printf_i+0x118>
 800a4e4:	2d00      	cmp	r5, #0
 800a4e6:	d04d      	beq.n	800a584 <_printf_i+0x1b4>
 800a4e8:	4615      	mov	r5, r2
 800a4ea:	fbb6 f1f3 	udiv	r1, r6, r3
 800a4ee:	fb03 6711 	mls	r7, r3, r1, r6
 800a4f2:	5dc7      	ldrb	r7, [r0, r7]
 800a4f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a4f8:	4637      	mov	r7, r6
 800a4fa:	42bb      	cmp	r3, r7
 800a4fc:	460e      	mov	r6, r1
 800a4fe:	d9f4      	bls.n	800a4ea <_printf_i+0x11a>
 800a500:	2b08      	cmp	r3, #8
 800a502:	d10b      	bne.n	800a51c <_printf_i+0x14c>
 800a504:	6823      	ldr	r3, [r4, #0]
 800a506:	07de      	lsls	r6, r3, #31
 800a508:	d508      	bpl.n	800a51c <_printf_i+0x14c>
 800a50a:	6923      	ldr	r3, [r4, #16]
 800a50c:	6861      	ldr	r1, [r4, #4]
 800a50e:	4299      	cmp	r1, r3
 800a510:	bfde      	ittt	le
 800a512:	2330      	movle	r3, #48	; 0x30
 800a514:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a518:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a51c:	1b52      	subs	r2, r2, r5
 800a51e:	6122      	str	r2, [r4, #16]
 800a520:	f8cd a000 	str.w	sl, [sp]
 800a524:	464b      	mov	r3, r9
 800a526:	aa03      	add	r2, sp, #12
 800a528:	4621      	mov	r1, r4
 800a52a:	4640      	mov	r0, r8
 800a52c:	f7ff fee2 	bl	800a2f4 <_printf_common>
 800a530:	3001      	adds	r0, #1
 800a532:	d14c      	bne.n	800a5ce <_printf_i+0x1fe>
 800a534:	f04f 30ff 	mov.w	r0, #4294967295
 800a538:	b004      	add	sp, #16
 800a53a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a53e:	4835      	ldr	r0, [pc, #212]	; (800a614 <_printf_i+0x244>)
 800a540:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a544:	6829      	ldr	r1, [r5, #0]
 800a546:	6823      	ldr	r3, [r4, #0]
 800a548:	f851 6b04 	ldr.w	r6, [r1], #4
 800a54c:	6029      	str	r1, [r5, #0]
 800a54e:	061d      	lsls	r5, r3, #24
 800a550:	d514      	bpl.n	800a57c <_printf_i+0x1ac>
 800a552:	07df      	lsls	r7, r3, #31
 800a554:	bf44      	itt	mi
 800a556:	f043 0320 	orrmi.w	r3, r3, #32
 800a55a:	6023      	strmi	r3, [r4, #0]
 800a55c:	b91e      	cbnz	r6, 800a566 <_printf_i+0x196>
 800a55e:	6823      	ldr	r3, [r4, #0]
 800a560:	f023 0320 	bic.w	r3, r3, #32
 800a564:	6023      	str	r3, [r4, #0]
 800a566:	2310      	movs	r3, #16
 800a568:	e7b0      	b.n	800a4cc <_printf_i+0xfc>
 800a56a:	6823      	ldr	r3, [r4, #0]
 800a56c:	f043 0320 	orr.w	r3, r3, #32
 800a570:	6023      	str	r3, [r4, #0]
 800a572:	2378      	movs	r3, #120	; 0x78
 800a574:	4828      	ldr	r0, [pc, #160]	; (800a618 <_printf_i+0x248>)
 800a576:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a57a:	e7e3      	b.n	800a544 <_printf_i+0x174>
 800a57c:	0659      	lsls	r1, r3, #25
 800a57e:	bf48      	it	mi
 800a580:	b2b6      	uxthmi	r6, r6
 800a582:	e7e6      	b.n	800a552 <_printf_i+0x182>
 800a584:	4615      	mov	r5, r2
 800a586:	e7bb      	b.n	800a500 <_printf_i+0x130>
 800a588:	682b      	ldr	r3, [r5, #0]
 800a58a:	6826      	ldr	r6, [r4, #0]
 800a58c:	6961      	ldr	r1, [r4, #20]
 800a58e:	1d18      	adds	r0, r3, #4
 800a590:	6028      	str	r0, [r5, #0]
 800a592:	0635      	lsls	r5, r6, #24
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	d501      	bpl.n	800a59c <_printf_i+0x1cc>
 800a598:	6019      	str	r1, [r3, #0]
 800a59a:	e002      	b.n	800a5a2 <_printf_i+0x1d2>
 800a59c:	0670      	lsls	r0, r6, #25
 800a59e:	d5fb      	bpl.n	800a598 <_printf_i+0x1c8>
 800a5a0:	8019      	strh	r1, [r3, #0]
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	6123      	str	r3, [r4, #16]
 800a5a6:	4615      	mov	r5, r2
 800a5a8:	e7ba      	b.n	800a520 <_printf_i+0x150>
 800a5aa:	682b      	ldr	r3, [r5, #0]
 800a5ac:	1d1a      	adds	r2, r3, #4
 800a5ae:	602a      	str	r2, [r5, #0]
 800a5b0:	681d      	ldr	r5, [r3, #0]
 800a5b2:	6862      	ldr	r2, [r4, #4]
 800a5b4:	2100      	movs	r1, #0
 800a5b6:	4628      	mov	r0, r5
 800a5b8:	f7f5 fe1a 	bl	80001f0 <memchr>
 800a5bc:	b108      	cbz	r0, 800a5c2 <_printf_i+0x1f2>
 800a5be:	1b40      	subs	r0, r0, r5
 800a5c0:	6060      	str	r0, [r4, #4]
 800a5c2:	6863      	ldr	r3, [r4, #4]
 800a5c4:	6123      	str	r3, [r4, #16]
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a5cc:	e7a8      	b.n	800a520 <_printf_i+0x150>
 800a5ce:	6923      	ldr	r3, [r4, #16]
 800a5d0:	462a      	mov	r2, r5
 800a5d2:	4649      	mov	r1, r9
 800a5d4:	4640      	mov	r0, r8
 800a5d6:	47d0      	blx	sl
 800a5d8:	3001      	adds	r0, #1
 800a5da:	d0ab      	beq.n	800a534 <_printf_i+0x164>
 800a5dc:	6823      	ldr	r3, [r4, #0]
 800a5de:	079b      	lsls	r3, r3, #30
 800a5e0:	d413      	bmi.n	800a60a <_printf_i+0x23a>
 800a5e2:	68e0      	ldr	r0, [r4, #12]
 800a5e4:	9b03      	ldr	r3, [sp, #12]
 800a5e6:	4298      	cmp	r0, r3
 800a5e8:	bfb8      	it	lt
 800a5ea:	4618      	movlt	r0, r3
 800a5ec:	e7a4      	b.n	800a538 <_printf_i+0x168>
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	4632      	mov	r2, r6
 800a5f2:	4649      	mov	r1, r9
 800a5f4:	4640      	mov	r0, r8
 800a5f6:	47d0      	blx	sl
 800a5f8:	3001      	adds	r0, #1
 800a5fa:	d09b      	beq.n	800a534 <_printf_i+0x164>
 800a5fc:	3501      	adds	r5, #1
 800a5fe:	68e3      	ldr	r3, [r4, #12]
 800a600:	9903      	ldr	r1, [sp, #12]
 800a602:	1a5b      	subs	r3, r3, r1
 800a604:	42ab      	cmp	r3, r5
 800a606:	dcf2      	bgt.n	800a5ee <_printf_i+0x21e>
 800a608:	e7eb      	b.n	800a5e2 <_printf_i+0x212>
 800a60a:	2500      	movs	r5, #0
 800a60c:	f104 0619 	add.w	r6, r4, #25
 800a610:	e7f5      	b.n	800a5fe <_printf_i+0x22e>
 800a612:	bf00      	nop
 800a614:	0800a9ed 	.word	0x0800a9ed
 800a618:	0800a9fe 	.word	0x0800a9fe

0800a61c <_sbrk_r>:
 800a61c:	b538      	push	{r3, r4, r5, lr}
 800a61e:	4d06      	ldr	r5, [pc, #24]	; (800a638 <_sbrk_r+0x1c>)
 800a620:	2300      	movs	r3, #0
 800a622:	4604      	mov	r4, r0
 800a624:	4608      	mov	r0, r1
 800a626:	602b      	str	r3, [r5, #0]
 800a628:	f7f7 f856 	bl	80016d8 <_sbrk>
 800a62c:	1c43      	adds	r3, r0, #1
 800a62e:	d102      	bne.n	800a636 <_sbrk_r+0x1a>
 800a630:	682b      	ldr	r3, [r5, #0]
 800a632:	b103      	cbz	r3, 800a636 <_sbrk_r+0x1a>
 800a634:	6023      	str	r3, [r4, #0]
 800a636:	bd38      	pop	{r3, r4, r5, pc}
 800a638:	200044ec 	.word	0x200044ec

0800a63c <__sread>:
 800a63c:	b510      	push	{r4, lr}
 800a63e:	460c      	mov	r4, r1
 800a640:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a644:	f000 f8a0 	bl	800a788 <_read_r>
 800a648:	2800      	cmp	r0, #0
 800a64a:	bfab      	itete	ge
 800a64c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a64e:	89a3      	ldrhlt	r3, [r4, #12]
 800a650:	181b      	addge	r3, r3, r0
 800a652:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a656:	bfac      	ite	ge
 800a658:	6563      	strge	r3, [r4, #84]	; 0x54
 800a65a:	81a3      	strhlt	r3, [r4, #12]
 800a65c:	bd10      	pop	{r4, pc}

0800a65e <__swrite>:
 800a65e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a662:	461f      	mov	r7, r3
 800a664:	898b      	ldrh	r3, [r1, #12]
 800a666:	05db      	lsls	r3, r3, #23
 800a668:	4605      	mov	r5, r0
 800a66a:	460c      	mov	r4, r1
 800a66c:	4616      	mov	r6, r2
 800a66e:	d505      	bpl.n	800a67c <__swrite+0x1e>
 800a670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a674:	2302      	movs	r3, #2
 800a676:	2200      	movs	r2, #0
 800a678:	f000 f868 	bl	800a74c <_lseek_r>
 800a67c:	89a3      	ldrh	r3, [r4, #12]
 800a67e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a682:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a686:	81a3      	strh	r3, [r4, #12]
 800a688:	4632      	mov	r2, r6
 800a68a:	463b      	mov	r3, r7
 800a68c:	4628      	mov	r0, r5
 800a68e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a692:	f000 b817 	b.w	800a6c4 <_write_r>

0800a696 <__sseek>:
 800a696:	b510      	push	{r4, lr}
 800a698:	460c      	mov	r4, r1
 800a69a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a69e:	f000 f855 	bl	800a74c <_lseek_r>
 800a6a2:	1c43      	adds	r3, r0, #1
 800a6a4:	89a3      	ldrh	r3, [r4, #12]
 800a6a6:	bf15      	itete	ne
 800a6a8:	6560      	strne	r0, [r4, #84]	; 0x54
 800a6aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a6ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a6b2:	81a3      	strheq	r3, [r4, #12]
 800a6b4:	bf18      	it	ne
 800a6b6:	81a3      	strhne	r3, [r4, #12]
 800a6b8:	bd10      	pop	{r4, pc}

0800a6ba <__sclose>:
 800a6ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6be:	f000 b813 	b.w	800a6e8 <_close_r>
	...

0800a6c4 <_write_r>:
 800a6c4:	b538      	push	{r3, r4, r5, lr}
 800a6c6:	4d07      	ldr	r5, [pc, #28]	; (800a6e4 <_write_r+0x20>)
 800a6c8:	4604      	mov	r4, r0
 800a6ca:	4608      	mov	r0, r1
 800a6cc:	4611      	mov	r1, r2
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	602a      	str	r2, [r5, #0]
 800a6d2:	461a      	mov	r2, r3
 800a6d4:	f7f6 ffaf 	bl	8001636 <_write>
 800a6d8:	1c43      	adds	r3, r0, #1
 800a6da:	d102      	bne.n	800a6e2 <_write_r+0x1e>
 800a6dc:	682b      	ldr	r3, [r5, #0]
 800a6de:	b103      	cbz	r3, 800a6e2 <_write_r+0x1e>
 800a6e0:	6023      	str	r3, [r4, #0]
 800a6e2:	bd38      	pop	{r3, r4, r5, pc}
 800a6e4:	200044ec 	.word	0x200044ec

0800a6e8 <_close_r>:
 800a6e8:	b538      	push	{r3, r4, r5, lr}
 800a6ea:	4d06      	ldr	r5, [pc, #24]	; (800a704 <_close_r+0x1c>)
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	4604      	mov	r4, r0
 800a6f0:	4608      	mov	r0, r1
 800a6f2:	602b      	str	r3, [r5, #0]
 800a6f4:	f7f6 ffbb 	bl	800166e <_close>
 800a6f8:	1c43      	adds	r3, r0, #1
 800a6fa:	d102      	bne.n	800a702 <_close_r+0x1a>
 800a6fc:	682b      	ldr	r3, [r5, #0]
 800a6fe:	b103      	cbz	r3, 800a702 <_close_r+0x1a>
 800a700:	6023      	str	r3, [r4, #0]
 800a702:	bd38      	pop	{r3, r4, r5, pc}
 800a704:	200044ec 	.word	0x200044ec

0800a708 <_fstat_r>:
 800a708:	b538      	push	{r3, r4, r5, lr}
 800a70a:	4d07      	ldr	r5, [pc, #28]	; (800a728 <_fstat_r+0x20>)
 800a70c:	2300      	movs	r3, #0
 800a70e:	4604      	mov	r4, r0
 800a710:	4608      	mov	r0, r1
 800a712:	4611      	mov	r1, r2
 800a714:	602b      	str	r3, [r5, #0]
 800a716:	f7f6 ffb6 	bl	8001686 <_fstat>
 800a71a:	1c43      	adds	r3, r0, #1
 800a71c:	d102      	bne.n	800a724 <_fstat_r+0x1c>
 800a71e:	682b      	ldr	r3, [r5, #0]
 800a720:	b103      	cbz	r3, 800a724 <_fstat_r+0x1c>
 800a722:	6023      	str	r3, [r4, #0]
 800a724:	bd38      	pop	{r3, r4, r5, pc}
 800a726:	bf00      	nop
 800a728:	200044ec 	.word	0x200044ec

0800a72c <_isatty_r>:
 800a72c:	b538      	push	{r3, r4, r5, lr}
 800a72e:	4d06      	ldr	r5, [pc, #24]	; (800a748 <_isatty_r+0x1c>)
 800a730:	2300      	movs	r3, #0
 800a732:	4604      	mov	r4, r0
 800a734:	4608      	mov	r0, r1
 800a736:	602b      	str	r3, [r5, #0]
 800a738:	f7f6 ffb5 	bl	80016a6 <_isatty>
 800a73c:	1c43      	adds	r3, r0, #1
 800a73e:	d102      	bne.n	800a746 <_isatty_r+0x1a>
 800a740:	682b      	ldr	r3, [r5, #0]
 800a742:	b103      	cbz	r3, 800a746 <_isatty_r+0x1a>
 800a744:	6023      	str	r3, [r4, #0]
 800a746:	bd38      	pop	{r3, r4, r5, pc}
 800a748:	200044ec 	.word	0x200044ec

0800a74c <_lseek_r>:
 800a74c:	b538      	push	{r3, r4, r5, lr}
 800a74e:	4d07      	ldr	r5, [pc, #28]	; (800a76c <_lseek_r+0x20>)
 800a750:	4604      	mov	r4, r0
 800a752:	4608      	mov	r0, r1
 800a754:	4611      	mov	r1, r2
 800a756:	2200      	movs	r2, #0
 800a758:	602a      	str	r2, [r5, #0]
 800a75a:	461a      	mov	r2, r3
 800a75c:	f7f6 ffae 	bl	80016bc <_lseek>
 800a760:	1c43      	adds	r3, r0, #1
 800a762:	d102      	bne.n	800a76a <_lseek_r+0x1e>
 800a764:	682b      	ldr	r3, [r5, #0]
 800a766:	b103      	cbz	r3, 800a76a <_lseek_r+0x1e>
 800a768:	6023      	str	r3, [r4, #0]
 800a76a:	bd38      	pop	{r3, r4, r5, pc}
 800a76c:	200044ec 	.word	0x200044ec

0800a770 <__malloc_lock>:
 800a770:	4801      	ldr	r0, [pc, #4]	; (800a778 <__malloc_lock+0x8>)
 800a772:	f7ff bb1d 	b.w	8009db0 <__retarget_lock_acquire_recursive>
 800a776:	bf00      	nop
 800a778:	200044e0 	.word	0x200044e0

0800a77c <__malloc_unlock>:
 800a77c:	4801      	ldr	r0, [pc, #4]	; (800a784 <__malloc_unlock+0x8>)
 800a77e:	f7ff bb18 	b.w	8009db2 <__retarget_lock_release_recursive>
 800a782:	bf00      	nop
 800a784:	200044e0 	.word	0x200044e0

0800a788 <_read_r>:
 800a788:	b538      	push	{r3, r4, r5, lr}
 800a78a:	4d07      	ldr	r5, [pc, #28]	; (800a7a8 <_read_r+0x20>)
 800a78c:	4604      	mov	r4, r0
 800a78e:	4608      	mov	r0, r1
 800a790:	4611      	mov	r1, r2
 800a792:	2200      	movs	r2, #0
 800a794:	602a      	str	r2, [r5, #0]
 800a796:	461a      	mov	r2, r3
 800a798:	f7f6 ff30 	bl	80015fc <_read>
 800a79c:	1c43      	adds	r3, r0, #1
 800a79e:	d102      	bne.n	800a7a6 <_read_r+0x1e>
 800a7a0:	682b      	ldr	r3, [r5, #0]
 800a7a2:	b103      	cbz	r3, 800a7a6 <_read_r+0x1e>
 800a7a4:	6023      	str	r3, [r4, #0]
 800a7a6:	bd38      	pop	{r3, r4, r5, pc}
 800a7a8:	200044ec 	.word	0x200044ec

0800a7ac <_init>:
 800a7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ae:	bf00      	nop
 800a7b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7b2:	bc08      	pop	{r3}
 800a7b4:	469e      	mov	lr, r3
 800a7b6:	4770      	bx	lr

0800a7b8 <_fini>:
 800a7b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ba:	bf00      	nop
 800a7bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7be:	bc08      	pop	{r3}
 800a7c0:	469e      	mov	lr, r3
 800a7c2:	4770      	bx	lr
