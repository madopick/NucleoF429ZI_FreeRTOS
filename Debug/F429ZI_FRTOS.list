
F429ZI_FRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a54c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  0800a6fc  0800a6fc  0001a6fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a96c  0800a96c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800a96c  0800a96c  0001a96c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a974  0800a974  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a974  0800a974  0001a974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a978  0800a978  0001a978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800a97c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004474  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000c00  200044e8  200044e8  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d4a1  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e71  00000000  00000000  0003d545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001938  00000000  00000000  000413b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000017c8  00000000  00000000  00042cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000289d2  00000000  00000000  000444b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d89e  00000000  00000000  0006ce8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f1317  00000000  00000000  0008a728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0017ba3f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007200  00000000  00000000  0017ba90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a6e4 	.word	0x0800a6e4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	0800a6e4 	.word	0x0800a6e4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	4a06      	ldr	r2, [pc, #24]	; (80005c4 <vApplicationGetIdleTaskMemory+0x30>)
 80005aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2280      	movs	r2, #128	; 0x80
 80005b0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005b2:	bf00      	nop
 80005b4:	3714      	adds	r7, #20
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	20000090 	.word	0x20000090
 80005c4:	200000e4 	.word	0x200000e4

080005c8 <__io_putchar>:
	/******************************************************************
	  * @name   PUTCHAR_PROTOTYPE
	  * @brief  Retargets the C library printf function to the USART.
	  *****************************************************************/
	PUTCHAR_PROTOTYPE
	{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
		HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);				//Use USART3
 80005d0:	1d39      	adds	r1, r7, #4
 80005d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005d6:	2201      	movs	r2, #1
 80005d8:	4803      	ldr	r0, [pc, #12]	; (80005e8 <__io_putchar+0x20>)
 80005da:	f005 f824 	bl	8005626 <HAL_UART_Transmit>
		return ch;
 80005de:	687b      	ldr	r3, [r7, #4]
	}
 80005e0:	4618      	mov	r0, r3
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	200005d8 	.word	0x200005d8

080005ec <main>:
/************************************************************
  * @brief  The application entry point.
  * @retval int
  ***********************************************************/
int main(void)
{
 80005ec:	b5b0      	push	{r4, r5, r7, lr}
 80005ee:	b09e      	sub	sp, #120	; 0x78
 80005f0:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f2:	f001 f883 	bl	80016fc <HAL_Init>

  /* Configure the system clock (HSE- PLL 180 MHz) */
  SystemClock_Config();
 80005f6:	f000 f987 	bl	8000908 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fa:	f000 faf9 	bl	8000bf0 <MX_GPIO_Init>
  MX_DMA_Init();
 80005fe:	f000 fab1 	bl	8000b64 <MX_DMA_Init>
  MX_CRC_Init();
 8000602:	f000 f9f1 	bl	80009e8 <MX_CRC_Init>
  MX_I2C1_Init();
 8000606:	f000 fa03 	bl	8000a10 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 800060a:	f000 fa73 	bl	8000af4 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 800060e:	f000 fa3f 	bl	8000a90 <MX_SPI1_Init>

  printf("\r\nHW Initialization OK\r\n");
 8000612:	4836      	ldr	r0, [pc, #216]	; (80006ec <main+0x100>)
 8000614:	f009 f8e8 	bl	80097e8 <puts>

  /* Event Group */

  xEventGroup = xEventGroupCreate();
 8000618:	f006 fb50 	bl	8006cbc <xEventGroupCreate>
 800061c:	4603      	mov	r3, r0
 800061e:	4a34      	ldr	r2, [pc, #208]	; (80006f0 <main+0x104>)
 8000620:	6013      	str	r3, [r2, #0]
  if( xEventGroup == NULL )
 8000622:	4b33      	ldr	r3, [pc, #204]	; (80006f0 <main+0x104>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d102      	bne.n	8000630 <main+0x44>
  {
	  printf("Event Group Fail!!!\r\n");
 800062a:	4832      	ldr	r0, [pc, #200]	; (80006f4 <main+0x108>)
 800062c:	f009 f8dc 	bl	80097e8 <puts>
  }

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  osSemaphoreDef(SEM);
 8000630:	2300      	movs	r3, #0
 8000632:	673b      	str	r3, [r7, #112]	; 0x70
 8000634:	2300      	movs	r3, #0
 8000636:	677b      	str	r3, [r7, #116]	; 0x74
  osSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1);
 8000638:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800063c:	2101      	movs	r1, #1
 800063e:	4618      	mov	r0, r3
 8000640:	f006 fabb 	bl	8006bba <osSemaphoreCreate>
 8000644:	4603      	mov	r3, r0
 8000646:	4a2c      	ldr	r2, [pc, #176]	; (80006f8 <main+0x10c>)
 8000648:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */

  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultThread, osPriorityBelowNormal, 0, 128);
 800064a:	4b2c      	ldr	r3, [pc, #176]	; (80006fc <main+0x110>)
 800064c:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000650:	461d      	mov	r5, r3
 8000652:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000654:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000656:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800065a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultThreadHandle = osThreadCreate(osThread(defaultTask), NULL);
 800065e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000662:	2100      	movs	r1, #0
 8000664:	4618      	mov	r0, r3
 8000666:	f006 fa48 	bl	8006afa <osThreadCreate>
 800066a:	4603      	mov	r3, r0
 800066c:	4a24      	ldr	r2, [pc, #144]	; (8000700 <main+0x114>)
 800066e:	6013      	str	r3, [r2, #0]

  /* LED Thread definition */
  osThreadDef(LEDTask, LED_Thread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);
 8000670:	4b24      	ldr	r3, [pc, #144]	; (8000704 <main+0x118>)
 8000672:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000676:	461d      	mov	r5, r3
 8000678:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800067a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800067c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000680:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LEDThreadHandle = osThreadCreate (osThread(LEDTask), (void *) osSemaphore);
 8000684:	4b1c      	ldr	r3, [pc, #112]	; (80006f8 <main+0x10c>)
 8000686:	681a      	ldr	r2, [r3, #0]
 8000688:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800068c:	4611      	mov	r1, r2
 800068e:	4618      	mov	r0, r3
 8000690:	f006 fa33 	bl	8006afa <osThreadCreate>
 8000694:	4603      	mov	r3, r0
 8000696:	4a1c      	ldr	r2, [pc, #112]	; (8000708 <main+0x11c>)
 8000698:	6013      	str	r3, [r2, #0]

  /* UART Thread definition */
  osThreadDef(UARTTask, UART_Thread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);
 800069a:	4b1c      	ldr	r3, [pc, #112]	; (800070c <main+0x120>)
 800069c:	f107 041c 	add.w	r4, r7, #28
 80006a0:	461d      	mov	r5, r3
 80006a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UARTThreadHandle = osThreadCreate (osThread(UARTTask), NULL);
 80006ae:	f107 031c 	add.w	r3, r7, #28
 80006b2:	2100      	movs	r1, #0
 80006b4:	4618      	mov	r0, r3
 80006b6:	f006 fa20 	bl	8006afa <osThreadCreate>
 80006ba:	4603      	mov	r3, r0
 80006bc:	4a14      	ldr	r2, [pc, #80]	; (8000710 <main+0x124>)
 80006be:	6013      	str	r3, [r2, #0]

  /* Button Thread definition */
  osThreadDef(ButtonTask, Button_Thread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);
 80006c0:	4b14      	ldr	r3, [pc, #80]	; (8000714 <main+0x128>)
 80006c2:	463c      	mov	r4, r7
 80006c4:	461d      	mov	r5, r3
 80006c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ButtonThreadHandle = osThreadCreate (osThread(ButtonTask), (void *) osSemaphore);
 80006d2:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <main+0x10c>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	463b      	mov	r3, r7
 80006d8:	4611      	mov	r1, r2
 80006da:	4618      	mov	r0, r3
 80006dc:	f006 fa0d 	bl	8006afa <osThreadCreate>
 80006e0:	4603      	mov	r3, r0
 80006e2:	4a0d      	ldr	r2, [pc, #52]	; (8000718 <main+0x12c>)
 80006e4:	6013      	str	r3, [r2, #0]

  /* Start scheduler */
  osKernelStart();
 80006e6:	f006 fa01 	bl	8006aec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  while (1)
 80006ea:	e7fe      	b.n	80006ea <main+0xfe>
 80006ec:	0800a728 	.word	0x0800a728
 80006f0:	20000730 	.word	0x20000730
 80006f4:	0800a740 	.word	0x0800a740
 80006f8:	2000072c 	.word	0x2000072c
 80006fc:	0800a758 	.word	0x0800a758
 8000700:	2000071c 	.word	0x2000071c
 8000704:	0800a774 	.word	0x0800a774
 8000708:	20000720 	.word	0x20000720
 800070c:	0800a790 	.word	0x0800a790
 8000710:	20000728 	.word	0x20000728
 8000714:	0800a7ac 	.word	0x0800a7ac
 8000718:	20000724 	.word	0x20000724

0800071c <UART_Thread>:
  * @brief  LED thread
  * @param  semaphore
  * @retval None
  ************************************************************/
void UART_Thread(void const *argument)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b088      	sub	sp, #32
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
//		if (xQueueReceive(msg_queue, (void *)&rcv_msg, portMAX_DELAY) == pdTRUE) {
//		  printf(rcv_msg.body);
//		  //printf((char)rcv_msg.count);
//		}

		osDelay(1000);
 8000724:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000728:	f006 fa33 	bl	8006b92 <osDelay>
 800072c:	e7fa      	b.n	8000724 <UART_Thread+0x8>
	...

08000730 <LED_Thread>:
  * @brief  LED thread
  * @param  semaphore
  * @retval None
  ************************************************************/
void LED_Thread(void const *argument)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b088      	sub	sp, #32
 8000734:	af02      	add	r7, sp, #8
 8000736:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]
  //osSemaphoreId semaphore = (osSemaphoreId) argument;

  const TickType_t xTicksToWait = 100 / portTICK_PERIOD_MS;
 800073c:	2364      	movs	r3, #100	; 0x64
 800073e:	613b      	str	r3, [r7, #16]
  EventBits_t uxBits;

  for(;;)
  {
    count = 0;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]

    printf("blink LED1 for 2S \r\n");
 8000744:	4853      	ldr	r0, [pc, #332]	; (8000894 <LED_Thread+0x164>)
 8000746:	f009 f84f 	bl	80097e8 <puts>
    while (count <= 10)
 800074a:	e009      	b.n	8000760 <LED_Thread+0x30>
    {
    	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800074c:	2101      	movs	r1, #1
 800074e:	4852      	ldr	r0, [pc, #328]	; (8000898 <LED_Thread+0x168>)
 8000750:	f001 fee9 	bl	8002526 <HAL_GPIO_TogglePin>
    	osDelay(200);
 8000754:	20c8      	movs	r0, #200	; 0xc8
 8000756:	f006 fa1c 	bl	8006b92 <osDelay>
    	count++;
 800075a:	697b      	ldr	r3, [r7, #20]
 800075c:	3301      	adds	r3, #1
 800075e:	617b      	str	r3, [r7, #20]
    while (count <= 10)
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	2b0a      	cmp	r3, #10
 8000764:	d9f2      	bls.n	800074c <LED_Thread+0x1c>
    }

    /* Turn off LED */
    printf("turn of LEDS for 5S \r\n");
 8000766:	484d      	ldr	r0, [pc, #308]	; (800089c <LED_Thread+0x16c>)
 8000768:	f009 f83e 	bl	80097e8 <puts>
    HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 800076c:	2200      	movs	r2, #0
 800076e:	2101      	movs	r1, #1
 8000770:	4849      	ldr	r0, [pc, #292]	; (8000898 <LED_Thread+0x168>)
 8000772:	f001 febf 	bl	80024f4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	2180      	movs	r1, #128	; 0x80
 800077a:	4847      	ldr	r0, [pc, #284]	; (8000898 <LED_Thread+0x168>)
 800077c:	f001 feba 	bl	80024f4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000786:	4844      	ldr	r0, [pc, #272]	; (8000898 <LED_Thread+0x168>)
 8000788:	f001 feb4 	bl	80024f4 <HAL_GPIO_WritePin>


    /* Release the semaphore */
    //osSemaphoreRelease(semaphore);

    osDelay(5000);
 800078c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000790:	f006 f9ff 	bl	8006b92 <osDelay>


    /* Wait a maximum of 100ms for either bit 0 or bit 4 in event group.  Clear the bits before exiting. */
	uxBits = xEventGroupWaitBits(
 8000794:	4b42      	ldr	r3, [pc, #264]	; (80008a0 <LED_Thread+0x170>)
 8000796:	6818      	ldr	r0, [r3, #0]
 8000798:	693b      	ldr	r3, [r7, #16]
 800079a:	9300      	str	r3, [sp, #0]
 800079c:	2300      	movs	r3, #0
 800079e:	2200      	movs	r2, #0
 80007a0:	2111      	movs	r1, #17
 80007a2:	f006 faa5 	bl	8006cf0 <xEventGroupWaitBits>
 80007a6:	60f8      	str	r0, [r7, #12]
			BIT_0 | BIT_4, 		/* The bits within the event group to wait for. */
			pdFALSE,        	/* BIT_0 & BIT_4 not cleared before returning. */
			pdFALSE,       		/* Don't wait for both bits, either bit will do. */
			xTicksToWait );		/* Wait a maximum of 100ms for either bit to be set. */

	if( uxBits  == ( BIT_0 | BIT_4 ) )
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	2b11      	cmp	r3, #17
 80007ac:	d11f      	bne.n	80007ee <LED_Thread+0xbe>
	{
		/*both bits were set. */
		printf("Both set (LED2 ON)\r\n\n\n");
 80007ae:	483d      	ldr	r0, [pc, #244]	; (80008a4 <LED_Thread+0x174>)
 80007b0:	f009 f81a 	bl	80097e8 <puts>
		count = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]
		while (count <= 10)
 80007b8:	e009      	b.n	80007ce <LED_Thread+0x9e>
		{
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80007ba:	2180      	movs	r1, #128	; 0x80
 80007bc:	4836      	ldr	r0, [pc, #216]	; (8000898 <LED_Thread+0x168>)
 80007be:	f001 feb2 	bl	8002526 <HAL_GPIO_TogglePin>
			osDelay(200);
 80007c2:	20c8      	movs	r0, #200	; 0xc8
 80007c4:	f006 f9e5 	bl	8006b92 <osDelay>
			count++;
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	3301      	adds	r3, #1
 80007cc:	617b      	str	r3, [r7, #20]
		while (count <= 10)
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	2b0a      	cmp	r3, #10
 80007d2:	d9f2      	bls.n	80007ba <LED_Thread+0x8a>
		}

		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	2180      	movs	r1, #128	; 0x80
 80007d8:	482f      	ldr	r0, [pc, #188]	; (8000898 <LED_Thread+0x168>)
 80007da:	f001 fe8b 	bl	80024f4 <HAL_GPIO_WritePin>
		uxBits = xEventGroupClearBits( xEventGroup,  BIT_0 | BIT_4 );
 80007de:	4b30      	ldr	r3, [pc, #192]	; (80008a0 <LED_Thread+0x170>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	2111      	movs	r1, #17
 80007e4:	4618      	mov	r0, r3
 80007e6:	f006 fb51 	bl	8006e8c <xEventGroupClearBits>
 80007ea:	60f8      	str	r0, [r7, #12]
 80007ec:	e7a8      	b.n	8000740 <LED_Thread+0x10>
	}
	else if( ( uxBits & BIT_0 ) != 0 )
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	f003 0301 	and.w	r3, r3, #1
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d00a      	beq.n	800080e <LED_Thread+0xde>
	{
		/* BIT_0 was set. */
		uxBits = xEventGroupSetBits(xEventGroup,BIT_4);
 80007f8:	4b29      	ldr	r3, [pc, #164]	; (80008a0 <LED_Thread+0x170>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2110      	movs	r1, #16
 80007fe:	4618      	mov	r0, r3
 8000800:	f006 fb7c 	bl	8006efc <xEventGroupSetBits>
 8000804:	60f8      	str	r0, [r7, #12]
		printf("BIT0 set \r\n\n\n");
 8000806:	4828      	ldr	r0, [pc, #160]	; (80008a8 <LED_Thread+0x178>)
 8000808:	f008 ffee 	bl	80097e8 <puts>
 800080c:	e798      	b.n	8000740 <LED_Thread+0x10>
	}
	else if( ( uxBits & BIT_4 ) != 0 )
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	f003 0310 	and.w	r3, r3, #16
 8000814:	2b00      	cmp	r3, #0
 8000816:	d00a      	beq.n	800082e <LED_Thread+0xfe>
	{
		/* BIT_4 was set. */
		uxBits = xEventGroupSetBits(xEventGroup,BIT_0);
 8000818:	4b21      	ldr	r3, [pc, #132]	; (80008a0 <LED_Thread+0x170>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2101      	movs	r1, #1
 800081e:	4618      	mov	r0, r3
 8000820:	f006 fb6c 	bl	8006efc <xEventGroupSetBits>
 8000824:	60f8      	str	r0, [r7, #12]
		printf("BIT4 set \r\n\n\n");
 8000826:	4821      	ldr	r0, [pc, #132]	; (80008ac <LED_Thread+0x17c>)
 8000828:	f008 ffde 	bl	80097e8 <puts>
 800082c:	e788      	b.n	8000740 <LED_Thread+0x10>
	}
	else if( ( uxBits & BIT_5 ) != 0 )
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	f003 0320 	and.w	r3, r3, #32
 8000834:	2b00      	cmp	r3, #0
 8000836:	d021      	beq.n	800087c <LED_Thread+0x14c>
	{
		/* BIT_5 was set. */
		printf("BIT5 set, (LED3 ON) \r\n\n\n");
 8000838:	481d      	ldr	r0, [pc, #116]	; (80008b0 <LED_Thread+0x180>)
 800083a:	f008 ffd5 	bl	80097e8 <puts>
		uxBits = xEventGroupClearBits( xEventGroup,  BIT_5);
 800083e:	4b18      	ldr	r3, [pc, #96]	; (80008a0 <LED_Thread+0x170>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	2120      	movs	r1, #32
 8000844:	4618      	mov	r0, r3
 8000846:	f006 fb21 	bl	8006e8c <xEventGroupClearBits>
 800084a:	60f8      	str	r0, [r7, #12]

		count = 0;
 800084c:	2300      	movs	r3, #0
 800084e:	617b      	str	r3, [r7, #20]
		while (count <= 10)
 8000850:	e00a      	b.n	8000868 <LED_Thread+0x138>
		{
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000852:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000856:	4810      	ldr	r0, [pc, #64]	; (8000898 <LED_Thread+0x168>)
 8000858:	f001 fe65 	bl	8002526 <HAL_GPIO_TogglePin>
			osDelay(200);
 800085c:	20c8      	movs	r0, #200	; 0xc8
 800085e:	f006 f998 	bl	8006b92 <osDelay>
			count++;
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	3301      	adds	r3, #1
 8000866:	617b      	str	r3, [r7, #20]
		while (count <= 10)
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	2b0a      	cmp	r3, #10
 800086c:	d9f1      	bls.n	8000852 <LED_Thread+0x122>
		}

		 HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000874:	4808      	ldr	r0, [pc, #32]	; (8000898 <LED_Thread+0x168>)
 8000876:	f001 fe3d 	bl	80024f4 <HAL_GPIO_WritePin>
 800087a:	e761      	b.n	8000740 <LED_Thread+0x10>
	}
	else
	{
		/* Timeout */
		printf("timeout xEventGroup\r\n\n\n");
 800087c:	480d      	ldr	r0, [pc, #52]	; (80008b4 <LED_Thread+0x184>)
 800087e:	f008 ffb3 	bl	80097e8 <puts>
		uxBits = xEventGroupSetBits(
 8000882:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <LED_Thread+0x170>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	2101      	movs	r1, #1
 8000888:	4618      	mov	r0, r3
 800088a:	f006 fb37 	bl	8006efc <xEventGroupSetBits>
 800088e:	60f8      	str	r0, [r7, #12]
    count = 0;
 8000890:	e756      	b.n	8000740 <LED_Thread+0x10>
 8000892:	bf00      	nop
 8000894:	0800a7c8 	.word	0x0800a7c8
 8000898:	40020400 	.word	0x40020400
 800089c:	0800a7dc 	.word	0x0800a7dc
 80008a0:	20000730 	.word	0x20000730
 80008a4:	0800a7f4 	.word	0x0800a7f4
 80008a8:	0800a80c 	.word	0x0800a80c
 80008ac:	0800a81c 	.word	0x0800a81c
 80008b0:	0800a82c 	.word	0x0800a82c
 80008b4:	0800a844 	.word	0x0800a844

080008b8 <Button_Thread>:
  * @brief  Button thread
  * @param  semaphore
  * @retval None
  ************************************************************/
void Button_Thread(void const *argument)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]

  osSemaphoreId semaphore = (osSemaphoreId) argument;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
	if (semaphore != NULL)
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d0fc      	beq.n	80008c4 <Button_Thread+0xc>
	{
		/* Try to obtain the semaphore. */
		if(osSemaphoreWait(semaphore , portMAX_DELAY) == osOK){
 80008ca:	f04f 31ff 	mov.w	r1, #4294967295
 80008ce:	68f8      	ldr	r0, [r7, #12]
 80008d0:	f006 f9a6 	bl	8006c20 <osSemaphoreWait>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d1f4      	bne.n	80008c4 <Button_Thread+0xc>
			printf("run button interrupt\r\n");
 80008da:	4805      	ldr	r0, [pc, #20]	; (80008f0 <Button_Thread+0x38>)
 80008dc:	f008 ff84 	bl	80097e8 <puts>

			xEventGroupSetBits(xEventGroup,BIT_5);
 80008e0:	4b04      	ldr	r3, [pc, #16]	; (80008f4 <Button_Thread+0x3c>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2120      	movs	r1, #32
 80008e6:	4618      	mov	r0, r3
 80008e8:	f006 fb08 	bl	8006efc <xEventGroupSetBits>
	if (semaphore != NULL)
 80008ec:	e7ea      	b.n	80008c4 <Button_Thread+0xc>
 80008ee:	bf00      	nop
 80008f0:	0800a85c 	.word	0x0800a85c
 80008f4:	20000730 	.word	0x20000730

080008f8 <StartDefaultThread>:
  * @param  argument: Not used
  * @retval None
  ***********************************************************/

void StartDefaultThread(void const * argument)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000900:	2001      	movs	r0, #1
 8000902:	f006 f946 	bl	8006b92 <osDelay>
 8000906:	e7fb      	b.n	8000900 <StartDefaultThread+0x8>

08000908 <SystemClock_Config>:
/************************************************************
  * @brief System Clock Configuration
  * @retval None
  ************************************************************/
void SystemClock_Config(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b094      	sub	sp, #80	; 0x50
 800090c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090e:	f107 0320 	add.w	r3, r7, #32
 8000912:	2230      	movs	r2, #48	; 0x30
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f008 fed8 	bl	80096cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800091c:	f107 030c 	add.w	r3, r7, #12
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]
 800092a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage*/
  __HAL_RCC_PWR_CLK_ENABLE();
 800092c:	2300      	movs	r3, #0
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	4b2b      	ldr	r3, [pc, #172]	; (80009e0 <SystemClock_Config+0xd8>)
 8000932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000934:	4a2a      	ldr	r2, [pc, #168]	; (80009e0 <SystemClock_Config+0xd8>)
 8000936:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800093a:	6413      	str	r3, [r2, #64]	; 0x40
 800093c:	4b28      	ldr	r3, [pc, #160]	; (80009e0 <SystemClock_Config+0xd8>)
 800093e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000948:	2300      	movs	r3, #0
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	4b25      	ldr	r3, [pc, #148]	; (80009e4 <SystemClock_Config+0xdc>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a24      	ldr	r2, [pc, #144]	; (80009e4 <SystemClock_Config+0xdc>)
 8000952:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000956:	6013      	str	r3, [r2, #0]
 8000958:	4b22      	ldr	r3, [pc, #136]	; (80009e4 <SystemClock_Config+0xdc>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators */
  RCC_OscInitStruct.OscillatorType 	= RCC_OSCILLATORTYPE_HSE;
 8000964:	2301      	movs	r3, #1
 8000966:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState 		= RCC_HSE_BYPASS;
 8000968:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState	= RCC_PLL_ON;
 800096e:	2302      	movs	r3, #2
 8000970:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource 	= RCC_PLLSOURCE_HSE;
 8000972:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000976:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM 		= 4;
 8000978:	2304      	movs	r3, #4
 800097a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN 		= 180;
 800097c:	23b4      	movs	r3, #180	; 0xb4
 800097e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP 		= RCC_PLLP_DIV2;
 8000980:	2302      	movs	r3, #2
 8000982:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ 		= 7;
 8000984:	2307      	movs	r3, #7
 8000986:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000988:	f107 0320 	add.w	r3, r7, #32
 800098c:	4618      	mov	r0, r3
 800098e:	f003 fcdd 	bl	800434c <HAL_RCC_OscConfig>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000998:	f000 fa02 	bl	8000da0 <Error_Handler>
  }

  /** Activate the Over-Drive mode */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800099c:	f003 fc86 	bl	80042ac <HAL_PWREx_EnableOverDrive>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80009a6:	f000 f9fb 	bl	8000da0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocksm */
  RCC_ClkInitStruct.ClockType 		= RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009aa:	230f      	movs	r3, #15
 80009ac:	60fb      	str	r3, [r7, #12]
                              	  	  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource 	= RCC_SYSCLKSOURCE_PLLCLK;
 80009ae:	2302      	movs	r3, #2
 80009b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider 	= RCC_SYSCLK_DIV1;
 80009b2:	2300      	movs	r3, #0
 80009b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider 	= RCC_HCLK_DIV4;
 80009b6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider 	= RCC_HCLK_DIV2;
 80009bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009c2:	f107 030c 	add.w	r3, r7, #12
 80009c6:	2105      	movs	r1, #5
 80009c8:	4618      	mov	r0, r3
 80009ca:	f003 ff37 	bl	800483c <HAL_RCC_ClockConfig>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80009d4:	f000 f9e4 	bl	8000da0 <Error_Handler>
  }
}
 80009d8:	bf00      	nop
 80009da:	3750      	adds	r7, #80	; 0x50
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40023800 	.word	0x40023800
 80009e4:	40007000 	.word	0x40007000

080009e8 <MX_CRC_Init>:
  * @brief 	CRC Initialization Function
  * @param 	None
  * @retval None
  ************************************************************/
static void MX_CRC_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  hcrc.Instance = CRC;
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <MX_CRC_Init+0x20>)
 80009ee:	4a07      	ldr	r2, [pc, #28]	; (8000a0c <MX_CRC_Init+0x24>)
 80009f0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80009f2:	4805      	ldr	r0, [pc, #20]	; (8000a08 <MX_CRC_Init+0x20>)
 80009f4:	f000 ffa6 	bl	8001944 <HAL_CRC_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80009fe:	f000 f9cf 	bl	8000da0 <Error_Handler>
  }
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200002e4 	.word	0x200002e4
 8000a0c:	40023000 	.word	0x40023000

08000a10 <MX_I2C1_Init>:
  * @brief 	I2C1 Initialization Function
  * @param 	None
  * @retval None
  ************************************************************/
static void MX_I2C1_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  hi2c1.Instance 				= I2C1;
 8000a14:	4b1b      	ldr	r3, [pc, #108]	; (8000a84 <MX_I2C1_Init+0x74>)
 8000a16:	4a1c      	ldr	r2, [pc, #112]	; (8000a88 <MX_I2C1_Init+0x78>)
 8000a18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed 		= 100000;
 8000a1a:	4b1a      	ldr	r3, [pc, #104]	; (8000a84 <MX_I2C1_Init+0x74>)
 8000a1c:	4a1b      	ldr	r2, [pc, #108]	; (8000a8c <MX_I2C1_Init+0x7c>)
 8000a1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle 			= I2C_DUTYCYCLE_2;
 8000a20:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <MX_I2C1_Init+0x74>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 		= 0;
 8000a26:	4b17      	ldr	r3, [pc, #92]	; (8000a84 <MX_I2C1_Init+0x74>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode 	= I2C_ADDRESSINGMODE_7BIT;
 8000a2c:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <MX_I2C1_Init+0x74>)
 8000a2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a32:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode 	= I2C_DUALADDRESS_DISABLE;
 8000a34:	4b13      	ldr	r3, [pc, #76]	; (8000a84 <MX_I2C1_Init+0x74>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 		= 0;
 8000a3a:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <MX_I2C1_Init+0x74>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode 	= I2C_GENERALCALL_DISABLE;
 8000a40:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <MX_I2C1_Init+0x74>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode 		= I2C_NOSTRETCH_DISABLE;
 8000a46:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <MX_I2C1_Init+0x74>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a4c:	480d      	ldr	r0, [pc, #52]	; (8000a84 <MX_I2C1_Init+0x74>)
 8000a4e:	f001 fd9d 	bl	800258c <HAL_I2C_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a58:	f000 f9a2 	bl	8000da0 <Error_Handler>
  }

  /** Configure Analogue filter*/
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4809      	ldr	r0, [pc, #36]	; (8000a84 <MX_I2C1_Init+0x74>)
 8000a60:	f003 fba9 	bl	80041b6 <HAL_I2CEx_ConfigAnalogFilter>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000a6a:	f000 f999 	bl	8000da0 <Error_Handler>
  }

  /** Configure Digital filter*/
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4804      	ldr	r0, [pc, #16]	; (8000a84 <MX_I2C1_Init+0x74>)
 8000a72:	f003 fbdc 	bl	800422e <HAL_I2CEx_ConfigDigitalFilter>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000a7c:	f000 f990 	bl	8000da0 <Error_Handler>
  }
}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	200002ec 	.word	0x200002ec
 8000a88:	40005400 	.word	0x40005400
 8000a8c:	000186a0 	.word	0x000186a0

08000a90 <MX_SPI1_Init>:
  * @brief 	SPI1 Initialization Function
  * @param 	None
  * @retval None
  ************************************************************/
static void MX_SPI1_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* SPI1 parameter configuration*/
  hspi1.Instance 					= SPI1;
 8000a94:	4b15      	ldr	r3, [pc, #84]	; (8000aec <MX_SPI1_Init+0x5c>)
 8000a96:	4a16      	ldr	r2, [pc, #88]	; (8000af0 <MX_SPI1_Init+0x60>)
 8000a98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode 					= SPI_MODE_SLAVE;
 8000a9a:	4b14      	ldr	r3, [pc, #80]	; (8000aec <MX_SPI1_Init+0x5c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction 				= SPI_DIRECTION_2LINES;
 8000aa0:	4b12      	ldr	r3, [pc, #72]	; (8000aec <MX_SPI1_Init+0x5c>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize 				= SPI_DATASIZE_8BIT;
 8000aa6:	4b11      	ldr	r3, [pc, #68]	; (8000aec <MX_SPI1_Init+0x5c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity 			= SPI_POLARITY_LOW;
 8000aac:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <MX_SPI1_Init+0x5c>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase 				= SPI_PHASE_1EDGE;
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <MX_SPI1_Init+0x5c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS 					= SPI_NSS_SOFT;
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <MX_SPI1_Init+0x5c>)
 8000aba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000abe:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit 				= SPI_FIRSTBIT_MSB;
 8000ac0:	4b0a      	ldr	r3, [pc, #40]	; (8000aec <MX_SPI1_Init+0x5c>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode 				= SPI_TIMODE_DISABLE;
 8000ac6:	4b09      	ldr	r3, [pc, #36]	; (8000aec <MX_SPI1_Init+0x5c>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation 		= SPI_CRCCALCULATION_DISABLE;
 8000acc:	4b07      	ldr	r3, [pc, #28]	; (8000aec <MX_SPI1_Init+0x5c>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial 			= 10;
 8000ad2:	4b06      	ldr	r3, [pc, #24]	; (8000aec <MX_SPI1_Init+0x5c>)
 8000ad4:	220a      	movs	r2, #10
 8000ad6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ad8:	4804      	ldr	r0, [pc, #16]	; (8000aec <MX_SPI1_Init+0x5c>)
 8000ada:	f004 f901 	bl	8004ce0 <HAL_SPI_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 8000ae4:	f000 f95c 	bl	8000da0 <Error_Handler>
  }
}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20000400 	.word	0x20000400
 8000af0:	40013000 	.word	0x40013000

08000af4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  ************************************************************/
static void MX_USART3_UART_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  huart3.Instance 				= USART3;
 8000af8:	4b17      	ldr	r3, [pc, #92]	; (8000b58 <MX_USART3_UART_Init+0x64>)
 8000afa:	4a18      	ldr	r2, [pc, #96]	; (8000b5c <MX_USART3_UART_Init+0x68>)
 8000afc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate 			= 115200;
 8000afe:	4b16      	ldr	r3, [pc, #88]	; (8000b58 <MX_USART3_UART_Init+0x64>)
 8000b00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b04:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength 		= UART_WORDLENGTH_8B;
 8000b06:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <MX_USART3_UART_Init+0x64>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits 			= UART_STOPBITS_1;
 8000b0c:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <MX_USART3_UART_Init+0x64>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity 			= UART_PARITY_NONE;
 8000b12:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <MX_USART3_UART_Init+0x64>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode 				= UART_MODE_TX_RX;
 8000b18:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <MX_USART3_UART_Init+0x64>)
 8000b1a:	220c      	movs	r2, #12
 8000b1c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl 		= UART_HWCONTROL_NONE;
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <MX_USART3_UART_Init+0x64>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling 		= UART_OVERSAMPLING_16;
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <MX_USART3_UART_Init+0x64>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b2a:	480b      	ldr	r0, [pc, #44]	; (8000b58 <MX_USART3_UART_Init+0x64>)
 8000b2c:	f004 fd2e 	bl	800558c <HAL_UART_Init>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b36:	f000 f933 	bl	8000da0 <Error_Handler>
  }

  __HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);
 8000b3a:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <MX_USART3_UART_Init+0x64>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	68da      	ldr	r2, [r3, #12]
 8000b40:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <MX_USART3_UART_Init+0x64>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f042 0210 	orr.w	r2, r2, #16
 8000b48:	60da      	str	r2, [r3, #12]
  HAL_UART_Receive_DMA(&huart3, (uint8_t*)uart3Rcv_buff, UART3_RX_BUFFER_SIZE);
 8000b4a:	22ff      	movs	r2, #255	; 0xff
 8000b4c:	4904      	ldr	r1, [pc, #16]	; (8000b60 <MX_USART3_UART_Init+0x6c>)
 8000b4e:	4802      	ldr	r0, [pc, #8]	; (8000b58 <MX_USART3_UART_Init+0x64>)
 8000b50:	f004 fdfb 	bl	800574a <HAL_UART_Receive_DMA>
}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	200005d8 	.word	0x200005d8
 8000b5c:	40004800 	.word	0x40004800
 8000b60:	2000061c 	.word	0x2000061c

08000b64 <MX_DMA_Init>:

/************************************************************
  * Enable DMA controller clock
  ************************************************************/
static void MX_DMA_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	607b      	str	r3, [r7, #4]
 8000b6e:	4b1f      	ldr	r3, [pc, #124]	; (8000bec <MX_DMA_Init+0x88>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a1e      	ldr	r2, [pc, #120]	; (8000bec <MX_DMA_Init+0x88>)
 8000b74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b1c      	ldr	r3, [pc, #112]	; (8000bec <MX_DMA_Init+0x88>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	603b      	str	r3, [r7, #0]
 8000b8a:	4b18      	ldr	r3, [pc, #96]	; (8000bec <MX_DMA_Init+0x88>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a17      	ldr	r2, [pc, #92]	; (8000bec <MX_DMA_Init+0x88>)
 8000b90:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b15      	ldr	r3, [pc, #84]	; (8000bec <MX_DMA_Init+0x88>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b9e:	603b      	str	r3, [r7, #0]
 8000ba0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2105      	movs	r1, #5
 8000ba6:	200b      	movs	r0, #11
 8000ba8:	f000 fea2 	bl	80018f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000bac:	200b      	movs	r0, #11
 8000bae:	f000 febb 	bl	8001928 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2105      	movs	r1, #5
 8000bb6:	2011      	movs	r0, #17
 8000bb8:	f000 fe9a 	bl	80018f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000bbc:	2011      	movs	r0, #17
 8000bbe:	f000 feb3 	bl	8001928 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2105      	movs	r1, #5
 8000bc6:	2038      	movs	r0, #56	; 0x38
 8000bc8:	f000 fe92 	bl	80018f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000bcc:	2038      	movs	r0, #56	; 0x38
 8000bce:	f000 feab 	bl	8001928 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2105      	movs	r1, #5
 8000bd6:	203b      	movs	r0, #59	; 0x3b
 8000bd8:	f000 fe8a 	bl	80018f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000bdc:	203b      	movs	r0, #59	; 0x3b
 8000bde:	f000 fea3 	bl	8001928 <HAL_NVIC_EnableIRQ>

}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40023800 	.word	0x40023800

08000bf0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  ************************************************************/
static void MX_GPIO_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08c      	sub	sp, #48	; 0x30
 8000bf4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf6:	f107 031c 	add.w	r3, r7, #28
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]
 8000c04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	61bb      	str	r3, [r7, #24]
 8000c0a:	4b48      	ldr	r3, [pc, #288]	; (8000d2c <MX_GPIO_Init+0x13c>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a47      	ldr	r2, [pc, #284]	; (8000d2c <MX_GPIO_Init+0x13c>)
 8000c10:	f043 0304 	orr.w	r3, r3, #4
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b45      	ldr	r3, [pc, #276]	; (8000d2c <MX_GPIO_Init+0x13c>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0304 	and.w	r3, r3, #4
 8000c1e:	61bb      	str	r3, [r7, #24]
 8000c20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	617b      	str	r3, [r7, #20]
 8000c26:	4b41      	ldr	r3, [pc, #260]	; (8000d2c <MX_GPIO_Init+0x13c>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a40      	ldr	r2, [pc, #256]	; (8000d2c <MX_GPIO_Init+0x13c>)
 8000c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b3e      	ldr	r3, [pc, #248]	; (8000d2c <MX_GPIO_Init+0x13c>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c3a:	617b      	str	r3, [r7, #20]
 8000c3c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	613b      	str	r3, [r7, #16]
 8000c42:	4b3a      	ldr	r3, [pc, #232]	; (8000d2c <MX_GPIO_Init+0x13c>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a39      	ldr	r2, [pc, #228]	; (8000d2c <MX_GPIO_Init+0x13c>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b37      	ldr	r3, [pc, #220]	; (8000d2c <MX_GPIO_Init+0x13c>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	4b33      	ldr	r3, [pc, #204]	; (8000d2c <MX_GPIO_Init+0x13c>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a32      	ldr	r2, [pc, #200]	; (8000d2c <MX_GPIO_Init+0x13c>)
 8000c64:	f043 0302 	orr.w	r3, r3, #2
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b30      	ldr	r3, [pc, #192]	; (8000d2c <MX_GPIO_Init+0x13c>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0302 	and.w	r3, r3, #2
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	60bb      	str	r3, [r7, #8]
 8000c7a:	4b2c      	ldr	r3, [pc, #176]	; (8000d2c <MX_GPIO_Init+0x13c>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	4a2b      	ldr	r2, [pc, #172]	; (8000d2c <MX_GPIO_Init+0x13c>)
 8000c80:	f043 0308 	orr.w	r3, r3, #8
 8000c84:	6313      	str	r3, [r2, #48]	; 0x30
 8000c86:	4b29      	ldr	r3, [pc, #164]	; (8000d2c <MX_GPIO_Init+0x13c>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	f003 0308 	and.w	r3, r3, #8
 8000c8e:	60bb      	str	r3, [r7, #8]
 8000c90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	4b25      	ldr	r3, [pc, #148]	; (8000d2c <MX_GPIO_Init+0x13c>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a24      	ldr	r2, [pc, #144]	; (8000d2c <MX_GPIO_Init+0x13c>)
 8000c9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b22      	ldr	r3, [pc, #136]	; (8000d2c <MX_GPIO_Init+0x13c>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f244 0181 	movw	r1, #16513	; 0x4081
 8000cb4:	481e      	ldr	r0, [pc, #120]	; (8000d30 <MX_GPIO_Init+0x140>)
 8000cb6:	f001 fc1d 	bl	80024f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin 	= USER_Btn_Pin;
 8000cba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode 	= GPIO_MODE_IT_RISING;
 8000cc0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000cca:	f107 031c 	add.w	r3, r7, #28
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4818      	ldr	r0, [pc, #96]	; (8000d34 <MX_GPIO_Init+0x144>)
 8000cd2:	f001 fa63 	bl	800219c <HAL_GPIO_Init>

  /* Enable and set EXTI lines 15 to 10 Interrupt */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 15, 0);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	210f      	movs	r1, #15
 8000cda:	2028      	movs	r0, #40	; 0x28
 8000cdc:	f000 fe08 	bl	80018f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ce0:	2028      	movs	r0, #40	; 0x28
 8000ce2:	f000 fe21 	bl	8001928 <HAL_NVIC_EnableIRQ>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin 	= LD1_Pin|LD3_Pin|LD2_Pin;
 8000ce6:	f244 0381 	movw	r3, #16513	; 0x4081
 8000cea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 8000cec:	2301      	movs	r3, #1
 8000cee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf8:	f107 031c 	add.w	r3, r7, #28
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	480c      	ldr	r0, [pc, #48]	; (8000d30 <MX_GPIO_Init+0x140>)
 8000d00:	f001 fa4c 	bl	800219c <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000d04:	2200      	movs	r2, #0
 8000d06:	2101      	movs	r1, #1
 8000d08:	4809      	ldr	r0, [pc, #36]	; (8000d30 <MX_GPIO_Init+0x140>)
 8000d0a:	f001 fbf3 	bl	80024f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2180      	movs	r1, #128	; 0x80
 8000d12:	4807      	ldr	r0, [pc, #28]	; (8000d30 <MX_GPIO_Init+0x140>)
 8000d14:	f001 fbee 	bl	80024f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d1e:	4804      	ldr	r0, [pc, #16]	; (8000d30 <MX_GPIO_Init+0x140>)
 8000d20:	f001 fbe8 	bl	80024f4 <HAL_GPIO_WritePin>

}
 8000d24:	bf00      	nop
 8000d26:	3730      	adds	r7, #48	; 0x30
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40020400 	.word	0x40020400
 8000d34:	40020800 	.word	0x40020800

08000d38 <HAL_GPIO_EXTI_Callback>:
  * @brief EXTI line detection callbacks
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  ***********************************************************/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == USER_Btn_Pin)
 8000d42:	88fb      	ldrh	r3, [r7, #6]
 8000d44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d48:	d10f      	bne.n	8000d6a <HAL_GPIO_EXTI_Callback+0x32>
  {
	  //printf("Button INT\r\n");

	  //osSemaphoreRelease(osSemaphore);

	  portBASE_TYPE taskWoken = pdFALSE;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60fb      	str	r3, [r7, #12]
	  if (xSemaphoreGiveFromISR(osSemaphore, &taskWoken) != pdTRUE) {
 8000d4e:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f107 020c 	add.w	r2, r7, #12
 8000d56:	4611      	mov	r1, r2
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f006 fc69 	bl	8007630 <xQueueGiveFromISR>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d002      	beq.n	8000d6a <HAL_GPIO_EXTI_Callback+0x32>
		  printf("Sem Fail\r\n");
 8000d64:	4804      	ldr	r0, [pc, #16]	; (8000d78 <HAL_GPIO_EXTI_Callback+0x40>)
 8000d66:	f008 fd3f 	bl	80097e8 <puts>
	  }
  }
}
 8000d6a:	bf00      	nop
 8000d6c:	3710      	adds	r7, #16
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	2000072c 	.word	0x2000072c
 8000d78:	0800a874 	.word	0x0800a874

08000d7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  ************************************************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) {
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d101      	bne.n	8000d92 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d8e:	f000 fcd7 	bl	8001740 <HAL_IncTick>
  }
}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40010000 	.word	0x40010000

08000da0 <Error_Handler>:
/************************************************************
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  ************************************************************/
void Error_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000da4:	b672      	cpsid	i
}
 8000da6:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <Error_Handler+0x8>
	...

08000dac <HAL_MspInit>:

/********************************************************
  * Initializes the Global MSP.
  *******************************************************/
void HAL_MspInit(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	607b      	str	r3, [r7, #4]
 8000db6:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <HAL_MspInit+0x54>)
 8000db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dba:	4a11      	ldr	r2, [pc, #68]	; (8000e00 <HAL_MspInit+0x54>)
 8000dbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000dc2:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <HAL_MspInit+0x54>)
 8000dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	603b      	str	r3, [r7, #0]
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <HAL_MspInit+0x54>)
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <HAL_MspInit+0x54>)
 8000dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dde:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <HAL_MspInit+0x54>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de6:	603b      	str	r3, [r7, #0]
 8000de8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dea:	2200      	movs	r2, #0
 8000dec:	210f      	movs	r1, #15
 8000dee:	f06f 0001 	mvn.w	r0, #1
 8000df2:	f000 fd7d 	bl	80018f0 <HAL_NVIC_SetPriority>
}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40023800 	.word	0x40023800

08000e04 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*******************************************************/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a0b      	ldr	r2, [pc, #44]	; (8000e40 <HAL_CRC_MspInit+0x3c>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d10d      	bne.n	8000e32 <HAL_CRC_MspInit+0x2e>
  {
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <HAL_CRC_MspInit+0x40>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	4a09      	ldr	r2, [pc, #36]	; (8000e44 <HAL_CRC_MspInit+0x40>)
 8000e20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e24:	6313      	str	r3, [r2, #48]	; 0x30
 8000e26:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <HAL_CRC_MspInit+0x40>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
  }

}
 8000e32:	bf00      	nop
 8000e34:	3714      	adds	r7, #20
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	40023000 	.word	0x40023000
 8000e44:	40023800 	.word	0x40023800

08000e48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*******************************************************/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	; 0x28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a50      	ldr	r2, [pc, #320]	; (8000fa8 <HAL_I2C_MspInit+0x160>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	f040 8099 	bne.w	8000f9e <HAL_I2C_MspInit+0x156>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	613b      	str	r3, [r7, #16]
 8000e70:	4b4e      	ldr	r3, [pc, #312]	; (8000fac <HAL_I2C_MspInit+0x164>)
 8000e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e74:	4a4d      	ldr	r2, [pc, #308]	; (8000fac <HAL_I2C_MspInit+0x164>)
 8000e76:	f043 0302 	orr.w	r3, r3, #2
 8000e7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7c:	4b4b      	ldr	r3, [pc, #300]	; (8000fac <HAL_I2C_MspInit+0x164>)
 8000e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e80:	f003 0302 	and.w	r3, r3, #2
 8000e84:	613b      	str	r3, [r7, #16]
 8000e86:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin 		= GPIO_PIN_6|GPIO_PIN_9;
 8000e88:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000e8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode 		= GPIO_MODE_AF_OD;
 8000e8e:	2312      	movs	r3, #18
 8000e90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_VERY_HIGH;
 8000e96:	2303      	movs	r3, #3
 8000e98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate 	= GPIO_AF4_I2C1;
 8000e9a:	2304      	movs	r3, #4
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9e:	f107 0314 	add.w	r3, r7, #20
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4842      	ldr	r0, [pc, #264]	; (8000fb0 <HAL_I2C_MspInit+0x168>)
 8000ea6:	f001 f979 	bl	800219c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
 8000eae:	4b3f      	ldr	r3, [pc, #252]	; (8000fac <HAL_I2C_MspInit+0x164>)
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb2:	4a3e      	ldr	r2, [pc, #248]	; (8000fac <HAL_I2C_MspInit+0x164>)
 8000eb4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eba:	4b3c      	ldr	r3, [pc, #240]	; (8000fac <HAL_I2C_MspInit+0x164>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance 					= DMA1_Stream0;
 8000ec6:	4b3b      	ldr	r3, [pc, #236]	; (8000fb4 <HAL_I2C_MspInit+0x16c>)
 8000ec8:	4a3b      	ldr	r2, [pc, #236]	; (8000fb8 <HAL_I2C_MspInit+0x170>)
 8000eca:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel 				= DMA_CHANNEL_1;
 8000ecc:	4b39      	ldr	r3, [pc, #228]	; (8000fb4 <HAL_I2C_MspInit+0x16c>)
 8000ece:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000ed2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction 			= DMA_PERIPH_TO_MEMORY;
 8000ed4:	4b37      	ldr	r3, [pc, #220]	; (8000fb4 <HAL_I2C_MspInit+0x16c>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc 			= DMA_PINC_DISABLE;
 8000eda:	4b36      	ldr	r3, [pc, #216]	; (8000fb4 <HAL_I2C_MspInit+0x16c>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc 				= DMA_MINC_ENABLE;
 8000ee0:	4b34      	ldr	r3, [pc, #208]	; (8000fb4 <HAL_I2C_MspInit+0x16c>)
 8000ee2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ee6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 8000ee8:	4b32      	ldr	r3, [pc, #200]	; (8000fb4 <HAL_I2C_MspInit+0x16c>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment 		= DMA_MDATAALIGN_BYTE;
 8000eee:	4b31      	ldr	r3, [pc, #196]	; (8000fb4 <HAL_I2C_MspInit+0x16c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode 					= DMA_NORMAL;
 8000ef4:	4b2f      	ldr	r3, [pc, #188]	; (8000fb4 <HAL_I2C_MspInit+0x16c>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority 				= DMA_PRIORITY_LOW;
 8000efa:	4b2e      	ldr	r3, [pc, #184]	; (8000fb4 <HAL_I2C_MspInit+0x16c>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode 				= DMA_FIFOMODE_DISABLE;
 8000f00:	4b2c      	ldr	r3, [pc, #176]	; (8000fb4 <HAL_I2C_MspInit+0x16c>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000f06:	482b      	ldr	r0, [pc, #172]	; (8000fb4 <HAL_I2C_MspInit+0x16c>)
 8000f08:	f000 fd38 	bl	800197c <HAL_DMA_Init>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8000f12:	f7ff ff45 	bl	8000da0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a26      	ldr	r2, [pc, #152]	; (8000fb4 <HAL_I2C_MspInit+0x16c>)
 8000f1a:	639a      	str	r2, [r3, #56]	; 0x38
 8000f1c:	4a25      	ldr	r2, [pc, #148]	; (8000fb4 <HAL_I2C_MspInit+0x16c>)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance 					= DMA1_Stream6;
 8000f22:	4b26      	ldr	r3, [pc, #152]	; (8000fbc <HAL_I2C_MspInit+0x174>)
 8000f24:	4a26      	ldr	r2, [pc, #152]	; (8000fc0 <HAL_I2C_MspInit+0x178>)
 8000f26:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel 				= DMA_CHANNEL_1;
 8000f28:	4b24      	ldr	r3, [pc, #144]	; (8000fbc <HAL_I2C_MspInit+0x174>)
 8000f2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000f2e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction 			= DMA_MEMORY_TO_PERIPH;
 8000f30:	4b22      	ldr	r3, [pc, #136]	; (8000fbc <HAL_I2C_MspInit+0x174>)
 8000f32:	2240      	movs	r2, #64	; 0x40
 8000f34:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc 			= DMA_PINC_DISABLE;
 8000f36:	4b21      	ldr	r3, [pc, #132]	; (8000fbc <HAL_I2C_MspInit+0x174>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc 				= DMA_MINC_ENABLE;
 8000f3c:	4b1f      	ldr	r3, [pc, #124]	; (8000fbc <HAL_I2C_MspInit+0x174>)
 8000f3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f42:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 8000f44:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <HAL_I2C_MspInit+0x174>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment 		= DMA_MDATAALIGN_BYTE;
 8000f4a:	4b1c      	ldr	r3, [pc, #112]	; (8000fbc <HAL_I2C_MspInit+0x174>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode 					= DMA_NORMAL;
 8000f50:	4b1a      	ldr	r3, [pc, #104]	; (8000fbc <HAL_I2C_MspInit+0x174>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority 				= DMA_PRIORITY_LOW;
 8000f56:	4b19      	ldr	r3, [pc, #100]	; (8000fbc <HAL_I2C_MspInit+0x174>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode 				= DMA_FIFOMODE_DISABLE;
 8000f5c:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <HAL_I2C_MspInit+0x174>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000f62:	4816      	ldr	r0, [pc, #88]	; (8000fbc <HAL_I2C_MspInit+0x174>)
 8000f64:	f000 fd0a 	bl	800197c <HAL_DMA_Init>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 8000f6e:	f7ff ff17 	bl	8000da0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a11      	ldr	r2, [pc, #68]	; (8000fbc <HAL_I2C_MspInit+0x174>)
 8000f76:	635a      	str	r2, [r3, #52]	; 0x34
 8000f78:	4a10      	ldr	r2, [pc, #64]	; (8000fbc <HAL_I2C_MspInit+0x174>)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2105      	movs	r1, #5
 8000f82:	201f      	movs	r0, #31
 8000f84:	f000 fcb4 	bl	80018f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000f88:	201f      	movs	r0, #31
 8000f8a:	f000 fccd 	bl	8001928 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2105      	movs	r1, #5
 8000f92:	2020      	movs	r0, #32
 8000f94:	f000 fcac 	bl	80018f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000f98:	2020      	movs	r0, #32
 8000f9a:	f000 fcc5 	bl	8001928 <HAL_NVIC_EnableIRQ>
  }

}
 8000f9e:	bf00      	nop
 8000fa0:	3728      	adds	r7, #40	; 0x28
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40005400 	.word	0x40005400
 8000fac:	40023800 	.word	0x40023800
 8000fb0:	40020400 	.word	0x40020400
 8000fb4:	20000340 	.word	0x20000340
 8000fb8:	40026010 	.word	0x40026010
 8000fbc:	200003a0 	.word	0x200003a0
 8000fc0:	400260a0 	.word	0x400260a0

08000fc4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*******************************************************/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08a      	sub	sp, #40	; 0x28
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a5b      	ldr	r2, [pc, #364]	; (8001150 <HAL_SPI_MspInit+0x18c>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	f040 80b0 	bne.w	8001148 <HAL_SPI_MspInit+0x184>
  {
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fe8:	2300      	movs	r3, #0
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	4b59      	ldr	r3, [pc, #356]	; (8001154 <HAL_SPI_MspInit+0x190>)
 8000fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff0:	4a58      	ldr	r2, [pc, #352]	; (8001154 <HAL_SPI_MspInit+0x190>)
 8000ff2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ff6:	6453      	str	r3, [r2, #68]	; 0x44
 8000ff8:	4b56      	ldr	r3, [pc, #344]	; (8001154 <HAL_SPI_MspInit+0x190>)
 8000ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001000:	613b      	str	r3, [r7, #16]
 8001002:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001004:	2300      	movs	r3, #0
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	4b52      	ldr	r3, [pc, #328]	; (8001154 <HAL_SPI_MspInit+0x190>)
 800100a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100c:	4a51      	ldr	r2, [pc, #324]	; (8001154 <HAL_SPI_MspInit+0x190>)
 800100e:	f043 0301 	orr.w	r3, r3, #1
 8001012:	6313      	str	r3, [r2, #48]	; 0x30
 8001014:	4b4f      	ldr	r3, [pc, #316]	; (8001154 <HAL_SPI_MspInit+0x190>)
 8001016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001018:	f003 0301 	and.w	r3, r3, #1
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001020:	2300      	movs	r3, #0
 8001022:	60bb      	str	r3, [r7, #8]
 8001024:	4b4b      	ldr	r3, [pc, #300]	; (8001154 <HAL_SPI_MspInit+0x190>)
 8001026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001028:	4a4a      	ldr	r2, [pc, #296]	; (8001154 <HAL_SPI_MspInit+0x190>)
 800102a:	f043 0302 	orr.w	r3, r3, #2
 800102e:	6313      	str	r3, [r2, #48]	; 0x30
 8001030:	4b48      	ldr	r3, [pc, #288]	; (8001154 <HAL_SPI_MspInit+0x190>)
 8001032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001034:	f003 0302 	and.w	r3, r3, #2
 8001038:	60bb      	str	r3, [r7, #8]
 800103a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin 		= GPIO_PIN_5|GPIO_PIN_6;
 800103c:	2360      	movs	r3, #96	; 0x60
 800103e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode 		= GPIO_MODE_AF_PP;
 8001040:	2302      	movs	r3, #2
 8001042:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_VERY_HIGH;
 8001048:	2303      	movs	r3, #3
 800104a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate 	= GPIO_AF5_SPI1;
 800104c:	2305      	movs	r3, #5
 800104e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	4619      	mov	r1, r3
 8001056:	4840      	ldr	r0, [pc, #256]	; (8001158 <HAL_SPI_MspInit+0x194>)
 8001058:	f001 f8a0 	bl	800219c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin 		= GPIO_PIN_5;
 800105c:	2320      	movs	r3, #32
 800105e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode 		= GPIO_MODE_AF_PP;
 8001060:	2302      	movs	r3, #2
 8001062:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_VERY_HIGH;
 8001068:	2303      	movs	r3, #3
 800106a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate 	= GPIO_AF5_SPI1;
 800106c:	2305      	movs	r3, #5
 800106e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	4619      	mov	r1, r3
 8001076:	4839      	ldr	r0, [pc, #228]	; (800115c <HAL_SPI_MspInit+0x198>)
 8001078:	f001 f890 	bl	800219c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance 					= DMA2_Stream0;
 800107c:	4b38      	ldr	r3, [pc, #224]	; (8001160 <HAL_SPI_MspInit+0x19c>)
 800107e:	4a39      	ldr	r2, [pc, #228]	; (8001164 <HAL_SPI_MspInit+0x1a0>)
 8001080:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel 				= DMA_CHANNEL_3;
 8001082:	4b37      	ldr	r3, [pc, #220]	; (8001160 <HAL_SPI_MspInit+0x19c>)
 8001084:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001088:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction 			= DMA_PERIPH_TO_MEMORY;
 800108a:	4b35      	ldr	r3, [pc, #212]	; (8001160 <HAL_SPI_MspInit+0x19c>)
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc 			= DMA_PINC_DISABLE;
 8001090:	4b33      	ldr	r3, [pc, #204]	; (8001160 <HAL_SPI_MspInit+0x19c>)
 8001092:	2200      	movs	r2, #0
 8001094:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc 				= DMA_MINC_ENABLE;
 8001096:	4b32      	ldr	r3, [pc, #200]	; (8001160 <HAL_SPI_MspInit+0x19c>)
 8001098:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800109c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 800109e:	4b30      	ldr	r3, [pc, #192]	; (8001160 <HAL_SPI_MspInit+0x19c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment 		= DMA_MDATAALIGN_BYTE;
 80010a4:	4b2e      	ldr	r3, [pc, #184]	; (8001160 <HAL_SPI_MspInit+0x19c>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode 					= DMA_CIRCULAR;
 80010aa:	4b2d      	ldr	r3, [pc, #180]	; (8001160 <HAL_SPI_MspInit+0x19c>)
 80010ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010b0:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority 				= DMA_PRIORITY_LOW;
 80010b2:	4b2b      	ldr	r3, [pc, #172]	; (8001160 <HAL_SPI_MspInit+0x19c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode 				= DMA_FIFOMODE_DISABLE;
 80010b8:	4b29      	ldr	r3, [pc, #164]	; (8001160 <HAL_SPI_MspInit+0x19c>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80010be:	4828      	ldr	r0, [pc, #160]	; (8001160 <HAL_SPI_MspInit+0x19c>)
 80010c0:	f000 fc5c 	bl	800197c <HAL_DMA_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <HAL_SPI_MspInit+0x10a>
    {
      Error_Handler();
 80010ca:	f7ff fe69 	bl	8000da0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a23      	ldr	r2, [pc, #140]	; (8001160 <HAL_SPI_MspInit+0x19c>)
 80010d2:	64da      	str	r2, [r3, #76]	; 0x4c
 80010d4:	4a22      	ldr	r2, [pc, #136]	; (8001160 <HAL_SPI_MspInit+0x19c>)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance 					= DMA2_Stream3;
 80010da:	4b23      	ldr	r3, [pc, #140]	; (8001168 <HAL_SPI_MspInit+0x1a4>)
 80010dc:	4a23      	ldr	r2, [pc, #140]	; (800116c <HAL_SPI_MspInit+0x1a8>)
 80010de:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel 				= DMA_CHANNEL_3;
 80010e0:	4b21      	ldr	r3, [pc, #132]	; (8001168 <HAL_SPI_MspInit+0x1a4>)
 80010e2:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80010e6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction 			= DMA_MEMORY_TO_PERIPH;
 80010e8:	4b1f      	ldr	r3, [pc, #124]	; (8001168 <HAL_SPI_MspInit+0x1a4>)
 80010ea:	2240      	movs	r2, #64	; 0x40
 80010ec:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc 			= DMA_PINC_DISABLE;
 80010ee:	4b1e      	ldr	r3, [pc, #120]	; (8001168 <HAL_SPI_MspInit+0x1a4>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc 				= DMA_MINC_ENABLE;
 80010f4:	4b1c      	ldr	r3, [pc, #112]	; (8001168 <HAL_SPI_MspInit+0x1a4>)
 80010f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010fa:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 80010fc:	4b1a      	ldr	r3, [pc, #104]	; (8001168 <HAL_SPI_MspInit+0x1a4>)
 80010fe:	2200      	movs	r2, #0
 8001100:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment 		= DMA_MDATAALIGN_BYTE;
 8001102:	4b19      	ldr	r3, [pc, #100]	; (8001168 <HAL_SPI_MspInit+0x1a4>)
 8001104:	2200      	movs	r2, #0
 8001106:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode 					= DMA_CIRCULAR;
 8001108:	4b17      	ldr	r3, [pc, #92]	; (8001168 <HAL_SPI_MspInit+0x1a4>)
 800110a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800110e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority 				= DMA_PRIORITY_LOW;
 8001110:	4b15      	ldr	r3, [pc, #84]	; (8001168 <HAL_SPI_MspInit+0x1a4>)
 8001112:	2200      	movs	r2, #0
 8001114:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode 				= DMA_FIFOMODE_DISABLE;
 8001116:	4b14      	ldr	r3, [pc, #80]	; (8001168 <HAL_SPI_MspInit+0x1a4>)
 8001118:	2200      	movs	r2, #0
 800111a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800111c:	4812      	ldr	r0, [pc, #72]	; (8001168 <HAL_SPI_MspInit+0x1a4>)
 800111e:	f000 fc2d 	bl	800197c <HAL_DMA_Init>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <HAL_SPI_MspInit+0x168>
    {
      Error_Handler();
 8001128:	f7ff fe3a 	bl	8000da0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4a0e      	ldr	r2, [pc, #56]	; (8001168 <HAL_SPI_MspInit+0x1a4>)
 8001130:	649a      	str	r2, [r3, #72]	; 0x48
 8001132:	4a0d      	ldr	r2, [pc, #52]	; (8001168 <HAL_SPI_MspInit+0x1a4>)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001138:	2200      	movs	r2, #0
 800113a:	2105      	movs	r1, #5
 800113c:	2023      	movs	r0, #35	; 0x23
 800113e:	f000 fbd7 	bl	80018f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001142:	2023      	movs	r0, #35	; 0x23
 8001144:	f000 fbf0 	bl	8001928 <HAL_NVIC_EnableIRQ>
  }

}
 8001148:	bf00      	nop
 800114a:	3728      	adds	r7, #40	; 0x28
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40013000 	.word	0x40013000
 8001154:	40023800 	.word	0x40023800
 8001158:	40020000 	.word	0x40020000
 800115c:	40020400 	.word	0x40020400
 8001160:	20000458 	.word	0x20000458
 8001164:	40026410 	.word	0x40026410
 8001168:	200004b8 	.word	0x200004b8
 800116c:	40026458 	.word	0x40026458

08001170 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*******************************************************/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08a      	sub	sp, #40	; 0x28
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a4c      	ldr	r2, [pc, #304]	; (80012c0 <HAL_UART_MspInit+0x150>)
 800118e:	4293      	cmp	r3, r2
 8001190:	f040 8091 	bne.w	80012b6 <HAL_UART_MspInit+0x146>
  {
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001194:	2300      	movs	r3, #0
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	4b4a      	ldr	r3, [pc, #296]	; (80012c4 <HAL_UART_MspInit+0x154>)
 800119a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119c:	4a49      	ldr	r2, [pc, #292]	; (80012c4 <HAL_UART_MspInit+0x154>)
 800119e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011a2:	6413      	str	r3, [r2, #64]	; 0x40
 80011a4:	4b47      	ldr	r3, [pc, #284]	; (80012c4 <HAL_UART_MspInit+0x154>)
 80011a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011ac:	613b      	str	r3, [r7, #16]
 80011ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011b0:	2300      	movs	r3, #0
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	4b43      	ldr	r3, [pc, #268]	; (80012c4 <HAL_UART_MspInit+0x154>)
 80011b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b8:	4a42      	ldr	r2, [pc, #264]	; (80012c4 <HAL_UART_MspInit+0x154>)
 80011ba:	f043 0308 	orr.w	r3, r3, #8
 80011be:	6313      	str	r3, [r2, #48]	; 0x30
 80011c0:	4b40      	ldr	r3, [pc, #256]	; (80012c4 <HAL_UART_MspInit+0x154>)
 80011c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c4:	f003 0308 	and.w	r3, r3, #8
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin 		= STLK_RX_Pin|STLK_TX_Pin;
 80011cc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode 		= GPIO_MODE_AF_PP;
 80011d2:	2302      	movs	r3, #2
 80011d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_VERY_HIGH;
 80011da:	2303      	movs	r3, #3
 80011dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate 	= GPIO_AF7_USART3;
 80011de:	2307      	movs	r3, #7
 80011e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011e2:	f107 0314 	add.w	r3, r7, #20
 80011e6:	4619      	mov	r1, r3
 80011e8:	4837      	ldr	r0, [pc, #220]	; (80012c8 <HAL_UART_MspInit+0x158>)
 80011ea:	f000 ffd7 	bl	800219c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance 		= DMA1_Stream1;
 80011ee:	4b37      	ldr	r3, [pc, #220]	; (80012cc <HAL_UART_MspInit+0x15c>)
 80011f0:	4a37      	ldr	r2, [pc, #220]	; (80012d0 <HAL_UART_MspInit+0x160>)
 80011f2:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel 	= DMA_CHANNEL_4;
 80011f4:	4b35      	ldr	r3, [pc, #212]	; (80012cc <HAL_UART_MspInit+0x15c>)
 80011f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011fa:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction 	= DMA_PERIPH_TO_MEMORY;
 80011fc:	4b33      	ldr	r3, [pc, #204]	; (80012cc <HAL_UART_MspInit+0x15c>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc 	= DMA_PINC_DISABLE;
 8001202:	4b32      	ldr	r3, [pc, #200]	; (80012cc <HAL_UART_MspInit+0x15c>)
 8001204:	2200      	movs	r2, #0
 8001206:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc 		= DMA_MINC_ENABLE;
 8001208:	4b30      	ldr	r3, [pc, #192]	; (80012cc <HAL_UART_MspInit+0x15c>)
 800120a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800120e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001210:	4b2e      	ldr	r3, [pc, #184]	; (80012cc <HAL_UART_MspInit+0x15c>)
 8001212:	2200      	movs	r2, #0
 8001214:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 8001216:	4b2d      	ldr	r3, [pc, #180]	; (80012cc <HAL_UART_MspInit+0x15c>)
 8001218:	2200      	movs	r2, #0
 800121a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode 		= DMA_NORMAL;
 800121c:	4b2b      	ldr	r3, [pc, #172]	; (80012cc <HAL_UART_MspInit+0x15c>)
 800121e:	2200      	movs	r2, #0
 8001220:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority 	= DMA_PRIORITY_LOW;
 8001222:	4b2a      	ldr	r3, [pc, #168]	; (80012cc <HAL_UART_MspInit+0x15c>)
 8001224:	2200      	movs	r2, #0
 8001226:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode 	= DMA_FIFOMODE_DISABLE;
 8001228:	4b28      	ldr	r3, [pc, #160]	; (80012cc <HAL_UART_MspInit+0x15c>)
 800122a:	2200      	movs	r2, #0
 800122c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800122e:	4827      	ldr	r0, [pc, #156]	; (80012cc <HAL_UART_MspInit+0x15c>)
 8001230:	f000 fba4 	bl	800197c <HAL_DMA_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800123a:	f7ff fdb1 	bl	8000da0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a22      	ldr	r2, [pc, #136]	; (80012cc <HAL_UART_MspInit+0x15c>)
 8001242:	639a      	str	r2, [r3, #56]	; 0x38
 8001244:	4a21      	ldr	r2, [pc, #132]	; (80012cc <HAL_UART_MspInit+0x15c>)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance 		= DMA1_Stream3;
 800124a:	4b22      	ldr	r3, [pc, #136]	; (80012d4 <HAL_UART_MspInit+0x164>)
 800124c:	4a22      	ldr	r2, [pc, #136]	; (80012d8 <HAL_UART_MspInit+0x168>)
 800124e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel 	= DMA_CHANNEL_4;
 8001250:	4b20      	ldr	r3, [pc, #128]	; (80012d4 <HAL_UART_MspInit+0x164>)
 8001252:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001256:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction 	= DMA_MEMORY_TO_PERIPH;
 8001258:	4b1e      	ldr	r3, [pc, #120]	; (80012d4 <HAL_UART_MspInit+0x164>)
 800125a:	2240      	movs	r2, #64	; 0x40
 800125c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc 	= DMA_PINC_DISABLE;
 800125e:	4b1d      	ldr	r3, [pc, #116]	; (80012d4 <HAL_UART_MspInit+0x164>)
 8001260:	2200      	movs	r2, #0
 8001262:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc 		= DMA_MINC_ENABLE;
 8001264:	4b1b      	ldr	r3, [pc, #108]	; (80012d4 <HAL_UART_MspInit+0x164>)
 8001266:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800126a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800126c:	4b19      	ldr	r3, [pc, #100]	; (80012d4 <HAL_UART_MspInit+0x164>)
 800126e:	2200      	movs	r2, #0
 8001270:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 8001272:	4b18      	ldr	r3, [pc, #96]	; (80012d4 <HAL_UART_MspInit+0x164>)
 8001274:	2200      	movs	r2, #0
 8001276:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode 		= DMA_NORMAL;
 8001278:	4b16      	ldr	r3, [pc, #88]	; (80012d4 <HAL_UART_MspInit+0x164>)
 800127a:	2200      	movs	r2, #0
 800127c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority 	= DMA_PRIORITY_LOW;
 800127e:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <HAL_UART_MspInit+0x164>)
 8001280:	2200      	movs	r2, #0
 8001282:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode 	= DMA_FIFOMODE_DISABLE;
 8001284:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <HAL_UART_MspInit+0x164>)
 8001286:	2200      	movs	r2, #0
 8001288:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800128a:	4812      	ldr	r0, [pc, #72]	; (80012d4 <HAL_UART_MspInit+0x164>)
 800128c:	f000 fb76 	bl	800197c <HAL_DMA_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8001296:	f7ff fd83 	bl	8000da0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a0d      	ldr	r2, [pc, #52]	; (80012d4 <HAL_UART_MspInit+0x164>)
 800129e:	635a      	str	r2, [r3, #52]	; 0x34
 80012a0:	4a0c      	ldr	r2, [pc, #48]	; (80012d4 <HAL_UART_MspInit+0x164>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6393      	str	r3, [r2, #56]	; 0x38


	/* UART2 interrupt Init */
	HAL_NVIC_SetPriority(USART3_IRQn, 15, 0);
 80012a6:	2200      	movs	r2, #0
 80012a8:	210f      	movs	r1, #15
 80012aa:	2027      	movs	r0, #39	; 0x27
 80012ac:	f000 fb20 	bl	80018f0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART3_IRQn);
 80012b0:	2027      	movs	r0, #39	; 0x27
 80012b2:	f000 fb39 	bl	8001928 <HAL_NVIC_EnableIRQ>
  }

}
 80012b6:	bf00      	nop
 80012b8:	3728      	adds	r7, #40	; 0x28
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40004800 	.word	0x40004800
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40020c00 	.word	0x40020c00
 80012cc:	20000578 	.word	0x20000578
 80012d0:	40026028 	.word	0x40026028
 80012d4:	20000518 	.word	0x20000518
 80012d8:	40026058 	.word	0x40026058

080012dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08c      	sub	sp, #48	; 0x30
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80012ec:	2200      	movs	r2, #0
 80012ee:	6879      	ldr	r1, [r7, #4]
 80012f0:	2019      	movs	r0, #25
 80012f2:	f000 fafd 	bl	80018f0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80012f6:	2019      	movs	r0, #25
 80012f8:	f000 fb16 	bl	8001928 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	4b1f      	ldr	r3, [pc, #124]	; (8001380 <HAL_InitTick+0xa4>)
 8001302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001304:	4a1e      	ldr	r2, [pc, #120]	; (8001380 <HAL_InitTick+0xa4>)
 8001306:	f043 0301 	orr.w	r3, r3, #1
 800130a:	6453      	str	r3, [r2, #68]	; 0x44
 800130c:	4b1c      	ldr	r3, [pc, #112]	; (8001380 <HAL_InitTick+0xa4>)
 800130e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001310:	f003 0301 	and.w	r3, r3, #1
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001318:	f107 0210 	add.w	r2, r7, #16
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	4611      	mov	r1, r2
 8001322:	4618      	mov	r0, r3
 8001324:	f003 fcaa 	bl	8004c7c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001328:	f003 fc94 	bl	8004c54 <HAL_RCC_GetPCLK2Freq>
 800132c:	4603      	mov	r3, r0
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001334:	4a13      	ldr	r2, [pc, #76]	; (8001384 <HAL_InitTick+0xa8>)
 8001336:	fba2 2303 	umull	r2, r3, r2, r3
 800133a:	0c9b      	lsrs	r3, r3, #18
 800133c:	3b01      	subs	r3, #1
 800133e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001340:	4b11      	ldr	r3, [pc, #68]	; (8001388 <HAL_InitTick+0xac>)
 8001342:	4a12      	ldr	r2, [pc, #72]	; (800138c <HAL_InitTick+0xb0>)
 8001344:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001346:	4b10      	ldr	r3, [pc, #64]	; (8001388 <HAL_InitTick+0xac>)
 8001348:	f240 32e7 	movw	r2, #999	; 0x3e7
 800134c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800134e:	4a0e      	ldr	r2, [pc, #56]	; (8001388 <HAL_InitTick+0xac>)
 8001350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001352:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001354:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <HAL_InitTick+0xac>)
 8001356:	2200      	movs	r2, #0
 8001358:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800135a:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <HAL_InitTick+0xac>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001360:	4809      	ldr	r0, [pc, #36]	; (8001388 <HAL_InitTick+0xac>)
 8001362:	f003 fe65 	bl	8005030 <HAL_TIM_Base_Init>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d104      	bne.n	8001376 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800136c:	4806      	ldr	r0, [pc, #24]	; (8001388 <HAL_InitTick+0xac>)
 800136e:	f003 feb9 	bl	80050e4 <HAL_TIM_Base_Start_IT>
 8001372:	4603      	mov	r3, r0
 8001374:	e000      	b.n	8001378 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
}
 8001378:	4618      	mov	r0, r3
 800137a:	3730      	adds	r7, #48	; 0x30
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40023800 	.word	0x40023800
 8001384:	431bde83 	.word	0x431bde83
 8001388:	20000734 	.word	0x20000734
 800138c:	40010000 	.word	0x40010000

08001390 <NMI_Handler>:
/******************************************************************************/
/************************************************************
  * @brief This function handles Non maskable interrupt.
  ***********************************************************/
void NMI_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  while (1)
 8001394:	e7fe      	b.n	8001394 <NMI_Handler+0x4>

08001396 <HardFault_Handler>:

/************************************************************
  * @brief This function handles Hard fault interrupt.
  ***********************************************************/
void HardFault_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0
  while (1)
 800139a:	e7fe      	b.n	800139a <HardFault_Handler+0x4>

0800139c <MemManage_Handler>:

/************************************************************
  * @brief This function handles Memory management fault.
  ***********************************************************/
void MemManage_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  while (1)
 80013a0:	e7fe      	b.n	80013a0 <MemManage_Handler+0x4>

080013a2 <BusFault_Handler>:

/************************************************************
  * @brief This function handles Pre-fetch fault, memory access fault.
  ***********************************************************/
void BusFault_Handler(void)
{
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0
  while (1)
 80013a6:	e7fe      	b.n	80013a6 <BusFault_Handler+0x4>

080013a8 <UsageFault_Handler>:

/************************************************************
  * @brief This function handles Undefined instruction or illegal state.
  ***********************************************************/
void UsageFault_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  while (1)
 80013ac:	e7fe      	b.n	80013ac <UsageFault_Handler+0x4>

080013ae <DebugMon_Handler>:

/************************************************************
  * @brief This function handles Debug monitor.
  ***********************************************************/
void DebugMon_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0

}
 80013b2:	bf00      	nop
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <EXTI15_10_IRQHandler>:
  * @brief  This function handles external lines 15 to 10 interrupt request.
  * @param  None
  * @retval None
  *****************************************************************************/
void EXTI15_10_IRQHandler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80013c0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80013c4:	f001 f8ca 	bl	800255c <HAL_GPIO_EXTI_IRQHandler>
}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}

080013cc <DMA1_Stream0_IRQHandler>:

/************************************************************
  * @brief This function handles DMA1 stream0 global interrupt.
  ************************************************************/
void DMA1_Stream0_IRQHandler(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80013d0:	4802      	ldr	r0, [pc, #8]	; (80013dc <DMA1_Stream0_IRQHandler+0x10>)
 80013d2:	f000 fc6b 	bl	8001cac <HAL_DMA_IRQHandler>
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000340 	.word	0x20000340

080013e0 <DMA1_Stream6_IRQHandler>:

/*************************************************************
  * @brief This function handles DMA1 stream6 global interrupt.
  ************************************************************/
void DMA1_Stream6_IRQHandler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80013e4:	4802      	ldr	r0, [pc, #8]	; (80013f0 <DMA1_Stream6_IRQHandler+0x10>)
 80013e6:	f000 fc61 	bl	8001cac <HAL_DMA_IRQHandler>
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	200003a0 	.word	0x200003a0

080013f4 <TIM1_UP_TIM10_IRQHandler>:

/*************************************************************
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  ************************************************************/
void TIM1_UP_TIM10_IRQHandler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim1);
 80013f8:	4802      	ldr	r0, [pc, #8]	; (8001404 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80013fa:	f003 fee3 	bl	80051c4 <HAL_TIM_IRQHandler>
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000734 	.word	0x20000734

08001408 <I2C1_EV_IRQHandler>:

/**************************************************************
  * @brief This function handles I2C1 event interrupt.
  *************************************************************/
void I2C1_EV_IRQHandler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800140c:	4802      	ldr	r0, [pc, #8]	; (8001418 <I2C1_EV_IRQHandler+0x10>)
 800140e:	f001 fa01 	bl	8002814 <HAL_I2C_EV_IRQHandler>
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	200002ec 	.word	0x200002ec

0800141c <I2C1_ER_IRQHandler>:

/**************************************************************
  * @brief This function handles I2C1 error interrupt.
  *************************************************************/
void I2C1_ER_IRQHandler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001420:	4802      	ldr	r0, [pc, #8]	; (800142c <I2C1_ER_IRQHandler+0x10>)
 8001422:	f001 fb68 	bl	8002af6 <HAL_I2C_ER_IRQHandler>
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	200002ec 	.word	0x200002ec

08001430 <SPI1_IRQHandler>:

/**************************************************************
  * @brief This function handles SPI1 global interrupt.
  *************************************************************/
void SPI1_IRQHandler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi1);
 8001434:	4802      	ldr	r0, [pc, #8]	; (8001440 <SPI1_IRQHandler+0x10>)
 8001436:	f003 fcdd 	bl	8004df4 <HAL_SPI_IRQHandler>
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000400 	.word	0x20000400

08001444 <DMA2_Stream0_IRQHandler>:

/**************************************************************
  * @brief This function handles DMA2 stream0 global interrupt.
  *************************************************************/
void DMA2_Stream0_IRQHandler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001448:	4802      	ldr	r0, [pc, #8]	; (8001454 <DMA2_Stream0_IRQHandler+0x10>)
 800144a:	f000 fc2f 	bl	8001cac <HAL_DMA_IRQHandler>
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000458 	.word	0x20000458

08001458 <DMA2_Stream3_IRQHandler>:

/**************************************************************
  * @brief This function handles DMA2 stream3 global interrupt.
  *************************************************************/
void DMA2_Stream3_IRQHandler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800145c:	4802      	ldr	r0, [pc, #8]	; (8001468 <DMA2_Stream3_IRQHandler+0x10>)
 800145e:	f000 fc25 	bl	8001cac <HAL_DMA_IRQHandler>
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	200004b8 	.word	0x200004b8

0800146c <DMA1_Stream1_IRQHandler>:
  * @brief This function handles DMA1 stream1 global interrupt.
  * @param  None
  * @retval None
  **************************************************************/
void DMA1_Stream1_IRQHandler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001470:	4802      	ldr	r0, [pc, #8]	; (800147c <DMA1_Stream1_IRQHandler+0x10>)
 8001472:	f000 fc1b 	bl	8001cac <HAL_DMA_IRQHandler>
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20000578 	.word	0x20000578

08001480 <USART3_IRQHandler>:

/********************************************************
  * @brief This function handles USART3 interrupt.
  ******************************************************/
void USART3_IRQHandler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart3);
 8001486:	4826      	ldr	r0, [pc, #152]	; (8001520 <USART3_IRQHandler+0xa0>)
 8001488:	f004 fa0e 	bl	80058a8 <HAL_UART_IRQHandler>

	if(RESET != __HAL_UART_GET_FLAG(&huart3, UART_FLAG_IDLE))   //Judging whether it is idle interruption
 800148c:	4b24      	ldr	r3, [pc, #144]	; (8001520 <USART3_IRQHandler+0xa0>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0310 	and.w	r3, r3, #16
 8001496:	2b10      	cmp	r3, #16
 8001498:	d13d      	bne.n	8001516 <USART3_IRQHandler+0x96>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart3);                     //Clear idle interrupt sign (otherwise it will continue to enter interrupt)
 800149a:	2300      	movs	r3, #0
 800149c:	603b      	str	r3, [r7, #0]
 800149e:	4b20      	ldr	r3, [pc, #128]	; (8001520 <USART3_IRQHandler+0xa0>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	603b      	str	r3, [r7, #0]
 80014a6:	4b1e      	ldr	r3, [pc, #120]	; (8001520 <USART3_IRQHandler+0xa0>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	603b      	str	r3, [r7, #0]
 80014ae:	683b      	ldr	r3, [r7, #0]

		//Stop this DMA transmission
		HAL_UART_DMAStop(&huart3);
 80014b0:	481b      	ldr	r0, [pc, #108]	; (8001520 <USART3_IRQHandler+0xa0>)
 80014b2:	f004 f97a 	bl	80057aa <HAL_UART_DMAStop>

		//Calculate the length of the received data
		uint8_t data_length  = 255 - __HAL_DMA_GET_COUNTER(&hdma_usart3_rx);
 80014b6:	4b1b      	ldr	r3, [pc, #108]	; (8001524 <USART3_IRQHandler+0xa4>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	43db      	mvns	r3, r3
 80014c0:	71bb      	strb	r3, [r7, #6]


#if 1
		printf("UART3 Receive (%d) \r\n",data_length);
 80014c2:	79bb      	ldrb	r3, [r7, #6]
 80014c4:	4619      	mov	r1, r3
 80014c6:	4818      	ldr	r0, [pc, #96]	; (8001528 <USART3_IRQHandler+0xa8>)
 80014c8:	f008 f908 	bl	80096dc <iprintf>
		for(uint8_t i = 0; i < uart3_buff_len;i++)
 80014cc:	2300      	movs	r3, #0
 80014ce:	71fb      	strb	r3, [r7, #7]
 80014d0:	e00a      	b.n	80014e8 <USART3_IRQHandler+0x68>
			printf("[%d] : %c \r\n",i,uart3Rcv_buff[i]);
 80014d2:	79f9      	ldrb	r1, [r7, #7]
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	4a15      	ldr	r2, [pc, #84]	; (800152c <USART3_IRQHandler+0xac>)
 80014d8:	5cd3      	ldrb	r3, [r2, r3]
 80014da:	461a      	mov	r2, r3
 80014dc:	4814      	ldr	r0, [pc, #80]	; (8001530 <USART3_IRQHandler+0xb0>)
 80014de:	f008 f8fd 	bl	80096dc <iprintf>
		for(uint8_t i = 0; i < uart3_buff_len;i++)
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	3301      	adds	r3, #1
 80014e6:	71fb      	strb	r3, [r7, #7]
 80014e8:	4b12      	ldr	r3, [pc, #72]	; (8001534 <USART3_IRQHandler+0xb4>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	79fa      	ldrb	r2, [r7, #7]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d3ef      	bcc.n	80014d2 <USART3_IRQHandler+0x52>
		printf("\r\n");
 80014f2:	4811      	ldr	r0, [pc, #68]	; (8001538 <USART3_IRQHandler+0xb8>)
 80014f4:	f008 f978 	bl	80097e8 <puts>
		  //tinysh_char_in((unsigned char)single_char);
		}
#endif

		//Zero Receiving Buffer
		memset(uart3Rcv_buff, '\0', sizeof(uart3Rcv_buff));
 80014f8:	22ff      	movs	r2, #255	; 0xff
 80014fa:	2100      	movs	r1, #0
 80014fc:	480b      	ldr	r0, [pc, #44]	; (800152c <USART3_IRQHandler+0xac>)
 80014fe:	f008 f8e5 	bl	80096cc <memset>
		uart3_buff_len = data_length;
 8001502:	4a0c      	ldr	r2, [pc, #48]	; (8001534 <USART3_IRQHandler+0xb4>)
 8001504:	79bb      	ldrb	r3, [r7, #6]
 8001506:	7013      	strb	r3, [r2, #0]
		data_length = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	71bb      	strb	r3, [r7, #6]


		//Restart to start DMA transmission of 255 bytes of data at a time
		HAL_UART_Receive_DMA(&huart3, (uint8_t*)uart3Rcv_buff, UART3_RX_BUFFER_SIZE);
 800150c:	22ff      	movs	r2, #255	; 0xff
 800150e:	4907      	ldr	r1, [pc, #28]	; (800152c <USART3_IRQHandler+0xac>)
 8001510:	4803      	ldr	r0, [pc, #12]	; (8001520 <USART3_IRQHandler+0xa0>)
 8001512:	f004 f91a 	bl	800574a <HAL_UART_Receive_DMA>
	}
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	200005d8 	.word	0x200005d8
 8001524:	20000578 	.word	0x20000578
 8001528:	0800a880 	.word	0x0800a880
 800152c:	2000061c 	.word	0x2000061c
 8001530:	0800a898 	.word	0x0800a898
 8001534:	2000071b 	.word	0x2000071b
 8001538:	0800a8a8 	.word	0x0800a8a8

0800153c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]
 800154c:	e00a      	b.n	8001564 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800154e:	f3af 8000 	nop.w
 8001552:	4601      	mov	r1, r0
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	1c5a      	adds	r2, r3, #1
 8001558:	60ba      	str	r2, [r7, #8]
 800155a:	b2ca      	uxtb	r2, r1
 800155c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	3301      	adds	r3, #1
 8001562:	617b      	str	r3, [r7, #20]
 8001564:	697a      	ldr	r2, [r7, #20]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	429a      	cmp	r2, r3
 800156a:	dbf0      	blt.n	800154e <_read+0x12>
	}

return len;
 800156c:	687b      	ldr	r3, [r7, #4]
}
 800156e:	4618      	mov	r0, r3
 8001570:	3718      	adds	r7, #24
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b086      	sub	sp, #24
 800157a:	af00      	add	r7, sp, #0
 800157c:	60f8      	str	r0, [r7, #12]
 800157e:	60b9      	str	r1, [r7, #8]
 8001580:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001582:	2300      	movs	r3, #0
 8001584:	617b      	str	r3, [r7, #20]
 8001586:	e009      	b.n	800159c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	1c5a      	adds	r2, r3, #1
 800158c:	60ba      	str	r2, [r7, #8]
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff f819 	bl	80005c8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	3301      	adds	r3, #1
 800159a:	617b      	str	r3, [r7, #20]
 800159c:	697a      	ldr	r2, [r7, #20]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	dbf1      	blt.n	8001588 <_write+0x12>
	}
	return len;
 80015a4:	687b      	ldr	r3, [r7, #4]
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3718      	adds	r7, #24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <_close>:

int _close(int file)
{
 80015ae:	b480      	push	{r7}
 80015b0:	b083      	sub	sp, #12
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
	return -1;
 80015b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015c6:	b480      	push	{r7}
 80015c8:	b083      	sub	sp, #12
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
 80015ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015d6:	605a      	str	r2, [r3, #4]
	return 0;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <_isatty>:

int _isatty(int file)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b083      	sub	sp, #12
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
	return 1;
 80015ee:	2301      	movs	r3, #1
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
	return 0;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3714      	adds	r7, #20
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
	...

08001618 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001620:	4a14      	ldr	r2, [pc, #80]	; (8001674 <_sbrk+0x5c>)
 8001622:	4b15      	ldr	r3, [pc, #84]	; (8001678 <_sbrk+0x60>)
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800162c:	4b13      	ldr	r3, [pc, #76]	; (800167c <_sbrk+0x64>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d102      	bne.n	800163a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001634:	4b11      	ldr	r3, [pc, #68]	; (800167c <_sbrk+0x64>)
 8001636:	4a12      	ldr	r2, [pc, #72]	; (8001680 <_sbrk+0x68>)
 8001638:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800163a:	4b10      	ldr	r3, [pc, #64]	; (800167c <_sbrk+0x64>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4413      	add	r3, r2
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	429a      	cmp	r2, r3
 8001646:	d207      	bcs.n	8001658 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001648:	f008 f808 	bl	800965c <__errno>
 800164c:	4603      	mov	r3, r0
 800164e:	220c      	movs	r2, #12
 8001650:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001652:	f04f 33ff 	mov.w	r3, #4294967295
 8001656:	e009      	b.n	800166c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001658:	4b08      	ldr	r3, [pc, #32]	; (800167c <_sbrk+0x64>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800165e:	4b07      	ldr	r3, [pc, #28]	; (800167c <_sbrk+0x64>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4413      	add	r3, r2
 8001666:	4a05      	ldr	r2, [pc, #20]	; (800167c <_sbrk+0x64>)
 8001668:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800166a:	68fb      	ldr	r3, [r7, #12]
}
 800166c:	4618      	mov	r0, r3
 800166e:	3718      	adds	r7, #24
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	20030000 	.word	0x20030000
 8001678:	00000600 	.word	0x00000600
 800167c:	2000077c 	.word	0x2000077c
 8001680:	200044e8 	.word	0x200044e8

08001684 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001688:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <SystemInit+0x20>)
 800168a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800168e:	4a05      	ldr	r2, [pc, #20]	; (80016a4 <SystemInit+0x20>)
 8001690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	e000ed00 	.word	0xe000ed00

080016a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80016a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016e0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016ac:	480d      	ldr	r0, [pc, #52]	; (80016e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016ae:	490e      	ldr	r1, [pc, #56]	; (80016e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016b0:	4a0e      	ldr	r2, [pc, #56]	; (80016ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016b4:	e002      	b.n	80016bc <LoopCopyDataInit>

080016b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ba:	3304      	adds	r3, #4

080016bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016c0:	d3f9      	bcc.n	80016b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016c2:	4a0b      	ldr	r2, [pc, #44]	; (80016f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016c4:	4c0b      	ldr	r4, [pc, #44]	; (80016f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016c8:	e001      	b.n	80016ce <LoopFillZerobss>

080016ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016cc:	3204      	adds	r2, #4

080016ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016d0:	d3fb      	bcc.n	80016ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016d2:	f7ff ffd7 	bl	8001684 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016d6:	f007 ffc7 	bl	8009668 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016da:	f7fe ff87 	bl	80005ec <main>
  bx  lr    
 80016de:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80016e0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80016e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016e8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80016ec:	0800a97c 	.word	0x0800a97c
  ldr r2, =_sbss
 80016f0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80016f4:	200044e8 	.word	0x200044e8

080016f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016f8:	e7fe      	b.n	80016f8 <ADC_IRQHandler>
	...

080016fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001700:	4b0e      	ldr	r3, [pc, #56]	; (800173c <HAL_Init+0x40>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a0d      	ldr	r2, [pc, #52]	; (800173c <HAL_Init+0x40>)
 8001706:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800170a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800170c:	4b0b      	ldr	r3, [pc, #44]	; (800173c <HAL_Init+0x40>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a0a      	ldr	r2, [pc, #40]	; (800173c <HAL_Init+0x40>)
 8001712:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001716:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001718:	4b08      	ldr	r3, [pc, #32]	; (800173c <HAL_Init+0x40>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a07      	ldr	r2, [pc, #28]	; (800173c <HAL_Init+0x40>)
 800171e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001722:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001724:	2003      	movs	r0, #3
 8001726:	f000 f8d8 	bl	80018da <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800172a:	200f      	movs	r0, #15
 800172c:	f7ff fdd6 	bl	80012dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001730:	f7ff fb3c 	bl	8000dac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40023c00 	.word	0x40023c00

08001740 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <HAL_IncTick+0x20>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	461a      	mov	r2, r3
 800174a:	4b06      	ldr	r3, [pc, #24]	; (8001764 <HAL_IncTick+0x24>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4413      	add	r3, r2
 8001750:	4a04      	ldr	r2, [pc, #16]	; (8001764 <HAL_IncTick+0x24>)
 8001752:	6013      	str	r3, [r2, #0]
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	20000008 	.word	0x20000008
 8001764:	20000780 	.word	0x20000780

08001768 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  return uwTick;
 800176c:	4b03      	ldr	r3, [pc, #12]	; (800177c <HAL_GetTick+0x14>)
 800176e:	681b      	ldr	r3, [r3, #0]
}
 8001770:	4618      	mov	r0, r3
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	20000780 	.word	0x20000780

08001780 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001790:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800179c:	4013      	ands	r3, r2
 800179e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017b2:	4a04      	ldr	r2, [pc, #16]	; (80017c4 <__NVIC_SetPriorityGrouping+0x44>)
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	60d3      	str	r3, [r2, #12]
}
 80017b8:	bf00      	nop
 80017ba:	3714      	adds	r7, #20
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017cc:	4b04      	ldr	r3, [pc, #16]	; (80017e0 <__NVIC_GetPriorityGrouping+0x18>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	0a1b      	lsrs	r3, r3, #8
 80017d2:	f003 0307 	and.w	r3, r3, #7
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	db0b      	blt.n	800180e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	f003 021f 	and.w	r2, r3, #31
 80017fc:	4907      	ldr	r1, [pc, #28]	; (800181c <__NVIC_EnableIRQ+0x38>)
 80017fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001802:	095b      	lsrs	r3, r3, #5
 8001804:	2001      	movs	r0, #1
 8001806:	fa00 f202 	lsl.w	r2, r0, r2
 800180a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	e000e100 	.word	0xe000e100

08001820 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	6039      	str	r1, [r7, #0]
 800182a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800182c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001830:	2b00      	cmp	r3, #0
 8001832:	db0a      	blt.n	800184a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	b2da      	uxtb	r2, r3
 8001838:	490c      	ldr	r1, [pc, #48]	; (800186c <__NVIC_SetPriority+0x4c>)
 800183a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183e:	0112      	lsls	r2, r2, #4
 8001840:	b2d2      	uxtb	r2, r2
 8001842:	440b      	add	r3, r1
 8001844:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001848:	e00a      	b.n	8001860 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	b2da      	uxtb	r2, r3
 800184e:	4908      	ldr	r1, [pc, #32]	; (8001870 <__NVIC_SetPriority+0x50>)
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	f003 030f 	and.w	r3, r3, #15
 8001856:	3b04      	subs	r3, #4
 8001858:	0112      	lsls	r2, r2, #4
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	440b      	add	r3, r1
 800185e:	761a      	strb	r2, [r3, #24]
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	e000e100 	.word	0xe000e100
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001874:	b480      	push	{r7}
 8001876:	b089      	sub	sp, #36	; 0x24
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	f1c3 0307 	rsb	r3, r3, #7
 800188e:	2b04      	cmp	r3, #4
 8001890:	bf28      	it	cs
 8001892:	2304      	movcs	r3, #4
 8001894:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	3304      	adds	r3, #4
 800189a:	2b06      	cmp	r3, #6
 800189c:	d902      	bls.n	80018a4 <NVIC_EncodePriority+0x30>
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3b03      	subs	r3, #3
 80018a2:	e000      	b.n	80018a6 <NVIC_EncodePriority+0x32>
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a8:	f04f 32ff 	mov.w	r2, #4294967295
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	43da      	mvns	r2, r3
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	401a      	ands	r2, r3
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018bc:	f04f 31ff 	mov.w	r1, #4294967295
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	fa01 f303 	lsl.w	r3, r1, r3
 80018c6:	43d9      	mvns	r1, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018cc:	4313      	orrs	r3, r2
         );
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3724      	adds	r7, #36	; 0x24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f7ff ff4c 	bl	8001780 <__NVIC_SetPriorityGrouping>
}
 80018e8:	bf00      	nop
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
 80018fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018fe:	2300      	movs	r3, #0
 8001900:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001902:	f7ff ff61 	bl	80017c8 <__NVIC_GetPriorityGrouping>
 8001906:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	68b9      	ldr	r1, [r7, #8]
 800190c:	6978      	ldr	r0, [r7, #20]
 800190e:	f7ff ffb1 	bl	8001874 <NVIC_EncodePriority>
 8001912:	4602      	mov	r2, r0
 8001914:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001918:	4611      	mov	r1, r2
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff ff80 	bl	8001820 <__NVIC_SetPriority>
}
 8001920:	bf00      	nop
 8001922:	3718      	adds	r7, #24
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff ff54 	bl	80017e4 <__NVIC_EnableIRQ>
}
 800193c:	bf00      	nop
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d101      	bne.n	8001956 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e00e      	b.n	8001974 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	795b      	ldrb	r3, [r3, #5]
 800195a:	b2db      	uxtb	r3, r3
 800195c:	2b00      	cmp	r3, #0
 800195e:	d105      	bne.n	800196c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff fa4c 	bl	8000e04 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2201      	movs	r2, #1
 8001970:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001972:	2300      	movs	r3, #0
}
 8001974:	4618      	mov	r0, r3
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001988:	f7ff feee 	bl	8001768 <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d101      	bne.n	8001998 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e099      	b.n	8001acc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2202      	movs	r2, #2
 800199c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f022 0201 	bic.w	r2, r2, #1
 80019b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019b8:	e00f      	b.n	80019da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019ba:	f7ff fed5 	bl	8001768 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b05      	cmp	r3, #5
 80019c6:	d908      	bls.n	80019da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2220      	movs	r2, #32
 80019cc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2203      	movs	r2, #3
 80019d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e078      	b.n	8001acc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1e8      	bne.n	80019ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019f0:	697a      	ldr	r2, [r7, #20]
 80019f2:	4b38      	ldr	r3, [pc, #224]	; (8001ad4 <HAL_DMA_Init+0x158>)
 80019f4:	4013      	ands	r3, r2
 80019f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685a      	ldr	r2, [r3, #4]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a06:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	691b      	ldr	r3, [r3, #16]
 8001a0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a1b      	ldr	r3, [r3, #32]
 8001a24:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a26:	697a      	ldr	r2, [r7, #20]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a30:	2b04      	cmp	r3, #4
 8001a32:	d107      	bne.n	8001a44 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	697a      	ldr	r2, [r7, #20]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	697a      	ldr	r2, [r7, #20]
 8001a4a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	f023 0307 	bic.w	r3, r3, #7
 8001a5a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a60:	697a      	ldr	r2, [r7, #20]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6a:	2b04      	cmp	r3, #4
 8001a6c:	d117      	bne.n	8001a9e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a72:	697a      	ldr	r2, [r7, #20]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d00e      	beq.n	8001a9e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f000 fb0f 	bl	80020a4 <DMA_CheckFifoParam>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d008      	beq.n	8001a9e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2240      	movs	r2, #64	; 0x40
 8001a90:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2201      	movs	r2, #1
 8001a96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e016      	b.n	8001acc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f000 fac6 	bl	8002038 <DMA_CalcBaseAndBitshift>
 8001aac:	4603      	mov	r3, r0
 8001aae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ab4:	223f      	movs	r2, #63	; 0x3f
 8001ab6:	409a      	lsls	r2, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3718      	adds	r7, #24
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	f010803f 	.word	0xf010803f

08001ad8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
 8001ae4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d101      	bne.n	8001afe <HAL_DMA_Start_IT+0x26>
 8001afa:	2302      	movs	r3, #2
 8001afc:	e040      	b.n	8001b80 <HAL_DMA_Start_IT+0xa8>
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2201      	movs	r2, #1
 8001b02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d12f      	bne.n	8001b72 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2202      	movs	r2, #2
 8001b16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	68b9      	ldr	r1, [r7, #8]
 8001b26:	68f8      	ldr	r0, [r7, #12]
 8001b28:	f000 fa58 	bl	8001fdc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b30:	223f      	movs	r2, #63	; 0x3f
 8001b32:	409a      	lsls	r2, r3
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f042 0216 	orr.w	r2, r2, #22
 8001b46:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d007      	beq.n	8001b60 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f042 0208 	orr.w	r2, r2, #8
 8001b5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f042 0201 	orr.w	r2, r2, #1
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	e005      	b.n	8001b7e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3718      	adds	r7, #24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b94:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b96:	f7ff fde7 	bl	8001768 <HAL_GetTick>
 8001b9a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d008      	beq.n	8001bba <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2280      	movs	r2, #128	; 0x80
 8001bac:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e052      	b.n	8001c60 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f022 0216 	bic.w	r2, r2, #22
 8001bc8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	695a      	ldr	r2, [r3, #20]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bd8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d103      	bne.n	8001bea <HAL_DMA_Abort+0x62>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d007      	beq.n	8001bfa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f022 0208 	bic.w	r2, r2, #8
 8001bf8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f022 0201 	bic.w	r2, r2, #1
 8001c08:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c0a:	e013      	b.n	8001c34 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c0c:	f7ff fdac 	bl	8001768 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b05      	cmp	r3, #5
 8001c18:	d90c      	bls.n	8001c34 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2220      	movs	r2, #32
 8001c1e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2203      	movs	r2, #3
 8001c24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e015      	b.n	8001c60 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1e4      	bne.n	8001c0c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c46:	223f      	movs	r2, #63	; 0x3f
 8001c48:	409a      	lsls	r2, r3
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2201      	movs	r2, #1
 8001c52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3710      	adds	r7, #16
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d004      	beq.n	8001c86 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2280      	movs	r2, #128	; 0x80
 8001c80:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e00c      	b.n	8001ca0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2205      	movs	r2, #5
 8001c8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f022 0201 	bic.w	r2, r2, #1
 8001c9c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001cb8:	4b8e      	ldr	r3, [pc, #568]	; (8001ef4 <HAL_DMA_IRQHandler+0x248>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a8e      	ldr	r2, [pc, #568]	; (8001ef8 <HAL_DMA_IRQHandler+0x24c>)
 8001cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc2:	0a9b      	lsrs	r3, r3, #10
 8001cc4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd6:	2208      	movs	r2, #8
 8001cd8:	409a      	lsls	r2, r3
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d01a      	beq.n	8001d18 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0304 	and.w	r3, r3, #4
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d013      	beq.n	8001d18 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f022 0204 	bic.w	r2, r2, #4
 8001cfe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d04:	2208      	movs	r2, #8
 8001d06:	409a      	lsls	r2, r3
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d10:	f043 0201 	orr.w	r2, r3, #1
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	409a      	lsls	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	4013      	ands	r3, r2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d012      	beq.n	8001d4e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d00b      	beq.n	8001d4e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	409a      	lsls	r2, r3
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d46:	f043 0202 	orr.w	r2, r3, #2
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d52:	2204      	movs	r2, #4
 8001d54:	409a      	lsls	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d012      	beq.n	8001d84 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d00b      	beq.n	8001d84 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d70:	2204      	movs	r2, #4
 8001d72:	409a      	lsls	r2, r3
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d7c:	f043 0204 	orr.w	r2, r3, #4
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d88:	2210      	movs	r2, #16
 8001d8a:	409a      	lsls	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d043      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0308 	and.w	r3, r3, #8
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d03c      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da6:	2210      	movs	r2, #16
 8001da8:	409a      	lsls	r2, r3
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d018      	beq.n	8001dee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d108      	bne.n	8001ddc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d024      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	4798      	blx	r3
 8001dda:	e01f      	b.n	8001e1c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d01b      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	4798      	blx	r3
 8001dec:	e016      	b.n	8001e1c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d107      	bne.n	8001e0c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f022 0208 	bic.w	r2, r2, #8
 8001e0a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d003      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e20:	2220      	movs	r2, #32
 8001e22:	409a      	lsls	r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	4013      	ands	r3, r2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f000 808f 	beq.w	8001f4c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0310 	and.w	r3, r3, #16
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	f000 8087 	beq.w	8001f4c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e42:	2220      	movs	r2, #32
 8001e44:	409a      	lsls	r2, r3
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b05      	cmp	r3, #5
 8001e54:	d136      	bne.n	8001ec4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 0216 	bic.w	r2, r2, #22
 8001e64:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	695a      	ldr	r2, [r3, #20]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e74:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d103      	bne.n	8001e86 <HAL_DMA_IRQHandler+0x1da>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d007      	beq.n	8001e96 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 0208 	bic.w	r2, r2, #8
 8001e94:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e9a:	223f      	movs	r2, #63	; 0x3f
 8001e9c:	409a      	lsls	r2, r3
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d07e      	beq.n	8001fb8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	4798      	blx	r3
        }
        return;
 8001ec2:	e079      	b.n	8001fb8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d01d      	beq.n	8001f0e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d10d      	bne.n	8001efc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d031      	beq.n	8001f4c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	4798      	blx	r3
 8001ef0:	e02c      	b.n	8001f4c <HAL_DMA_IRQHandler+0x2a0>
 8001ef2:	bf00      	nop
 8001ef4:	20000000 	.word	0x20000000
 8001ef8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d023      	beq.n	8001f4c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	4798      	blx	r3
 8001f0c:	e01e      	b.n	8001f4c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d10f      	bne.n	8001f3c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 0210 	bic.w	r2, r2, #16
 8001f2a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d003      	beq.n	8001f4c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d032      	beq.n	8001fba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d022      	beq.n	8001fa6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2205      	movs	r2, #5
 8001f64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 0201 	bic.w	r2, r2, #1
 8001f76:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	60bb      	str	r3, [r7, #8]
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d307      	bcc.n	8001f94 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1f2      	bne.n	8001f78 <HAL_DMA_IRQHandler+0x2cc>
 8001f92:	e000      	b.n	8001f96 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001f94:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d005      	beq.n	8001fba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	4798      	blx	r3
 8001fb6:	e000      	b.n	8001fba <HAL_DMA_IRQHandler+0x30e>
        return;
 8001fb8:	bf00      	nop
    }
  }
}
 8001fba:	3718      	adds	r7, #24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fce:	b2db      	uxtb	r3, r3
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
 8001fe8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ff8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	2b40      	cmp	r3, #64	; 0x40
 8002008:	d108      	bne.n	800201c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68ba      	ldr	r2, [r7, #8]
 8002018:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800201a:	e007      	b.n	800202c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68ba      	ldr	r2, [r7, #8]
 8002022:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	60da      	str	r2, [r3, #12]
}
 800202c:	bf00      	nop
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	b2db      	uxtb	r3, r3
 8002046:	3b10      	subs	r3, #16
 8002048:	4a14      	ldr	r2, [pc, #80]	; (800209c <DMA_CalcBaseAndBitshift+0x64>)
 800204a:	fba2 2303 	umull	r2, r3, r2, r3
 800204e:	091b      	lsrs	r3, r3, #4
 8002050:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002052:	4a13      	ldr	r2, [pc, #76]	; (80020a0 <DMA_CalcBaseAndBitshift+0x68>)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4413      	add	r3, r2
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	461a      	mov	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2b03      	cmp	r3, #3
 8002064:	d909      	bls.n	800207a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800206e:	f023 0303 	bic.w	r3, r3, #3
 8002072:	1d1a      	adds	r2, r3, #4
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	659a      	str	r2, [r3, #88]	; 0x58
 8002078:	e007      	b.n	800208a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002082:	f023 0303 	bic.w	r3, r3, #3
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800208e:	4618      	mov	r0, r3
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	aaaaaaab 	.word	0xaaaaaaab
 80020a0:	0800a8cc 	.word	0x0800a8cc

080020a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020ac:	2300      	movs	r3, #0
 80020ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d11f      	bne.n	80020fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	2b03      	cmp	r3, #3
 80020c2:	d856      	bhi.n	8002172 <DMA_CheckFifoParam+0xce>
 80020c4:	a201      	add	r2, pc, #4	; (adr r2, 80020cc <DMA_CheckFifoParam+0x28>)
 80020c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ca:	bf00      	nop
 80020cc:	080020dd 	.word	0x080020dd
 80020d0:	080020ef 	.word	0x080020ef
 80020d4:	080020dd 	.word	0x080020dd
 80020d8:	08002173 	.word	0x08002173
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d046      	beq.n	8002176 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020ec:	e043      	b.n	8002176 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020f6:	d140      	bne.n	800217a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020fc:	e03d      	b.n	800217a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002106:	d121      	bne.n	800214c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	2b03      	cmp	r3, #3
 800210c:	d837      	bhi.n	800217e <DMA_CheckFifoParam+0xda>
 800210e:	a201      	add	r2, pc, #4	; (adr r2, 8002114 <DMA_CheckFifoParam+0x70>)
 8002110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002114:	08002125 	.word	0x08002125
 8002118:	0800212b 	.word	0x0800212b
 800211c:	08002125 	.word	0x08002125
 8002120:	0800213d 	.word	0x0800213d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	73fb      	strb	r3, [r7, #15]
      break;
 8002128:	e030      	b.n	800218c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d025      	beq.n	8002182 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800213a:	e022      	b.n	8002182 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002140:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002144:	d11f      	bne.n	8002186 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800214a:	e01c      	b.n	8002186 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	2b02      	cmp	r3, #2
 8002150:	d903      	bls.n	800215a <DMA_CheckFifoParam+0xb6>
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	2b03      	cmp	r3, #3
 8002156:	d003      	beq.n	8002160 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002158:	e018      	b.n	800218c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	73fb      	strb	r3, [r7, #15]
      break;
 800215e:	e015      	b.n	800218c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002164:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00e      	beq.n	800218a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	73fb      	strb	r3, [r7, #15]
      break;
 8002170:	e00b      	b.n	800218a <DMA_CheckFifoParam+0xe6>
      break;
 8002172:	bf00      	nop
 8002174:	e00a      	b.n	800218c <DMA_CheckFifoParam+0xe8>
      break;
 8002176:	bf00      	nop
 8002178:	e008      	b.n	800218c <DMA_CheckFifoParam+0xe8>
      break;
 800217a:	bf00      	nop
 800217c:	e006      	b.n	800218c <DMA_CheckFifoParam+0xe8>
      break;
 800217e:	bf00      	nop
 8002180:	e004      	b.n	800218c <DMA_CheckFifoParam+0xe8>
      break;
 8002182:	bf00      	nop
 8002184:	e002      	b.n	800218c <DMA_CheckFifoParam+0xe8>
      break;   
 8002186:	bf00      	nop
 8002188:	e000      	b.n	800218c <DMA_CheckFifoParam+0xe8>
      break;
 800218a:	bf00      	nop
    }
  } 
  
  return status; 
 800218c:	7bfb      	ldrb	r3, [r7, #15]
}
 800218e:	4618      	mov	r0, r3
 8002190:	3714      	adds	r7, #20
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop

0800219c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800219c:	b480      	push	{r7}
 800219e:	b089      	sub	sp, #36	; 0x24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021a6:	2300      	movs	r3, #0
 80021a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021aa:	2300      	movs	r3, #0
 80021ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021b2:	2300      	movs	r3, #0
 80021b4:	61fb      	str	r3, [r7, #28]
 80021b6:	e177      	b.n	80024a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021b8:	2201      	movs	r2, #1
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	4013      	ands	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	f040 8166 	bne.w	80024a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f003 0303 	and.w	r3, r3, #3
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d005      	beq.n	80021ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d130      	bne.n	8002250 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	2203      	movs	r2, #3
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	43db      	mvns	r3, r3
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	4013      	ands	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	68da      	ldr	r2, [r3, #12]
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4313      	orrs	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002224:	2201      	movs	r2, #1
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	43db      	mvns	r3, r3
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4013      	ands	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	091b      	lsrs	r3, r3, #4
 800223a:	f003 0201 	and.w	r2, r3, #1
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4313      	orrs	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f003 0303 	and.w	r3, r3, #3
 8002258:	2b03      	cmp	r3, #3
 800225a:	d017      	beq.n	800228c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	2203      	movs	r2, #3
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4313      	orrs	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f003 0303 	and.w	r3, r3, #3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d123      	bne.n	80022e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	08da      	lsrs	r2, r3, #3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3208      	adds	r2, #8
 80022a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	220f      	movs	r2, #15
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	43db      	mvns	r3, r3
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4013      	ands	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	691a      	ldr	r2, [r3, #16]
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	08da      	lsrs	r2, r3, #3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	3208      	adds	r2, #8
 80022da:	69b9      	ldr	r1, [r7, #24]
 80022dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	2203      	movs	r2, #3
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	43db      	mvns	r3, r3
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	4013      	ands	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f003 0203 	and.w	r2, r3, #3
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4313      	orrs	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 80c0 	beq.w	80024a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	60fb      	str	r3, [r7, #12]
 8002326:	4b66      	ldr	r3, [pc, #408]	; (80024c0 <HAL_GPIO_Init+0x324>)
 8002328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232a:	4a65      	ldr	r2, [pc, #404]	; (80024c0 <HAL_GPIO_Init+0x324>)
 800232c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002330:	6453      	str	r3, [r2, #68]	; 0x44
 8002332:	4b63      	ldr	r3, [pc, #396]	; (80024c0 <HAL_GPIO_Init+0x324>)
 8002334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002336:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800233e:	4a61      	ldr	r2, [pc, #388]	; (80024c4 <HAL_GPIO_Init+0x328>)
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	089b      	lsrs	r3, r3, #2
 8002344:	3302      	adds	r3, #2
 8002346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800234a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	f003 0303 	and.w	r3, r3, #3
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	220f      	movs	r2, #15
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4013      	ands	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a58      	ldr	r2, [pc, #352]	; (80024c8 <HAL_GPIO_Init+0x32c>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d037      	beq.n	80023da <HAL_GPIO_Init+0x23e>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a57      	ldr	r2, [pc, #348]	; (80024cc <HAL_GPIO_Init+0x330>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d031      	beq.n	80023d6 <HAL_GPIO_Init+0x23a>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a56      	ldr	r2, [pc, #344]	; (80024d0 <HAL_GPIO_Init+0x334>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d02b      	beq.n	80023d2 <HAL_GPIO_Init+0x236>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a55      	ldr	r2, [pc, #340]	; (80024d4 <HAL_GPIO_Init+0x338>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d025      	beq.n	80023ce <HAL_GPIO_Init+0x232>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a54      	ldr	r2, [pc, #336]	; (80024d8 <HAL_GPIO_Init+0x33c>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d01f      	beq.n	80023ca <HAL_GPIO_Init+0x22e>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a53      	ldr	r2, [pc, #332]	; (80024dc <HAL_GPIO_Init+0x340>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d019      	beq.n	80023c6 <HAL_GPIO_Init+0x22a>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a52      	ldr	r2, [pc, #328]	; (80024e0 <HAL_GPIO_Init+0x344>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d013      	beq.n	80023c2 <HAL_GPIO_Init+0x226>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a51      	ldr	r2, [pc, #324]	; (80024e4 <HAL_GPIO_Init+0x348>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d00d      	beq.n	80023be <HAL_GPIO_Init+0x222>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a50      	ldr	r2, [pc, #320]	; (80024e8 <HAL_GPIO_Init+0x34c>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d007      	beq.n	80023ba <HAL_GPIO_Init+0x21e>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a4f      	ldr	r2, [pc, #316]	; (80024ec <HAL_GPIO_Init+0x350>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d101      	bne.n	80023b6 <HAL_GPIO_Init+0x21a>
 80023b2:	2309      	movs	r3, #9
 80023b4:	e012      	b.n	80023dc <HAL_GPIO_Init+0x240>
 80023b6:	230a      	movs	r3, #10
 80023b8:	e010      	b.n	80023dc <HAL_GPIO_Init+0x240>
 80023ba:	2308      	movs	r3, #8
 80023bc:	e00e      	b.n	80023dc <HAL_GPIO_Init+0x240>
 80023be:	2307      	movs	r3, #7
 80023c0:	e00c      	b.n	80023dc <HAL_GPIO_Init+0x240>
 80023c2:	2306      	movs	r3, #6
 80023c4:	e00a      	b.n	80023dc <HAL_GPIO_Init+0x240>
 80023c6:	2305      	movs	r3, #5
 80023c8:	e008      	b.n	80023dc <HAL_GPIO_Init+0x240>
 80023ca:	2304      	movs	r3, #4
 80023cc:	e006      	b.n	80023dc <HAL_GPIO_Init+0x240>
 80023ce:	2303      	movs	r3, #3
 80023d0:	e004      	b.n	80023dc <HAL_GPIO_Init+0x240>
 80023d2:	2302      	movs	r3, #2
 80023d4:	e002      	b.n	80023dc <HAL_GPIO_Init+0x240>
 80023d6:	2301      	movs	r3, #1
 80023d8:	e000      	b.n	80023dc <HAL_GPIO_Init+0x240>
 80023da:	2300      	movs	r3, #0
 80023dc:	69fa      	ldr	r2, [r7, #28]
 80023de:	f002 0203 	and.w	r2, r2, #3
 80023e2:	0092      	lsls	r2, r2, #2
 80023e4:	4093      	lsls	r3, r2
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023ec:	4935      	ldr	r1, [pc, #212]	; (80024c4 <HAL_GPIO_Init+0x328>)
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	089b      	lsrs	r3, r3, #2
 80023f2:	3302      	adds	r3, #2
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023fa:	4b3d      	ldr	r3, [pc, #244]	; (80024f0 <HAL_GPIO_Init+0x354>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	43db      	mvns	r3, r3
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	4013      	ands	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	4313      	orrs	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800241e:	4a34      	ldr	r2, [pc, #208]	; (80024f0 <HAL_GPIO_Init+0x354>)
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002424:	4b32      	ldr	r3, [pc, #200]	; (80024f0 <HAL_GPIO_Init+0x354>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	43db      	mvns	r3, r3
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	4013      	ands	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d003      	beq.n	8002448 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	4313      	orrs	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002448:	4a29      	ldr	r2, [pc, #164]	; (80024f0 <HAL_GPIO_Init+0x354>)
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800244e:	4b28      	ldr	r3, [pc, #160]	; (80024f0 <HAL_GPIO_Init+0x354>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	43db      	mvns	r3, r3
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	4013      	ands	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d003      	beq.n	8002472 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	4313      	orrs	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002472:	4a1f      	ldr	r2, [pc, #124]	; (80024f0 <HAL_GPIO_Init+0x354>)
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002478:	4b1d      	ldr	r3, [pc, #116]	; (80024f0 <HAL_GPIO_Init+0x354>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	43db      	mvns	r3, r3
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	4013      	ands	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d003      	beq.n	800249c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	4313      	orrs	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800249c:	4a14      	ldr	r2, [pc, #80]	; (80024f0 <HAL_GPIO_Init+0x354>)
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	3301      	adds	r3, #1
 80024a6:	61fb      	str	r3, [r7, #28]
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	2b0f      	cmp	r3, #15
 80024ac:	f67f ae84 	bls.w	80021b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024b0:	bf00      	nop
 80024b2:	bf00      	nop
 80024b4:	3724      	adds	r7, #36	; 0x24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	40023800 	.word	0x40023800
 80024c4:	40013800 	.word	0x40013800
 80024c8:	40020000 	.word	0x40020000
 80024cc:	40020400 	.word	0x40020400
 80024d0:	40020800 	.word	0x40020800
 80024d4:	40020c00 	.word	0x40020c00
 80024d8:	40021000 	.word	0x40021000
 80024dc:	40021400 	.word	0x40021400
 80024e0:	40021800 	.word	0x40021800
 80024e4:	40021c00 	.word	0x40021c00
 80024e8:	40022000 	.word	0x40022000
 80024ec:	40022400 	.word	0x40022400
 80024f0:	40013c00 	.word	0x40013c00

080024f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	460b      	mov	r3, r1
 80024fe:	807b      	strh	r3, [r7, #2]
 8002500:	4613      	mov	r3, r2
 8002502:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002504:	787b      	ldrb	r3, [r7, #1]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800250a:	887a      	ldrh	r2, [r7, #2]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002510:	e003      	b.n	800251a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002512:	887b      	ldrh	r3, [r7, #2]
 8002514:	041a      	lsls	r2, r3, #16
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	619a      	str	r2, [r3, #24]
}
 800251a:	bf00      	nop
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr

08002526 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002526:	b480      	push	{r7}
 8002528:	b085      	sub	sp, #20
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
 800252e:	460b      	mov	r3, r1
 8002530:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002538:	887a      	ldrh	r2, [r7, #2]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	4013      	ands	r3, r2
 800253e:	041a      	lsls	r2, r3, #16
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	43d9      	mvns	r1, r3
 8002544:	887b      	ldrh	r3, [r7, #2]
 8002546:	400b      	ands	r3, r1
 8002548:	431a      	orrs	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	619a      	str	r2, [r3, #24]
}
 800254e:	bf00      	nop
 8002550:	3714      	adds	r7, #20
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
	...

0800255c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	4603      	mov	r3, r0
 8002564:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002566:	4b08      	ldr	r3, [pc, #32]	; (8002588 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002568:	695a      	ldr	r2, [r3, #20]
 800256a:	88fb      	ldrh	r3, [r7, #6]
 800256c:	4013      	ands	r3, r2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d006      	beq.n	8002580 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002572:	4a05      	ldr	r2, [pc, #20]	; (8002588 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002574:	88fb      	ldrh	r3, [r7, #6]
 8002576:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002578:	88fb      	ldrh	r3, [r7, #6]
 800257a:	4618      	mov	r0, r3
 800257c:	f7fe fbdc 	bl	8000d38 <HAL_GPIO_EXTI_Callback>
  }
}
 8002580:	bf00      	nop
 8002582:	3708      	adds	r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40013c00 	.word	0x40013c00

0800258c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d101      	bne.n	800259e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e12b      	b.n	80027f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d106      	bne.n	80025b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f7fe fc48 	bl	8000e48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2224      	movs	r2, #36	; 0x24
 80025bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f022 0201 	bic.w	r2, r2, #1
 80025ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025f0:	f002 fb1c 	bl	8004c2c <HAL_RCC_GetPCLK1Freq>
 80025f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	4a81      	ldr	r2, [pc, #516]	; (8002800 <HAL_I2C_Init+0x274>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d807      	bhi.n	8002610 <HAL_I2C_Init+0x84>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	4a80      	ldr	r2, [pc, #512]	; (8002804 <HAL_I2C_Init+0x278>)
 8002604:	4293      	cmp	r3, r2
 8002606:	bf94      	ite	ls
 8002608:	2301      	movls	r3, #1
 800260a:	2300      	movhi	r3, #0
 800260c:	b2db      	uxtb	r3, r3
 800260e:	e006      	b.n	800261e <HAL_I2C_Init+0x92>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	4a7d      	ldr	r2, [pc, #500]	; (8002808 <HAL_I2C_Init+0x27c>)
 8002614:	4293      	cmp	r3, r2
 8002616:	bf94      	ite	ls
 8002618:	2301      	movls	r3, #1
 800261a:	2300      	movhi	r3, #0
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e0e7      	b.n	80027f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	4a78      	ldr	r2, [pc, #480]	; (800280c <HAL_I2C_Init+0x280>)
 800262a:	fba2 2303 	umull	r2, r3, r2, r3
 800262e:	0c9b      	lsrs	r3, r3, #18
 8002630:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68ba      	ldr	r2, [r7, #8]
 8002642:	430a      	orrs	r2, r1
 8002644:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	6a1b      	ldr	r3, [r3, #32]
 800264c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	4a6a      	ldr	r2, [pc, #424]	; (8002800 <HAL_I2C_Init+0x274>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d802      	bhi.n	8002660 <HAL_I2C_Init+0xd4>
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	3301      	adds	r3, #1
 800265e:	e009      	b.n	8002674 <HAL_I2C_Init+0xe8>
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002666:	fb02 f303 	mul.w	r3, r2, r3
 800266a:	4a69      	ldr	r2, [pc, #420]	; (8002810 <HAL_I2C_Init+0x284>)
 800266c:	fba2 2303 	umull	r2, r3, r2, r3
 8002670:	099b      	lsrs	r3, r3, #6
 8002672:	3301      	adds	r3, #1
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	6812      	ldr	r2, [r2, #0]
 8002678:	430b      	orrs	r3, r1
 800267a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002686:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	495c      	ldr	r1, [pc, #368]	; (8002800 <HAL_I2C_Init+0x274>)
 8002690:	428b      	cmp	r3, r1
 8002692:	d819      	bhi.n	80026c8 <HAL_I2C_Init+0x13c>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	1e59      	subs	r1, r3, #1
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	fbb1 f3f3 	udiv	r3, r1, r3
 80026a2:	1c59      	adds	r1, r3, #1
 80026a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80026a8:	400b      	ands	r3, r1
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00a      	beq.n	80026c4 <HAL_I2C_Init+0x138>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	1e59      	subs	r1, r3, #1
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80026bc:	3301      	adds	r3, #1
 80026be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026c2:	e051      	b.n	8002768 <HAL_I2C_Init+0x1dc>
 80026c4:	2304      	movs	r3, #4
 80026c6:	e04f      	b.n	8002768 <HAL_I2C_Init+0x1dc>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d111      	bne.n	80026f4 <HAL_I2C_Init+0x168>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	1e58      	subs	r0, r3, #1
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6859      	ldr	r1, [r3, #4]
 80026d8:	460b      	mov	r3, r1
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	440b      	add	r3, r1
 80026de:	fbb0 f3f3 	udiv	r3, r0, r3
 80026e2:	3301      	adds	r3, #1
 80026e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	bf0c      	ite	eq
 80026ec:	2301      	moveq	r3, #1
 80026ee:	2300      	movne	r3, #0
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	e012      	b.n	800271a <HAL_I2C_Init+0x18e>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	1e58      	subs	r0, r3, #1
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6859      	ldr	r1, [r3, #4]
 80026fc:	460b      	mov	r3, r1
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	440b      	add	r3, r1
 8002702:	0099      	lsls	r1, r3, #2
 8002704:	440b      	add	r3, r1
 8002706:	fbb0 f3f3 	udiv	r3, r0, r3
 800270a:	3301      	adds	r3, #1
 800270c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002710:	2b00      	cmp	r3, #0
 8002712:	bf0c      	ite	eq
 8002714:	2301      	moveq	r3, #1
 8002716:	2300      	movne	r3, #0
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <HAL_I2C_Init+0x196>
 800271e:	2301      	movs	r3, #1
 8002720:	e022      	b.n	8002768 <HAL_I2C_Init+0x1dc>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10e      	bne.n	8002748 <HAL_I2C_Init+0x1bc>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	1e58      	subs	r0, r3, #1
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6859      	ldr	r1, [r3, #4]
 8002732:	460b      	mov	r3, r1
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	440b      	add	r3, r1
 8002738:	fbb0 f3f3 	udiv	r3, r0, r3
 800273c:	3301      	adds	r3, #1
 800273e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002742:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002746:	e00f      	b.n	8002768 <HAL_I2C_Init+0x1dc>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	1e58      	subs	r0, r3, #1
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6859      	ldr	r1, [r3, #4]
 8002750:	460b      	mov	r3, r1
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	440b      	add	r3, r1
 8002756:	0099      	lsls	r1, r3, #2
 8002758:	440b      	add	r3, r1
 800275a:	fbb0 f3f3 	udiv	r3, r0, r3
 800275e:	3301      	adds	r3, #1
 8002760:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002764:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002768:	6879      	ldr	r1, [r7, #4]
 800276a:	6809      	ldr	r1, [r1, #0]
 800276c:	4313      	orrs	r3, r2
 800276e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69da      	ldr	r2, [r3, #28]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	431a      	orrs	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	430a      	orrs	r2, r1
 800278a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002796:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	6911      	ldr	r1, [r2, #16]
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	68d2      	ldr	r2, [r2, #12]
 80027a2:	4311      	orrs	r1, r2
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	6812      	ldr	r2, [r2, #0]
 80027a8:	430b      	orrs	r3, r1
 80027aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	695a      	ldr	r2, [r3, #20]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	431a      	orrs	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	430a      	orrs	r2, r1
 80027c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f042 0201 	orr.w	r2, r2, #1
 80027d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2220      	movs	r2, #32
 80027e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	000186a0 	.word	0x000186a0
 8002804:	001e847f 	.word	0x001e847f
 8002808:	003d08ff 	.word	0x003d08ff
 800280c:	431bde83 	.word	0x431bde83
 8002810:	10624dd3 	.word	0x10624dd3

08002814 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b088      	sub	sp, #32
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800281c:	2300      	movs	r3, #0
 800281e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002834:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800283c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800283e:	7bfb      	ldrb	r3, [r7, #15]
 8002840:	2b10      	cmp	r3, #16
 8002842:	d003      	beq.n	800284c <HAL_I2C_EV_IRQHandler+0x38>
 8002844:	7bfb      	ldrb	r3, [r7, #15]
 8002846:	2b40      	cmp	r3, #64	; 0x40
 8002848:	f040 80c1 	bne.w	80029ce <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d10d      	bne.n	8002882 <HAL_I2C_EV_IRQHandler+0x6e>
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800286c:	d003      	beq.n	8002876 <HAL_I2C_EV_IRQHandler+0x62>
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002874:	d101      	bne.n	800287a <HAL_I2C_EV_IRQHandler+0x66>
 8002876:	2301      	movs	r3, #1
 8002878:	e000      	b.n	800287c <HAL_I2C_EV_IRQHandler+0x68>
 800287a:	2300      	movs	r3, #0
 800287c:	2b01      	cmp	r3, #1
 800287e:	f000 8132 	beq.w	8002ae6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	2b00      	cmp	r3, #0
 800288a:	d00c      	beq.n	80028a6 <HAL_I2C_EV_IRQHandler+0x92>
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	0a5b      	lsrs	r3, r3, #9
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	2b00      	cmp	r3, #0
 8002896:	d006      	beq.n	80028a6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f001 fc71 	bl	8004180 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 fd79 	bl	8003396 <I2C_Master_SB>
 80028a4:	e092      	b.n	80029cc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	08db      	lsrs	r3, r3, #3
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d009      	beq.n	80028c6 <HAL_I2C_EV_IRQHandler+0xb2>
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	0a5b      	lsrs	r3, r3, #9
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d003      	beq.n	80028c6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 fdef 	bl	80034a2 <I2C_Master_ADD10>
 80028c4:	e082      	b.n	80029cc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	085b      	lsrs	r3, r3, #1
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d009      	beq.n	80028e6 <HAL_I2C_EV_IRQHandler+0xd2>
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	0a5b      	lsrs	r3, r3, #9
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d003      	beq.n	80028e6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 fe09 	bl	80034f6 <I2C_Master_ADDR>
 80028e4:	e072      	b.n	80029cc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	089b      	lsrs	r3, r3, #2
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d03b      	beq.n	800296a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002900:	f000 80f3 	beq.w	8002aea <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	09db      	lsrs	r3, r3, #7
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00f      	beq.n	8002930 <HAL_I2C_EV_IRQHandler+0x11c>
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	0a9b      	lsrs	r3, r3, #10
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	2b00      	cmp	r3, #0
 800291a:	d009      	beq.n	8002930 <HAL_I2C_EV_IRQHandler+0x11c>
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	089b      	lsrs	r3, r3, #2
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	2b00      	cmp	r3, #0
 8002926:	d103      	bne.n	8002930 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 f9f3 	bl	8002d14 <I2C_MasterTransmit_TXE>
 800292e:	e04d      	b.n	80029cc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	089b      	lsrs	r3, r3, #2
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	2b00      	cmp	r3, #0
 800293a:	f000 80d6 	beq.w	8002aea <HAL_I2C_EV_IRQHandler+0x2d6>
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	0a5b      	lsrs	r3, r3, #9
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	2b00      	cmp	r3, #0
 8002948:	f000 80cf 	beq.w	8002aea <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800294c:	7bbb      	ldrb	r3, [r7, #14]
 800294e:	2b21      	cmp	r3, #33	; 0x21
 8002950:	d103      	bne.n	800295a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 fa7a 	bl	8002e4c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002958:	e0c7      	b.n	8002aea <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800295a:	7bfb      	ldrb	r3, [r7, #15]
 800295c:	2b40      	cmp	r3, #64	; 0x40
 800295e:	f040 80c4 	bne.w	8002aea <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f000 fae8 	bl	8002f38 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002968:	e0bf      	b.n	8002aea <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002974:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002978:	f000 80b7 	beq.w	8002aea <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	099b      	lsrs	r3, r3, #6
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00f      	beq.n	80029a8 <HAL_I2C_EV_IRQHandler+0x194>
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	0a9b      	lsrs	r3, r3, #10
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	2b00      	cmp	r3, #0
 8002992:	d009      	beq.n	80029a8 <HAL_I2C_EV_IRQHandler+0x194>
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	089b      	lsrs	r3, r3, #2
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	2b00      	cmp	r3, #0
 800299e:	d103      	bne.n	80029a8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 fb5d 	bl	8003060 <I2C_MasterReceive_RXNE>
 80029a6:	e011      	b.n	80029cc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	089b      	lsrs	r3, r3, #2
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f000 809a 	beq.w	8002aea <HAL_I2C_EV_IRQHandler+0x2d6>
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	0a5b      	lsrs	r3, r3, #9
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f000 8093 	beq.w	8002aea <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f000 fbfc 	bl	80031c2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029ca:	e08e      	b.n	8002aea <HAL_I2C_EV_IRQHandler+0x2d6>
 80029cc:	e08d      	b.n	8002aea <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d004      	beq.n	80029e0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	695b      	ldr	r3, [r3, #20]
 80029dc:	61fb      	str	r3, [r7, #28]
 80029de:	e007      	b.n	80029f0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	085b      	lsrs	r3, r3, #1
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d012      	beq.n	8002a22 <HAL_I2C_EV_IRQHandler+0x20e>
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	0a5b      	lsrs	r3, r3, #9
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00c      	beq.n	8002a22 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d003      	beq.n	8002a18 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002a18:	69b9      	ldr	r1, [r7, #24]
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 ffba 	bl	8003994 <I2C_Slave_ADDR>
 8002a20:	e066      	b.n	8002af0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	091b      	lsrs	r3, r3, #4
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d009      	beq.n	8002a42 <HAL_I2C_EV_IRQHandler+0x22e>
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	0a5b      	lsrs	r3, r3, #9
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 fff4 	bl	8003a28 <I2C_Slave_STOPF>
 8002a40:	e056      	b.n	8002af0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002a42:	7bbb      	ldrb	r3, [r7, #14]
 8002a44:	2b21      	cmp	r3, #33	; 0x21
 8002a46:	d002      	beq.n	8002a4e <HAL_I2C_EV_IRQHandler+0x23a>
 8002a48:	7bbb      	ldrb	r3, [r7, #14]
 8002a4a:	2b29      	cmp	r3, #41	; 0x29
 8002a4c:	d125      	bne.n	8002a9a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	09db      	lsrs	r3, r3, #7
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00f      	beq.n	8002a7a <HAL_I2C_EV_IRQHandler+0x266>
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	0a9b      	lsrs	r3, r3, #10
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d009      	beq.n	8002a7a <HAL_I2C_EV_IRQHandler+0x266>
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	089b      	lsrs	r3, r3, #2
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d103      	bne.n	8002a7a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 fed0 	bl	8003818 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a78:	e039      	b.n	8002aee <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	089b      	lsrs	r3, r3, #2
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d033      	beq.n	8002aee <HAL_I2C_EV_IRQHandler+0x2da>
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	0a5b      	lsrs	r3, r3, #9
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d02d      	beq.n	8002aee <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 fefd 	bl	8003892 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a98:	e029      	b.n	8002aee <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	099b      	lsrs	r3, r3, #6
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00f      	beq.n	8002ac6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	0a9b      	lsrs	r3, r3, #10
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d009      	beq.n	8002ac6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	089b      	lsrs	r3, r3, #2
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d103      	bne.n	8002ac6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 ff08 	bl	80038d4 <I2C_SlaveReceive_RXNE>
 8002ac4:	e014      	b.n	8002af0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	089b      	lsrs	r3, r3, #2
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00e      	beq.n	8002af0 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	0a5b      	lsrs	r3, r3, #9
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d008      	beq.n	8002af0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 ff36 	bl	8003950 <I2C_SlaveReceive_BTF>
 8002ae4:	e004      	b.n	8002af0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002ae6:	bf00      	nop
 8002ae8:	e002      	b.n	8002af0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002aea:	bf00      	nop
 8002aec:	e000      	b.n	8002af0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002aee:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002af0:	3720      	adds	r7, #32
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b08a      	sub	sp, #40	; 0x28
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	695b      	ldr	r3, [r3, #20]
 8002b04:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b18:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002b1a:	6a3b      	ldr	r3, [r7, #32]
 8002b1c:	0a1b      	lsrs	r3, r3, #8
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00e      	beq.n	8002b44 <HAL_I2C_ER_IRQHandler+0x4e>
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	0a1b      	lsrs	r3, r3, #8
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d008      	beq.n	8002b44 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b34:	f043 0301 	orr.w	r3, r3, #1
 8002b38:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002b42:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002b44:	6a3b      	ldr	r3, [r7, #32]
 8002b46:	0a5b      	lsrs	r3, r3, #9
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00e      	beq.n	8002b6e <HAL_I2C_ER_IRQHandler+0x78>
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	0a1b      	lsrs	r3, r3, #8
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d008      	beq.n	8002b6e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5e:	f043 0302 	orr.w	r3, r3, #2
 8002b62:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002b6c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002b6e:	6a3b      	ldr	r3, [r7, #32]
 8002b70:	0a9b      	lsrs	r3, r3, #10
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d03f      	beq.n	8002bfa <HAL_I2C_ER_IRQHandler+0x104>
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	0a1b      	lsrs	r3, r3, #8
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d039      	beq.n	8002bfa <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8002b86:	7efb      	ldrb	r3, [r7, #27]
 8002b88:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b98:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002ba0:	7ebb      	ldrb	r3, [r7, #26]
 8002ba2:	2b20      	cmp	r3, #32
 8002ba4:	d112      	bne.n	8002bcc <HAL_I2C_ER_IRQHandler+0xd6>
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d10f      	bne.n	8002bcc <HAL_I2C_ER_IRQHandler+0xd6>
 8002bac:	7cfb      	ldrb	r3, [r7, #19]
 8002bae:	2b21      	cmp	r3, #33	; 0x21
 8002bb0:	d008      	beq.n	8002bc4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002bb2:	7cfb      	ldrb	r3, [r7, #19]
 8002bb4:	2b29      	cmp	r3, #41	; 0x29
 8002bb6:	d005      	beq.n	8002bc4 <HAL_I2C_ER_IRQHandler+0xce>
 8002bb8:	7cfb      	ldrb	r3, [r7, #19]
 8002bba:	2b28      	cmp	r3, #40	; 0x28
 8002bbc:	d106      	bne.n	8002bcc <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2b21      	cmp	r3, #33	; 0x21
 8002bc2:	d103      	bne.n	8002bcc <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f001 f85f 	bl	8003c88 <I2C_Slave_AF>
 8002bca:	e016      	b.n	8002bfa <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002bd4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd8:	f043 0304 	orr.w	r3, r3, #4
 8002bdc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002bde:	7efb      	ldrb	r3, [r7, #27]
 8002be0:	2b10      	cmp	r3, #16
 8002be2:	d002      	beq.n	8002bea <HAL_I2C_ER_IRQHandler+0xf4>
 8002be4:	7efb      	ldrb	r3, [r7, #27]
 8002be6:	2b40      	cmp	r3, #64	; 0x40
 8002be8:	d107      	bne.n	8002bfa <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bf8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002bfa:	6a3b      	ldr	r3, [r7, #32]
 8002bfc:	0adb      	lsrs	r3, r3, #11
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00e      	beq.n	8002c24 <HAL_I2C_ER_IRQHandler+0x12e>
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	0a1b      	lsrs	r3, r3, #8
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d008      	beq.n	8002c24 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c14:	f043 0308 	orr.w	r3, r3, #8
 8002c18:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002c22:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d008      	beq.n	8002c3c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c30:	431a      	orrs	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f001 f896 	bl	8003d68 <I2C_ITError>
  }
}
 8002c3c:	bf00      	nop
 8002c3e:	3728      	adds	r7, #40	; 0x28
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	70fb      	strb	r3, [r7, #3]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d22:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d2a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d30:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d150      	bne.n	8002ddc <I2C_MasterTransmit_TXE+0xc8>
 8002d3a:	7bfb      	ldrb	r3, [r7, #15]
 8002d3c:	2b21      	cmp	r3, #33	; 0x21
 8002d3e:	d14d      	bne.n	8002ddc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	2b08      	cmp	r3, #8
 8002d44:	d01d      	beq.n	8002d82 <I2C_MasterTransmit_TXE+0x6e>
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	2b20      	cmp	r3, #32
 8002d4a:	d01a      	beq.n	8002d82 <I2C_MasterTransmit_TXE+0x6e>
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d52:	d016      	beq.n	8002d82 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d62:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2211      	movs	r2, #17
 8002d68:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2220      	movs	r2, #32
 8002d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f7ff ff62 	bl	8002c44 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002d80:	e060      	b.n	8002e44 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	685a      	ldr	r2, [r3, #4]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d90:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002da0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2220      	movs	r2, #32
 8002dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b40      	cmp	r3, #64	; 0x40
 8002dba:	d107      	bne.n	8002dcc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f7ff ff7d 	bl	8002cc4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002dca:	e03b      	b.n	8002e44 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f7ff ff35 	bl	8002c44 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002dda:	e033      	b.n	8002e44 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002ddc:	7bfb      	ldrb	r3, [r7, #15]
 8002dde:	2b21      	cmp	r3, #33	; 0x21
 8002de0:	d005      	beq.n	8002dee <I2C_MasterTransmit_TXE+0xda>
 8002de2:	7bbb      	ldrb	r3, [r7, #14]
 8002de4:	2b40      	cmp	r3, #64	; 0x40
 8002de6:	d12d      	bne.n	8002e44 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002de8:	7bfb      	ldrb	r3, [r7, #15]
 8002dea:	2b22      	cmp	r3, #34	; 0x22
 8002dec:	d12a      	bne.n	8002e44 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d108      	bne.n	8002e0a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	685a      	ldr	r2, [r3, #4]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e06:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002e08:	e01c      	b.n	8002e44 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b40      	cmp	r3, #64	; 0x40
 8002e14:	d103      	bne.n	8002e1e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 f88e 	bl	8002f38 <I2C_MemoryTransmit_TXE_BTF>
}
 8002e1c:	e012      	b.n	8002e44 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e22:	781a      	ldrb	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2e:	1c5a      	adds	r2, r3, #1
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	b29a      	uxth	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002e42:	e7ff      	b.n	8002e44 <I2C_MasterTransmit_TXE+0x130>
 8002e44:	bf00      	nop
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e58:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b21      	cmp	r3, #33	; 0x21
 8002e64:	d164      	bne.n	8002f30 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d012      	beq.n	8002e96 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e74:	781a      	ldrb	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e80:	1c5a      	adds	r2, r3, #1
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002e94:	e04c      	b.n	8002f30 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2b08      	cmp	r3, #8
 8002e9a:	d01d      	beq.n	8002ed8 <I2C_MasterTransmit_BTF+0x8c>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2b20      	cmp	r3, #32
 8002ea0:	d01a      	beq.n	8002ed8 <I2C_MasterTransmit_BTF+0x8c>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ea8:	d016      	beq.n	8002ed8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	685a      	ldr	r2, [r3, #4]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002eb8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2211      	movs	r2, #17
 8002ebe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2220      	movs	r2, #32
 8002ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f7ff feb7 	bl	8002c44 <HAL_I2C_MasterTxCpltCallback>
}
 8002ed6:	e02b      	b.n	8002f30 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	685a      	ldr	r2, [r3, #4]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ee6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ef6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2220      	movs	r2, #32
 8002f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b40      	cmp	r3, #64	; 0x40
 8002f10:	d107      	bne.n	8002f22 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7ff fed2 	bl	8002cc4 <HAL_I2C_MemTxCpltCallback>
}
 8002f20:	e006      	b.n	8002f30 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f7ff fe8a 	bl	8002c44 <HAL_I2C_MasterTxCpltCallback>
}
 8002f30:	bf00      	nop
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f46:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d11d      	bne.n	8002f8c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d10b      	bne.n	8002f70 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f5c:	b2da      	uxtb	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f68:	1c9a      	adds	r2, r3, #2
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002f6e:	e073      	b.n	8003058 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	121b      	asrs	r3, r3, #8
 8002f78:	b2da      	uxtb	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f84:	1c5a      	adds	r2, r3, #1
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002f8a:	e065      	b.n	8003058 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d10b      	bne.n	8002fac <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fa4:	1c5a      	adds	r2, r3, #1
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002faa:	e055      	b.n	8003058 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d151      	bne.n	8003058 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002fb4:	7bfb      	ldrb	r3, [r7, #15]
 8002fb6:	2b22      	cmp	r3, #34	; 0x22
 8002fb8:	d10d      	bne.n	8002fd6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fc8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fce:	1c5a      	adds	r2, r3, #1
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002fd4:	e040      	b.n	8003058 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d015      	beq.n	800300c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002fe0:	7bfb      	ldrb	r3, [r7, #15]
 8002fe2:	2b21      	cmp	r3, #33	; 0x21
 8002fe4:	d112      	bne.n	800300c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fea:	781a      	ldrb	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff6:	1c5a      	adds	r2, r3, #1
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003000:	b29b      	uxth	r3, r3
 8003002:	3b01      	subs	r3, #1
 8003004:	b29a      	uxth	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800300a:	e025      	b.n	8003058 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003010:	b29b      	uxth	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d120      	bne.n	8003058 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003016:	7bfb      	ldrb	r3, [r7, #15]
 8003018:	2b21      	cmp	r3, #33	; 0x21
 800301a:	d11d      	bne.n	8003058 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	685a      	ldr	r2, [r3, #4]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800302a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800303a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2220      	movs	r2, #32
 8003046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f7ff fe36 	bl	8002cc4 <HAL_I2C_MemTxCpltCallback>
}
 8003058:	bf00      	nop
 800305a:	3710      	adds	r7, #16
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800306e:	b2db      	uxtb	r3, r3
 8003070:	2b22      	cmp	r3, #34	; 0x22
 8003072:	f040 80a2 	bne.w	80031ba <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800307a:	b29b      	uxth	r3, r3
 800307c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2b03      	cmp	r3, #3
 8003082:	d921      	bls.n	80030c8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	691a      	ldr	r2, [r3, #16]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308e:	b2d2      	uxtb	r2, r2
 8003090:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003096:	1c5a      	adds	r2, r3, #1
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	3b01      	subs	r3, #1
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	2b03      	cmp	r3, #3
 80030b2:	f040 8082 	bne.w	80031ba <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	685a      	ldr	r2, [r3, #4]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030c4:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80030c6:	e078      	b.n	80031ba <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d074      	beq.n	80031ba <I2C_MasterReceive_RXNE+0x15a>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d002      	beq.n	80030dc <I2C_MasterReceive_RXNE+0x7c>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d16e      	bne.n	80031ba <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f001 f81d 	bl	800411c <I2C_WaitOnSTOPRequestThroughIT>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d142      	bne.n	800316e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030f6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003106:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	691a      	ldr	r2, [r3, #16]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003112:	b2d2      	uxtb	r2, r2
 8003114:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311a:	1c5a      	adds	r2, r3, #1
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003124:	b29b      	uxth	r3, r3
 8003126:	3b01      	subs	r3, #1
 8003128:	b29a      	uxth	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2220      	movs	r2, #32
 8003132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b40      	cmp	r3, #64	; 0x40
 8003140:	d10a      	bne.n	8003158 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f7ff fdc1 	bl	8002cd8 <HAL_I2C_MemRxCpltCallback>
}
 8003156:	e030      	b.n	80031ba <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2212      	movs	r2, #18
 8003164:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f7ff fd76 	bl	8002c58 <HAL_I2C_MasterRxCpltCallback>
}
 800316c:	e025      	b.n	80031ba <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	685a      	ldr	r2, [r3, #4]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800317c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	691a      	ldr	r2, [r3, #16]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003188:	b2d2      	uxtb	r2, r2
 800318a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003190:	1c5a      	adds	r2, r3, #1
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800319a:	b29b      	uxth	r3, r3
 800319c:	3b01      	subs	r3, #1
 800319e:	b29a      	uxth	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2220      	movs	r2, #32
 80031a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f7ff fd99 	bl	8002cec <HAL_I2C_ErrorCallback>
}
 80031ba:	bf00      	nop
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b084      	sub	sp, #16
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ce:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	d11b      	bne.n	8003212 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031e8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	691a      	ldr	r2, [r3, #16]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f4:	b2d2      	uxtb	r2, r2
 80031f6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fc:	1c5a      	adds	r2, r3, #1
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003206:	b29b      	uxth	r3, r3
 8003208:	3b01      	subs	r3, #1
 800320a:	b29a      	uxth	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003210:	e0bd      	b.n	800338e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003216:	b29b      	uxth	r3, r3
 8003218:	2b03      	cmp	r3, #3
 800321a:	d129      	bne.n	8003270 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685a      	ldr	r2, [r3, #4]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800322a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2b04      	cmp	r3, #4
 8003230:	d00a      	beq.n	8003248 <I2C_MasterReceive_BTF+0x86>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2b02      	cmp	r3, #2
 8003236:	d007      	beq.n	8003248 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003246:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	691a      	ldr	r2, [r3, #16]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003252:	b2d2      	uxtb	r2, r2
 8003254:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325a:	1c5a      	adds	r2, r3, #1
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003264:	b29b      	uxth	r3, r3
 8003266:	3b01      	subs	r3, #1
 8003268:	b29a      	uxth	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800326e:	e08e      	b.n	800338e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003274:	b29b      	uxth	r3, r3
 8003276:	2b02      	cmp	r3, #2
 8003278:	d176      	bne.n	8003368 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d002      	beq.n	8003286 <I2C_MasterReceive_BTF+0xc4>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2b10      	cmp	r3, #16
 8003284:	d108      	bne.n	8003298 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003294:	601a      	str	r2, [r3, #0]
 8003296:	e019      	b.n	80032cc <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2b04      	cmp	r3, #4
 800329c:	d002      	beq.n	80032a4 <I2C_MasterReceive_BTF+0xe2>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d108      	bne.n	80032b6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032b2:	601a      	str	r2, [r3, #0]
 80032b4:	e00a      	b.n	80032cc <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2b10      	cmp	r3, #16
 80032ba:	d007      	beq.n	80032cc <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ca:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	691a      	ldr	r2, [r3, #16]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d6:	b2d2      	uxtb	r2, r2
 80032d8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032de:	1c5a      	adds	r2, r3, #1
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	3b01      	subs	r3, #1
 80032ec:	b29a      	uxth	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	691a      	ldr	r2, [r3, #16]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fc:	b2d2      	uxtb	r2, r2
 80032fe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003304:	1c5a      	adds	r2, r3, #1
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800330e:	b29b      	uxth	r3, r3
 8003310:	3b01      	subs	r3, #1
 8003312:	b29a      	uxth	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003326:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2220      	movs	r2, #32
 800332c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b40      	cmp	r3, #64	; 0x40
 800333a:	d10a      	bne.n	8003352 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f7ff fcc4 	bl	8002cd8 <HAL_I2C_MemRxCpltCallback>
}
 8003350:	e01d      	b.n	800338e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2212      	movs	r2, #18
 800335e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f7ff fc79 	bl	8002c58 <HAL_I2C_MasterRxCpltCallback>
}
 8003366:	e012      	b.n	800338e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	691a      	ldr	r2, [r3, #16]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003372:	b2d2      	uxtb	r2, r2
 8003374:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337a:	1c5a      	adds	r2, r3, #1
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003384:	b29b      	uxth	r3, r3
 8003386:	3b01      	subs	r3, #1
 8003388:	b29a      	uxth	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800338e:	bf00      	nop
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003396:	b480      	push	{r7}
 8003398:	b083      	sub	sp, #12
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b40      	cmp	r3, #64	; 0x40
 80033a8:	d117      	bne.n	80033da <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d109      	bne.n	80033c6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	461a      	mov	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033c2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80033c4:	e067      	b.n	8003496 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	f043 0301 	orr.w	r3, r3, #1
 80033d0:	b2da      	uxtb	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	611a      	str	r2, [r3, #16]
}
 80033d8:	e05d      	b.n	8003496 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033e2:	d133      	bne.n	800344c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2b21      	cmp	r3, #33	; 0x21
 80033ee:	d109      	bne.n	8003404 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	461a      	mov	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003400:	611a      	str	r2, [r3, #16]
 8003402:	e008      	b.n	8003416 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003408:	b2db      	uxtb	r3, r3
 800340a:	f043 0301 	orr.w	r3, r3, #1
 800340e:	b2da      	uxtb	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800341a:	2b00      	cmp	r3, #0
 800341c:	d004      	beq.n	8003428 <I2C_Master_SB+0x92>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003424:	2b00      	cmp	r3, #0
 8003426:	d108      	bne.n	800343a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342c:	2b00      	cmp	r3, #0
 800342e:	d032      	beq.n	8003496 <I2C_Master_SB+0x100>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003436:	2b00      	cmp	r3, #0
 8003438:	d02d      	beq.n	8003496 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003448:	605a      	str	r2, [r3, #4]
}
 800344a:	e024      	b.n	8003496 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003450:	2b00      	cmp	r3, #0
 8003452:	d10e      	bne.n	8003472 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003458:	b29b      	uxth	r3, r3
 800345a:	11db      	asrs	r3, r3, #7
 800345c:	b2db      	uxtb	r3, r3
 800345e:	f003 0306 	and.w	r3, r3, #6
 8003462:	b2db      	uxtb	r3, r3
 8003464:	f063 030f 	orn	r3, r3, #15
 8003468:	b2da      	uxtb	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	611a      	str	r2, [r3, #16]
}
 8003470:	e011      	b.n	8003496 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003476:	2b01      	cmp	r3, #1
 8003478:	d10d      	bne.n	8003496 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347e:	b29b      	uxth	r3, r3
 8003480:	11db      	asrs	r3, r3, #7
 8003482:	b2db      	uxtb	r3, r3
 8003484:	f003 0306 	and.w	r3, r3, #6
 8003488:	b2db      	uxtb	r3, r3
 800348a:	f063 030e 	orn	r3, r3, #14
 800348e:	b2da      	uxtb	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	611a      	str	r2, [r3, #16]
}
 8003496:	bf00      	nop
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr

080034a2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80034a2:	b480      	push	{r7}
 80034a4:	b083      	sub	sp, #12
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ae:	b2da      	uxtb	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d004      	beq.n	80034c8 <I2C_Master_ADD10+0x26>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d108      	bne.n	80034da <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00c      	beq.n	80034ea <I2C_Master_ADD10+0x48>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d007      	beq.n	80034ea <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034e8:	605a      	str	r2, [r3, #4]
  }
}
 80034ea:	bf00      	nop
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr

080034f6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80034f6:	b480      	push	{r7}
 80034f8:	b091      	sub	sp, #68	; 0x44
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003504:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003512:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2b22      	cmp	r3, #34	; 0x22
 800351e:	f040 8169 	bne.w	80037f4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10f      	bne.n	800354a <I2C_Master_ADDR+0x54>
 800352a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800352e:	2b40      	cmp	r3, #64	; 0x40
 8003530:	d10b      	bne.n	800354a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003532:	2300      	movs	r3, #0
 8003534:	633b      	str	r3, [r7, #48]	; 0x30
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	633b      	str	r3, [r7, #48]	; 0x30
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	633b      	str	r3, [r7, #48]	; 0x30
 8003546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003548:	e160      	b.n	800380c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800354e:	2b00      	cmp	r3, #0
 8003550:	d11d      	bne.n	800358e <I2C_Master_ADDR+0x98>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800355a:	d118      	bne.n	800358e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800355c:	2300      	movs	r3, #0
 800355e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003570:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003580:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003586:	1c5a      	adds	r2, r3, #1
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	651a      	str	r2, [r3, #80]	; 0x50
 800358c:	e13e      	b.n	800380c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003592:	b29b      	uxth	r3, r3
 8003594:	2b00      	cmp	r3, #0
 8003596:	d113      	bne.n	80035c0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003598:	2300      	movs	r3, #0
 800359a:	62bb      	str	r3, [r7, #40]	; 0x28
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80035ac:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035bc:	601a      	str	r2, [r3, #0]
 80035be:	e115      	b.n	80037ec <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	f040 808a 	bne.w	80036e0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80035cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80035d2:	d137      	bne.n	8003644 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035e2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035f2:	d113      	bne.n	800361c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003602:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003604:	2300      	movs	r3, #0
 8003606:	627b      	str	r3, [r7, #36]	; 0x24
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	627b      	str	r3, [r7, #36]	; 0x24
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	627b      	str	r3, [r7, #36]	; 0x24
 8003618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361a:	e0e7      	b.n	80037ec <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800361c:	2300      	movs	r3, #0
 800361e:	623b      	str	r3, [r7, #32]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	623b      	str	r3, [r7, #32]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	623b      	str	r3, [r7, #32]
 8003630:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003640:	601a      	str	r2, [r3, #0]
 8003642:	e0d3      	b.n	80037ec <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003646:	2b08      	cmp	r3, #8
 8003648:	d02e      	beq.n	80036a8 <I2C_Master_ADDR+0x1b2>
 800364a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800364c:	2b20      	cmp	r3, #32
 800364e:	d02b      	beq.n	80036a8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003652:	2b12      	cmp	r3, #18
 8003654:	d102      	bne.n	800365c <I2C_Master_ADDR+0x166>
 8003656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003658:	2b01      	cmp	r3, #1
 800365a:	d125      	bne.n	80036a8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800365c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800365e:	2b04      	cmp	r3, #4
 8003660:	d00e      	beq.n	8003680 <I2C_Master_ADDR+0x18a>
 8003662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003664:	2b02      	cmp	r3, #2
 8003666:	d00b      	beq.n	8003680 <I2C_Master_ADDR+0x18a>
 8003668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800366a:	2b10      	cmp	r3, #16
 800366c:	d008      	beq.n	8003680 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800367c:	601a      	str	r2, [r3, #0]
 800367e:	e007      	b.n	8003690 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800368e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003690:	2300      	movs	r3, #0
 8003692:	61fb      	str	r3, [r7, #28]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	61fb      	str	r3, [r7, #28]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	61fb      	str	r3, [r7, #28]
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	e0a1      	b.n	80037ec <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036b6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036b8:	2300      	movs	r3, #0
 80036ba:	61bb      	str	r3, [r7, #24]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	61bb      	str	r3, [r7, #24]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	61bb      	str	r3, [r7, #24]
 80036cc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036dc:	601a      	str	r2, [r3, #0]
 80036de:	e085      	b.n	80037ec <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d14d      	bne.n	8003786 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80036ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ec:	2b04      	cmp	r3, #4
 80036ee:	d016      	beq.n	800371e <I2C_Master_ADDR+0x228>
 80036f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d013      	beq.n	800371e <I2C_Master_ADDR+0x228>
 80036f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f8:	2b10      	cmp	r3, #16
 80036fa:	d010      	beq.n	800371e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800370a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800371a:	601a      	str	r2, [r3, #0]
 800371c:	e007      	b.n	800372e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800372c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003738:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800373c:	d117      	bne.n	800376e <I2C_Master_ADDR+0x278>
 800373e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003740:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003744:	d00b      	beq.n	800375e <I2C_Master_ADDR+0x268>
 8003746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003748:	2b01      	cmp	r3, #1
 800374a:	d008      	beq.n	800375e <I2C_Master_ADDR+0x268>
 800374c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800374e:	2b08      	cmp	r3, #8
 8003750:	d005      	beq.n	800375e <I2C_Master_ADDR+0x268>
 8003752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003754:	2b10      	cmp	r3, #16
 8003756:	d002      	beq.n	800375e <I2C_Master_ADDR+0x268>
 8003758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800375a:	2b20      	cmp	r3, #32
 800375c:	d107      	bne.n	800376e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800376c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800376e:	2300      	movs	r3, #0
 8003770:	617b      	str	r3, [r7, #20]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	695b      	ldr	r3, [r3, #20]
 8003778:	617b      	str	r3, [r7, #20]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	617b      	str	r3, [r7, #20]
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	e032      	b.n	80037ec <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003794:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037a4:	d117      	bne.n	80037d6 <I2C_Master_ADDR+0x2e0>
 80037a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037ac:	d00b      	beq.n	80037c6 <I2C_Master_ADDR+0x2d0>
 80037ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d008      	beq.n	80037c6 <I2C_Master_ADDR+0x2d0>
 80037b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b6:	2b08      	cmp	r3, #8
 80037b8:	d005      	beq.n	80037c6 <I2C_Master_ADDR+0x2d0>
 80037ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037bc:	2b10      	cmp	r3, #16
 80037be:	d002      	beq.n	80037c6 <I2C_Master_ADDR+0x2d0>
 80037c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037c2:	2b20      	cmp	r3, #32
 80037c4:	d107      	bne.n	80037d6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80037d4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037d6:	2300      	movs	r3, #0
 80037d8:	613b      	str	r3, [r7, #16]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	695b      	ldr	r3, [r3, #20]
 80037e0:	613b      	str	r3, [r7, #16]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	613b      	str	r3, [r7, #16]
 80037ea:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80037f2:	e00b      	b.n	800380c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037f4:	2300      	movs	r3, #0
 80037f6:	60fb      	str	r3, [r7, #12]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	60fb      	str	r3, [r7, #12]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	60fb      	str	r3, [r7, #12]
 8003808:	68fb      	ldr	r3, [r7, #12]
}
 800380a:	e7ff      	b.n	800380c <I2C_Master_ADDR+0x316>
 800380c:	bf00      	nop
 800380e:	3744      	adds	r7, #68	; 0x44
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003826:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800382c:	b29b      	uxth	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d02b      	beq.n	800388a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003836:	781a      	ldrb	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003842:	1c5a      	adds	r2, r3, #1
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800384c:	b29b      	uxth	r3, r3
 800384e:	3b01      	subs	r3, #1
 8003850:	b29a      	uxth	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800385a:	b29b      	uxth	r3, r3
 800385c:	2b00      	cmp	r3, #0
 800385e:	d114      	bne.n	800388a <I2C_SlaveTransmit_TXE+0x72>
 8003860:	7bfb      	ldrb	r3, [r7, #15]
 8003862:	2b29      	cmp	r3, #41	; 0x29
 8003864:	d111      	bne.n	800388a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	685a      	ldr	r2, [r3, #4]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003874:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2221      	movs	r2, #33	; 0x21
 800387a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2228      	movs	r2, #40	; 0x28
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f7ff f9f1 	bl	8002c6c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800388a:	bf00      	nop
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003892:	b480      	push	{r7}
 8003894:	b083      	sub	sp, #12
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800389e:	b29b      	uxth	r3, r3
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d011      	beq.n	80038c8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a8:	781a      	ldrb	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b4:	1c5a      	adds	r2, r3, #1
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038be:	b29b      	uxth	r3, r3
 80038c0:	3b01      	subs	r3, #1
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038e2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d02c      	beq.n	8003948 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	691a      	ldr	r2, [r3, #16]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f8:	b2d2      	uxtb	r2, r2
 80038fa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	1c5a      	adds	r2, r3, #1
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800390a:	b29b      	uxth	r3, r3
 800390c:	3b01      	subs	r3, #1
 800390e:	b29a      	uxth	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003918:	b29b      	uxth	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d114      	bne.n	8003948 <I2C_SlaveReceive_RXNE+0x74>
 800391e:	7bfb      	ldrb	r3, [r7, #15]
 8003920:	2b2a      	cmp	r3, #42	; 0x2a
 8003922:	d111      	bne.n	8003948 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	685a      	ldr	r2, [r3, #4]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003932:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2222      	movs	r2, #34	; 0x22
 8003938:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2228      	movs	r2, #40	; 0x28
 800393e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7ff f99c 	bl	8002c80 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003948:	bf00      	nop
 800394a:	3710      	adds	r7, #16
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800395c:	b29b      	uxth	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d012      	beq.n	8003988 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	691a      	ldr	r2, [r3, #16]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396c:	b2d2      	uxtb	r2, r2
 800396e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	1c5a      	adds	r2, r3, #1
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800397e:	b29b      	uxth	r3, r3
 8003980:	3b01      	subs	r3, #1
 8003982:	b29a      	uxth	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800399e:	2300      	movs	r3, #0
 80039a0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80039ae:	2b28      	cmp	r3, #40	; 0x28
 80039b0:	d127      	bne.n	8003a02 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	685a      	ldr	r2, [r3, #4]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039c0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	089b      	lsrs	r3, r3, #2
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80039ce:	2301      	movs	r3, #1
 80039d0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	09db      	lsrs	r3, r3, #7
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d103      	bne.n	80039e6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	81bb      	strh	r3, [r7, #12]
 80039e4:	e002      	b.n	80039ec <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80039f4:	89ba      	ldrh	r2, [r7, #12]
 80039f6:	7bfb      	ldrb	r3, [r7, #15]
 80039f8:	4619      	mov	r1, r3
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f7ff f94a 	bl	8002c94 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003a00:	e00e      	b.n	8003a20 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a02:	2300      	movs	r3, #0
 8003a04:	60bb      	str	r3, [r7, #8]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	60bb      	str	r3, [r7, #8]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	60bb      	str	r3, [r7, #8]
 8003a16:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003a20:	bf00      	nop
 8003a22:	3710      	adds	r7, #16
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a36:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	685a      	ldr	r2, [r3, #4]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a46:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003a48:	2300      	movs	r3, #0
 8003a4a:	60bb      	str	r3, [r7, #8]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	60bb      	str	r3, [r7, #8]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f042 0201 	orr.w	r2, r2, #1
 8003a62:	601a      	str	r2, [r3, #0]
 8003a64:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a74:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a84:	d172      	bne.n	8003b6c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003a86:	7bfb      	ldrb	r3, [r7, #15]
 8003a88:	2b22      	cmp	r3, #34	; 0x22
 8003a8a:	d002      	beq.n	8003a92 <I2C_Slave_STOPF+0x6a>
 8003a8c:	7bfb      	ldrb	r3, [r7, #15]
 8003a8e:	2b2a      	cmp	r3, #42	; 0x2a
 8003a90:	d135      	bne.n	8003afe <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d005      	beq.n	8003ab6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aae:	f043 0204 	orr.w	r2, r3, #4
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ac4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7fe fa78 	bl	8001fc0 <HAL_DMA_GetState>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d049      	beq.n	8003b6a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ada:	4a69      	ldr	r2, [pc, #420]	; (8003c80 <I2C_Slave_STOPF+0x258>)
 8003adc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7fe f8c0 	bl	8001c68 <HAL_DMA_Abort_IT>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d03d      	beq.n	8003b6a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003af8:	4610      	mov	r0, r2
 8003afa:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003afc:	e035      	b.n	8003b6a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d005      	beq.n	8003b22 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	f043 0204 	orr.w	r2, r3, #4
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	685a      	ldr	r2, [r3, #4]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b30:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7fe fa42 	bl	8001fc0 <HAL_DMA_GetState>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d014      	beq.n	8003b6c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b46:	4a4e      	ldr	r2, [pc, #312]	; (8003c80 <I2C_Slave_STOPF+0x258>)
 8003b48:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7fe f88a 	bl	8001c68 <HAL_DMA_Abort_IT>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d008      	beq.n	8003b6c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b64:	4610      	mov	r0, r2
 8003b66:	4798      	blx	r3
 8003b68:	e000      	b.n	8003b6c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003b6a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d03e      	beq.n	8003bf4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	695b      	ldr	r3, [r3, #20]
 8003b7c:	f003 0304 	and.w	r3, r3, #4
 8003b80:	2b04      	cmp	r3, #4
 8003b82:	d112      	bne.n	8003baa <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	691a      	ldr	r2, [r3, #16]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8e:	b2d2      	uxtb	r2, r2
 8003b90:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b96:	1c5a      	adds	r2, r3, #1
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb4:	2b40      	cmp	r3, #64	; 0x40
 8003bb6:	d112      	bne.n	8003bde <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	691a      	ldr	r2, [r3, #16]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc2:	b2d2      	uxtb	r2, r2
 8003bc4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	1c5a      	adds	r2, r3, #1
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d005      	beq.n	8003bf4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bec:	f043 0204 	orr.w	r2, r3, #4
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d003      	beq.n	8003c04 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 f8b3 	bl	8003d68 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003c02:	e039      	b.n	8003c78 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003c04:	7bfb      	ldrb	r3, [r7, #15]
 8003c06:	2b2a      	cmp	r3, #42	; 0x2a
 8003c08:	d109      	bne.n	8003c1e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2228      	movs	r2, #40	; 0x28
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f7ff f831 	bl	8002c80 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b28      	cmp	r3, #40	; 0x28
 8003c28:	d111      	bne.n	8003c4e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a15      	ldr	r2, [pc, #84]	; (8003c84 <I2C_Slave_STOPF+0x25c>)
 8003c2e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2220      	movs	r2, #32
 8003c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f7ff f832 	bl	8002cb0 <HAL_I2C_ListenCpltCallback>
}
 8003c4c:	e014      	b.n	8003c78 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c52:	2b22      	cmp	r3, #34	; 0x22
 8003c54:	d002      	beq.n	8003c5c <I2C_Slave_STOPF+0x234>
 8003c56:	7bfb      	ldrb	r3, [r7, #15]
 8003c58:	2b22      	cmp	r3, #34	; 0x22
 8003c5a:	d10d      	bne.n	8003c78 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2220      	movs	r2, #32
 8003c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f7ff f804 	bl	8002c80 <HAL_I2C_SlaveRxCpltCallback>
}
 8003c78:	bf00      	nop
 8003c7a:	3710      	adds	r7, #16
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	08003fcd 	.word	0x08003fcd
 8003c84:	ffff0000 	.word	0xffff0000

08003c88 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c96:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	2b08      	cmp	r3, #8
 8003ca2:	d002      	beq.n	8003caa <I2C_Slave_AF+0x22>
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	2b20      	cmp	r3, #32
 8003ca8:	d129      	bne.n	8003cfe <I2C_Slave_AF+0x76>
 8003caa:	7bfb      	ldrb	r3, [r7, #15]
 8003cac:	2b28      	cmp	r3, #40	; 0x28
 8003cae:	d126      	bne.n	8003cfe <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a2c      	ldr	r2, [pc, #176]	; (8003d64 <I2C_Slave_AF+0xdc>)
 8003cb4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003cc4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003cce:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cde:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2220      	movs	r2, #32
 8003cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f7fe ffda 	bl	8002cb0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003cfc:	e02e      	b.n	8003d5c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003cfe:	7bfb      	ldrb	r3, [r7, #15]
 8003d00:	2b21      	cmp	r3, #33	; 0x21
 8003d02:	d126      	bne.n	8003d52 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a17      	ldr	r2, [pc, #92]	; (8003d64 <I2C_Slave_AF+0xdc>)
 8003d08:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2221      	movs	r2, #33	; 0x21
 8003d0e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2220      	movs	r2, #32
 8003d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	685a      	ldr	r2, [r3, #4]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d2e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d38:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d48:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7fe ff8e 	bl	8002c6c <HAL_I2C_SlaveTxCpltCallback>
}
 8003d50:	e004      	b.n	8003d5c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d5a:	615a      	str	r2, [r3, #20]
}
 8003d5c:	bf00      	nop
 8003d5e:	3710      	adds	r7, #16
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	ffff0000 	.word	0xffff0000

08003d68 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d76:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d7e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003d80:	7bbb      	ldrb	r3, [r7, #14]
 8003d82:	2b10      	cmp	r3, #16
 8003d84:	d002      	beq.n	8003d8c <I2C_ITError+0x24>
 8003d86:	7bbb      	ldrb	r3, [r7, #14]
 8003d88:	2b40      	cmp	r3, #64	; 0x40
 8003d8a:	d10a      	bne.n	8003da2 <I2C_ITError+0x3a>
 8003d8c:	7bfb      	ldrb	r3, [r7, #15]
 8003d8e:	2b22      	cmp	r3, #34	; 0x22
 8003d90:	d107      	bne.n	8003da2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003da0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003da2:	7bfb      	ldrb	r3, [r7, #15]
 8003da4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003da8:	2b28      	cmp	r3, #40	; 0x28
 8003daa:	d107      	bne.n	8003dbc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2228      	movs	r2, #40	; 0x28
 8003db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003dba:	e015      	b.n	8003de8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dca:	d00a      	beq.n	8003de2 <I2C_ITError+0x7a>
 8003dcc:	7bfb      	ldrb	r3, [r7, #15]
 8003dce:	2b60      	cmp	r3, #96	; 0x60
 8003dd0:	d007      	beq.n	8003de2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2220      	movs	r2, #32
 8003dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003df2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003df6:	d162      	bne.n	8003ebe <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	685a      	ldr	r2, [r3, #4]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e06:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d020      	beq.n	8003e58 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e1a:	4a6a      	ldr	r2, [pc, #424]	; (8003fc4 <I2C_ITError+0x25c>)
 8003e1c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7fd ff20 	bl	8001c68 <HAL_DMA_Abort_IT>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	f000 8089 	beq.w	8003f42 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f022 0201 	bic.w	r2, r2, #1
 8003e3e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2220      	movs	r2, #32
 8003e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e52:	4610      	mov	r0, r2
 8003e54:	4798      	blx	r3
 8003e56:	e074      	b.n	8003f42 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5c:	4a59      	ldr	r2, [pc, #356]	; (8003fc4 <I2C_ITError+0x25c>)
 8003e5e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7fd feff 	bl	8001c68 <HAL_DMA_Abort_IT>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d068      	beq.n	8003f42 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e7a:	2b40      	cmp	r3, #64	; 0x40
 8003e7c:	d10b      	bne.n	8003e96 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	691a      	ldr	r2, [r3, #16]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e88:	b2d2      	uxtb	r2, r2
 8003e8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e90:	1c5a      	adds	r2, r3, #1
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f022 0201 	bic.w	r2, r2, #1
 8003ea4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2220      	movs	r2, #32
 8003eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003eb8:	4610      	mov	r0, r2
 8003eba:	4798      	blx	r3
 8003ebc:	e041      	b.n	8003f42 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b60      	cmp	r3, #96	; 0x60
 8003ec8:	d125      	bne.n	8003f16 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2220      	movs	r2, #32
 8003ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee2:	2b40      	cmp	r3, #64	; 0x40
 8003ee4:	d10b      	bne.n	8003efe <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	691a      	ldr	r2, [r3, #16]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef0:	b2d2      	uxtb	r2, r2
 8003ef2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef8:	1c5a      	adds	r2, r3, #1
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f022 0201 	bic.w	r2, r2, #1
 8003f0c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f7fe fef6 	bl	8002d00 <HAL_I2C_AbortCpltCallback>
 8003f14:	e015      	b.n	8003f42 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	695b      	ldr	r3, [r3, #20]
 8003f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f20:	2b40      	cmp	r3, #64	; 0x40
 8003f22:	d10b      	bne.n	8003f3c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	691a      	ldr	r2, [r3, #16]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2e:	b2d2      	uxtb	r2, r2
 8003f30:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f36:	1c5a      	adds	r2, r3, #1
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f7fe fed5 	bl	8002cec <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f46:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d10e      	bne.n	8003f70 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d109      	bne.n	8003f70 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d104      	bne.n	8003f70 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d007      	beq.n	8003f80 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	685a      	ldr	r2, [r3, #4]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f7e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f86:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8c:	f003 0304 	and.w	r3, r3, #4
 8003f90:	2b04      	cmp	r3, #4
 8003f92:	d113      	bne.n	8003fbc <I2C_ITError+0x254>
 8003f94:	7bfb      	ldrb	r3, [r7, #15]
 8003f96:	2b28      	cmp	r3, #40	; 0x28
 8003f98:	d110      	bne.n	8003fbc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a0a      	ldr	r2, [pc, #40]	; (8003fc8 <I2C_ITError+0x260>)
 8003f9e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2220      	movs	r2, #32
 8003faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f7fe fe7a 	bl	8002cb0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003fbc:	bf00      	nop
 8003fbe:	3710      	adds	r7, #16
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	08003fcd 	.word	0x08003fcd
 8003fc8:	ffff0000 	.word	0xffff0000

08003fcc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fdc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fe4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003fe6:	4b4b      	ldr	r3, [pc, #300]	; (8004114 <I2C_DMAAbort+0x148>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	08db      	lsrs	r3, r3, #3
 8003fec:	4a4a      	ldr	r2, [pc, #296]	; (8004118 <I2C_DMAAbort+0x14c>)
 8003fee:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff2:	0a1a      	lsrs	r2, r3, #8
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	4413      	add	r3, r2
 8003ffa:	00da      	lsls	r2, r3, #3
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d106      	bne.n	8004014 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400a:	f043 0220 	orr.w	r2, r3, #32
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004012:	e00a      	b.n	800402a <I2C_DMAAbort+0x5e>
    }
    count--;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	3b01      	subs	r3, #1
 8004018:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004024:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004028:	d0ea      	beq.n	8004000 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800402e:	2b00      	cmp	r3, #0
 8004030:	d003      	beq.n	800403a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004036:	2200      	movs	r2, #0
 8004038:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403e:	2b00      	cmp	r3, #0
 8004040:	d003      	beq.n	800404a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004046:	2200      	movs	r2, #0
 8004048:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004058:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	2200      	movs	r2, #0
 800405e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004064:	2b00      	cmp	r3, #0
 8004066:	d003      	beq.n	8004070 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800406c:	2200      	movs	r2, #0
 800406e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004074:	2b00      	cmp	r3, #0
 8004076:	d003      	beq.n	8004080 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407c:	2200      	movs	r2, #0
 800407e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f022 0201 	bic.w	r2, r2, #1
 800408e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004096:	b2db      	uxtb	r3, r3
 8004098:	2b60      	cmp	r3, #96	; 0x60
 800409a:	d10e      	bne.n	80040ba <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	2220      	movs	r2, #32
 80040a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	2200      	movs	r2, #0
 80040b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80040b2:	6978      	ldr	r0, [r7, #20]
 80040b4:	f7fe fe24 	bl	8002d00 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80040b8:	e027      	b.n	800410a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80040ba:	7cfb      	ldrb	r3, [r7, #19]
 80040bc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80040c0:	2b28      	cmp	r3, #40	; 0x28
 80040c2:	d117      	bne.n	80040f4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f042 0201 	orr.w	r2, r2, #1
 80040d2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040e2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	2200      	movs	r2, #0
 80040e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	2228      	movs	r2, #40	; 0x28
 80040ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80040f2:	e007      	b.n	8004104 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	2220      	movs	r2, #32
 80040f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004104:	6978      	ldr	r0, [r7, #20]
 8004106:	f7fe fdf1 	bl	8002cec <HAL_I2C_ErrorCallback>
}
 800410a:	bf00      	nop
 800410c:	3718      	adds	r7, #24
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	20000000 	.word	0x20000000
 8004118:	14f8b589 	.word	0x14f8b589

0800411c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004124:	2300      	movs	r3, #0
 8004126:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004128:	4b13      	ldr	r3, [pc, #76]	; (8004178 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	08db      	lsrs	r3, r3, #3
 800412e:	4a13      	ldr	r2, [pc, #76]	; (800417c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004130:	fba2 2303 	umull	r2, r3, r2, r3
 8004134:	0a1a      	lsrs	r2, r3, #8
 8004136:	4613      	mov	r3, r2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	4413      	add	r3, r2
 800413c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	3b01      	subs	r3, #1
 8004142:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d107      	bne.n	800415a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414e:	f043 0220 	orr.w	r2, r3, #32
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e008      	b.n	800416c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004164:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004168:	d0e9      	beq.n	800413e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	3714      	adds	r7, #20
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr
 8004178:	20000000 	.word	0x20000000
 800417c:	14f8b589 	.word	0x14f8b589

08004180 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004190:	d103      	bne.n	800419a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2201      	movs	r2, #1
 8004196:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004198:	e007      	b.n	80041aa <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80041a2:	d102      	bne.n	80041aa <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2208      	movs	r2, #8
 80041a8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80041aa:	bf00      	nop
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr

080041b6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80041b6:	b480      	push	{r7}
 80041b8:	b083      	sub	sp, #12
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
 80041be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	2b20      	cmp	r3, #32
 80041ca:	d129      	bne.n	8004220 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2224      	movs	r2, #36	; 0x24
 80041d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 0201 	bic.w	r2, r2, #1
 80041e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f022 0210 	bic.w	r2, r2, #16
 80041f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	430a      	orrs	r2, r1
 8004202:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f042 0201 	orr.w	r2, r2, #1
 8004212:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2220      	movs	r2, #32
 8004218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800421c:	2300      	movs	r3, #0
 800421e:	e000      	b.n	8004222 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004220:	2302      	movs	r3, #2
  }
}
 8004222:	4618      	mov	r0, r3
 8004224:	370c      	adds	r7, #12
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr

0800422e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800422e:	b480      	push	{r7}
 8004230:	b085      	sub	sp, #20
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
 8004236:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004238:	2300      	movs	r3, #0
 800423a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004242:	b2db      	uxtb	r3, r3
 8004244:	2b20      	cmp	r3, #32
 8004246:	d12a      	bne.n	800429e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2224      	movs	r2, #36	; 0x24
 800424c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f022 0201 	bic.w	r2, r2, #1
 800425e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004266:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004268:	89fb      	ldrh	r3, [r7, #14]
 800426a:	f023 030f 	bic.w	r3, r3, #15
 800426e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	b29a      	uxth	r2, r3
 8004274:	89fb      	ldrh	r3, [r7, #14]
 8004276:	4313      	orrs	r3, r2
 8004278:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	89fa      	ldrh	r2, [r7, #14]
 8004280:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f042 0201 	orr.w	r2, r2, #1
 8004290:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2220      	movs	r2, #32
 8004296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800429a:	2300      	movs	r3, #0
 800429c:	e000      	b.n	80042a0 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800429e:	2302      	movs	r3, #2
  }
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3714      	adds	r7, #20
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80042b2:	2300      	movs	r3, #0
 80042b4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80042b6:	2300      	movs	r3, #0
 80042b8:	603b      	str	r3, [r7, #0]
 80042ba:	4b20      	ldr	r3, [pc, #128]	; (800433c <HAL_PWREx_EnableOverDrive+0x90>)
 80042bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042be:	4a1f      	ldr	r2, [pc, #124]	; (800433c <HAL_PWREx_EnableOverDrive+0x90>)
 80042c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042c4:	6413      	str	r3, [r2, #64]	; 0x40
 80042c6:	4b1d      	ldr	r3, [pc, #116]	; (800433c <HAL_PWREx_EnableOverDrive+0x90>)
 80042c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ce:	603b      	str	r3, [r7, #0]
 80042d0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80042d2:	4b1b      	ldr	r3, [pc, #108]	; (8004340 <HAL_PWREx_EnableOverDrive+0x94>)
 80042d4:	2201      	movs	r2, #1
 80042d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042d8:	f7fd fa46 	bl	8001768 <HAL_GetTick>
 80042dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80042de:	e009      	b.n	80042f4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80042e0:	f7fd fa42 	bl	8001768 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042ee:	d901      	bls.n	80042f4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e01f      	b.n	8004334 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80042f4:	4b13      	ldr	r3, [pc, #76]	; (8004344 <HAL_PWREx_EnableOverDrive+0x98>)
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004300:	d1ee      	bne.n	80042e0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004302:	4b11      	ldr	r3, [pc, #68]	; (8004348 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004304:	2201      	movs	r2, #1
 8004306:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004308:	f7fd fa2e 	bl	8001768 <HAL_GetTick>
 800430c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800430e:	e009      	b.n	8004324 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004310:	f7fd fa2a 	bl	8001768 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800431e:	d901      	bls.n	8004324 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e007      	b.n	8004334 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004324:	4b07      	ldr	r3, [pc, #28]	; (8004344 <HAL_PWREx_EnableOverDrive+0x98>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800432c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004330:	d1ee      	bne.n	8004310 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3708      	adds	r7, #8
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	40023800 	.word	0x40023800
 8004340:	420e0040 	.word	0x420e0040
 8004344:	40007000 	.word	0x40007000
 8004348:	420e0044 	.word	0x420e0044

0800434c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b086      	sub	sp, #24
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e267      	b.n	800482e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	2b00      	cmp	r3, #0
 8004368:	d075      	beq.n	8004456 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800436a:	4b88      	ldr	r3, [pc, #544]	; (800458c <HAL_RCC_OscConfig+0x240>)
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f003 030c 	and.w	r3, r3, #12
 8004372:	2b04      	cmp	r3, #4
 8004374:	d00c      	beq.n	8004390 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004376:	4b85      	ldr	r3, [pc, #532]	; (800458c <HAL_RCC_OscConfig+0x240>)
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800437e:	2b08      	cmp	r3, #8
 8004380:	d112      	bne.n	80043a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004382:	4b82      	ldr	r3, [pc, #520]	; (800458c <HAL_RCC_OscConfig+0x240>)
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800438a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800438e:	d10b      	bne.n	80043a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004390:	4b7e      	ldr	r3, [pc, #504]	; (800458c <HAL_RCC_OscConfig+0x240>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d05b      	beq.n	8004454 <HAL_RCC_OscConfig+0x108>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d157      	bne.n	8004454 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e242      	b.n	800482e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043b0:	d106      	bne.n	80043c0 <HAL_RCC_OscConfig+0x74>
 80043b2:	4b76      	ldr	r3, [pc, #472]	; (800458c <HAL_RCC_OscConfig+0x240>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a75      	ldr	r2, [pc, #468]	; (800458c <HAL_RCC_OscConfig+0x240>)
 80043b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043bc:	6013      	str	r3, [r2, #0]
 80043be:	e01d      	b.n	80043fc <HAL_RCC_OscConfig+0xb0>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043c8:	d10c      	bne.n	80043e4 <HAL_RCC_OscConfig+0x98>
 80043ca:	4b70      	ldr	r3, [pc, #448]	; (800458c <HAL_RCC_OscConfig+0x240>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a6f      	ldr	r2, [pc, #444]	; (800458c <HAL_RCC_OscConfig+0x240>)
 80043d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043d4:	6013      	str	r3, [r2, #0]
 80043d6:	4b6d      	ldr	r3, [pc, #436]	; (800458c <HAL_RCC_OscConfig+0x240>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a6c      	ldr	r2, [pc, #432]	; (800458c <HAL_RCC_OscConfig+0x240>)
 80043dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043e0:	6013      	str	r3, [r2, #0]
 80043e2:	e00b      	b.n	80043fc <HAL_RCC_OscConfig+0xb0>
 80043e4:	4b69      	ldr	r3, [pc, #420]	; (800458c <HAL_RCC_OscConfig+0x240>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a68      	ldr	r2, [pc, #416]	; (800458c <HAL_RCC_OscConfig+0x240>)
 80043ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ee:	6013      	str	r3, [r2, #0]
 80043f0:	4b66      	ldr	r3, [pc, #408]	; (800458c <HAL_RCC_OscConfig+0x240>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a65      	ldr	r2, [pc, #404]	; (800458c <HAL_RCC_OscConfig+0x240>)
 80043f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d013      	beq.n	800442c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004404:	f7fd f9b0 	bl	8001768 <HAL_GetTick>
 8004408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800440a:	e008      	b.n	800441e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800440c:	f7fd f9ac 	bl	8001768 <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b64      	cmp	r3, #100	; 0x64
 8004418:	d901      	bls.n	800441e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e207      	b.n	800482e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800441e:	4b5b      	ldr	r3, [pc, #364]	; (800458c <HAL_RCC_OscConfig+0x240>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d0f0      	beq.n	800440c <HAL_RCC_OscConfig+0xc0>
 800442a:	e014      	b.n	8004456 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800442c:	f7fd f99c 	bl	8001768 <HAL_GetTick>
 8004430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004432:	e008      	b.n	8004446 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004434:	f7fd f998 	bl	8001768 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b64      	cmp	r3, #100	; 0x64
 8004440:	d901      	bls.n	8004446 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e1f3      	b.n	800482e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004446:	4b51      	ldr	r3, [pc, #324]	; (800458c <HAL_RCC_OscConfig+0x240>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1f0      	bne.n	8004434 <HAL_RCC_OscConfig+0xe8>
 8004452:	e000      	b.n	8004456 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004454:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d063      	beq.n	800452a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004462:	4b4a      	ldr	r3, [pc, #296]	; (800458c <HAL_RCC_OscConfig+0x240>)
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f003 030c 	and.w	r3, r3, #12
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00b      	beq.n	8004486 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800446e:	4b47      	ldr	r3, [pc, #284]	; (800458c <HAL_RCC_OscConfig+0x240>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004476:	2b08      	cmp	r3, #8
 8004478:	d11c      	bne.n	80044b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800447a:	4b44      	ldr	r3, [pc, #272]	; (800458c <HAL_RCC_OscConfig+0x240>)
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d116      	bne.n	80044b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004486:	4b41      	ldr	r3, [pc, #260]	; (800458c <HAL_RCC_OscConfig+0x240>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d005      	beq.n	800449e <HAL_RCC_OscConfig+0x152>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d001      	beq.n	800449e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e1c7      	b.n	800482e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800449e:	4b3b      	ldr	r3, [pc, #236]	; (800458c <HAL_RCC_OscConfig+0x240>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	00db      	lsls	r3, r3, #3
 80044ac:	4937      	ldr	r1, [pc, #220]	; (800458c <HAL_RCC_OscConfig+0x240>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044b2:	e03a      	b.n	800452a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d020      	beq.n	80044fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044bc:	4b34      	ldr	r3, [pc, #208]	; (8004590 <HAL_RCC_OscConfig+0x244>)
 80044be:	2201      	movs	r2, #1
 80044c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c2:	f7fd f951 	bl	8001768 <HAL_GetTick>
 80044c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044c8:	e008      	b.n	80044dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044ca:	f7fd f94d 	bl	8001768 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d901      	bls.n	80044dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e1a8      	b.n	800482e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044dc:	4b2b      	ldr	r3, [pc, #172]	; (800458c <HAL_RCC_OscConfig+0x240>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d0f0      	beq.n	80044ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044e8:	4b28      	ldr	r3, [pc, #160]	; (800458c <HAL_RCC_OscConfig+0x240>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	00db      	lsls	r3, r3, #3
 80044f6:	4925      	ldr	r1, [pc, #148]	; (800458c <HAL_RCC_OscConfig+0x240>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	600b      	str	r3, [r1, #0]
 80044fc:	e015      	b.n	800452a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044fe:	4b24      	ldr	r3, [pc, #144]	; (8004590 <HAL_RCC_OscConfig+0x244>)
 8004500:	2200      	movs	r2, #0
 8004502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004504:	f7fd f930 	bl	8001768 <HAL_GetTick>
 8004508:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800450a:	e008      	b.n	800451e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800450c:	f7fd f92c 	bl	8001768 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b02      	cmp	r3, #2
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e187      	b.n	800482e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800451e:	4b1b      	ldr	r3, [pc, #108]	; (800458c <HAL_RCC_OscConfig+0x240>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1f0      	bne.n	800450c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0308 	and.w	r3, r3, #8
 8004532:	2b00      	cmp	r3, #0
 8004534:	d036      	beq.n	80045a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d016      	beq.n	800456c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800453e:	4b15      	ldr	r3, [pc, #84]	; (8004594 <HAL_RCC_OscConfig+0x248>)
 8004540:	2201      	movs	r2, #1
 8004542:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004544:	f7fd f910 	bl	8001768 <HAL_GetTick>
 8004548:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800454a:	e008      	b.n	800455e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800454c:	f7fd f90c 	bl	8001768 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b02      	cmp	r3, #2
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e167      	b.n	800482e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800455e:	4b0b      	ldr	r3, [pc, #44]	; (800458c <HAL_RCC_OscConfig+0x240>)
 8004560:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	2b00      	cmp	r3, #0
 8004568:	d0f0      	beq.n	800454c <HAL_RCC_OscConfig+0x200>
 800456a:	e01b      	b.n	80045a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800456c:	4b09      	ldr	r3, [pc, #36]	; (8004594 <HAL_RCC_OscConfig+0x248>)
 800456e:	2200      	movs	r2, #0
 8004570:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004572:	f7fd f8f9 	bl	8001768 <HAL_GetTick>
 8004576:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004578:	e00e      	b.n	8004598 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800457a:	f7fd f8f5 	bl	8001768 <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	2b02      	cmp	r3, #2
 8004586:	d907      	bls.n	8004598 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e150      	b.n	800482e <HAL_RCC_OscConfig+0x4e2>
 800458c:	40023800 	.word	0x40023800
 8004590:	42470000 	.word	0x42470000
 8004594:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004598:	4b88      	ldr	r3, [pc, #544]	; (80047bc <HAL_RCC_OscConfig+0x470>)
 800459a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800459c:	f003 0302 	and.w	r3, r3, #2
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1ea      	bne.n	800457a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0304 	and.w	r3, r3, #4
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f000 8097 	beq.w	80046e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045b2:	2300      	movs	r3, #0
 80045b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045b6:	4b81      	ldr	r3, [pc, #516]	; (80047bc <HAL_RCC_OscConfig+0x470>)
 80045b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10f      	bne.n	80045e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045c2:	2300      	movs	r3, #0
 80045c4:	60bb      	str	r3, [r7, #8]
 80045c6:	4b7d      	ldr	r3, [pc, #500]	; (80047bc <HAL_RCC_OscConfig+0x470>)
 80045c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ca:	4a7c      	ldr	r2, [pc, #496]	; (80047bc <HAL_RCC_OscConfig+0x470>)
 80045cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045d0:	6413      	str	r3, [r2, #64]	; 0x40
 80045d2:	4b7a      	ldr	r3, [pc, #488]	; (80047bc <HAL_RCC_OscConfig+0x470>)
 80045d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045da:	60bb      	str	r3, [r7, #8]
 80045dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045de:	2301      	movs	r3, #1
 80045e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045e2:	4b77      	ldr	r3, [pc, #476]	; (80047c0 <HAL_RCC_OscConfig+0x474>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d118      	bne.n	8004620 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045ee:	4b74      	ldr	r3, [pc, #464]	; (80047c0 <HAL_RCC_OscConfig+0x474>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a73      	ldr	r2, [pc, #460]	; (80047c0 <HAL_RCC_OscConfig+0x474>)
 80045f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045fa:	f7fd f8b5 	bl	8001768 <HAL_GetTick>
 80045fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004600:	e008      	b.n	8004614 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004602:	f7fd f8b1 	bl	8001768 <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	2b02      	cmp	r3, #2
 800460e:	d901      	bls.n	8004614 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e10c      	b.n	800482e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004614:	4b6a      	ldr	r3, [pc, #424]	; (80047c0 <HAL_RCC_OscConfig+0x474>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800461c:	2b00      	cmp	r3, #0
 800461e:	d0f0      	beq.n	8004602 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d106      	bne.n	8004636 <HAL_RCC_OscConfig+0x2ea>
 8004628:	4b64      	ldr	r3, [pc, #400]	; (80047bc <HAL_RCC_OscConfig+0x470>)
 800462a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800462c:	4a63      	ldr	r2, [pc, #396]	; (80047bc <HAL_RCC_OscConfig+0x470>)
 800462e:	f043 0301 	orr.w	r3, r3, #1
 8004632:	6713      	str	r3, [r2, #112]	; 0x70
 8004634:	e01c      	b.n	8004670 <HAL_RCC_OscConfig+0x324>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	2b05      	cmp	r3, #5
 800463c:	d10c      	bne.n	8004658 <HAL_RCC_OscConfig+0x30c>
 800463e:	4b5f      	ldr	r3, [pc, #380]	; (80047bc <HAL_RCC_OscConfig+0x470>)
 8004640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004642:	4a5e      	ldr	r2, [pc, #376]	; (80047bc <HAL_RCC_OscConfig+0x470>)
 8004644:	f043 0304 	orr.w	r3, r3, #4
 8004648:	6713      	str	r3, [r2, #112]	; 0x70
 800464a:	4b5c      	ldr	r3, [pc, #368]	; (80047bc <HAL_RCC_OscConfig+0x470>)
 800464c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800464e:	4a5b      	ldr	r2, [pc, #364]	; (80047bc <HAL_RCC_OscConfig+0x470>)
 8004650:	f043 0301 	orr.w	r3, r3, #1
 8004654:	6713      	str	r3, [r2, #112]	; 0x70
 8004656:	e00b      	b.n	8004670 <HAL_RCC_OscConfig+0x324>
 8004658:	4b58      	ldr	r3, [pc, #352]	; (80047bc <HAL_RCC_OscConfig+0x470>)
 800465a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800465c:	4a57      	ldr	r2, [pc, #348]	; (80047bc <HAL_RCC_OscConfig+0x470>)
 800465e:	f023 0301 	bic.w	r3, r3, #1
 8004662:	6713      	str	r3, [r2, #112]	; 0x70
 8004664:	4b55      	ldr	r3, [pc, #340]	; (80047bc <HAL_RCC_OscConfig+0x470>)
 8004666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004668:	4a54      	ldr	r2, [pc, #336]	; (80047bc <HAL_RCC_OscConfig+0x470>)
 800466a:	f023 0304 	bic.w	r3, r3, #4
 800466e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d015      	beq.n	80046a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004678:	f7fd f876 	bl	8001768 <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800467e:	e00a      	b.n	8004696 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004680:	f7fd f872 	bl	8001768 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	f241 3288 	movw	r2, #5000	; 0x1388
 800468e:	4293      	cmp	r3, r2
 8004690:	d901      	bls.n	8004696 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e0cb      	b.n	800482e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004696:	4b49      	ldr	r3, [pc, #292]	; (80047bc <HAL_RCC_OscConfig+0x470>)
 8004698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d0ee      	beq.n	8004680 <HAL_RCC_OscConfig+0x334>
 80046a2:	e014      	b.n	80046ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046a4:	f7fd f860 	bl	8001768 <HAL_GetTick>
 80046a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046aa:	e00a      	b.n	80046c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046ac:	f7fd f85c 	bl	8001768 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e0b5      	b.n	800482e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046c2:	4b3e      	ldr	r3, [pc, #248]	; (80047bc <HAL_RCC_OscConfig+0x470>)
 80046c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c6:	f003 0302 	and.w	r3, r3, #2
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1ee      	bne.n	80046ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046ce:	7dfb      	ldrb	r3, [r7, #23]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d105      	bne.n	80046e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046d4:	4b39      	ldr	r3, [pc, #228]	; (80047bc <HAL_RCC_OscConfig+0x470>)
 80046d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d8:	4a38      	ldr	r2, [pc, #224]	; (80047bc <HAL_RCC_OscConfig+0x470>)
 80046da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f000 80a1 	beq.w	800482c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046ea:	4b34      	ldr	r3, [pc, #208]	; (80047bc <HAL_RCC_OscConfig+0x470>)
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f003 030c 	and.w	r3, r3, #12
 80046f2:	2b08      	cmp	r3, #8
 80046f4:	d05c      	beq.n	80047b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d141      	bne.n	8004782 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046fe:	4b31      	ldr	r3, [pc, #196]	; (80047c4 <HAL_RCC_OscConfig+0x478>)
 8004700:	2200      	movs	r2, #0
 8004702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004704:	f7fd f830 	bl	8001768 <HAL_GetTick>
 8004708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800470a:	e008      	b.n	800471e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800470c:	f7fd f82c 	bl	8001768 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b02      	cmp	r3, #2
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e087      	b.n	800482e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800471e:	4b27      	ldr	r3, [pc, #156]	; (80047bc <HAL_RCC_OscConfig+0x470>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1f0      	bne.n	800470c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	69da      	ldr	r2, [r3, #28]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a1b      	ldr	r3, [r3, #32]
 8004732:	431a      	orrs	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004738:	019b      	lsls	r3, r3, #6
 800473a:	431a      	orrs	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004740:	085b      	lsrs	r3, r3, #1
 8004742:	3b01      	subs	r3, #1
 8004744:	041b      	lsls	r3, r3, #16
 8004746:	431a      	orrs	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474c:	061b      	lsls	r3, r3, #24
 800474e:	491b      	ldr	r1, [pc, #108]	; (80047bc <HAL_RCC_OscConfig+0x470>)
 8004750:	4313      	orrs	r3, r2
 8004752:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004754:	4b1b      	ldr	r3, [pc, #108]	; (80047c4 <HAL_RCC_OscConfig+0x478>)
 8004756:	2201      	movs	r2, #1
 8004758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800475a:	f7fd f805 	bl	8001768 <HAL_GetTick>
 800475e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004760:	e008      	b.n	8004774 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004762:	f7fd f801 	bl	8001768 <HAL_GetTick>
 8004766:	4602      	mov	r2, r0
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	2b02      	cmp	r3, #2
 800476e:	d901      	bls.n	8004774 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e05c      	b.n	800482e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004774:	4b11      	ldr	r3, [pc, #68]	; (80047bc <HAL_RCC_OscConfig+0x470>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d0f0      	beq.n	8004762 <HAL_RCC_OscConfig+0x416>
 8004780:	e054      	b.n	800482c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004782:	4b10      	ldr	r3, [pc, #64]	; (80047c4 <HAL_RCC_OscConfig+0x478>)
 8004784:	2200      	movs	r2, #0
 8004786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004788:	f7fc ffee 	bl	8001768 <HAL_GetTick>
 800478c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800478e:	e008      	b.n	80047a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004790:	f7fc ffea 	bl	8001768 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b02      	cmp	r3, #2
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e045      	b.n	800482e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047a2:	4b06      	ldr	r3, [pc, #24]	; (80047bc <HAL_RCC_OscConfig+0x470>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1f0      	bne.n	8004790 <HAL_RCC_OscConfig+0x444>
 80047ae:	e03d      	b.n	800482c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d107      	bne.n	80047c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e038      	b.n	800482e <HAL_RCC_OscConfig+0x4e2>
 80047bc:	40023800 	.word	0x40023800
 80047c0:	40007000 	.word	0x40007000
 80047c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047c8:	4b1b      	ldr	r3, [pc, #108]	; (8004838 <HAL_RCC_OscConfig+0x4ec>)
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d028      	beq.n	8004828 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d121      	bne.n	8004828 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d11a      	bne.n	8004828 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80047f8:	4013      	ands	r3, r2
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80047fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004800:	4293      	cmp	r3, r2
 8004802:	d111      	bne.n	8004828 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480e:	085b      	lsrs	r3, r3, #1
 8004810:	3b01      	subs	r3, #1
 8004812:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004814:	429a      	cmp	r2, r3
 8004816:	d107      	bne.n	8004828 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004822:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004824:	429a      	cmp	r2, r3
 8004826:	d001      	beq.n	800482c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e000      	b.n	800482e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3718      	adds	r7, #24
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	40023800 	.word	0x40023800

0800483c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d101      	bne.n	8004850 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e0cc      	b.n	80049ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004850:	4b68      	ldr	r3, [pc, #416]	; (80049f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 030f 	and.w	r3, r3, #15
 8004858:	683a      	ldr	r2, [r7, #0]
 800485a:	429a      	cmp	r2, r3
 800485c:	d90c      	bls.n	8004878 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800485e:	4b65      	ldr	r3, [pc, #404]	; (80049f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004860:	683a      	ldr	r2, [r7, #0]
 8004862:	b2d2      	uxtb	r2, r2
 8004864:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004866:	4b63      	ldr	r3, [pc, #396]	; (80049f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 030f 	and.w	r3, r3, #15
 800486e:	683a      	ldr	r2, [r7, #0]
 8004870:	429a      	cmp	r2, r3
 8004872:	d001      	beq.n	8004878 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e0b8      	b.n	80049ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0302 	and.w	r3, r3, #2
 8004880:	2b00      	cmp	r3, #0
 8004882:	d020      	beq.n	80048c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0304 	and.w	r3, r3, #4
 800488c:	2b00      	cmp	r3, #0
 800488e:	d005      	beq.n	800489c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004890:	4b59      	ldr	r3, [pc, #356]	; (80049f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	4a58      	ldr	r2, [pc, #352]	; (80049f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004896:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800489a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0308 	and.w	r3, r3, #8
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d005      	beq.n	80048b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048a8:	4b53      	ldr	r3, [pc, #332]	; (80049f8 <HAL_RCC_ClockConfig+0x1bc>)
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	4a52      	ldr	r2, [pc, #328]	; (80049f8 <HAL_RCC_ClockConfig+0x1bc>)
 80048ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048b4:	4b50      	ldr	r3, [pc, #320]	; (80049f8 <HAL_RCC_ClockConfig+0x1bc>)
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	494d      	ldr	r1, [pc, #308]	; (80049f8 <HAL_RCC_ClockConfig+0x1bc>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d044      	beq.n	800495c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d107      	bne.n	80048ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048da:	4b47      	ldr	r3, [pc, #284]	; (80049f8 <HAL_RCC_ClockConfig+0x1bc>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d119      	bne.n	800491a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e07f      	b.n	80049ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d003      	beq.n	80048fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048f6:	2b03      	cmp	r3, #3
 80048f8:	d107      	bne.n	800490a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048fa:	4b3f      	ldr	r3, [pc, #252]	; (80049f8 <HAL_RCC_ClockConfig+0x1bc>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d109      	bne.n	800491a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e06f      	b.n	80049ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800490a:	4b3b      	ldr	r3, [pc, #236]	; (80049f8 <HAL_RCC_ClockConfig+0x1bc>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0302 	and.w	r3, r3, #2
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e067      	b.n	80049ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800491a:	4b37      	ldr	r3, [pc, #220]	; (80049f8 <HAL_RCC_ClockConfig+0x1bc>)
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f023 0203 	bic.w	r2, r3, #3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	4934      	ldr	r1, [pc, #208]	; (80049f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004928:	4313      	orrs	r3, r2
 800492a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800492c:	f7fc ff1c 	bl	8001768 <HAL_GetTick>
 8004930:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004932:	e00a      	b.n	800494a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004934:	f7fc ff18 	bl	8001768 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004942:	4293      	cmp	r3, r2
 8004944:	d901      	bls.n	800494a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e04f      	b.n	80049ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800494a:	4b2b      	ldr	r3, [pc, #172]	; (80049f8 <HAL_RCC_ClockConfig+0x1bc>)
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f003 020c 	and.w	r2, r3, #12
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	429a      	cmp	r2, r3
 800495a:	d1eb      	bne.n	8004934 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800495c:	4b25      	ldr	r3, [pc, #148]	; (80049f4 <HAL_RCC_ClockConfig+0x1b8>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 030f 	and.w	r3, r3, #15
 8004964:	683a      	ldr	r2, [r7, #0]
 8004966:	429a      	cmp	r2, r3
 8004968:	d20c      	bcs.n	8004984 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800496a:	4b22      	ldr	r3, [pc, #136]	; (80049f4 <HAL_RCC_ClockConfig+0x1b8>)
 800496c:	683a      	ldr	r2, [r7, #0]
 800496e:	b2d2      	uxtb	r2, r2
 8004970:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004972:	4b20      	ldr	r3, [pc, #128]	; (80049f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 030f 	and.w	r3, r3, #15
 800497a:	683a      	ldr	r2, [r7, #0]
 800497c:	429a      	cmp	r2, r3
 800497e:	d001      	beq.n	8004984 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e032      	b.n	80049ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0304 	and.w	r3, r3, #4
 800498c:	2b00      	cmp	r3, #0
 800498e:	d008      	beq.n	80049a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004990:	4b19      	ldr	r3, [pc, #100]	; (80049f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	4916      	ldr	r1, [pc, #88]	; (80049f8 <HAL_RCC_ClockConfig+0x1bc>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0308 	and.w	r3, r3, #8
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d009      	beq.n	80049c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049ae:	4b12      	ldr	r3, [pc, #72]	; (80049f8 <HAL_RCC_ClockConfig+0x1bc>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	00db      	lsls	r3, r3, #3
 80049bc:	490e      	ldr	r1, [pc, #56]	; (80049f8 <HAL_RCC_ClockConfig+0x1bc>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049c2:	f000 f821 	bl	8004a08 <HAL_RCC_GetSysClockFreq>
 80049c6:	4602      	mov	r2, r0
 80049c8:	4b0b      	ldr	r3, [pc, #44]	; (80049f8 <HAL_RCC_ClockConfig+0x1bc>)
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	091b      	lsrs	r3, r3, #4
 80049ce:	f003 030f 	and.w	r3, r3, #15
 80049d2:	490a      	ldr	r1, [pc, #40]	; (80049fc <HAL_RCC_ClockConfig+0x1c0>)
 80049d4:	5ccb      	ldrb	r3, [r1, r3]
 80049d6:	fa22 f303 	lsr.w	r3, r2, r3
 80049da:	4a09      	ldr	r2, [pc, #36]	; (8004a00 <HAL_RCC_ClockConfig+0x1c4>)
 80049dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80049de:	4b09      	ldr	r3, [pc, #36]	; (8004a04 <HAL_RCC_ClockConfig+0x1c8>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7fc fc7a 	bl	80012dc <HAL_InitTick>

  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3710      	adds	r7, #16
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	40023c00 	.word	0x40023c00
 80049f8:	40023800 	.word	0x40023800
 80049fc:	0800a8b4 	.word	0x0800a8b4
 8004a00:	20000000 	.word	0x20000000
 8004a04:	20000004 	.word	0x20000004

08004a08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a0c:	b094      	sub	sp, #80	; 0x50
 8004a0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a10:	2300      	movs	r3, #0
 8004a12:	647b      	str	r3, [r7, #68]	; 0x44
 8004a14:	2300      	movs	r3, #0
 8004a16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a18:	2300      	movs	r3, #0
 8004a1a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a20:	4b79      	ldr	r3, [pc, #484]	; (8004c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f003 030c 	and.w	r3, r3, #12
 8004a28:	2b08      	cmp	r3, #8
 8004a2a:	d00d      	beq.n	8004a48 <HAL_RCC_GetSysClockFreq+0x40>
 8004a2c:	2b08      	cmp	r3, #8
 8004a2e:	f200 80e1 	bhi.w	8004bf4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d002      	beq.n	8004a3c <HAL_RCC_GetSysClockFreq+0x34>
 8004a36:	2b04      	cmp	r3, #4
 8004a38:	d003      	beq.n	8004a42 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a3a:	e0db      	b.n	8004bf4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a3c:	4b73      	ldr	r3, [pc, #460]	; (8004c0c <HAL_RCC_GetSysClockFreq+0x204>)
 8004a3e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004a40:	e0db      	b.n	8004bfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a42:	4b73      	ldr	r3, [pc, #460]	; (8004c10 <HAL_RCC_GetSysClockFreq+0x208>)
 8004a44:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a46:	e0d8      	b.n	8004bfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a48:	4b6f      	ldr	r3, [pc, #444]	; (8004c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a50:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a52:	4b6d      	ldr	r3, [pc, #436]	; (8004c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d063      	beq.n	8004b26 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a5e:	4b6a      	ldr	r3, [pc, #424]	; (8004c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	099b      	lsrs	r3, r3, #6
 8004a64:	2200      	movs	r2, #0
 8004a66:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a68:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a70:	633b      	str	r3, [r7, #48]	; 0x30
 8004a72:	2300      	movs	r3, #0
 8004a74:	637b      	str	r3, [r7, #52]	; 0x34
 8004a76:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004a7a:	4622      	mov	r2, r4
 8004a7c:	462b      	mov	r3, r5
 8004a7e:	f04f 0000 	mov.w	r0, #0
 8004a82:	f04f 0100 	mov.w	r1, #0
 8004a86:	0159      	lsls	r1, r3, #5
 8004a88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a8c:	0150      	lsls	r0, r2, #5
 8004a8e:	4602      	mov	r2, r0
 8004a90:	460b      	mov	r3, r1
 8004a92:	4621      	mov	r1, r4
 8004a94:	1a51      	subs	r1, r2, r1
 8004a96:	6139      	str	r1, [r7, #16]
 8004a98:	4629      	mov	r1, r5
 8004a9a:	eb63 0301 	sbc.w	r3, r3, r1
 8004a9e:	617b      	str	r3, [r7, #20]
 8004aa0:	f04f 0200 	mov.w	r2, #0
 8004aa4:	f04f 0300 	mov.w	r3, #0
 8004aa8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004aac:	4659      	mov	r1, fp
 8004aae:	018b      	lsls	r3, r1, #6
 8004ab0:	4651      	mov	r1, sl
 8004ab2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ab6:	4651      	mov	r1, sl
 8004ab8:	018a      	lsls	r2, r1, #6
 8004aba:	4651      	mov	r1, sl
 8004abc:	ebb2 0801 	subs.w	r8, r2, r1
 8004ac0:	4659      	mov	r1, fp
 8004ac2:	eb63 0901 	sbc.w	r9, r3, r1
 8004ac6:	f04f 0200 	mov.w	r2, #0
 8004aca:	f04f 0300 	mov.w	r3, #0
 8004ace:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ad2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ad6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ada:	4690      	mov	r8, r2
 8004adc:	4699      	mov	r9, r3
 8004ade:	4623      	mov	r3, r4
 8004ae0:	eb18 0303 	adds.w	r3, r8, r3
 8004ae4:	60bb      	str	r3, [r7, #8]
 8004ae6:	462b      	mov	r3, r5
 8004ae8:	eb49 0303 	adc.w	r3, r9, r3
 8004aec:	60fb      	str	r3, [r7, #12]
 8004aee:	f04f 0200 	mov.w	r2, #0
 8004af2:	f04f 0300 	mov.w	r3, #0
 8004af6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004afa:	4629      	mov	r1, r5
 8004afc:	024b      	lsls	r3, r1, #9
 8004afe:	4621      	mov	r1, r4
 8004b00:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b04:	4621      	mov	r1, r4
 8004b06:	024a      	lsls	r2, r1, #9
 8004b08:	4610      	mov	r0, r2
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b0e:	2200      	movs	r2, #0
 8004b10:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b18:	f7fb fbba 	bl	8000290 <__aeabi_uldivmod>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	460b      	mov	r3, r1
 8004b20:	4613      	mov	r3, r2
 8004b22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b24:	e058      	b.n	8004bd8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b26:	4b38      	ldr	r3, [pc, #224]	; (8004c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	099b      	lsrs	r3, r3, #6
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	4618      	mov	r0, r3
 8004b30:	4611      	mov	r1, r2
 8004b32:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b36:	623b      	str	r3, [r7, #32]
 8004b38:	2300      	movs	r3, #0
 8004b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b40:	4642      	mov	r2, r8
 8004b42:	464b      	mov	r3, r9
 8004b44:	f04f 0000 	mov.w	r0, #0
 8004b48:	f04f 0100 	mov.w	r1, #0
 8004b4c:	0159      	lsls	r1, r3, #5
 8004b4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b52:	0150      	lsls	r0, r2, #5
 8004b54:	4602      	mov	r2, r0
 8004b56:	460b      	mov	r3, r1
 8004b58:	4641      	mov	r1, r8
 8004b5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b5e:	4649      	mov	r1, r9
 8004b60:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b64:	f04f 0200 	mov.w	r2, #0
 8004b68:	f04f 0300 	mov.w	r3, #0
 8004b6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b78:	ebb2 040a 	subs.w	r4, r2, sl
 8004b7c:	eb63 050b 	sbc.w	r5, r3, fp
 8004b80:	f04f 0200 	mov.w	r2, #0
 8004b84:	f04f 0300 	mov.w	r3, #0
 8004b88:	00eb      	lsls	r3, r5, #3
 8004b8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b8e:	00e2      	lsls	r2, r4, #3
 8004b90:	4614      	mov	r4, r2
 8004b92:	461d      	mov	r5, r3
 8004b94:	4643      	mov	r3, r8
 8004b96:	18e3      	adds	r3, r4, r3
 8004b98:	603b      	str	r3, [r7, #0]
 8004b9a:	464b      	mov	r3, r9
 8004b9c:	eb45 0303 	adc.w	r3, r5, r3
 8004ba0:	607b      	str	r3, [r7, #4]
 8004ba2:	f04f 0200 	mov.w	r2, #0
 8004ba6:	f04f 0300 	mov.w	r3, #0
 8004baa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bae:	4629      	mov	r1, r5
 8004bb0:	028b      	lsls	r3, r1, #10
 8004bb2:	4621      	mov	r1, r4
 8004bb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bb8:	4621      	mov	r1, r4
 8004bba:	028a      	lsls	r2, r1, #10
 8004bbc:	4610      	mov	r0, r2
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	61bb      	str	r3, [r7, #24]
 8004bc6:	61fa      	str	r2, [r7, #28]
 8004bc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bcc:	f7fb fb60 	bl	8000290 <__aeabi_uldivmod>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004bd8:	4b0b      	ldr	r3, [pc, #44]	; (8004c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	0c1b      	lsrs	r3, r3, #16
 8004bde:	f003 0303 	and.w	r3, r3, #3
 8004be2:	3301      	adds	r3, #1
 8004be4:	005b      	lsls	r3, r3, #1
 8004be6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004be8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004bea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004bf2:	e002      	b.n	8004bfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bf4:	4b05      	ldr	r3, [pc, #20]	; (8004c0c <HAL_RCC_GetSysClockFreq+0x204>)
 8004bf6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004bf8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3750      	adds	r7, #80	; 0x50
 8004c00:	46bd      	mov	sp, r7
 8004c02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c06:	bf00      	nop
 8004c08:	40023800 	.word	0x40023800
 8004c0c:	00f42400 	.word	0x00f42400
 8004c10:	007a1200 	.word	0x007a1200

08004c14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c14:	b480      	push	{r7}
 8004c16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c18:	4b03      	ldr	r3, [pc, #12]	; (8004c28 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	20000000 	.word	0x20000000

08004c2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c30:	f7ff fff0 	bl	8004c14 <HAL_RCC_GetHCLKFreq>
 8004c34:	4602      	mov	r2, r0
 8004c36:	4b05      	ldr	r3, [pc, #20]	; (8004c4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	0a9b      	lsrs	r3, r3, #10
 8004c3c:	f003 0307 	and.w	r3, r3, #7
 8004c40:	4903      	ldr	r1, [pc, #12]	; (8004c50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c42:	5ccb      	ldrb	r3, [r1, r3]
 8004c44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	40023800 	.word	0x40023800
 8004c50:	0800a8c4 	.word	0x0800a8c4

08004c54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c58:	f7ff ffdc 	bl	8004c14 <HAL_RCC_GetHCLKFreq>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	4b05      	ldr	r3, [pc, #20]	; (8004c74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	0b5b      	lsrs	r3, r3, #13
 8004c64:	f003 0307 	and.w	r3, r3, #7
 8004c68:	4903      	ldr	r1, [pc, #12]	; (8004c78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c6a:	5ccb      	ldrb	r3, [r1, r3]
 8004c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	40023800 	.word	0x40023800
 8004c78:	0800a8c4 	.word	0x0800a8c4

08004c7c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	220f      	movs	r2, #15
 8004c8a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004c8c:	4b12      	ldr	r3, [pc, #72]	; (8004cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	f003 0203 	and.w	r2, r3, #3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004c98:	4b0f      	ldr	r3, [pc, #60]	; (8004cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004ca4:	4b0c      	ldr	r3, [pc, #48]	; (8004cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004cb0:	4b09      	ldr	r3, [pc, #36]	; (8004cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	08db      	lsrs	r3, r3, #3
 8004cb6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004cbe:	4b07      	ldr	r3, [pc, #28]	; (8004cdc <HAL_RCC_GetClockConfig+0x60>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 020f 	and.w	r2, r3, #15
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	601a      	str	r2, [r3, #0]
}
 8004cca:	bf00      	nop
 8004ccc:	370c      	adds	r7, #12
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	40023800 	.word	0x40023800
 8004cdc:	40023c00 	.word	0x40023c00

08004ce0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d101      	bne.n	8004cf2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e07b      	b.n	8004dea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d108      	bne.n	8004d0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d02:	d009      	beq.n	8004d18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	61da      	str	r2, [r3, #28]
 8004d0a:	e005      	b.n	8004d18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d106      	bne.n	8004d38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f7fc f946 	bl	8000fc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2202      	movs	r2, #2
 8004d3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d4e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004d60:	431a      	orrs	r2, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d6a:	431a      	orrs	r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	f003 0302 	and.w	r3, r3, #2
 8004d74:	431a      	orrs	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	f003 0301 	and.w	r3, r3, #1
 8004d7e:	431a      	orrs	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d88:	431a      	orrs	r2, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	69db      	ldr	r3, [r3, #28]
 8004d8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d92:	431a      	orrs	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a1b      	ldr	r3, [r3, #32]
 8004d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d9c:	ea42 0103 	orr.w	r1, r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	430a      	orrs	r2, r1
 8004dae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	0c1b      	lsrs	r3, r3, #16
 8004db6:	f003 0104 	and.w	r1, r3, #4
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbe:	f003 0210 	and.w	r2, r3, #16
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	69da      	ldr	r2, [r3, #28]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dd8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3708      	adds	r7, #8
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
	...

08004df4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b088      	sub	sp, #32
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	099b      	lsrs	r3, r3, #6
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d10f      	bne.n	8004e38 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00a      	beq.n	8004e38 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	099b      	lsrs	r3, r3, #6
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d004      	beq.n	8004e38 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	4798      	blx	r3
    return;
 8004e36:	e0d7      	b.n	8004fe8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	085b      	lsrs	r3, r3, #1
 8004e3c:	f003 0301 	and.w	r3, r3, #1
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d00a      	beq.n	8004e5a <HAL_SPI_IRQHandler+0x66>
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	09db      	lsrs	r3, r3, #7
 8004e48:	f003 0301 	and.w	r3, r3, #1
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d004      	beq.n	8004e5a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	4798      	blx	r3
    return;
 8004e58:	e0c6      	b.n	8004fe8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	095b      	lsrs	r3, r3, #5
 8004e5e:	f003 0301 	and.w	r3, r3, #1
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d10c      	bne.n	8004e80 <HAL_SPI_IRQHandler+0x8c>
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	099b      	lsrs	r3, r3, #6
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d106      	bne.n	8004e80 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	0a1b      	lsrs	r3, r3, #8
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	f000 80b4 	beq.w	8004fe8 <HAL_SPI_IRQHandler+0x1f4>
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	095b      	lsrs	r3, r3, #5
 8004e84:	f003 0301 	and.w	r3, r3, #1
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	f000 80ad 	beq.w	8004fe8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	099b      	lsrs	r3, r3, #6
 8004e92:	f003 0301 	and.w	r3, r3, #1
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d023      	beq.n	8004ee2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b03      	cmp	r3, #3
 8004ea4:	d011      	beq.n	8004eca <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eaa:	f043 0204 	orr.w	r2, r3, #4
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	617b      	str	r3, [r7, #20]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	617b      	str	r3, [r7, #20]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	617b      	str	r3, [r7, #20]
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	e00b      	b.n	8004ee2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004eca:	2300      	movs	r3, #0
 8004ecc:	613b      	str	r3, [r7, #16]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	613b      	str	r3, [r7, #16]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	613b      	str	r3, [r7, #16]
 8004ede:	693b      	ldr	r3, [r7, #16]
        return;
 8004ee0:	e082      	b.n	8004fe8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	095b      	lsrs	r3, r3, #5
 8004ee6:	f003 0301 	and.w	r3, r3, #1
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d014      	beq.n	8004f18 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ef2:	f043 0201 	orr.w	r2, r3, #1
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004efa:	2300      	movs	r3, #0
 8004efc:	60fb      	str	r3, [r7, #12]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	60fb      	str	r3, [r7, #12]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f14:	601a      	str	r2, [r3, #0]
 8004f16:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	0a1b      	lsrs	r3, r3, #8
 8004f1c:	f003 0301 	and.w	r3, r3, #1
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d00c      	beq.n	8004f3e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f28:	f043 0208 	orr.w	r2, r3, #8
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004f30:	2300      	movs	r3, #0
 8004f32:	60bb      	str	r3, [r7, #8]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	60bb      	str	r3, [r7, #8]
 8004f3c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d04f      	beq.n	8004fe6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	685a      	ldr	r2, [r3, #4]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f54:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	f003 0302 	and.w	r3, r3, #2
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d104      	bne.n	8004f72 <HAL_SPI_IRQHandler+0x17e>
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d034      	beq.n	8004fdc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f022 0203 	bic.w	r2, r2, #3
 8004f80:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d011      	beq.n	8004fae <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f8e:	4a18      	ldr	r2, [pc, #96]	; (8004ff0 <HAL_SPI_IRQHandler+0x1fc>)
 8004f90:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7fc fe66 	bl	8001c68 <HAL_DMA_Abort_IT>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d005      	beq.n	8004fae <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fa6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d016      	beq.n	8004fe4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fba:	4a0d      	ldr	r2, [pc, #52]	; (8004ff0 <HAL_SPI_IRQHandler+0x1fc>)
 8004fbc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f7fc fe50 	bl	8001c68 <HAL_DMA_Abort_IT>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00a      	beq.n	8004fe4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004fda:	e003      	b.n	8004fe4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f000 f809 	bl	8004ff4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004fe2:	e000      	b.n	8004fe6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004fe4:	bf00      	nop
    return;
 8004fe6:	bf00      	nop
  }
}
 8004fe8:	3720      	adds	r7, #32
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	08005009 	.word	0x08005009

08004ff4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004ffc:	bf00      	nop
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005014:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2200      	movs	r2, #0
 8005020:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f7ff ffe6 	bl	8004ff4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005028:	bf00      	nop
 800502a:	3710      	adds	r7, #16
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d101      	bne.n	8005042 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e041      	b.n	80050c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005048:	b2db      	uxtb	r3, r3
 800504a:	2b00      	cmp	r3, #0
 800504c:	d106      	bne.n	800505c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 f839 	bl	80050ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2202      	movs	r2, #2
 8005060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	3304      	adds	r3, #4
 800506c:	4619      	mov	r1, r3
 800506e:	4610      	mov	r0, r2
 8005070:	f000 f9d8 	bl	8005424 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3708      	adds	r7, #8
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80050ce:	b480      	push	{r7}
 80050d0:	b083      	sub	sp, #12
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80050d6:	bf00      	nop
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
	...

080050e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b085      	sub	sp, #20
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d001      	beq.n	80050fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e04e      	b.n	800519a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2202      	movs	r2, #2
 8005100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68da      	ldr	r2, [r3, #12]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f042 0201 	orr.w	r2, r2, #1
 8005112:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a23      	ldr	r2, [pc, #140]	; (80051a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d022      	beq.n	8005164 <HAL_TIM_Base_Start_IT+0x80>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005126:	d01d      	beq.n	8005164 <HAL_TIM_Base_Start_IT+0x80>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a1f      	ldr	r2, [pc, #124]	; (80051ac <HAL_TIM_Base_Start_IT+0xc8>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d018      	beq.n	8005164 <HAL_TIM_Base_Start_IT+0x80>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a1e      	ldr	r2, [pc, #120]	; (80051b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d013      	beq.n	8005164 <HAL_TIM_Base_Start_IT+0x80>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a1c      	ldr	r2, [pc, #112]	; (80051b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d00e      	beq.n	8005164 <HAL_TIM_Base_Start_IT+0x80>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a1b      	ldr	r2, [pc, #108]	; (80051b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d009      	beq.n	8005164 <HAL_TIM_Base_Start_IT+0x80>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a19      	ldr	r2, [pc, #100]	; (80051bc <HAL_TIM_Base_Start_IT+0xd8>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d004      	beq.n	8005164 <HAL_TIM_Base_Start_IT+0x80>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a18      	ldr	r2, [pc, #96]	; (80051c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d111      	bne.n	8005188 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f003 0307 	and.w	r3, r3, #7
 800516e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2b06      	cmp	r3, #6
 8005174:	d010      	beq.n	8005198 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f042 0201 	orr.w	r2, r2, #1
 8005184:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005186:	e007      	b.n	8005198 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f042 0201 	orr.w	r2, r2, #1
 8005196:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3714      	adds	r7, #20
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	40010000 	.word	0x40010000
 80051ac:	40000400 	.word	0x40000400
 80051b0:	40000800 	.word	0x40000800
 80051b4:	40000c00 	.word	0x40000c00
 80051b8:	40010400 	.word	0x40010400
 80051bc:	40014000 	.word	0x40014000
 80051c0:	40001800 	.word	0x40001800

080051c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	f003 0302 	and.w	r3, r3, #2
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d122      	bne.n	8005220 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	f003 0302 	and.w	r3, r3, #2
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d11b      	bne.n	8005220 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f06f 0202 	mvn.w	r2, #2
 80051f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2201      	movs	r2, #1
 80051f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	f003 0303 	and.w	r3, r3, #3
 8005202:	2b00      	cmp	r3, #0
 8005204:	d003      	beq.n	800520e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 f8ee 	bl	80053e8 <HAL_TIM_IC_CaptureCallback>
 800520c:	e005      	b.n	800521a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 f8e0 	bl	80053d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f000 f8f1 	bl	80053fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	f003 0304 	and.w	r3, r3, #4
 800522a:	2b04      	cmp	r3, #4
 800522c:	d122      	bne.n	8005274 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	f003 0304 	and.w	r3, r3, #4
 8005238:	2b04      	cmp	r3, #4
 800523a:	d11b      	bne.n	8005274 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f06f 0204 	mvn.w	r2, #4
 8005244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2202      	movs	r2, #2
 800524a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005256:	2b00      	cmp	r3, #0
 8005258:	d003      	beq.n	8005262 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 f8c4 	bl	80053e8 <HAL_TIM_IC_CaptureCallback>
 8005260:	e005      	b.n	800526e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 f8b6 	bl	80053d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 f8c7 	bl	80053fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	f003 0308 	and.w	r3, r3, #8
 800527e:	2b08      	cmp	r3, #8
 8005280:	d122      	bne.n	80052c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f003 0308 	and.w	r3, r3, #8
 800528c:	2b08      	cmp	r3, #8
 800528e:	d11b      	bne.n	80052c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f06f 0208 	mvn.w	r2, #8
 8005298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2204      	movs	r2, #4
 800529e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	69db      	ldr	r3, [r3, #28]
 80052a6:	f003 0303 	and.w	r3, r3, #3
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d003      	beq.n	80052b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 f89a 	bl	80053e8 <HAL_TIM_IC_CaptureCallback>
 80052b4:	e005      	b.n	80052c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 f88c 	bl	80053d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 f89d 	bl	80053fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	f003 0310 	and.w	r3, r3, #16
 80052d2:	2b10      	cmp	r3, #16
 80052d4:	d122      	bne.n	800531c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	f003 0310 	and.w	r3, r3, #16
 80052e0:	2b10      	cmp	r3, #16
 80052e2:	d11b      	bne.n	800531c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f06f 0210 	mvn.w	r2, #16
 80052ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2208      	movs	r2, #8
 80052f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d003      	beq.n	800530a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 f870 	bl	80053e8 <HAL_TIM_IC_CaptureCallback>
 8005308:	e005      	b.n	8005316 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 f862 	bl	80053d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f000 f873 	bl	80053fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	f003 0301 	and.w	r3, r3, #1
 8005326:	2b01      	cmp	r3, #1
 8005328:	d10e      	bne.n	8005348 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	f003 0301 	and.w	r3, r3, #1
 8005334:	2b01      	cmp	r3, #1
 8005336:	d107      	bne.n	8005348 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f06f 0201 	mvn.w	r2, #1
 8005340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f7fb fd1a 	bl	8000d7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005352:	2b80      	cmp	r3, #128	; 0x80
 8005354:	d10e      	bne.n	8005374 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005360:	2b80      	cmp	r3, #128	; 0x80
 8005362:	d107      	bne.n	8005374 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800536c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 f902 	bl	8005578 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800537e:	2b40      	cmp	r3, #64	; 0x40
 8005380:	d10e      	bne.n	80053a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800538c:	2b40      	cmp	r3, #64	; 0x40
 800538e:	d107      	bne.n	80053a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 f838 	bl	8005410 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	f003 0320 	and.w	r3, r3, #32
 80053aa:	2b20      	cmp	r3, #32
 80053ac:	d10e      	bne.n	80053cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	f003 0320 	and.w	r3, r3, #32
 80053b8:	2b20      	cmp	r3, #32
 80053ba:	d107      	bne.n	80053cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f06f 0220 	mvn.w	r2, #32
 80053c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 f8cc 	bl	8005564 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053cc:	bf00      	nop
 80053ce:	3708      	adds	r7, #8
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053f0:	bf00      	nop
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005404:	bf00      	nop
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005418:	bf00      	nop
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a40      	ldr	r2, [pc, #256]	; (8005538 <TIM_Base_SetConfig+0x114>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d013      	beq.n	8005464 <TIM_Base_SetConfig+0x40>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005442:	d00f      	beq.n	8005464 <TIM_Base_SetConfig+0x40>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a3d      	ldr	r2, [pc, #244]	; (800553c <TIM_Base_SetConfig+0x118>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d00b      	beq.n	8005464 <TIM_Base_SetConfig+0x40>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a3c      	ldr	r2, [pc, #240]	; (8005540 <TIM_Base_SetConfig+0x11c>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d007      	beq.n	8005464 <TIM_Base_SetConfig+0x40>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a3b      	ldr	r2, [pc, #236]	; (8005544 <TIM_Base_SetConfig+0x120>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d003      	beq.n	8005464 <TIM_Base_SetConfig+0x40>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a3a      	ldr	r2, [pc, #232]	; (8005548 <TIM_Base_SetConfig+0x124>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d108      	bne.n	8005476 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800546a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	4313      	orrs	r3, r2
 8005474:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a2f      	ldr	r2, [pc, #188]	; (8005538 <TIM_Base_SetConfig+0x114>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d02b      	beq.n	80054d6 <TIM_Base_SetConfig+0xb2>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005484:	d027      	beq.n	80054d6 <TIM_Base_SetConfig+0xb2>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a2c      	ldr	r2, [pc, #176]	; (800553c <TIM_Base_SetConfig+0x118>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d023      	beq.n	80054d6 <TIM_Base_SetConfig+0xb2>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a2b      	ldr	r2, [pc, #172]	; (8005540 <TIM_Base_SetConfig+0x11c>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d01f      	beq.n	80054d6 <TIM_Base_SetConfig+0xb2>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a2a      	ldr	r2, [pc, #168]	; (8005544 <TIM_Base_SetConfig+0x120>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d01b      	beq.n	80054d6 <TIM_Base_SetConfig+0xb2>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a29      	ldr	r2, [pc, #164]	; (8005548 <TIM_Base_SetConfig+0x124>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d017      	beq.n	80054d6 <TIM_Base_SetConfig+0xb2>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a28      	ldr	r2, [pc, #160]	; (800554c <TIM_Base_SetConfig+0x128>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d013      	beq.n	80054d6 <TIM_Base_SetConfig+0xb2>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a27      	ldr	r2, [pc, #156]	; (8005550 <TIM_Base_SetConfig+0x12c>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d00f      	beq.n	80054d6 <TIM_Base_SetConfig+0xb2>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a26      	ldr	r2, [pc, #152]	; (8005554 <TIM_Base_SetConfig+0x130>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d00b      	beq.n	80054d6 <TIM_Base_SetConfig+0xb2>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a25      	ldr	r2, [pc, #148]	; (8005558 <TIM_Base_SetConfig+0x134>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d007      	beq.n	80054d6 <TIM_Base_SetConfig+0xb2>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a24      	ldr	r2, [pc, #144]	; (800555c <TIM_Base_SetConfig+0x138>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d003      	beq.n	80054d6 <TIM_Base_SetConfig+0xb2>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a23      	ldr	r2, [pc, #140]	; (8005560 <TIM_Base_SetConfig+0x13c>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d108      	bne.n	80054e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	689a      	ldr	r2, [r3, #8]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a0a      	ldr	r2, [pc, #40]	; (8005538 <TIM_Base_SetConfig+0x114>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d003      	beq.n	800551c <TIM_Base_SetConfig+0xf8>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a0c      	ldr	r2, [pc, #48]	; (8005548 <TIM_Base_SetConfig+0x124>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d103      	bne.n	8005524 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	691a      	ldr	r2, [r3, #16]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	615a      	str	r2, [r3, #20]
}
 800552a:	bf00      	nop
 800552c:	3714      	adds	r7, #20
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	40010000 	.word	0x40010000
 800553c:	40000400 	.word	0x40000400
 8005540:	40000800 	.word	0x40000800
 8005544:	40000c00 	.word	0x40000c00
 8005548:	40010400 	.word	0x40010400
 800554c:	40014000 	.word	0x40014000
 8005550:	40014400 	.word	0x40014400
 8005554:	40014800 	.word	0x40014800
 8005558:	40001800 	.word	0x40001800
 800555c:	40001c00 	.word	0x40001c00
 8005560:	40002000 	.word	0x40002000

08005564 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b082      	sub	sp, #8
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d101      	bne.n	800559e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e03f      	b.n	800561e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d106      	bne.n	80055b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f7fb fddc 	bl	8001170 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2224      	movs	r2, #36	; 0x24
 80055bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68da      	ldr	r2, [r3, #12]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f000 ffed 	bl	80065b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	691a      	ldr	r2, [r3, #16]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	695a      	ldr	r2, [r3, #20]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68da      	ldr	r2, [r3, #12]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005604:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2220      	movs	r2, #32
 8005610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2220      	movs	r2, #32
 8005618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3708      	adds	r7, #8
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005626:	b580      	push	{r7, lr}
 8005628:	b08a      	sub	sp, #40	; 0x28
 800562a:	af02      	add	r7, sp, #8
 800562c:	60f8      	str	r0, [r7, #12]
 800562e:	60b9      	str	r1, [r7, #8]
 8005630:	603b      	str	r3, [r7, #0]
 8005632:	4613      	mov	r3, r2
 8005634:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005636:	2300      	movs	r3, #0
 8005638:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005640:	b2db      	uxtb	r3, r3
 8005642:	2b20      	cmp	r3, #32
 8005644:	d17c      	bne.n	8005740 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d002      	beq.n	8005652 <HAL_UART_Transmit+0x2c>
 800564c:	88fb      	ldrh	r3, [r7, #6]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d101      	bne.n	8005656 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e075      	b.n	8005742 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800565c:	2b01      	cmp	r3, #1
 800565e:	d101      	bne.n	8005664 <HAL_UART_Transmit+0x3e>
 8005660:	2302      	movs	r3, #2
 8005662:	e06e      	b.n	8005742 <HAL_UART_Transmit+0x11c>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2200      	movs	r2, #0
 8005670:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2221      	movs	r2, #33	; 0x21
 8005676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800567a:	f7fc f875 	bl	8001768 <HAL_GetTick>
 800567e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	88fa      	ldrh	r2, [r7, #6]
 8005684:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	88fa      	ldrh	r2, [r7, #6]
 800568a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005694:	d108      	bne.n	80056a8 <HAL_UART_Transmit+0x82>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d104      	bne.n	80056a8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800569e:	2300      	movs	r3, #0
 80056a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	61bb      	str	r3, [r7, #24]
 80056a6:	e003      	b.n	80056b0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056ac:	2300      	movs	r3, #0
 80056ae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80056b8:	e02a      	b.n	8005710 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	9300      	str	r3, [sp, #0]
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	2200      	movs	r2, #0
 80056c2:	2180      	movs	r1, #128	; 0x80
 80056c4:	68f8      	ldr	r0, [r7, #12]
 80056c6:	f000 fca9 	bl	800601c <UART_WaitOnFlagUntilTimeout>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d001      	beq.n	80056d4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e036      	b.n	8005742 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d10b      	bne.n	80056f2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	881b      	ldrh	r3, [r3, #0]
 80056de:	461a      	mov	r2, r3
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	3302      	adds	r3, #2
 80056ee:	61bb      	str	r3, [r7, #24]
 80056f0:	e007      	b.n	8005702 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	781a      	ldrb	r2, [r3, #0]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	3301      	adds	r3, #1
 8005700:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005706:	b29b      	uxth	r3, r3
 8005708:	3b01      	subs	r3, #1
 800570a:	b29a      	uxth	r2, r3
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005714:	b29b      	uxth	r3, r3
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1cf      	bne.n	80056ba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	9300      	str	r3, [sp, #0]
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	2200      	movs	r2, #0
 8005722:	2140      	movs	r1, #64	; 0x40
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f000 fc79 	bl	800601c <UART_WaitOnFlagUntilTimeout>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d001      	beq.n	8005734 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e006      	b.n	8005742 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2220      	movs	r2, #32
 8005738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800573c:	2300      	movs	r3, #0
 800573e:	e000      	b.n	8005742 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005740:	2302      	movs	r3, #2
  }
}
 8005742:	4618      	mov	r0, r3
 8005744:	3720      	adds	r7, #32
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800574a:	b580      	push	{r7, lr}
 800574c:	b084      	sub	sp, #16
 800574e:	af00      	add	r7, sp, #0
 8005750:	60f8      	str	r0, [r7, #12]
 8005752:	60b9      	str	r1, [r7, #8]
 8005754:	4613      	mov	r3, r2
 8005756:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800575e:	b2db      	uxtb	r3, r3
 8005760:	2b20      	cmp	r3, #32
 8005762:	d11d      	bne.n	80057a0 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d002      	beq.n	8005770 <HAL_UART_Receive_DMA+0x26>
 800576a:	88fb      	ldrh	r3, [r7, #6]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d101      	bne.n	8005774 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e016      	b.n	80057a2 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800577a:	2b01      	cmp	r3, #1
 800577c:	d101      	bne.n	8005782 <HAL_UART_Receive_DMA+0x38>
 800577e:	2302      	movs	r3, #2
 8005780:	e00f      	b.n	80057a2 <HAL_UART_Receive_DMA+0x58>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2201      	movs	r2, #1
 8005786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005790:	88fb      	ldrh	r3, [r7, #6]
 8005792:	461a      	mov	r2, r3
 8005794:	68b9      	ldr	r1, [r7, #8]
 8005796:	68f8      	ldr	r0, [r7, #12]
 8005798:	f000 fcae 	bl	80060f8 <UART_Start_Receive_DMA>
 800579c:	4603      	mov	r3, r0
 800579e:	e000      	b.n	80057a2 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80057a0:	2302      	movs	r3, #2
  }
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}

080057aa <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80057aa:	b580      	push	{r7, lr}
 80057ac:	b090      	sub	sp, #64	; 0x40
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80057b2:	2300      	movs	r3, #0
 80057b4:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	695b      	ldr	r3, [r3, #20]
 80057bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057c0:	2b80      	cmp	r3, #128	; 0x80
 80057c2:	bf0c      	ite	eq
 80057c4:	2301      	moveq	r3, #1
 80057c6:	2300      	movne	r3, #0
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	2b21      	cmp	r3, #33	; 0x21
 80057d6:	d128      	bne.n	800582a <HAL_UART_DMAStop+0x80>
 80057d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d025      	beq.n	800582a <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	3314      	adds	r3, #20
 80057e4:	627b      	str	r3, [r7, #36]	; 0x24
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e8:	e853 3f00 	ldrex	r3, [r3]
 80057ec:	623b      	str	r3, [r7, #32]
   return(result);
 80057ee:	6a3b      	ldr	r3, [r7, #32]
 80057f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	3314      	adds	r3, #20
 80057fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057fe:	633a      	str	r2, [r7, #48]	; 0x30
 8005800:	62fb      	str	r3, [r7, #44]	; 0x2c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005802:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005806:	e841 2300 	strex	r3, r2, [r1]
 800580a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800580c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580e:	2b00      	cmp	r3, #0
 8005810:	d1e5      	bne.n	80057de <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005816:	2b00      	cmp	r3, #0
 8005818:	d004      	beq.n	8005824 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800581e:	4618      	mov	r0, r3
 8005820:	f7fc f9b2 	bl	8001b88 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f000 fd01 	bl	800622c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	695b      	ldr	r3, [r3, #20]
 8005830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005834:	2b40      	cmp	r3, #64	; 0x40
 8005836:	bf0c      	ite	eq
 8005838:	2301      	moveq	r3, #1
 800583a:	2300      	movne	r3, #0
 800583c:	b2db      	uxtb	r3, r3
 800583e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005846:	b2db      	uxtb	r3, r3
 8005848:	2b22      	cmp	r3, #34	; 0x22
 800584a:	d128      	bne.n	800589e <HAL_UART_DMAStop+0xf4>
 800584c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800584e:	2b00      	cmp	r3, #0
 8005850:	d025      	beq.n	800589e <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	3314      	adds	r3, #20
 8005858:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	e853 3f00 	ldrex	r3, [r3]
 8005860:	60fb      	str	r3, [r7, #12]
   return(result);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005868:	637b      	str	r3, [r7, #52]	; 0x34
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	3314      	adds	r3, #20
 8005870:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005872:	61fa      	str	r2, [r7, #28]
 8005874:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005876:	69b9      	ldr	r1, [r7, #24]
 8005878:	69fa      	ldr	r2, [r7, #28]
 800587a:	e841 2300 	strex	r3, r2, [r1]
 800587e:	617b      	str	r3, [r7, #20]
   return(result);
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1e5      	bne.n	8005852 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588a:	2b00      	cmp	r3, #0
 800588c:	d004      	beq.n	8005898 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005892:	4618      	mov	r0, r3
 8005894:	f7fc f978 	bl	8001b88 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f000 fcef 	bl	800627c <UART_EndRxTransfer>
  }

  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3740      	adds	r7, #64	; 0x40
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b0ba      	sub	sp, #232	; 0xe8
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	695b      	ldr	r3, [r3, #20]
 80058ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80058ce:	2300      	movs	r3, #0
 80058d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80058d4:	2300      	movs	r3, #0
 80058d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80058da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058de:	f003 030f 	and.w	r3, r3, #15
 80058e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80058e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10f      	bne.n	800590e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058f2:	f003 0320 	and.w	r3, r3, #32
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d009      	beq.n	800590e <HAL_UART_IRQHandler+0x66>
 80058fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058fe:	f003 0320 	and.w	r3, r3, #32
 8005902:	2b00      	cmp	r3, #0
 8005904:	d003      	beq.n	800590e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 fd97 	bl	800643a <UART_Receive_IT>
      return;
 800590c:	e256      	b.n	8005dbc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800590e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005912:	2b00      	cmp	r3, #0
 8005914:	f000 80de 	beq.w	8005ad4 <HAL_UART_IRQHandler+0x22c>
 8005918:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800591c:	f003 0301 	and.w	r3, r3, #1
 8005920:	2b00      	cmp	r3, #0
 8005922:	d106      	bne.n	8005932 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005928:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800592c:	2b00      	cmp	r3, #0
 800592e:	f000 80d1 	beq.w	8005ad4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005936:	f003 0301 	and.w	r3, r3, #1
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00b      	beq.n	8005956 <HAL_UART_IRQHandler+0xae>
 800593e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005946:	2b00      	cmp	r3, #0
 8005948:	d005      	beq.n	8005956 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594e:	f043 0201 	orr.w	r2, r3, #1
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800595a:	f003 0304 	and.w	r3, r3, #4
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00b      	beq.n	800597a <HAL_UART_IRQHandler+0xd2>
 8005962:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005966:	f003 0301 	and.w	r3, r3, #1
 800596a:	2b00      	cmp	r3, #0
 800596c:	d005      	beq.n	800597a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005972:	f043 0202 	orr.w	r2, r3, #2
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800597a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800597e:	f003 0302 	and.w	r3, r3, #2
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00b      	beq.n	800599e <HAL_UART_IRQHandler+0xf6>
 8005986:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800598a:	f003 0301 	and.w	r3, r3, #1
 800598e:	2b00      	cmp	r3, #0
 8005990:	d005      	beq.n	800599e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005996:	f043 0204 	orr.w	r2, r3, #4
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800599e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059a2:	f003 0308 	and.w	r3, r3, #8
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d011      	beq.n	80059ce <HAL_UART_IRQHandler+0x126>
 80059aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059ae:	f003 0320 	and.w	r3, r3, #32
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d105      	bne.n	80059c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80059b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059ba:	f003 0301 	and.w	r3, r3, #1
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d005      	beq.n	80059ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c6:	f043 0208 	orr.w	r2, r3, #8
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	f000 81ed 	beq.w	8005db2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059dc:	f003 0320 	and.w	r3, r3, #32
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d008      	beq.n	80059f6 <HAL_UART_IRQHandler+0x14e>
 80059e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059e8:	f003 0320 	and.w	r3, r3, #32
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d002      	beq.n	80059f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 fd22 	bl	800643a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	695b      	ldr	r3, [r3, #20]
 80059fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a00:	2b40      	cmp	r3, #64	; 0x40
 8005a02:	bf0c      	ite	eq
 8005a04:	2301      	moveq	r3, #1
 8005a06:	2300      	movne	r3, #0
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a12:	f003 0308 	and.w	r3, r3, #8
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d103      	bne.n	8005a22 <HAL_UART_IRQHandler+0x17a>
 8005a1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d04f      	beq.n	8005ac2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 fc2a 	bl	800627c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a32:	2b40      	cmp	r3, #64	; 0x40
 8005a34:	d141      	bne.n	8005aba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	3314      	adds	r3, #20
 8005a3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a44:	e853 3f00 	ldrex	r3, [r3]
 8005a48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005a4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	3314      	adds	r3, #20
 8005a5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005a62:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005a66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005a6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005a72:	e841 2300 	strex	r3, r2, [r1]
 8005a76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005a7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d1d9      	bne.n	8005a36 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d013      	beq.n	8005ab2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8e:	4a7d      	ldr	r2, [pc, #500]	; (8005c84 <HAL_UART_IRQHandler+0x3dc>)
 8005a90:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a96:	4618      	mov	r0, r3
 8005a98:	f7fc f8e6 	bl	8001c68 <HAL_DMA_Abort_IT>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d016      	beq.n	8005ad0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005aac:	4610      	mov	r0, r2
 8005aae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ab0:	e00e      	b.n	8005ad0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 f9a4 	bl	8005e00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ab8:	e00a      	b.n	8005ad0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 f9a0 	bl	8005e00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ac0:	e006      	b.n	8005ad0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f99c 	bl	8005e00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005ace:	e170      	b.n	8005db2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ad0:	bf00      	nop
    return;
 8005ad2:	e16e      	b.n	8005db2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	f040 814a 	bne.w	8005d72 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ae2:	f003 0310 	and.w	r3, r3, #16
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	f000 8143 	beq.w	8005d72 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005aec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005af0:	f003 0310 	and.w	r3, r3, #16
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	f000 813c 	beq.w	8005d72 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005afa:	2300      	movs	r3, #0
 8005afc:	60bb      	str	r3, [r7, #8]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	60bb      	str	r3, [r7, #8]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	60bb      	str	r3, [r7, #8]
 8005b0e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b1a:	2b40      	cmp	r3, #64	; 0x40
 8005b1c:	f040 80b4 	bne.w	8005c88 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b2c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	f000 8140 	beq.w	8005db6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	f080 8139 	bcs.w	8005db6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b4a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b50:	69db      	ldr	r3, [r3, #28]
 8005b52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b56:	f000 8088 	beq.w	8005c6a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	330c      	adds	r3, #12
 8005b60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b68:	e853 3f00 	ldrex	r3, [r3]
 8005b6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005b70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	330c      	adds	r3, #12
 8005b82:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005b86:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005b92:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005b96:	e841 2300 	strex	r3, r2, [r1]
 8005b9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005b9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1d9      	bne.n	8005b5a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	3314      	adds	r3, #20
 8005bac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bb0:	e853 3f00 	ldrex	r3, [r3]
 8005bb4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005bb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bb8:	f023 0301 	bic.w	r3, r3, #1
 8005bbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	3314      	adds	r3, #20
 8005bc6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005bca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005bce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005bd2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005bd6:	e841 2300 	strex	r3, r2, [r1]
 8005bda:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005bdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1e1      	bne.n	8005ba6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	3314      	adds	r3, #20
 8005be8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005bec:	e853 3f00 	ldrex	r3, [r3]
 8005bf0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005bf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bf8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	3314      	adds	r3, #20
 8005c02:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005c06:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c08:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c0c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c0e:	e841 2300 	strex	r3, r2, [r1]
 8005c12:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005c14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d1e3      	bne.n	8005be2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2220      	movs	r2, #32
 8005c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	330c      	adds	r3, #12
 8005c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c32:	e853 3f00 	ldrex	r3, [r3]
 8005c36:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c3a:	f023 0310 	bic.w	r3, r3, #16
 8005c3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	330c      	adds	r3, #12
 8005c48:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005c4c:	65ba      	str	r2, [r7, #88]	; 0x58
 8005c4e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c50:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c52:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c54:	e841 2300 	strex	r3, r2, [r1]
 8005c58:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005c5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d1e3      	bne.n	8005c28 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c64:	4618      	mov	r0, r3
 8005c66:	f7fb ff8f 	bl	8001b88 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	1ad3      	subs	r3, r2, r3
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	4619      	mov	r1, r3
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 f8ca 	bl	8005e14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c80:	e099      	b.n	8005db6 <HAL_UART_IRQHandler+0x50e>
 8005c82:	bf00      	nop
 8005c84:	08006343 	.word	0x08006343
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	f000 808b 	beq.w	8005dba <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005ca4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	f000 8086 	beq.w	8005dba <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	330c      	adds	r3, #12
 8005cb4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb8:	e853 3f00 	ldrex	r3, [r3]
 8005cbc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cc4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	330c      	adds	r3, #12
 8005cce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005cd2:	647a      	str	r2, [r7, #68]	; 0x44
 8005cd4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005cd8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cda:	e841 2300 	strex	r3, r2, [r1]
 8005cde:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1e3      	bne.n	8005cae <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	3314      	adds	r3, #20
 8005cec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf0:	e853 3f00 	ldrex	r3, [r3]
 8005cf4:	623b      	str	r3, [r7, #32]
   return(result);
 8005cf6:	6a3b      	ldr	r3, [r7, #32]
 8005cf8:	f023 0301 	bic.w	r3, r3, #1
 8005cfc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	3314      	adds	r3, #20
 8005d06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005d0a:	633a      	str	r2, [r7, #48]	; 0x30
 8005d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d12:	e841 2300 	strex	r3, r2, [r1]
 8005d16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d1e3      	bne.n	8005ce6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2220      	movs	r2, #32
 8005d22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	330c      	adds	r3, #12
 8005d32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	e853 3f00 	ldrex	r3, [r3]
 8005d3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f023 0310 	bic.w	r3, r3, #16
 8005d42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	330c      	adds	r3, #12
 8005d4c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005d50:	61fa      	str	r2, [r7, #28]
 8005d52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d54:	69b9      	ldr	r1, [r7, #24]
 8005d56:	69fa      	ldr	r2, [r7, #28]
 8005d58:	e841 2300 	strex	r3, r2, [r1]
 8005d5c:	617b      	str	r3, [r7, #20]
   return(result);
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d1e3      	bne.n	8005d2c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d68:	4619      	mov	r1, r3
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 f852 	bl	8005e14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d70:	e023      	b.n	8005dba <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d009      	beq.n	8005d92 <HAL_UART_IRQHandler+0x4ea>
 8005d7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d003      	beq.n	8005d92 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 faed 	bl	800636a <UART_Transmit_IT>
    return;
 8005d90:	e014      	b.n	8005dbc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00e      	beq.n	8005dbc <HAL_UART_IRQHandler+0x514>
 8005d9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d008      	beq.n	8005dbc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 fb2d 	bl	800640a <UART_EndTransmit_IT>
    return;
 8005db0:	e004      	b.n	8005dbc <HAL_UART_IRQHandler+0x514>
    return;
 8005db2:	bf00      	nop
 8005db4:	e002      	b.n	8005dbc <HAL_UART_IRQHandler+0x514>
      return;
 8005db6:	bf00      	nop
 8005db8:	e000      	b.n	8005dbc <HAL_UART_IRQHandler+0x514>
      return;
 8005dba:	bf00      	nop
  }
}
 8005dbc:	37e8      	adds	r7, #232	; 0xe8
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop

08005dc4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005dcc:	bf00      	nop
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b083      	sub	sp, #12
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005de0:	bf00      	nop
 8005de2:	370c      	adds	r7, #12
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005df4:	bf00      	nop
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005e08:	bf00      	nop
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e20:	bf00      	nop
 8005e22:	370c      	adds	r7, #12
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b09c      	sub	sp, #112	; 0x70
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e38:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d172      	bne.n	8005f2e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005e48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	330c      	adds	r3, #12
 8005e54:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e58:	e853 3f00 	ldrex	r3, [r3]
 8005e5c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005e5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e64:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	330c      	adds	r3, #12
 8005e6c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005e6e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005e70:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e72:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005e74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e76:	e841 2300 	strex	r3, r2, [r1]
 8005e7a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005e7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d1e5      	bne.n	8005e4e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	3314      	adds	r3, #20
 8005e88:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e8c:	e853 3f00 	ldrex	r3, [r3]
 8005e90:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e94:	f023 0301 	bic.w	r3, r3, #1
 8005e98:	667b      	str	r3, [r7, #100]	; 0x64
 8005e9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	3314      	adds	r3, #20
 8005ea0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005ea2:	647a      	str	r2, [r7, #68]	; 0x44
 8005ea4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ea8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005eaa:	e841 2300 	strex	r3, r2, [r1]
 8005eae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d1e5      	bne.n	8005e82 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005eb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	3314      	adds	r3, #20
 8005ebc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec0:	e853 3f00 	ldrex	r3, [r3]
 8005ec4:	623b      	str	r3, [r7, #32]
   return(result);
 8005ec6:	6a3b      	ldr	r3, [r7, #32]
 8005ec8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ecc:	663b      	str	r3, [r7, #96]	; 0x60
 8005ece:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	3314      	adds	r3, #20
 8005ed4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005ed6:	633a      	str	r2, [r7, #48]	; 0x30
 8005ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005edc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ede:	e841 2300 	strex	r3, r2, [r1]
 8005ee2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d1e5      	bne.n	8005eb6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005eea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eec:	2220      	movs	r2, #32
 8005eee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ef2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d119      	bne.n	8005f2e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005efa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	330c      	adds	r3, #12
 8005f00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	e853 3f00 	ldrex	r3, [r3]
 8005f08:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f023 0310 	bic.w	r3, r3, #16
 8005f10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	330c      	adds	r3, #12
 8005f18:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005f1a:	61fa      	str	r2, [r7, #28]
 8005f1c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f1e:	69b9      	ldr	r1, [r7, #24]
 8005f20:	69fa      	ldr	r2, [r7, #28]
 8005f22:	e841 2300 	strex	r3, r2, [r1]
 8005f26:	617b      	str	r3, [r7, #20]
   return(result);
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1e5      	bne.n	8005efa <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d106      	bne.n	8005f44 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f38:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005f3e:	f7ff ff69 	bl	8005e14 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005f42:	e002      	b.n	8005f4a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005f44:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005f46:	f7ff ff47 	bl	8005dd8 <HAL_UART_RxCpltCallback>
}
 8005f4a:	bf00      	nop
 8005f4c:	3770      	adds	r7, #112	; 0x70
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}

08005f52 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005f52:	b580      	push	{r7, lr}
 8005f54:	b084      	sub	sp, #16
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d108      	bne.n	8005f7a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f6c:	085b      	lsrs	r3, r3, #1
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	4619      	mov	r1, r3
 8005f72:	68f8      	ldr	r0, [r7, #12]
 8005f74:	f7ff ff4e 	bl	8005e14 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005f78:	e002      	b.n	8005f80 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	f7ff ff36 	bl	8005dec <HAL_UART_RxHalfCpltCallback>
}
 8005f80:	bf00      	nop
 8005f82:	3710      	adds	r7, #16
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005f90:	2300      	movs	r3, #0
 8005f92:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f98:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	695b      	ldr	r3, [r3, #20]
 8005fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fa4:	2b80      	cmp	r3, #128	; 0x80
 8005fa6:	bf0c      	ite	eq
 8005fa8:	2301      	moveq	r3, #1
 8005faa:	2300      	movne	r3, #0
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	2b21      	cmp	r3, #33	; 0x21
 8005fba:	d108      	bne.n	8005fce <UART_DMAError+0x46>
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d005      	beq.n	8005fce <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005fc8:	68b8      	ldr	r0, [r7, #8]
 8005fca:	f000 f92f 	bl	800622c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	695b      	ldr	r3, [r3, #20]
 8005fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd8:	2b40      	cmp	r3, #64	; 0x40
 8005fda:	bf0c      	ite	eq
 8005fdc:	2301      	moveq	r3, #1
 8005fde:	2300      	movne	r3, #0
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	2b22      	cmp	r3, #34	; 0x22
 8005fee:	d108      	bne.n	8006002 <UART_DMAError+0x7a>
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d005      	beq.n	8006002 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005ffc:	68b8      	ldr	r0, [r7, #8]
 8005ffe:	f000 f93d 	bl	800627c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006006:	f043 0210 	orr.w	r2, r3, #16
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800600e:	68b8      	ldr	r0, [r7, #8]
 8006010:	f7ff fef6 	bl	8005e00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006014:	bf00      	nop
 8006016:	3710      	adds	r7, #16
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b090      	sub	sp, #64	; 0x40
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	603b      	str	r3, [r7, #0]
 8006028:	4613      	mov	r3, r2
 800602a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800602c:	e050      	b.n	80060d0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800602e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006034:	d04c      	beq.n	80060d0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006036:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006038:	2b00      	cmp	r3, #0
 800603a:	d007      	beq.n	800604c <UART_WaitOnFlagUntilTimeout+0x30>
 800603c:	f7fb fb94 	bl	8001768 <HAL_GetTick>
 8006040:	4602      	mov	r2, r0
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006048:	429a      	cmp	r2, r3
 800604a:	d241      	bcs.n	80060d0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	330c      	adds	r3, #12
 8006052:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006056:	e853 3f00 	ldrex	r3, [r3]
 800605a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800605c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006062:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	330c      	adds	r3, #12
 800606a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800606c:	637a      	str	r2, [r7, #52]	; 0x34
 800606e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006070:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006072:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006074:	e841 2300 	strex	r3, r2, [r1]
 8006078:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800607a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800607c:	2b00      	cmp	r3, #0
 800607e:	d1e5      	bne.n	800604c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	3314      	adds	r3, #20
 8006086:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	e853 3f00 	ldrex	r3, [r3]
 800608e:	613b      	str	r3, [r7, #16]
   return(result);
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	f023 0301 	bic.w	r3, r3, #1
 8006096:	63bb      	str	r3, [r7, #56]	; 0x38
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	3314      	adds	r3, #20
 800609e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060a0:	623a      	str	r2, [r7, #32]
 80060a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a4:	69f9      	ldr	r1, [r7, #28]
 80060a6:	6a3a      	ldr	r2, [r7, #32]
 80060a8:	e841 2300 	strex	r3, r2, [r1]
 80060ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d1e5      	bne.n	8006080 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2220      	movs	r2, #32
 80060b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2220      	movs	r2, #32
 80060c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e00f      	b.n	80060f0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	4013      	ands	r3, r2
 80060da:	68ba      	ldr	r2, [r7, #8]
 80060dc:	429a      	cmp	r2, r3
 80060de:	bf0c      	ite	eq
 80060e0:	2301      	moveq	r3, #1
 80060e2:	2300      	movne	r3, #0
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	461a      	mov	r2, r3
 80060e8:	79fb      	ldrb	r3, [r7, #7]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d09f      	beq.n	800602e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80060ee:	2300      	movs	r3, #0
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3740      	adds	r7, #64	; 0x40
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b098      	sub	sp, #96	; 0x60
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	4613      	mov	r3, r2
 8006104:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006106:	68ba      	ldr	r2, [r7, #8]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	88fa      	ldrh	r2, [r7, #6]
 8006110:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2200      	movs	r2, #0
 8006116:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2222      	movs	r2, #34	; 0x22
 800611c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006124:	4a3e      	ldr	r2, [pc, #248]	; (8006220 <UART_Start_Receive_DMA+0x128>)
 8006126:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800612c:	4a3d      	ldr	r2, [pc, #244]	; (8006224 <UART_Start_Receive_DMA+0x12c>)
 800612e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006134:	4a3c      	ldr	r2, [pc, #240]	; (8006228 <UART_Start_Receive_DMA+0x130>)
 8006136:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800613c:	2200      	movs	r2, #0
 800613e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006140:	f107 0308 	add.w	r3, r7, #8
 8006144:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	3304      	adds	r3, #4
 8006150:	4619      	mov	r1, r3
 8006152:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	88fb      	ldrh	r3, [r7, #6]
 8006158:	f7fb fcbe 	bl	8001ad8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800615c:	2300      	movs	r3, #0
 800615e:	613b      	str	r3, [r7, #16]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	613b      	str	r3, [r7, #16]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	613b      	str	r3, [r7, #16]
 8006170:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	330c      	adds	r3, #12
 8006180:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006182:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006184:	e853 3f00 	ldrex	r3, [r3]
 8006188:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800618a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800618c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006190:	65bb      	str	r3, [r7, #88]	; 0x58
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	330c      	adds	r3, #12
 8006198:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800619a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800619c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800619e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80061a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80061a2:	e841 2300 	strex	r3, r2, [r1]
 80061a6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80061a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d1e5      	bne.n	800617a <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	3314      	adds	r3, #20
 80061b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b8:	e853 3f00 	ldrex	r3, [r3]
 80061bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80061be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c0:	f043 0301 	orr.w	r3, r3, #1
 80061c4:	657b      	str	r3, [r7, #84]	; 0x54
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	3314      	adds	r3, #20
 80061cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80061ce:	63ba      	str	r2, [r7, #56]	; 0x38
 80061d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80061d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061d6:	e841 2300 	strex	r3, r2, [r1]
 80061da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80061dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1e5      	bne.n	80061ae <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	3314      	adds	r3, #20
 80061e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	e853 3f00 	ldrex	r3, [r3]
 80061f0:	617b      	str	r3, [r7, #20]
   return(result);
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061f8:	653b      	str	r3, [r7, #80]	; 0x50
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	3314      	adds	r3, #20
 8006200:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006202:	627a      	str	r2, [r7, #36]	; 0x24
 8006204:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006206:	6a39      	ldr	r1, [r7, #32]
 8006208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800620a:	e841 2300 	strex	r3, r2, [r1]
 800620e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d1e5      	bne.n	80061e2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006216:	2300      	movs	r3, #0
}
 8006218:	4618      	mov	r0, r3
 800621a:	3760      	adds	r7, #96	; 0x60
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}
 8006220:	08005e2d 	.word	0x08005e2d
 8006224:	08005f53 	.word	0x08005f53
 8006228:	08005f89 	.word	0x08005f89

0800622c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800622c:	b480      	push	{r7}
 800622e:	b089      	sub	sp, #36	; 0x24
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	330c      	adds	r3, #12
 800623a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	e853 3f00 	ldrex	r3, [r3]
 8006242:	60bb      	str	r3, [r7, #8]
   return(result);
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800624a:	61fb      	str	r3, [r7, #28]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	330c      	adds	r3, #12
 8006252:	69fa      	ldr	r2, [r7, #28]
 8006254:	61ba      	str	r2, [r7, #24]
 8006256:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006258:	6979      	ldr	r1, [r7, #20]
 800625a:	69ba      	ldr	r2, [r7, #24]
 800625c:	e841 2300 	strex	r3, r2, [r1]
 8006260:	613b      	str	r3, [r7, #16]
   return(result);
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1e5      	bne.n	8006234 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2220      	movs	r2, #32
 800626c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006270:	bf00      	nop
 8006272:	3724      	adds	r7, #36	; 0x24
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800627c:	b480      	push	{r7}
 800627e:	b095      	sub	sp, #84	; 0x54
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	330c      	adds	r3, #12
 800628a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800628e:	e853 3f00 	ldrex	r3, [r3]
 8006292:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006296:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800629a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	330c      	adds	r3, #12
 80062a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80062a4:	643a      	str	r2, [r7, #64]	; 0x40
 80062a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80062aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80062ac:	e841 2300 	strex	r3, r2, [r1]
 80062b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d1e5      	bne.n	8006284 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	3314      	adds	r3, #20
 80062be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c0:	6a3b      	ldr	r3, [r7, #32]
 80062c2:	e853 3f00 	ldrex	r3, [r3]
 80062c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	f023 0301 	bic.w	r3, r3, #1
 80062ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	3314      	adds	r3, #20
 80062d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062e0:	e841 2300 	strex	r3, r2, [r1]
 80062e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d1e5      	bne.n	80062b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d119      	bne.n	8006328 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	330c      	adds	r3, #12
 80062fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	e853 3f00 	ldrex	r3, [r3]
 8006302:	60bb      	str	r3, [r7, #8]
   return(result);
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	f023 0310 	bic.w	r3, r3, #16
 800630a:	647b      	str	r3, [r7, #68]	; 0x44
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	330c      	adds	r3, #12
 8006312:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006314:	61ba      	str	r2, [r7, #24]
 8006316:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006318:	6979      	ldr	r1, [r7, #20]
 800631a:	69ba      	ldr	r2, [r7, #24]
 800631c:	e841 2300 	strex	r3, r2, [r1]
 8006320:	613b      	str	r3, [r7, #16]
   return(result);
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d1e5      	bne.n	80062f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2220      	movs	r2, #32
 800632c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006336:	bf00      	nop
 8006338:	3754      	adds	r7, #84	; 0x54
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr

08006342 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006342:	b580      	push	{r7, lr}
 8006344:	b084      	sub	sp, #16
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800634e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2200      	movs	r2, #0
 8006354:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2200      	movs	r2, #0
 800635a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800635c:	68f8      	ldr	r0, [r7, #12]
 800635e:	f7ff fd4f 	bl	8005e00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006362:	bf00      	nop
 8006364:	3710      	adds	r7, #16
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}

0800636a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800636a:	b480      	push	{r7}
 800636c:	b085      	sub	sp, #20
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006378:	b2db      	uxtb	r3, r3
 800637a:	2b21      	cmp	r3, #33	; 0x21
 800637c:	d13e      	bne.n	80063fc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006386:	d114      	bne.n	80063b2 <UART_Transmit_IT+0x48>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d110      	bne.n	80063b2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6a1b      	ldr	r3, [r3, #32]
 8006394:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	881b      	ldrh	r3, [r3, #0]
 800639a:	461a      	mov	r2, r3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063a4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a1b      	ldr	r3, [r3, #32]
 80063aa:	1c9a      	adds	r2, r3, #2
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	621a      	str	r2, [r3, #32]
 80063b0:	e008      	b.n	80063c4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a1b      	ldr	r3, [r3, #32]
 80063b6:	1c59      	adds	r1, r3, #1
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	6211      	str	r1, [r2, #32]
 80063bc:	781a      	ldrb	r2, [r3, #0]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	3b01      	subs	r3, #1
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	4619      	mov	r1, r3
 80063d2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d10f      	bne.n	80063f8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	68da      	ldr	r2, [r3, #12]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063e6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68da      	ldr	r2, [r3, #12]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063f6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80063f8:	2300      	movs	r3, #0
 80063fa:	e000      	b.n	80063fe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80063fc:	2302      	movs	r3, #2
  }
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3714      	adds	r7, #20
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr

0800640a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800640a:	b580      	push	{r7, lr}
 800640c:	b082      	sub	sp, #8
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68da      	ldr	r2, [r3, #12]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006420:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2220      	movs	r2, #32
 8006426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f7ff fcca 	bl	8005dc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006430:	2300      	movs	r3, #0
}
 8006432:	4618      	mov	r0, r3
 8006434:	3708      	adds	r7, #8
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}

0800643a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800643a:	b580      	push	{r7, lr}
 800643c:	b08c      	sub	sp, #48	; 0x30
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006448:	b2db      	uxtb	r3, r3
 800644a:	2b22      	cmp	r3, #34	; 0x22
 800644c:	f040 80ab 	bne.w	80065a6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006458:	d117      	bne.n	800648a <UART_Receive_IT+0x50>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d113      	bne.n	800648a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006462:	2300      	movs	r3, #0
 8006464:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800646a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	b29b      	uxth	r3, r3
 8006474:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006478:	b29a      	uxth	r2, r3
 800647a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006482:	1c9a      	adds	r2, r3, #2
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	629a      	str	r2, [r3, #40]	; 0x28
 8006488:	e026      	b.n	80064d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800648e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006490:	2300      	movs	r3, #0
 8006492:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800649c:	d007      	beq.n	80064ae <UART_Receive_IT+0x74>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d10a      	bne.n	80064bc <UART_Receive_IT+0x82>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d106      	bne.n	80064bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	b2da      	uxtb	r2, r3
 80064b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b8:	701a      	strb	r2, [r3, #0]
 80064ba:	e008      	b.n	80064ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064c8:	b2da      	uxtb	r2, r3
 80064ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064d2:	1c5a      	adds	r2, r3, #1
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064dc:	b29b      	uxth	r3, r3
 80064de:	3b01      	subs	r3, #1
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	4619      	mov	r1, r3
 80064e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d15a      	bne.n	80065a2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	68da      	ldr	r2, [r3, #12]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f022 0220 	bic.w	r2, r2, #32
 80064fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68da      	ldr	r2, [r3, #12]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800650a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	695a      	ldr	r2, [r3, #20]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f022 0201 	bic.w	r2, r2, #1
 800651a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2220      	movs	r2, #32
 8006520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006528:	2b01      	cmp	r3, #1
 800652a:	d135      	bne.n	8006598 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	330c      	adds	r3, #12
 8006538:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	e853 3f00 	ldrex	r3, [r3]
 8006540:	613b      	str	r3, [r7, #16]
   return(result);
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	f023 0310 	bic.w	r3, r3, #16
 8006548:	627b      	str	r3, [r7, #36]	; 0x24
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	330c      	adds	r3, #12
 8006550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006552:	623a      	str	r2, [r7, #32]
 8006554:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006556:	69f9      	ldr	r1, [r7, #28]
 8006558:	6a3a      	ldr	r2, [r7, #32]
 800655a:	e841 2300 	strex	r3, r2, [r1]
 800655e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d1e5      	bne.n	8006532 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 0310 	and.w	r3, r3, #16
 8006570:	2b10      	cmp	r3, #16
 8006572:	d10a      	bne.n	800658a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006574:	2300      	movs	r3, #0
 8006576:	60fb      	str	r3, [r7, #12]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	60fb      	str	r3, [r7, #12]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	60fb      	str	r3, [r7, #12]
 8006588:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800658e:	4619      	mov	r1, r3
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f7ff fc3f 	bl	8005e14 <HAL_UARTEx_RxEventCallback>
 8006596:	e002      	b.n	800659e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f7ff fc1d 	bl	8005dd8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800659e:	2300      	movs	r3, #0
 80065a0:	e002      	b.n	80065a8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80065a2:	2300      	movs	r3, #0
 80065a4:	e000      	b.n	80065a8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80065a6:	2302      	movs	r3, #2
  }
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3730      	adds	r7, #48	; 0x30
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065b4:	b0c0      	sub	sp, #256	; 0x100
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	691b      	ldr	r3, [r3, #16]
 80065c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80065c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065cc:	68d9      	ldr	r1, [r3, #12]
 80065ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	ea40 0301 	orr.w	r3, r0, r1
 80065d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80065da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065de:	689a      	ldr	r2, [r3, #8]
 80065e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	431a      	orrs	r2, r3
 80065e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ec:	695b      	ldr	r3, [r3, #20]
 80065ee:	431a      	orrs	r2, r3
 80065f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065f4:	69db      	ldr	r3, [r3, #28]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80065fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006608:	f021 010c 	bic.w	r1, r1, #12
 800660c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006616:	430b      	orrs	r3, r1
 8006618:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800661a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	695b      	ldr	r3, [r3, #20]
 8006622:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800662a:	6999      	ldr	r1, [r3, #24]
 800662c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	ea40 0301 	orr.w	r3, r0, r1
 8006636:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	4b8f      	ldr	r3, [pc, #572]	; (800687c <UART_SetConfig+0x2cc>)
 8006640:	429a      	cmp	r2, r3
 8006642:	d005      	beq.n	8006650 <UART_SetConfig+0xa0>
 8006644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	4b8d      	ldr	r3, [pc, #564]	; (8006880 <UART_SetConfig+0x2d0>)
 800664c:	429a      	cmp	r2, r3
 800664e:	d104      	bne.n	800665a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006650:	f7fe fb00 	bl	8004c54 <HAL_RCC_GetPCLK2Freq>
 8006654:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006658:	e003      	b.n	8006662 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800665a:	f7fe fae7 	bl	8004c2c <HAL_RCC_GetPCLK1Freq>
 800665e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006666:	69db      	ldr	r3, [r3, #28]
 8006668:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800666c:	f040 810c 	bne.w	8006888 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006670:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006674:	2200      	movs	r2, #0
 8006676:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800667a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800667e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006682:	4622      	mov	r2, r4
 8006684:	462b      	mov	r3, r5
 8006686:	1891      	adds	r1, r2, r2
 8006688:	65b9      	str	r1, [r7, #88]	; 0x58
 800668a:	415b      	adcs	r3, r3
 800668c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800668e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006692:	4621      	mov	r1, r4
 8006694:	eb12 0801 	adds.w	r8, r2, r1
 8006698:	4629      	mov	r1, r5
 800669a:	eb43 0901 	adc.w	r9, r3, r1
 800669e:	f04f 0200 	mov.w	r2, #0
 80066a2:	f04f 0300 	mov.w	r3, #0
 80066a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80066aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80066ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80066b2:	4690      	mov	r8, r2
 80066b4:	4699      	mov	r9, r3
 80066b6:	4623      	mov	r3, r4
 80066b8:	eb18 0303 	adds.w	r3, r8, r3
 80066bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80066c0:	462b      	mov	r3, r5
 80066c2:	eb49 0303 	adc.w	r3, r9, r3
 80066c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80066ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80066d6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80066da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80066de:	460b      	mov	r3, r1
 80066e0:	18db      	adds	r3, r3, r3
 80066e2:	653b      	str	r3, [r7, #80]	; 0x50
 80066e4:	4613      	mov	r3, r2
 80066e6:	eb42 0303 	adc.w	r3, r2, r3
 80066ea:	657b      	str	r3, [r7, #84]	; 0x54
 80066ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80066f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80066f4:	f7f9 fdcc 	bl	8000290 <__aeabi_uldivmod>
 80066f8:	4602      	mov	r2, r0
 80066fa:	460b      	mov	r3, r1
 80066fc:	4b61      	ldr	r3, [pc, #388]	; (8006884 <UART_SetConfig+0x2d4>)
 80066fe:	fba3 2302 	umull	r2, r3, r3, r2
 8006702:	095b      	lsrs	r3, r3, #5
 8006704:	011c      	lsls	r4, r3, #4
 8006706:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800670a:	2200      	movs	r2, #0
 800670c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006710:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006714:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006718:	4642      	mov	r2, r8
 800671a:	464b      	mov	r3, r9
 800671c:	1891      	adds	r1, r2, r2
 800671e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006720:	415b      	adcs	r3, r3
 8006722:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006724:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006728:	4641      	mov	r1, r8
 800672a:	eb12 0a01 	adds.w	sl, r2, r1
 800672e:	4649      	mov	r1, r9
 8006730:	eb43 0b01 	adc.w	fp, r3, r1
 8006734:	f04f 0200 	mov.w	r2, #0
 8006738:	f04f 0300 	mov.w	r3, #0
 800673c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006740:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006744:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006748:	4692      	mov	sl, r2
 800674a:	469b      	mov	fp, r3
 800674c:	4643      	mov	r3, r8
 800674e:	eb1a 0303 	adds.w	r3, sl, r3
 8006752:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006756:	464b      	mov	r3, r9
 8006758:	eb4b 0303 	adc.w	r3, fp, r3
 800675c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800676c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006770:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006774:	460b      	mov	r3, r1
 8006776:	18db      	adds	r3, r3, r3
 8006778:	643b      	str	r3, [r7, #64]	; 0x40
 800677a:	4613      	mov	r3, r2
 800677c:	eb42 0303 	adc.w	r3, r2, r3
 8006780:	647b      	str	r3, [r7, #68]	; 0x44
 8006782:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006786:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800678a:	f7f9 fd81 	bl	8000290 <__aeabi_uldivmod>
 800678e:	4602      	mov	r2, r0
 8006790:	460b      	mov	r3, r1
 8006792:	4611      	mov	r1, r2
 8006794:	4b3b      	ldr	r3, [pc, #236]	; (8006884 <UART_SetConfig+0x2d4>)
 8006796:	fba3 2301 	umull	r2, r3, r3, r1
 800679a:	095b      	lsrs	r3, r3, #5
 800679c:	2264      	movs	r2, #100	; 0x64
 800679e:	fb02 f303 	mul.w	r3, r2, r3
 80067a2:	1acb      	subs	r3, r1, r3
 80067a4:	00db      	lsls	r3, r3, #3
 80067a6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80067aa:	4b36      	ldr	r3, [pc, #216]	; (8006884 <UART_SetConfig+0x2d4>)
 80067ac:	fba3 2302 	umull	r2, r3, r3, r2
 80067b0:	095b      	lsrs	r3, r3, #5
 80067b2:	005b      	lsls	r3, r3, #1
 80067b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80067b8:	441c      	add	r4, r3
 80067ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067be:	2200      	movs	r2, #0
 80067c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80067c4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80067c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80067cc:	4642      	mov	r2, r8
 80067ce:	464b      	mov	r3, r9
 80067d0:	1891      	adds	r1, r2, r2
 80067d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80067d4:	415b      	adcs	r3, r3
 80067d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80067dc:	4641      	mov	r1, r8
 80067de:	1851      	adds	r1, r2, r1
 80067e0:	6339      	str	r1, [r7, #48]	; 0x30
 80067e2:	4649      	mov	r1, r9
 80067e4:	414b      	adcs	r3, r1
 80067e6:	637b      	str	r3, [r7, #52]	; 0x34
 80067e8:	f04f 0200 	mov.w	r2, #0
 80067ec:	f04f 0300 	mov.w	r3, #0
 80067f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80067f4:	4659      	mov	r1, fp
 80067f6:	00cb      	lsls	r3, r1, #3
 80067f8:	4651      	mov	r1, sl
 80067fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067fe:	4651      	mov	r1, sl
 8006800:	00ca      	lsls	r2, r1, #3
 8006802:	4610      	mov	r0, r2
 8006804:	4619      	mov	r1, r3
 8006806:	4603      	mov	r3, r0
 8006808:	4642      	mov	r2, r8
 800680a:	189b      	adds	r3, r3, r2
 800680c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006810:	464b      	mov	r3, r9
 8006812:	460a      	mov	r2, r1
 8006814:	eb42 0303 	adc.w	r3, r2, r3
 8006818:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800681c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006828:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800682c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006830:	460b      	mov	r3, r1
 8006832:	18db      	adds	r3, r3, r3
 8006834:	62bb      	str	r3, [r7, #40]	; 0x28
 8006836:	4613      	mov	r3, r2
 8006838:	eb42 0303 	adc.w	r3, r2, r3
 800683c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800683e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006842:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006846:	f7f9 fd23 	bl	8000290 <__aeabi_uldivmod>
 800684a:	4602      	mov	r2, r0
 800684c:	460b      	mov	r3, r1
 800684e:	4b0d      	ldr	r3, [pc, #52]	; (8006884 <UART_SetConfig+0x2d4>)
 8006850:	fba3 1302 	umull	r1, r3, r3, r2
 8006854:	095b      	lsrs	r3, r3, #5
 8006856:	2164      	movs	r1, #100	; 0x64
 8006858:	fb01 f303 	mul.w	r3, r1, r3
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	00db      	lsls	r3, r3, #3
 8006860:	3332      	adds	r3, #50	; 0x32
 8006862:	4a08      	ldr	r2, [pc, #32]	; (8006884 <UART_SetConfig+0x2d4>)
 8006864:	fba2 2303 	umull	r2, r3, r2, r3
 8006868:	095b      	lsrs	r3, r3, #5
 800686a:	f003 0207 	and.w	r2, r3, #7
 800686e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4422      	add	r2, r4
 8006876:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006878:	e105      	b.n	8006a86 <UART_SetConfig+0x4d6>
 800687a:	bf00      	nop
 800687c:	40011000 	.word	0x40011000
 8006880:	40011400 	.word	0x40011400
 8006884:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006888:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800688c:	2200      	movs	r2, #0
 800688e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006892:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006896:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800689a:	4642      	mov	r2, r8
 800689c:	464b      	mov	r3, r9
 800689e:	1891      	adds	r1, r2, r2
 80068a0:	6239      	str	r1, [r7, #32]
 80068a2:	415b      	adcs	r3, r3
 80068a4:	627b      	str	r3, [r7, #36]	; 0x24
 80068a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80068aa:	4641      	mov	r1, r8
 80068ac:	1854      	adds	r4, r2, r1
 80068ae:	4649      	mov	r1, r9
 80068b0:	eb43 0501 	adc.w	r5, r3, r1
 80068b4:	f04f 0200 	mov.w	r2, #0
 80068b8:	f04f 0300 	mov.w	r3, #0
 80068bc:	00eb      	lsls	r3, r5, #3
 80068be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80068c2:	00e2      	lsls	r2, r4, #3
 80068c4:	4614      	mov	r4, r2
 80068c6:	461d      	mov	r5, r3
 80068c8:	4643      	mov	r3, r8
 80068ca:	18e3      	adds	r3, r4, r3
 80068cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80068d0:	464b      	mov	r3, r9
 80068d2:	eb45 0303 	adc.w	r3, r5, r3
 80068d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80068da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80068e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80068ea:	f04f 0200 	mov.w	r2, #0
 80068ee:	f04f 0300 	mov.w	r3, #0
 80068f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80068f6:	4629      	mov	r1, r5
 80068f8:	008b      	lsls	r3, r1, #2
 80068fa:	4621      	mov	r1, r4
 80068fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006900:	4621      	mov	r1, r4
 8006902:	008a      	lsls	r2, r1, #2
 8006904:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006908:	f7f9 fcc2 	bl	8000290 <__aeabi_uldivmod>
 800690c:	4602      	mov	r2, r0
 800690e:	460b      	mov	r3, r1
 8006910:	4b60      	ldr	r3, [pc, #384]	; (8006a94 <UART_SetConfig+0x4e4>)
 8006912:	fba3 2302 	umull	r2, r3, r3, r2
 8006916:	095b      	lsrs	r3, r3, #5
 8006918:	011c      	lsls	r4, r3, #4
 800691a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800691e:	2200      	movs	r2, #0
 8006920:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006924:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006928:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800692c:	4642      	mov	r2, r8
 800692e:	464b      	mov	r3, r9
 8006930:	1891      	adds	r1, r2, r2
 8006932:	61b9      	str	r1, [r7, #24]
 8006934:	415b      	adcs	r3, r3
 8006936:	61fb      	str	r3, [r7, #28]
 8006938:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800693c:	4641      	mov	r1, r8
 800693e:	1851      	adds	r1, r2, r1
 8006940:	6139      	str	r1, [r7, #16]
 8006942:	4649      	mov	r1, r9
 8006944:	414b      	adcs	r3, r1
 8006946:	617b      	str	r3, [r7, #20]
 8006948:	f04f 0200 	mov.w	r2, #0
 800694c:	f04f 0300 	mov.w	r3, #0
 8006950:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006954:	4659      	mov	r1, fp
 8006956:	00cb      	lsls	r3, r1, #3
 8006958:	4651      	mov	r1, sl
 800695a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800695e:	4651      	mov	r1, sl
 8006960:	00ca      	lsls	r2, r1, #3
 8006962:	4610      	mov	r0, r2
 8006964:	4619      	mov	r1, r3
 8006966:	4603      	mov	r3, r0
 8006968:	4642      	mov	r2, r8
 800696a:	189b      	adds	r3, r3, r2
 800696c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006970:	464b      	mov	r3, r9
 8006972:	460a      	mov	r2, r1
 8006974:	eb42 0303 	adc.w	r3, r2, r3
 8006978:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800697c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	67bb      	str	r3, [r7, #120]	; 0x78
 8006986:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006988:	f04f 0200 	mov.w	r2, #0
 800698c:	f04f 0300 	mov.w	r3, #0
 8006990:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006994:	4649      	mov	r1, r9
 8006996:	008b      	lsls	r3, r1, #2
 8006998:	4641      	mov	r1, r8
 800699a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800699e:	4641      	mov	r1, r8
 80069a0:	008a      	lsls	r2, r1, #2
 80069a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80069a6:	f7f9 fc73 	bl	8000290 <__aeabi_uldivmod>
 80069aa:	4602      	mov	r2, r0
 80069ac:	460b      	mov	r3, r1
 80069ae:	4b39      	ldr	r3, [pc, #228]	; (8006a94 <UART_SetConfig+0x4e4>)
 80069b0:	fba3 1302 	umull	r1, r3, r3, r2
 80069b4:	095b      	lsrs	r3, r3, #5
 80069b6:	2164      	movs	r1, #100	; 0x64
 80069b8:	fb01 f303 	mul.w	r3, r1, r3
 80069bc:	1ad3      	subs	r3, r2, r3
 80069be:	011b      	lsls	r3, r3, #4
 80069c0:	3332      	adds	r3, #50	; 0x32
 80069c2:	4a34      	ldr	r2, [pc, #208]	; (8006a94 <UART_SetConfig+0x4e4>)
 80069c4:	fba2 2303 	umull	r2, r3, r2, r3
 80069c8:	095b      	lsrs	r3, r3, #5
 80069ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069ce:	441c      	add	r4, r3
 80069d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069d4:	2200      	movs	r2, #0
 80069d6:	673b      	str	r3, [r7, #112]	; 0x70
 80069d8:	677a      	str	r2, [r7, #116]	; 0x74
 80069da:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80069de:	4642      	mov	r2, r8
 80069e0:	464b      	mov	r3, r9
 80069e2:	1891      	adds	r1, r2, r2
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	415b      	adcs	r3, r3
 80069e8:	60fb      	str	r3, [r7, #12]
 80069ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80069ee:	4641      	mov	r1, r8
 80069f0:	1851      	adds	r1, r2, r1
 80069f2:	6039      	str	r1, [r7, #0]
 80069f4:	4649      	mov	r1, r9
 80069f6:	414b      	adcs	r3, r1
 80069f8:	607b      	str	r3, [r7, #4]
 80069fa:	f04f 0200 	mov.w	r2, #0
 80069fe:	f04f 0300 	mov.w	r3, #0
 8006a02:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006a06:	4659      	mov	r1, fp
 8006a08:	00cb      	lsls	r3, r1, #3
 8006a0a:	4651      	mov	r1, sl
 8006a0c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a10:	4651      	mov	r1, sl
 8006a12:	00ca      	lsls	r2, r1, #3
 8006a14:	4610      	mov	r0, r2
 8006a16:	4619      	mov	r1, r3
 8006a18:	4603      	mov	r3, r0
 8006a1a:	4642      	mov	r2, r8
 8006a1c:	189b      	adds	r3, r3, r2
 8006a1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a20:	464b      	mov	r3, r9
 8006a22:	460a      	mov	r2, r1
 8006a24:	eb42 0303 	adc.w	r3, r2, r3
 8006a28:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	663b      	str	r3, [r7, #96]	; 0x60
 8006a34:	667a      	str	r2, [r7, #100]	; 0x64
 8006a36:	f04f 0200 	mov.w	r2, #0
 8006a3a:	f04f 0300 	mov.w	r3, #0
 8006a3e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006a42:	4649      	mov	r1, r9
 8006a44:	008b      	lsls	r3, r1, #2
 8006a46:	4641      	mov	r1, r8
 8006a48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a4c:	4641      	mov	r1, r8
 8006a4e:	008a      	lsls	r2, r1, #2
 8006a50:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006a54:	f7f9 fc1c 	bl	8000290 <__aeabi_uldivmod>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	460b      	mov	r3, r1
 8006a5c:	4b0d      	ldr	r3, [pc, #52]	; (8006a94 <UART_SetConfig+0x4e4>)
 8006a5e:	fba3 1302 	umull	r1, r3, r3, r2
 8006a62:	095b      	lsrs	r3, r3, #5
 8006a64:	2164      	movs	r1, #100	; 0x64
 8006a66:	fb01 f303 	mul.w	r3, r1, r3
 8006a6a:	1ad3      	subs	r3, r2, r3
 8006a6c:	011b      	lsls	r3, r3, #4
 8006a6e:	3332      	adds	r3, #50	; 0x32
 8006a70:	4a08      	ldr	r2, [pc, #32]	; (8006a94 <UART_SetConfig+0x4e4>)
 8006a72:	fba2 2303 	umull	r2, r3, r2, r3
 8006a76:	095b      	lsrs	r3, r3, #5
 8006a78:	f003 020f 	and.w	r2, r3, #15
 8006a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4422      	add	r2, r4
 8006a84:	609a      	str	r2, [r3, #8]
}
 8006a86:	bf00      	nop
 8006a88:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a92:	bf00      	nop
 8006a94:	51eb851f 	.word	0x51eb851f

08006a98 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b085      	sub	sp, #20
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006aa6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006aaa:	2b84      	cmp	r3, #132	; 0x84
 8006aac:	d005      	beq.n	8006aba <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006aae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	4413      	add	r3, r2
 8006ab6:	3303      	adds	r3, #3
 8006ab8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006aba:	68fb      	ldr	r3, [r7, #12]
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3714      	adds	r7, #20
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b083      	sub	sp, #12
 8006acc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ace:	f3ef 8305 	mrs	r3, IPSR
 8006ad2:	607b      	str	r3, [r7, #4]
  return(result);
 8006ad4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	bf14      	ite	ne
 8006ada:	2301      	movne	r3, #1
 8006adc:	2300      	moveq	r3, #0
 8006ade:	b2db      	uxtb	r3, r3
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006af0:	f001 faa8 	bl	8008044 <vTaskStartScheduler>
  
  return osOK;
 8006af4:	2300      	movs	r3, #0
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	bd80      	pop	{r7, pc}

08006afa <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006afa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006afc:	b089      	sub	sp, #36	; 0x24
 8006afe:	af04      	add	r7, sp, #16
 8006b00:	6078      	str	r0, [r7, #4]
 8006b02:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	695b      	ldr	r3, [r3, #20]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d020      	beq.n	8006b4e <osThreadCreate+0x54>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	699b      	ldr	r3, [r3, #24]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d01c      	beq.n	8006b4e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	685c      	ldr	r4, [r3, #4]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681d      	ldr	r5, [r3, #0]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	691e      	ldr	r6, [r3, #16]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006b26:	4618      	mov	r0, r3
 8006b28:	f7ff ffb6 	bl	8006a98 <makeFreeRtosPriority>
 8006b2c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	695b      	ldr	r3, [r3, #20]
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006b36:	9202      	str	r2, [sp, #8]
 8006b38:	9301      	str	r3, [sp, #4]
 8006b3a:	9100      	str	r1, [sp, #0]
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	4632      	mov	r2, r6
 8006b40:	4629      	mov	r1, r5
 8006b42:	4620      	mov	r0, r4
 8006b44:	f001 f8b6 	bl	8007cb4 <xTaskCreateStatic>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	60fb      	str	r3, [r7, #12]
 8006b4c:	e01c      	b.n	8006b88 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	685c      	ldr	r4, [r3, #4]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006b5a:	b29e      	uxth	r6, r3
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006b62:	4618      	mov	r0, r3
 8006b64:	f7ff ff98 	bl	8006a98 <makeFreeRtosPriority>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	f107 030c 	add.w	r3, r7, #12
 8006b6e:	9301      	str	r3, [sp, #4]
 8006b70:	9200      	str	r2, [sp, #0]
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	4632      	mov	r2, r6
 8006b76:	4629      	mov	r1, r5
 8006b78:	4620      	mov	r0, r4
 8006b7a:	f001 f8f8 	bl	8007d6e <xTaskCreate>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d001      	beq.n	8006b88 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006b84:	2300      	movs	r3, #0
 8006b86:	e000      	b.n	8006b8a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006b88:	68fb      	ldr	r3, [r7, #12]
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3714      	adds	r7, #20
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006b92 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006b92:	b580      	push	{r7, lr}
 8006b94:	b084      	sub	sp, #16
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d001      	beq.n	8006ba8 <osDelay+0x16>
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	e000      	b.n	8006baa <osDelay+0x18>
 8006ba8:	2301      	movs	r3, #1
 8006baa:	4618      	mov	r0, r3
 8006bac:	f001 fa16 	bl	8007fdc <vTaskDelay>
  
  return osOK;
 8006bb0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3710      	adds	r7, #16
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}

08006bba <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8006bba:	b580      	push	{r7, lr}
 8006bbc:	b086      	sub	sp, #24
 8006bbe:	af02      	add	r7, sp, #8
 8006bc0:	6078      	str	r0, [r7, #4]
 8006bc2:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d00f      	beq.n	8006bec <osSemaphoreCreate+0x32>
    if (count == 1) {
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d10a      	bne.n	8006be8 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	2203      	movs	r2, #3
 8006bd8:	9200      	str	r2, [sp, #0]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	2100      	movs	r1, #0
 8006bde:	2001      	movs	r0, #1
 8006be0:	f000 fb56 	bl	8007290 <xQueueGenericCreateStatic>
 8006be4:	4603      	mov	r3, r0
 8006be6:	e016      	b.n	8006c16 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8006be8:	2300      	movs	r3, #0
 8006bea:	e014      	b.n	8006c16 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d110      	bne.n	8006c14 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8006bf2:	2203      	movs	r2, #3
 8006bf4:	2100      	movs	r1, #0
 8006bf6:	2001      	movs	r0, #1
 8006bf8:	f000 fbc2 	bl	8007380 <xQueueGenericCreate>
 8006bfc:	60f8      	str	r0, [r7, #12]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d005      	beq.n	8006c10 <osSemaphoreCreate+0x56>
 8006c04:	2300      	movs	r3, #0
 8006c06:	2200      	movs	r2, #0
 8006c08:	2100      	movs	r1, #0
 8006c0a:	68f8      	ldr	r0, [r7, #12]
 8006c0c:	f000 fc12 	bl	8007434 <xQueueGenericSend>
      return sema;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	e000      	b.n	8006c16 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8006c14:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3710      	adds	r7, #16
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
	...

08006c20 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d101      	bne.n	8006c38 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8006c34:	2380      	movs	r3, #128	; 0x80
 8006c36:	e03a      	b.n	8006cae <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c42:	d103      	bne.n	8006c4c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8006c44:	f04f 33ff 	mov.w	r3, #4294967295
 8006c48:	60fb      	str	r3, [r7, #12]
 8006c4a:	e009      	b.n	8006c60 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d006      	beq.n	8006c60 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d101      	bne.n	8006c60 <osSemaphoreWait+0x40>
      ticks = 1;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006c60:	f7ff ff32 	bl	8006ac8 <inHandlerMode>
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d017      	beq.n	8006c9a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006c6a:	f107 0308 	add.w	r3, r7, #8
 8006c6e:	461a      	mov	r2, r3
 8006c70:	2100      	movs	r1, #0
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 fe76 	bl	8007964 <xQueueReceiveFromISR>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d001      	beq.n	8006c82 <osSemaphoreWait+0x62>
      return osErrorOS;
 8006c7e:	23ff      	movs	r3, #255	; 0xff
 8006c80:	e015      	b.n	8006cae <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d011      	beq.n	8006cac <osSemaphoreWait+0x8c>
 8006c88:	4b0b      	ldr	r3, [pc, #44]	; (8006cb8 <osSemaphoreWait+0x98>)
 8006c8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c8e:	601a      	str	r2, [r3, #0]
 8006c90:	f3bf 8f4f 	dsb	sy
 8006c94:	f3bf 8f6f 	isb	sy
 8006c98:	e008      	b.n	8006cac <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8006c9a:	68f9      	ldr	r1, [r7, #12]
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 fd55 	bl	800774c <xQueueSemaphoreTake>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d001      	beq.n	8006cac <osSemaphoreWait+0x8c>
    return osErrorOS;
 8006ca8:	23ff      	movs	r3, #255	; 0xff
 8006caa:	e000      	b.n	8006cae <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8006cac:	2300      	movs	r3, #0
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3710      	adds	r7, #16
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
 8006cb6:	bf00      	nop
 8006cb8:	e000ed04 	.word	0xe000ed04

08006cbc <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b082      	sub	sp, #8
 8006cc0:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8006cc2:	201c      	movs	r0, #28
 8006cc4:	f002 fae0 	bl	8009288 <pvPortMalloc>
 8006cc8:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d00a      	beq.n	8006ce6 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	3304      	adds	r3, #4
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f000 f9bb 	bl	8007056 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8006ce6:	687b      	ldr	r3, [r7, #4]
	}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3708      	adds	r7, #8
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b090      	sub	sp, #64	; 0x40
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	60f8      	str	r0, [r7, #12]
 8006cf8:	60b9      	str	r1, [r7, #8]
 8006cfa:	607a      	str	r2, [r7, #4]
 8006cfc:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8006d02:	2300      	movs	r3, #0
 8006d04:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8006d06:	2300      	movs	r3, #0
 8006d08:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d10a      	bne.n	8006d26 <xEventGroupWaitBits+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d14:	f383 8811 	msr	BASEPRI, r3
 8006d18:	f3bf 8f6f 	isb	sy
 8006d1c:	f3bf 8f4f 	dsb	sy
 8006d20:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006d22:	bf00      	nop
 8006d24:	e7fe      	b.n	8006d24 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d00a      	beq.n	8006d46 <xEventGroupWaitBits+0x56>
	__asm volatile
 8006d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d34:	f383 8811 	msr	BASEPRI, r3
 8006d38:	f3bf 8f6f 	isb	sy
 8006d3c:	f3bf 8f4f 	dsb	sy
 8006d40:	61fb      	str	r3, [r7, #28]
}
 8006d42:	bf00      	nop
 8006d44:	e7fe      	b.n	8006d44 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d10a      	bne.n	8006d62 <xEventGroupWaitBits+0x72>
	__asm volatile
 8006d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d50:	f383 8811 	msr	BASEPRI, r3
 8006d54:	f3bf 8f6f 	isb	sy
 8006d58:	f3bf 8f4f 	dsb	sy
 8006d5c:	61bb      	str	r3, [r7, #24]
}
 8006d5e:	bf00      	nop
 8006d60:	e7fe      	b.n	8006d60 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d62:	f001 fe0b 	bl	800897c <xTaskGetSchedulerState>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d102      	bne.n	8006d72 <xEventGroupWaitBits+0x82>
 8006d6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d101      	bne.n	8006d76 <xEventGroupWaitBits+0x86>
 8006d72:	2301      	movs	r3, #1
 8006d74:	e000      	b.n	8006d78 <xEventGroupWaitBits+0x88>
 8006d76:	2300      	movs	r3, #0
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d10a      	bne.n	8006d92 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8006d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d80:	f383 8811 	msr	BASEPRI, r3
 8006d84:	f3bf 8f6f 	isb	sy
 8006d88:	f3bf 8f4f 	dsb	sy
 8006d8c:	617b      	str	r3, [r7, #20]
}
 8006d8e:	bf00      	nop
 8006d90:	e7fe      	b.n	8006d90 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8006d92:	f001 f9b7 	bl	8008104 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8006d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8006d9c:	683a      	ldr	r2, [r7, #0]
 8006d9e:	68b9      	ldr	r1, [r7, #8]
 8006da0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006da2:	f000 f936 	bl	8007012 <prvTestWaitCondition>
 8006da6:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8006da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d00e      	beq.n	8006dcc <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8006dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8006db2:	2300      	movs	r3, #0
 8006db4:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d028      	beq.n	8006e0e <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8006dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	43db      	mvns	r3, r3
 8006dc4:	401a      	ands	r2, r3
 8006dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dc8:	601a      	str	r2, [r3, #0]
 8006dca:	e020      	b.n	8006e0e <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8006dcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d104      	bne.n	8006ddc <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8006dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	633b      	str	r3, [r7, #48]	; 0x30
 8006dda:	e018      	b.n	8006e0e <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d003      	beq.n	8006dea <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8006de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006de8:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d003      	beq.n	8006df8 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8006df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006df6:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8006df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dfa:	1d18      	adds	r0, r3, #4
 8006dfc:	68ba      	ldr	r2, [r7, #8]
 8006dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e00:	4313      	orrs	r3, r2
 8006e02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e04:	4619      	mov	r1, r3
 8006e06:	f001 fb5f 	bl	80084c8 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8006e0e:	f001 f987 	bl	8008120 <xTaskResumeAll>
 8006e12:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8006e14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d031      	beq.n	8006e7e <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8006e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d107      	bne.n	8006e30 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8006e20:	4b19      	ldr	r3, [pc, #100]	; (8006e88 <xEventGroupWaitBits+0x198>)
 8006e22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e26:	601a      	str	r2, [r3, #0]
 8006e28:	f3bf 8f4f 	dsb	sy
 8006e2c:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8006e30:	f001 ff4c 	bl	8008ccc <uxTaskResetEventItemValue>
 8006e34:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8006e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d11a      	bne.n	8006e76 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8006e40:	f002 f900 	bl	8009044 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8006e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8006e4a:	683a      	ldr	r2, [r7, #0]
 8006e4c:	68b9      	ldr	r1, [r7, #8]
 8006e4e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006e50:	f000 f8df 	bl	8007012 <prvTestWaitCondition>
 8006e54:	4603      	mov	r3, r0
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d009      	beq.n	8006e6e <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d006      	beq.n	8006e6e <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8006e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	43db      	mvns	r3, r3
 8006e68:	401a      	ands	r2, r3
 8006e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e6c:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8006e72:	f002 f917 	bl	80090a4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8006e76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e78:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8006e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3740      	adds	r7, #64	; 0x40
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	e000ed04 	.word	0xe000ed04

08006e8c <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b086      	sub	sp, #24
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d10a      	bne.n	8006eb6 <xEventGroupClearBits+0x2a>
	__asm volatile
 8006ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea4:	f383 8811 	msr	BASEPRI, r3
 8006ea8:	f3bf 8f6f 	isb	sy
 8006eac:	f3bf 8f4f 	dsb	sy
 8006eb0:	60fb      	str	r3, [r7, #12]
}
 8006eb2:	bf00      	nop
 8006eb4:	e7fe      	b.n	8006eb4 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00a      	beq.n	8006ed6 <xEventGroupClearBits+0x4a>
	__asm volatile
 8006ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec4:	f383 8811 	msr	BASEPRI, r3
 8006ec8:	f3bf 8f6f 	isb	sy
 8006ecc:	f3bf 8f4f 	dsb	sy
 8006ed0:	60bb      	str	r3, [r7, #8]
}
 8006ed2:	bf00      	nop
 8006ed4:	e7fe      	b.n	8006ed4 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8006ed6:	f002 f8b5 	bl	8009044 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	43db      	mvns	r3, r3
 8006ee8:	401a      	ands	r2, r3
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8006eee:	f002 f8d9 	bl	80090a4 <vPortExitCritical>

	return uxReturn;
 8006ef2:	693b      	ldr	r3, [r7, #16]
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3718      	adds	r7, #24
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b08e      	sub	sp, #56	; 0x38
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8006f06:	2300      	movs	r3, #0
 8006f08:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d10a      	bne.n	8006f2e <xEventGroupSetBits+0x32>
	__asm volatile
 8006f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f1c:	f383 8811 	msr	BASEPRI, r3
 8006f20:	f3bf 8f6f 	isb	sy
 8006f24:	f3bf 8f4f 	dsb	sy
 8006f28:	613b      	str	r3, [r7, #16]
}
 8006f2a:	bf00      	nop
 8006f2c:	e7fe      	b.n	8006f2c <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d00a      	beq.n	8006f4e <xEventGroupSetBits+0x52>
	__asm volatile
 8006f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f3c:	f383 8811 	msr	BASEPRI, r3
 8006f40:	f3bf 8f6f 	isb	sy
 8006f44:	f3bf 8f4f 	dsb	sy
 8006f48:	60fb      	str	r3, [r7, #12]
}
 8006f4a:	bf00      	nop
 8006f4c:	e7fe      	b.n	8006f4c <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8006f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f50:	3304      	adds	r3, #4
 8006f52:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f56:	3308      	adds	r3, #8
 8006f58:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8006f5a:	f001 f8d3 	bl	8008104 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8006f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8006f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	431a      	orrs	r2, r3
 8006f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8006f70:	e03c      	b.n	8006fec <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8006f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8006f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8006f82:	69bb      	ldr	r3, [r7, #24]
 8006f84:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006f88:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006f90:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d108      	bne.n	8006fae <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8006f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	69bb      	ldr	r3, [r7, #24]
 8006fa2:	4013      	ands	r3, r2
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d00b      	beq.n	8006fc0 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fac:	e008      	b.n	8006fc0 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8006fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	4013      	ands	r3, r2
 8006fb6:	69ba      	ldr	r2, [r7, #24]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d101      	bne.n	8006fc0 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8006fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d010      	beq.n	8006fe8 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d003      	beq.n	8006fd8 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8006fd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8006fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006fe4:	f001 fb0e 	bl	8008604 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8006fe8:	69fb      	ldr	r3, [r7, #28]
 8006fea:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8006fec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fee:	6a3b      	ldr	r3, [r7, #32]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d1be      	bne.n	8006f72 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8006ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ffa:	43db      	mvns	r3, r3
 8006ffc:	401a      	ands	r2, r3
 8006ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007000:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8007002:	f001 f88d 	bl	8008120 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8007006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007008:	681b      	ldr	r3, [r3, #0]
}
 800700a:	4618      	mov	r0, r3
 800700c:	3738      	adds	r7, #56	; 0x38
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8007012:	b480      	push	{r7}
 8007014:	b087      	sub	sp, #28
 8007016:	af00      	add	r7, sp, #0
 8007018:	60f8      	str	r0, [r7, #12]
 800701a:	60b9      	str	r1, [r7, #8]
 800701c:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800701e:	2300      	movs	r3, #0
 8007020:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d107      	bne.n	8007038 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8007028:	68fa      	ldr	r2, [r7, #12]
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	4013      	ands	r3, r2
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00a      	beq.n	8007048 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8007032:	2301      	movs	r3, #1
 8007034:	617b      	str	r3, [r7, #20]
 8007036:	e007      	b.n	8007048 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8007038:	68fa      	ldr	r2, [r7, #12]
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	4013      	ands	r3, r2
 800703e:	68ba      	ldr	r2, [r7, #8]
 8007040:	429a      	cmp	r2, r3
 8007042:	d101      	bne.n	8007048 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8007044:	2301      	movs	r3, #1
 8007046:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8007048:	697b      	ldr	r3, [r7, #20]
}
 800704a:	4618      	mov	r0, r3
 800704c:	371c      	adds	r7, #28
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr

08007056 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007056:	b480      	push	{r7}
 8007058:	b083      	sub	sp, #12
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f103 0208 	add.w	r2, r3, #8
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f04f 32ff 	mov.w	r2, #4294967295
 800706e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f103 0208 	add.w	r2, r3, #8
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f103 0208 	add.w	r2, r3, #8
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800708a:	bf00      	nop
 800708c:	370c      	adds	r7, #12
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr

08007096 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007096:	b480      	push	{r7}
 8007098:	b083      	sub	sp, #12
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2200      	movs	r2, #0
 80070a2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80070a4:	bf00      	nop
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80070b0:	b480      	push	{r7}
 80070b2:	b085      	sub	sp, #20
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	68fa      	ldr	r2, [r7, #12]
 80070c4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	689a      	ldr	r2, [r3, #8]
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	683a      	ldr	r2, [r7, #0]
 80070d4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	683a      	ldr	r2, [r7, #0]
 80070da:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	1c5a      	adds	r2, r3, #1
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	601a      	str	r2, [r3, #0]
}
 80070ec:	bf00      	nop
 80070ee:	3714      	adds	r7, #20
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr

080070f8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80070f8:	b480      	push	{r7}
 80070fa:	b085      	sub	sp, #20
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800710e:	d103      	bne.n	8007118 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	691b      	ldr	r3, [r3, #16]
 8007114:	60fb      	str	r3, [r7, #12]
 8007116:	e00c      	b.n	8007132 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	3308      	adds	r3, #8
 800711c:	60fb      	str	r3, [r7, #12]
 800711e:	e002      	b.n	8007126 <vListInsert+0x2e>
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	60fb      	str	r3, [r7, #12]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	68ba      	ldr	r2, [r7, #8]
 800712e:	429a      	cmp	r2, r3
 8007130:	d2f6      	bcs.n	8007120 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	685a      	ldr	r2, [r3, #4]
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	683a      	ldr	r2, [r7, #0]
 8007140:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	68fa      	ldr	r2, [r7, #12]
 8007146:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	683a      	ldr	r2, [r7, #0]
 800714c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	1c5a      	adds	r2, r3, #1
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	601a      	str	r2, [r3, #0]
}
 800715e:	bf00      	nop
 8007160:	3714      	adds	r7, #20
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr

0800716a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800716a:	b480      	push	{r7}
 800716c:	b085      	sub	sp, #20
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	691b      	ldr	r3, [r3, #16]
 8007176:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	6892      	ldr	r2, [r2, #8]
 8007180:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	6852      	ldr	r2, [r2, #4]
 800718a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	429a      	cmp	r2, r3
 8007194:	d103      	bne.n	800719e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	689a      	ldr	r2, [r3, #8]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2200      	movs	r2, #0
 80071a2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	1e5a      	subs	r2, r3, #1
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3714      	adds	r7, #20
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr
	...

080071c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d10a      	bne.n	80071ea <xQueueGenericReset+0x2a>
	__asm volatile
 80071d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d8:	f383 8811 	msr	BASEPRI, r3
 80071dc:	f3bf 8f6f 	isb	sy
 80071e0:	f3bf 8f4f 	dsb	sy
 80071e4:	60bb      	str	r3, [r7, #8]
}
 80071e6:	bf00      	nop
 80071e8:	e7fe      	b.n	80071e8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80071ea:	f001 ff2b 	bl	8009044 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071f6:	68f9      	ldr	r1, [r7, #12]
 80071f8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80071fa:	fb01 f303 	mul.w	r3, r1, r3
 80071fe:	441a      	add	r2, r3
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2200      	movs	r2, #0
 8007208:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800721a:	3b01      	subs	r3, #1
 800721c:	68f9      	ldr	r1, [r7, #12]
 800721e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007220:	fb01 f303 	mul.w	r3, r1, r3
 8007224:	441a      	add	r2, r3
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	22ff      	movs	r2, #255	; 0xff
 800722e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	22ff      	movs	r2, #255	; 0xff
 8007236:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d114      	bne.n	800726a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d01a      	beq.n	800727e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	3310      	adds	r3, #16
 800724c:	4618      	mov	r0, r3
 800724e:	f001 f977 	bl	8008540 <xTaskRemoveFromEventList>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d012      	beq.n	800727e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007258:	4b0c      	ldr	r3, [pc, #48]	; (800728c <xQueueGenericReset+0xcc>)
 800725a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800725e:	601a      	str	r2, [r3, #0]
 8007260:	f3bf 8f4f 	dsb	sy
 8007264:	f3bf 8f6f 	isb	sy
 8007268:	e009      	b.n	800727e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	3310      	adds	r3, #16
 800726e:	4618      	mov	r0, r3
 8007270:	f7ff fef1 	bl	8007056 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	3324      	adds	r3, #36	; 0x24
 8007278:	4618      	mov	r0, r3
 800727a:	f7ff feec 	bl	8007056 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800727e:	f001 ff11 	bl	80090a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007282:	2301      	movs	r3, #1
}
 8007284:	4618      	mov	r0, r3
 8007286:	3710      	adds	r7, #16
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}
 800728c:	e000ed04 	.word	0xe000ed04

08007290 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007290:	b580      	push	{r7, lr}
 8007292:	b08e      	sub	sp, #56	; 0x38
 8007294:	af02      	add	r7, sp, #8
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	60b9      	str	r1, [r7, #8]
 800729a:	607a      	str	r2, [r7, #4]
 800729c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d10a      	bne.n	80072ba <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80072a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a8:	f383 8811 	msr	BASEPRI, r3
 80072ac:	f3bf 8f6f 	isb	sy
 80072b0:	f3bf 8f4f 	dsb	sy
 80072b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80072b6:	bf00      	nop
 80072b8:	e7fe      	b.n	80072b8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d10a      	bne.n	80072d6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80072c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c4:	f383 8811 	msr	BASEPRI, r3
 80072c8:	f3bf 8f6f 	isb	sy
 80072cc:	f3bf 8f4f 	dsb	sy
 80072d0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80072d2:	bf00      	nop
 80072d4:	e7fe      	b.n	80072d4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d002      	beq.n	80072e2 <xQueueGenericCreateStatic+0x52>
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d001      	beq.n	80072e6 <xQueueGenericCreateStatic+0x56>
 80072e2:	2301      	movs	r3, #1
 80072e4:	e000      	b.n	80072e8 <xQueueGenericCreateStatic+0x58>
 80072e6:	2300      	movs	r3, #0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d10a      	bne.n	8007302 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80072ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f0:	f383 8811 	msr	BASEPRI, r3
 80072f4:	f3bf 8f6f 	isb	sy
 80072f8:	f3bf 8f4f 	dsb	sy
 80072fc:	623b      	str	r3, [r7, #32]
}
 80072fe:	bf00      	nop
 8007300:	e7fe      	b.n	8007300 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d102      	bne.n	800730e <xQueueGenericCreateStatic+0x7e>
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d101      	bne.n	8007312 <xQueueGenericCreateStatic+0x82>
 800730e:	2301      	movs	r3, #1
 8007310:	e000      	b.n	8007314 <xQueueGenericCreateStatic+0x84>
 8007312:	2300      	movs	r3, #0
 8007314:	2b00      	cmp	r3, #0
 8007316:	d10a      	bne.n	800732e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800731c:	f383 8811 	msr	BASEPRI, r3
 8007320:	f3bf 8f6f 	isb	sy
 8007324:	f3bf 8f4f 	dsb	sy
 8007328:	61fb      	str	r3, [r7, #28]
}
 800732a:	bf00      	nop
 800732c:	e7fe      	b.n	800732c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800732e:	2348      	movs	r3, #72	; 0x48
 8007330:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	2b48      	cmp	r3, #72	; 0x48
 8007336:	d00a      	beq.n	800734e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800733c:	f383 8811 	msr	BASEPRI, r3
 8007340:	f3bf 8f6f 	isb	sy
 8007344:	f3bf 8f4f 	dsb	sy
 8007348:	61bb      	str	r3, [r7, #24]
}
 800734a:	bf00      	nop
 800734c:	e7fe      	b.n	800734c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800734e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007356:	2b00      	cmp	r3, #0
 8007358:	d00d      	beq.n	8007376 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800735a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800735c:	2201      	movs	r2, #1
 800735e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007362:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007368:	9300      	str	r3, [sp, #0]
 800736a:	4613      	mov	r3, r2
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	68b9      	ldr	r1, [r7, #8]
 8007370:	68f8      	ldr	r0, [r7, #12]
 8007372:	f000 f83f 	bl	80073f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007378:	4618      	mov	r0, r3
 800737a:	3730      	adds	r7, #48	; 0x30
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007380:	b580      	push	{r7, lr}
 8007382:	b08a      	sub	sp, #40	; 0x28
 8007384:	af02      	add	r7, sp, #8
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	4613      	mov	r3, r2
 800738c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d10a      	bne.n	80073aa <xQueueGenericCreate+0x2a>
	__asm volatile
 8007394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007398:	f383 8811 	msr	BASEPRI, r3
 800739c:	f3bf 8f6f 	isb	sy
 80073a0:	f3bf 8f4f 	dsb	sy
 80073a4:	613b      	str	r3, [r7, #16]
}
 80073a6:	bf00      	nop
 80073a8:	e7fe      	b.n	80073a8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	68ba      	ldr	r2, [r7, #8]
 80073ae:	fb02 f303 	mul.w	r3, r2, r3
 80073b2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80073b4:	69fb      	ldr	r3, [r7, #28]
 80073b6:	3348      	adds	r3, #72	; 0x48
 80073b8:	4618      	mov	r0, r3
 80073ba:	f001 ff65 	bl	8009288 <pvPortMalloc>
 80073be:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80073c0:	69bb      	ldr	r3, [r7, #24]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d011      	beq.n	80073ea <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80073c6:	69bb      	ldr	r3, [r7, #24]
 80073c8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	3348      	adds	r3, #72	; 0x48
 80073ce:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80073d0:	69bb      	ldr	r3, [r7, #24]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80073d8:	79fa      	ldrb	r2, [r7, #7]
 80073da:	69bb      	ldr	r3, [r7, #24]
 80073dc:	9300      	str	r3, [sp, #0]
 80073de:	4613      	mov	r3, r2
 80073e0:	697a      	ldr	r2, [r7, #20]
 80073e2:	68b9      	ldr	r1, [r7, #8]
 80073e4:	68f8      	ldr	r0, [r7, #12]
 80073e6:	f000 f805 	bl	80073f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80073ea:	69bb      	ldr	r3, [r7, #24]
	}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3720      	adds	r7, #32
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	607a      	str	r2, [r7, #4]
 8007400:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d103      	bne.n	8007410 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007408:	69bb      	ldr	r3, [r7, #24]
 800740a:	69ba      	ldr	r2, [r7, #24]
 800740c:	601a      	str	r2, [r3, #0]
 800740e:	e002      	b.n	8007416 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007410:	69bb      	ldr	r3, [r7, #24]
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007416:	69bb      	ldr	r3, [r7, #24]
 8007418:	68fa      	ldr	r2, [r7, #12]
 800741a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800741c:	69bb      	ldr	r3, [r7, #24]
 800741e:	68ba      	ldr	r2, [r7, #8]
 8007420:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007422:	2101      	movs	r1, #1
 8007424:	69b8      	ldr	r0, [r7, #24]
 8007426:	f7ff fecb 	bl	80071c0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800742a:	bf00      	nop
 800742c:	3710      	adds	r7, #16
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
	...

08007434 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b08e      	sub	sp, #56	; 0x38
 8007438:	af00      	add	r7, sp, #0
 800743a:	60f8      	str	r0, [r7, #12]
 800743c:	60b9      	str	r1, [r7, #8]
 800743e:	607a      	str	r2, [r7, #4]
 8007440:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007442:	2300      	movs	r3, #0
 8007444:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800744a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744c:	2b00      	cmp	r3, #0
 800744e:	d10a      	bne.n	8007466 <xQueueGenericSend+0x32>
	__asm volatile
 8007450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007454:	f383 8811 	msr	BASEPRI, r3
 8007458:	f3bf 8f6f 	isb	sy
 800745c:	f3bf 8f4f 	dsb	sy
 8007460:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007462:	bf00      	nop
 8007464:	e7fe      	b.n	8007464 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d103      	bne.n	8007474 <xQueueGenericSend+0x40>
 800746c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800746e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007470:	2b00      	cmp	r3, #0
 8007472:	d101      	bne.n	8007478 <xQueueGenericSend+0x44>
 8007474:	2301      	movs	r3, #1
 8007476:	e000      	b.n	800747a <xQueueGenericSend+0x46>
 8007478:	2300      	movs	r3, #0
 800747a:	2b00      	cmp	r3, #0
 800747c:	d10a      	bne.n	8007494 <xQueueGenericSend+0x60>
	__asm volatile
 800747e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007482:	f383 8811 	msr	BASEPRI, r3
 8007486:	f3bf 8f6f 	isb	sy
 800748a:	f3bf 8f4f 	dsb	sy
 800748e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007490:	bf00      	nop
 8007492:	e7fe      	b.n	8007492 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	2b02      	cmp	r3, #2
 8007498:	d103      	bne.n	80074a2 <xQueueGenericSend+0x6e>
 800749a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800749c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d101      	bne.n	80074a6 <xQueueGenericSend+0x72>
 80074a2:	2301      	movs	r3, #1
 80074a4:	e000      	b.n	80074a8 <xQueueGenericSend+0x74>
 80074a6:	2300      	movs	r3, #0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d10a      	bne.n	80074c2 <xQueueGenericSend+0x8e>
	__asm volatile
 80074ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b0:	f383 8811 	msr	BASEPRI, r3
 80074b4:	f3bf 8f6f 	isb	sy
 80074b8:	f3bf 8f4f 	dsb	sy
 80074bc:	623b      	str	r3, [r7, #32]
}
 80074be:	bf00      	nop
 80074c0:	e7fe      	b.n	80074c0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80074c2:	f001 fa5b 	bl	800897c <xTaskGetSchedulerState>
 80074c6:	4603      	mov	r3, r0
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d102      	bne.n	80074d2 <xQueueGenericSend+0x9e>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d101      	bne.n	80074d6 <xQueueGenericSend+0xa2>
 80074d2:	2301      	movs	r3, #1
 80074d4:	e000      	b.n	80074d8 <xQueueGenericSend+0xa4>
 80074d6:	2300      	movs	r3, #0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d10a      	bne.n	80074f2 <xQueueGenericSend+0xbe>
	__asm volatile
 80074dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e0:	f383 8811 	msr	BASEPRI, r3
 80074e4:	f3bf 8f6f 	isb	sy
 80074e8:	f3bf 8f4f 	dsb	sy
 80074ec:	61fb      	str	r3, [r7, #28]
}
 80074ee:	bf00      	nop
 80074f0:	e7fe      	b.n	80074f0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80074f2:	f001 fda7 	bl	8009044 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80074f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074fe:	429a      	cmp	r2, r3
 8007500:	d302      	bcc.n	8007508 <xQueueGenericSend+0xd4>
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	2b02      	cmp	r3, #2
 8007506:	d129      	bne.n	800755c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007508:	683a      	ldr	r2, [r7, #0]
 800750a:	68b9      	ldr	r1, [r7, #8]
 800750c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800750e:	f000 fac1 	bl	8007a94 <prvCopyDataToQueue>
 8007512:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007518:	2b00      	cmp	r3, #0
 800751a:	d010      	beq.n	800753e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800751c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751e:	3324      	adds	r3, #36	; 0x24
 8007520:	4618      	mov	r0, r3
 8007522:	f001 f80d 	bl	8008540 <xTaskRemoveFromEventList>
 8007526:	4603      	mov	r3, r0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d013      	beq.n	8007554 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800752c:	4b3f      	ldr	r3, [pc, #252]	; (800762c <xQueueGenericSend+0x1f8>)
 800752e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007532:	601a      	str	r2, [r3, #0]
 8007534:	f3bf 8f4f 	dsb	sy
 8007538:	f3bf 8f6f 	isb	sy
 800753c:	e00a      	b.n	8007554 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800753e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007540:	2b00      	cmp	r3, #0
 8007542:	d007      	beq.n	8007554 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007544:	4b39      	ldr	r3, [pc, #228]	; (800762c <xQueueGenericSend+0x1f8>)
 8007546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800754a:	601a      	str	r2, [r3, #0]
 800754c:	f3bf 8f4f 	dsb	sy
 8007550:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007554:	f001 fda6 	bl	80090a4 <vPortExitCritical>
				return pdPASS;
 8007558:	2301      	movs	r3, #1
 800755a:	e063      	b.n	8007624 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d103      	bne.n	800756a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007562:	f001 fd9f 	bl	80090a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007566:	2300      	movs	r3, #0
 8007568:	e05c      	b.n	8007624 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800756a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800756c:	2b00      	cmp	r3, #0
 800756e:	d106      	bne.n	800757e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007570:	f107 0314 	add.w	r3, r7, #20
 8007574:	4618      	mov	r0, r3
 8007576:	f001 f8a7 	bl	80086c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800757a:	2301      	movs	r3, #1
 800757c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800757e:	f001 fd91 	bl	80090a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007582:	f000 fdbf 	bl	8008104 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007586:	f001 fd5d 	bl	8009044 <vPortEnterCritical>
 800758a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800758c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007590:	b25b      	sxtb	r3, r3
 8007592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007596:	d103      	bne.n	80075a0 <xQueueGenericSend+0x16c>
 8007598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759a:	2200      	movs	r2, #0
 800759c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075a6:	b25b      	sxtb	r3, r3
 80075a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ac:	d103      	bne.n	80075b6 <xQueueGenericSend+0x182>
 80075ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b0:	2200      	movs	r2, #0
 80075b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075b6:	f001 fd75 	bl	80090a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80075ba:	1d3a      	adds	r2, r7, #4
 80075bc:	f107 0314 	add.w	r3, r7, #20
 80075c0:	4611      	mov	r1, r2
 80075c2:	4618      	mov	r0, r3
 80075c4:	f001 f896 	bl	80086f4 <xTaskCheckForTimeOut>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d124      	bne.n	8007618 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80075ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075d0:	f000 fb58 	bl	8007c84 <prvIsQueueFull>
 80075d4:	4603      	mov	r3, r0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d018      	beq.n	800760c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80075da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075dc:	3310      	adds	r3, #16
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	4611      	mov	r1, r2
 80075e2:	4618      	mov	r0, r3
 80075e4:	f000 ff4c 	bl	8008480 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80075e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075ea:	f000 fae3 	bl	8007bb4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80075ee:	f000 fd97 	bl	8008120 <xTaskResumeAll>
 80075f2:	4603      	mov	r3, r0
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	f47f af7c 	bne.w	80074f2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80075fa:	4b0c      	ldr	r3, [pc, #48]	; (800762c <xQueueGenericSend+0x1f8>)
 80075fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007600:	601a      	str	r2, [r3, #0]
 8007602:	f3bf 8f4f 	dsb	sy
 8007606:	f3bf 8f6f 	isb	sy
 800760a:	e772      	b.n	80074f2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800760c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800760e:	f000 fad1 	bl	8007bb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007612:	f000 fd85 	bl	8008120 <xTaskResumeAll>
 8007616:	e76c      	b.n	80074f2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007618:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800761a:	f000 facb 	bl	8007bb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800761e:	f000 fd7f 	bl	8008120 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007622:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007624:	4618      	mov	r0, r3
 8007626:	3738      	adds	r7, #56	; 0x38
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}
 800762c:	e000ed04 	.word	0xe000ed04

08007630 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b08e      	sub	sp, #56	; 0x38
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800763e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007640:	2b00      	cmp	r3, #0
 8007642:	d10a      	bne.n	800765a <xQueueGiveFromISR+0x2a>
	__asm volatile
 8007644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007648:	f383 8811 	msr	BASEPRI, r3
 800764c:	f3bf 8f6f 	isb	sy
 8007650:	f3bf 8f4f 	dsb	sy
 8007654:	623b      	str	r3, [r7, #32]
}
 8007656:	bf00      	nop
 8007658:	e7fe      	b.n	8007658 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800765a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800765c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00a      	beq.n	8007678 <xQueueGiveFromISR+0x48>
	__asm volatile
 8007662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007666:	f383 8811 	msr	BASEPRI, r3
 800766a:	f3bf 8f6f 	isb	sy
 800766e:	f3bf 8f4f 	dsb	sy
 8007672:	61fb      	str	r3, [r7, #28]
}
 8007674:	bf00      	nop
 8007676:	e7fe      	b.n	8007676 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d103      	bne.n	8007688 <xQueueGiveFromISR+0x58>
 8007680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d101      	bne.n	800768c <xQueueGiveFromISR+0x5c>
 8007688:	2301      	movs	r3, #1
 800768a:	e000      	b.n	800768e <xQueueGiveFromISR+0x5e>
 800768c:	2300      	movs	r3, #0
 800768e:	2b00      	cmp	r3, #0
 8007690:	d10a      	bne.n	80076a8 <xQueueGiveFromISR+0x78>
	__asm volatile
 8007692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007696:	f383 8811 	msr	BASEPRI, r3
 800769a:	f3bf 8f6f 	isb	sy
 800769e:	f3bf 8f4f 	dsb	sy
 80076a2:	61bb      	str	r3, [r7, #24]
}
 80076a4:	bf00      	nop
 80076a6:	e7fe      	b.n	80076a6 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80076a8:	f001 fdae 	bl	8009208 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80076ac:	f3ef 8211 	mrs	r2, BASEPRI
 80076b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b4:	f383 8811 	msr	BASEPRI, r3
 80076b8:	f3bf 8f6f 	isb	sy
 80076bc:	f3bf 8f4f 	dsb	sy
 80076c0:	617a      	str	r2, [r7, #20]
 80076c2:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80076c4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80076c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076cc:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80076ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d22b      	bcs.n	8007730 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80076d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80076e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e4:	1c5a      	adds	r2, r3, #1
 80076e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80076ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80076ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076f2:	d112      	bne.n	800771a <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d016      	beq.n	800772a <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076fe:	3324      	adds	r3, #36	; 0x24
 8007700:	4618      	mov	r0, r3
 8007702:	f000 ff1d 	bl	8008540 <xTaskRemoveFromEventList>
 8007706:	4603      	mov	r3, r0
 8007708:	2b00      	cmp	r3, #0
 800770a:	d00e      	beq.n	800772a <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d00b      	beq.n	800772a <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	2201      	movs	r2, #1
 8007716:	601a      	str	r2, [r3, #0]
 8007718:	e007      	b.n	800772a <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800771a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800771e:	3301      	adds	r3, #1
 8007720:	b2db      	uxtb	r3, r3
 8007722:	b25a      	sxtb	r2, r3
 8007724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007726:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800772a:	2301      	movs	r3, #1
 800772c:	637b      	str	r3, [r7, #52]	; 0x34
 800772e:	e001      	b.n	8007734 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007730:	2300      	movs	r3, #0
 8007732:	637b      	str	r3, [r7, #52]	; 0x34
 8007734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007736:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800773e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007742:	4618      	mov	r0, r3
 8007744:	3738      	adds	r7, #56	; 0x38
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
	...

0800774c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b08e      	sub	sp, #56	; 0x38
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007756:	2300      	movs	r3, #0
 8007758:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800775e:	2300      	movs	r3, #0
 8007760:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007764:	2b00      	cmp	r3, #0
 8007766:	d10a      	bne.n	800777e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800776c:	f383 8811 	msr	BASEPRI, r3
 8007770:	f3bf 8f6f 	isb	sy
 8007774:	f3bf 8f4f 	dsb	sy
 8007778:	623b      	str	r3, [r7, #32]
}
 800777a:	bf00      	nop
 800777c:	e7fe      	b.n	800777c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800777e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007782:	2b00      	cmp	r3, #0
 8007784:	d00a      	beq.n	800779c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800778a:	f383 8811 	msr	BASEPRI, r3
 800778e:	f3bf 8f6f 	isb	sy
 8007792:	f3bf 8f4f 	dsb	sy
 8007796:	61fb      	str	r3, [r7, #28]
}
 8007798:	bf00      	nop
 800779a:	e7fe      	b.n	800779a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800779c:	f001 f8ee 	bl	800897c <xTaskGetSchedulerState>
 80077a0:	4603      	mov	r3, r0
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d102      	bne.n	80077ac <xQueueSemaphoreTake+0x60>
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d101      	bne.n	80077b0 <xQueueSemaphoreTake+0x64>
 80077ac:	2301      	movs	r3, #1
 80077ae:	e000      	b.n	80077b2 <xQueueSemaphoreTake+0x66>
 80077b0:	2300      	movs	r3, #0
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d10a      	bne.n	80077cc <xQueueSemaphoreTake+0x80>
	__asm volatile
 80077b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ba:	f383 8811 	msr	BASEPRI, r3
 80077be:	f3bf 8f6f 	isb	sy
 80077c2:	f3bf 8f4f 	dsb	sy
 80077c6:	61bb      	str	r3, [r7, #24]
}
 80077c8:	bf00      	nop
 80077ca:	e7fe      	b.n	80077ca <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80077cc:	f001 fc3a 	bl	8009044 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80077d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80077d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d024      	beq.n	8007826 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80077dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077de:	1e5a      	subs	r2, r3, #1
 80077e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80077e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d104      	bne.n	80077f6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80077ec:	f001 fa86 	bl	8008cfc <pvTaskIncrementMutexHeldCount>
 80077f0:	4602      	mov	r2, r0
 80077f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077f4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80077f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077f8:	691b      	ldr	r3, [r3, #16]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d00f      	beq.n	800781e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80077fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007800:	3310      	adds	r3, #16
 8007802:	4618      	mov	r0, r3
 8007804:	f000 fe9c 	bl	8008540 <xTaskRemoveFromEventList>
 8007808:	4603      	mov	r3, r0
 800780a:	2b00      	cmp	r3, #0
 800780c:	d007      	beq.n	800781e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800780e:	4b54      	ldr	r3, [pc, #336]	; (8007960 <xQueueSemaphoreTake+0x214>)
 8007810:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007814:	601a      	str	r2, [r3, #0]
 8007816:	f3bf 8f4f 	dsb	sy
 800781a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800781e:	f001 fc41 	bl	80090a4 <vPortExitCritical>
				return pdPASS;
 8007822:	2301      	movs	r3, #1
 8007824:	e097      	b.n	8007956 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d111      	bne.n	8007850 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800782c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782e:	2b00      	cmp	r3, #0
 8007830:	d00a      	beq.n	8007848 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007836:	f383 8811 	msr	BASEPRI, r3
 800783a:	f3bf 8f6f 	isb	sy
 800783e:	f3bf 8f4f 	dsb	sy
 8007842:	617b      	str	r3, [r7, #20]
}
 8007844:	bf00      	nop
 8007846:	e7fe      	b.n	8007846 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007848:	f001 fc2c 	bl	80090a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800784c:	2300      	movs	r3, #0
 800784e:	e082      	b.n	8007956 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007852:	2b00      	cmp	r3, #0
 8007854:	d106      	bne.n	8007864 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007856:	f107 030c 	add.w	r3, r7, #12
 800785a:	4618      	mov	r0, r3
 800785c:	f000 ff34 	bl	80086c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007860:	2301      	movs	r3, #1
 8007862:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007864:	f001 fc1e 	bl	80090a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007868:	f000 fc4c 	bl	8008104 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800786c:	f001 fbea 	bl	8009044 <vPortEnterCritical>
 8007870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007872:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007876:	b25b      	sxtb	r3, r3
 8007878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800787c:	d103      	bne.n	8007886 <xQueueSemaphoreTake+0x13a>
 800787e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007880:	2200      	movs	r2, #0
 8007882:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007888:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800788c:	b25b      	sxtb	r3, r3
 800788e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007892:	d103      	bne.n	800789c <xQueueSemaphoreTake+0x150>
 8007894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007896:	2200      	movs	r2, #0
 8007898:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800789c:	f001 fc02 	bl	80090a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80078a0:	463a      	mov	r2, r7
 80078a2:	f107 030c 	add.w	r3, r7, #12
 80078a6:	4611      	mov	r1, r2
 80078a8:	4618      	mov	r0, r3
 80078aa:	f000 ff23 	bl	80086f4 <xTaskCheckForTimeOut>
 80078ae:	4603      	mov	r3, r0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d132      	bne.n	800791a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80078b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80078b6:	f000 f9cf 	bl	8007c58 <prvIsQueueEmpty>
 80078ba:	4603      	mov	r3, r0
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d026      	beq.n	800790e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80078c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d109      	bne.n	80078dc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80078c8:	f001 fbbc 	bl	8009044 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80078cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	4618      	mov	r0, r3
 80078d2:	f001 f871 	bl	80089b8 <xTaskPriorityInherit>
 80078d6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80078d8:	f001 fbe4 	bl	80090a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80078dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078de:	3324      	adds	r3, #36	; 0x24
 80078e0:	683a      	ldr	r2, [r7, #0]
 80078e2:	4611      	mov	r1, r2
 80078e4:	4618      	mov	r0, r3
 80078e6:	f000 fdcb 	bl	8008480 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80078ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80078ec:	f000 f962 	bl	8007bb4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80078f0:	f000 fc16 	bl	8008120 <xTaskResumeAll>
 80078f4:	4603      	mov	r3, r0
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	f47f af68 	bne.w	80077cc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80078fc:	4b18      	ldr	r3, [pc, #96]	; (8007960 <xQueueSemaphoreTake+0x214>)
 80078fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007902:	601a      	str	r2, [r3, #0]
 8007904:	f3bf 8f4f 	dsb	sy
 8007908:	f3bf 8f6f 	isb	sy
 800790c:	e75e      	b.n	80077cc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800790e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007910:	f000 f950 	bl	8007bb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007914:	f000 fc04 	bl	8008120 <xTaskResumeAll>
 8007918:	e758      	b.n	80077cc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800791a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800791c:	f000 f94a 	bl	8007bb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007920:	f000 fbfe 	bl	8008120 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007924:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007926:	f000 f997 	bl	8007c58 <prvIsQueueEmpty>
 800792a:	4603      	mov	r3, r0
 800792c:	2b00      	cmp	r3, #0
 800792e:	f43f af4d 	beq.w	80077cc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007934:	2b00      	cmp	r3, #0
 8007936:	d00d      	beq.n	8007954 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007938:	f001 fb84 	bl	8009044 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800793c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800793e:	f000 f891 	bl	8007a64 <prvGetDisinheritPriorityAfterTimeout>
 8007942:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800794a:	4618      	mov	r0, r3
 800794c:	f001 f930 	bl	8008bb0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007950:	f001 fba8 	bl	80090a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007954:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007956:	4618      	mov	r0, r3
 8007958:	3738      	adds	r7, #56	; 0x38
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	e000ed04 	.word	0xe000ed04

08007964 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b08e      	sub	sp, #56	; 0x38
 8007968:	af00      	add	r7, sp, #0
 800796a:	60f8      	str	r0, [r7, #12]
 800796c:	60b9      	str	r1, [r7, #8]
 800796e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007976:	2b00      	cmp	r3, #0
 8007978:	d10a      	bne.n	8007990 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800797a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800797e:	f383 8811 	msr	BASEPRI, r3
 8007982:	f3bf 8f6f 	isb	sy
 8007986:	f3bf 8f4f 	dsb	sy
 800798a:	623b      	str	r3, [r7, #32]
}
 800798c:	bf00      	nop
 800798e:	e7fe      	b.n	800798e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d103      	bne.n	800799e <xQueueReceiveFromISR+0x3a>
 8007996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799a:	2b00      	cmp	r3, #0
 800799c:	d101      	bne.n	80079a2 <xQueueReceiveFromISR+0x3e>
 800799e:	2301      	movs	r3, #1
 80079a0:	e000      	b.n	80079a4 <xQueueReceiveFromISR+0x40>
 80079a2:	2300      	movs	r3, #0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d10a      	bne.n	80079be <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80079a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ac:	f383 8811 	msr	BASEPRI, r3
 80079b0:	f3bf 8f6f 	isb	sy
 80079b4:	f3bf 8f4f 	dsb	sy
 80079b8:	61fb      	str	r3, [r7, #28]
}
 80079ba:	bf00      	nop
 80079bc:	e7fe      	b.n	80079bc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80079be:	f001 fc23 	bl	8009208 <vPortValidateInterruptPriority>
	__asm volatile
 80079c2:	f3ef 8211 	mrs	r2, BASEPRI
 80079c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ca:	f383 8811 	msr	BASEPRI, r3
 80079ce:	f3bf 8f6f 	isb	sy
 80079d2:	f3bf 8f4f 	dsb	sy
 80079d6:	61ba      	str	r2, [r7, #24]
 80079d8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80079da:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80079dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80079e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d02f      	beq.n	8007a4a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80079ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80079f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80079f4:	68b9      	ldr	r1, [r7, #8]
 80079f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079f8:	f000 f8b6 	bl	8007b68 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80079fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fe:	1e5a      	subs	r2, r3, #1
 8007a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a02:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007a04:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a0c:	d112      	bne.n	8007a34 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a10:	691b      	ldr	r3, [r3, #16]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d016      	beq.n	8007a44 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a18:	3310      	adds	r3, #16
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f000 fd90 	bl	8008540 <xTaskRemoveFromEventList>
 8007a20:	4603      	mov	r3, r0
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d00e      	beq.n	8007a44 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d00b      	beq.n	8007a44 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	601a      	str	r2, [r3, #0]
 8007a32:	e007      	b.n	8007a44 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007a34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a38:	3301      	adds	r3, #1
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	b25a      	sxtb	r2, r3
 8007a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007a44:	2301      	movs	r3, #1
 8007a46:	637b      	str	r3, [r7, #52]	; 0x34
 8007a48:	e001      	b.n	8007a4e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	637b      	str	r3, [r7, #52]	; 0x34
 8007a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a50:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	f383 8811 	msr	BASEPRI, r3
}
 8007a58:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3738      	adds	r7, #56	; 0x38
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007a64:	b480      	push	{r7}
 8007a66:	b085      	sub	sp, #20
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d006      	beq.n	8007a82 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f1c3 0307 	rsb	r3, r3, #7
 8007a7e:	60fb      	str	r3, [r7, #12]
 8007a80:	e001      	b.n	8007a86 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007a82:	2300      	movs	r3, #0
 8007a84:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007a86:	68fb      	ldr	r3, [r7, #12]
	}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3714      	adds	r7, #20
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr

08007a94 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b086      	sub	sp, #24
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	60f8      	str	r0, [r7, #12]
 8007a9c:	60b9      	str	r1, [r7, #8]
 8007a9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d10d      	bne.n	8007ace <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d14d      	bne.n	8007b56 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f000 fff0 	bl	8008aa4 <xTaskPriorityDisinherit>
 8007ac4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	609a      	str	r2, [r3, #8]
 8007acc:	e043      	b.n	8007b56 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d119      	bne.n	8007b08 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	6858      	ldr	r0, [r3, #4]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007adc:	461a      	mov	r2, r3
 8007ade:	68b9      	ldr	r1, [r7, #8]
 8007ae0:	f001 fde6 	bl	80096b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	685a      	ldr	r2, [r3, #4]
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aec:	441a      	add	r2, r3
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	685a      	ldr	r2, [r3, #4]
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d32b      	bcc.n	8007b56 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681a      	ldr	r2, [r3, #0]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	605a      	str	r2, [r3, #4]
 8007b06:	e026      	b.n	8007b56 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	68d8      	ldr	r0, [r3, #12]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b10:	461a      	mov	r2, r3
 8007b12:	68b9      	ldr	r1, [r7, #8]
 8007b14:	f001 fdcc 	bl	80096b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	68da      	ldr	r2, [r3, #12]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b20:	425b      	negs	r3, r3
 8007b22:	441a      	add	r2, r3
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	68da      	ldr	r2, [r3, #12]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d207      	bcs.n	8007b44 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	689a      	ldr	r2, [r3, #8]
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b3c:	425b      	negs	r3, r3
 8007b3e:	441a      	add	r2, r3
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2b02      	cmp	r3, #2
 8007b48:	d105      	bne.n	8007b56 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d002      	beq.n	8007b56 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	3b01      	subs	r3, #1
 8007b54:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	1c5a      	adds	r2, r3, #1
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007b5e:	697b      	ldr	r3, [r7, #20]
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3718      	adds	r7, #24
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b082      	sub	sp, #8
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d018      	beq.n	8007bac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	68da      	ldr	r2, [r3, #12]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b82:	441a      	add	r2, r3
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	68da      	ldr	r2, [r3, #12]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d303      	bcc.n	8007b9c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	68d9      	ldr	r1, [r3, #12]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba4:	461a      	mov	r2, r3
 8007ba6:	6838      	ldr	r0, [r7, #0]
 8007ba8:	f001 fd82 	bl	80096b0 <memcpy>
	}
}
 8007bac:	bf00      	nop
 8007bae:	3708      	adds	r7, #8
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007bbc:	f001 fa42 	bl	8009044 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007bc6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007bc8:	e011      	b.n	8007bee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d012      	beq.n	8007bf8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	3324      	adds	r3, #36	; 0x24
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f000 fcb2 	bl	8008540 <xTaskRemoveFromEventList>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d001      	beq.n	8007be6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007be2:	f000 fde9 	bl	80087b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007be6:	7bfb      	ldrb	r3, [r7, #15]
 8007be8:	3b01      	subs	r3, #1
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	dce9      	bgt.n	8007bca <prvUnlockQueue+0x16>
 8007bf6:	e000      	b.n	8007bfa <prvUnlockQueue+0x46>
					break;
 8007bf8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	22ff      	movs	r2, #255	; 0xff
 8007bfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007c02:	f001 fa4f 	bl	80090a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007c06:	f001 fa1d 	bl	8009044 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c10:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007c12:	e011      	b.n	8007c38 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	691b      	ldr	r3, [r3, #16]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d012      	beq.n	8007c42 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	3310      	adds	r3, #16
 8007c20:	4618      	mov	r0, r3
 8007c22:	f000 fc8d 	bl	8008540 <xTaskRemoveFromEventList>
 8007c26:	4603      	mov	r3, r0
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d001      	beq.n	8007c30 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007c2c:	f000 fdc4 	bl	80087b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007c30:	7bbb      	ldrb	r3, [r7, #14]
 8007c32:	3b01      	subs	r3, #1
 8007c34:	b2db      	uxtb	r3, r3
 8007c36:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007c38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	dce9      	bgt.n	8007c14 <prvUnlockQueue+0x60>
 8007c40:	e000      	b.n	8007c44 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007c42:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	22ff      	movs	r2, #255	; 0xff
 8007c48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007c4c:	f001 fa2a 	bl	80090a4 <vPortExitCritical>
}
 8007c50:	bf00      	nop
 8007c52:	3710      	adds	r7, #16
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b084      	sub	sp, #16
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007c60:	f001 f9f0 	bl	8009044 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d102      	bne.n	8007c72 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	60fb      	str	r3, [r7, #12]
 8007c70:	e001      	b.n	8007c76 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007c72:	2300      	movs	r3, #0
 8007c74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007c76:	f001 fa15 	bl	80090a4 <vPortExitCritical>

	return xReturn;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3710      	adds	r7, #16
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b084      	sub	sp, #16
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007c8c:	f001 f9da 	bl	8009044 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d102      	bne.n	8007ca2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	60fb      	str	r3, [r7, #12]
 8007ca0:	e001      	b.n	8007ca6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007ca6:	f001 f9fd 	bl	80090a4 <vPortExitCritical>

	return xReturn;
 8007caa:	68fb      	ldr	r3, [r7, #12]
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3710      	adds	r7, #16
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b08e      	sub	sp, #56	; 0x38
 8007cb8:	af04      	add	r7, sp, #16
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	60b9      	str	r1, [r7, #8]
 8007cbe:	607a      	str	r2, [r7, #4]
 8007cc0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d10a      	bne.n	8007cde <xTaskCreateStatic+0x2a>
	__asm volatile
 8007cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ccc:	f383 8811 	msr	BASEPRI, r3
 8007cd0:	f3bf 8f6f 	isb	sy
 8007cd4:	f3bf 8f4f 	dsb	sy
 8007cd8:	623b      	str	r3, [r7, #32]
}
 8007cda:	bf00      	nop
 8007cdc:	e7fe      	b.n	8007cdc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d10a      	bne.n	8007cfa <xTaskCreateStatic+0x46>
	__asm volatile
 8007ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce8:	f383 8811 	msr	BASEPRI, r3
 8007cec:	f3bf 8f6f 	isb	sy
 8007cf0:	f3bf 8f4f 	dsb	sy
 8007cf4:	61fb      	str	r3, [r7, #28]
}
 8007cf6:	bf00      	nop
 8007cf8:	e7fe      	b.n	8007cf8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007cfa:	2354      	movs	r3, #84	; 0x54
 8007cfc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	2b54      	cmp	r3, #84	; 0x54
 8007d02:	d00a      	beq.n	8007d1a <xTaskCreateStatic+0x66>
	__asm volatile
 8007d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d08:	f383 8811 	msr	BASEPRI, r3
 8007d0c:	f3bf 8f6f 	isb	sy
 8007d10:	f3bf 8f4f 	dsb	sy
 8007d14:	61bb      	str	r3, [r7, #24]
}
 8007d16:	bf00      	nop
 8007d18:	e7fe      	b.n	8007d18 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007d1a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d01e      	beq.n	8007d60 <xTaskCreateStatic+0xac>
 8007d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d01b      	beq.n	8007d60 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d2a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d30:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d34:	2202      	movs	r2, #2
 8007d36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	9303      	str	r3, [sp, #12]
 8007d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d40:	9302      	str	r3, [sp, #8]
 8007d42:	f107 0314 	add.w	r3, r7, #20
 8007d46:	9301      	str	r3, [sp, #4]
 8007d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4a:	9300      	str	r3, [sp, #0]
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	68b9      	ldr	r1, [r7, #8]
 8007d52:	68f8      	ldr	r0, [r7, #12]
 8007d54:	f000 f850 	bl	8007df8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007d58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d5a:	f000 f8d5 	bl	8007f08 <prvAddNewTaskToReadyList>
 8007d5e:	e001      	b.n	8007d64 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007d60:	2300      	movs	r3, #0
 8007d62:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007d64:	697b      	ldr	r3, [r7, #20]
	}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3728      	adds	r7, #40	; 0x28
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}

08007d6e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007d6e:	b580      	push	{r7, lr}
 8007d70:	b08c      	sub	sp, #48	; 0x30
 8007d72:	af04      	add	r7, sp, #16
 8007d74:	60f8      	str	r0, [r7, #12]
 8007d76:	60b9      	str	r1, [r7, #8]
 8007d78:	603b      	str	r3, [r7, #0]
 8007d7a:	4613      	mov	r3, r2
 8007d7c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007d7e:	88fb      	ldrh	r3, [r7, #6]
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	4618      	mov	r0, r3
 8007d84:	f001 fa80 	bl	8009288 <pvPortMalloc>
 8007d88:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d00e      	beq.n	8007dae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007d90:	2054      	movs	r0, #84	; 0x54
 8007d92:	f001 fa79 	bl	8009288 <pvPortMalloc>
 8007d96:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007d98:	69fb      	ldr	r3, [r7, #28]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d003      	beq.n	8007da6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007d9e:	69fb      	ldr	r3, [r7, #28]
 8007da0:	697a      	ldr	r2, [r7, #20]
 8007da2:	631a      	str	r2, [r3, #48]	; 0x30
 8007da4:	e005      	b.n	8007db2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007da6:	6978      	ldr	r0, [r7, #20]
 8007da8:	f001 fb3a 	bl	8009420 <vPortFree>
 8007dac:	e001      	b.n	8007db2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007dae:	2300      	movs	r3, #0
 8007db0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007db2:	69fb      	ldr	r3, [r7, #28]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d017      	beq.n	8007de8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007db8:	69fb      	ldr	r3, [r7, #28]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007dc0:	88fa      	ldrh	r2, [r7, #6]
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	9303      	str	r3, [sp, #12]
 8007dc6:	69fb      	ldr	r3, [r7, #28]
 8007dc8:	9302      	str	r3, [sp, #8]
 8007dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dcc:	9301      	str	r3, [sp, #4]
 8007dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd0:	9300      	str	r3, [sp, #0]
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	68b9      	ldr	r1, [r7, #8]
 8007dd6:	68f8      	ldr	r0, [r7, #12]
 8007dd8:	f000 f80e 	bl	8007df8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007ddc:	69f8      	ldr	r0, [r7, #28]
 8007dde:	f000 f893 	bl	8007f08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007de2:	2301      	movs	r3, #1
 8007de4:	61bb      	str	r3, [r7, #24]
 8007de6:	e002      	b.n	8007dee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007de8:	f04f 33ff 	mov.w	r3, #4294967295
 8007dec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007dee:	69bb      	ldr	r3, [r7, #24]
	}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3720      	adds	r7, #32
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b088      	sub	sp, #32
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	60f8      	str	r0, [r7, #12]
 8007e00:	60b9      	str	r1, [r7, #8]
 8007e02:	607a      	str	r2, [r7, #4]
 8007e04:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007e10:	3b01      	subs	r3, #1
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	4413      	add	r3, r2
 8007e16:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007e18:	69bb      	ldr	r3, [r7, #24]
 8007e1a:	f023 0307 	bic.w	r3, r3, #7
 8007e1e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007e20:	69bb      	ldr	r3, [r7, #24]
 8007e22:	f003 0307 	and.w	r3, r3, #7
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d00a      	beq.n	8007e40 <prvInitialiseNewTask+0x48>
	__asm volatile
 8007e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e2e:	f383 8811 	msr	BASEPRI, r3
 8007e32:	f3bf 8f6f 	isb	sy
 8007e36:	f3bf 8f4f 	dsb	sy
 8007e3a:	617b      	str	r3, [r7, #20]
}
 8007e3c:	bf00      	nop
 8007e3e:	e7fe      	b.n	8007e3e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d01f      	beq.n	8007e86 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e46:	2300      	movs	r3, #0
 8007e48:	61fb      	str	r3, [r7, #28]
 8007e4a:	e012      	b.n	8007e72 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007e4c:	68ba      	ldr	r2, [r7, #8]
 8007e4e:	69fb      	ldr	r3, [r7, #28]
 8007e50:	4413      	add	r3, r2
 8007e52:	7819      	ldrb	r1, [r3, #0]
 8007e54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e56:	69fb      	ldr	r3, [r7, #28]
 8007e58:	4413      	add	r3, r2
 8007e5a:	3334      	adds	r3, #52	; 0x34
 8007e5c:	460a      	mov	r2, r1
 8007e5e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007e60:	68ba      	ldr	r2, [r7, #8]
 8007e62:	69fb      	ldr	r3, [r7, #28]
 8007e64:	4413      	add	r3, r2
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d006      	beq.n	8007e7a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e6c:	69fb      	ldr	r3, [r7, #28]
 8007e6e:	3301      	adds	r3, #1
 8007e70:	61fb      	str	r3, [r7, #28]
 8007e72:	69fb      	ldr	r3, [r7, #28]
 8007e74:	2b0f      	cmp	r3, #15
 8007e76:	d9e9      	bls.n	8007e4c <prvInitialiseNewTask+0x54>
 8007e78:	e000      	b.n	8007e7c <prvInitialiseNewTask+0x84>
			{
				break;
 8007e7a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e7e:	2200      	movs	r2, #0
 8007e80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007e84:	e003      	b.n	8007e8e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e90:	2b06      	cmp	r3, #6
 8007e92:	d901      	bls.n	8007e98 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007e94:	2306      	movs	r3, #6
 8007e96:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e9c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ea2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eac:	3304      	adds	r3, #4
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f7ff f8f1 	bl	8007096 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb6:	3318      	adds	r3, #24
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f7ff f8ec 	bl	8007096 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ec2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec6:	f1c3 0207 	rsb	r2, r3, #7
 8007eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ecc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ed2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007edc:	2200      	movs	r2, #0
 8007ede:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007ee2:	683a      	ldr	r2, [r7, #0]
 8007ee4:	68f9      	ldr	r1, [r7, #12]
 8007ee6:	69b8      	ldr	r0, [r7, #24]
 8007ee8:	f000 ff82 	bl	8008df0 <pxPortInitialiseStack>
 8007eec:	4602      	mov	r2, r0
 8007eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d002      	beq.n	8007efe <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007efa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007efc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007efe:	bf00      	nop
 8007f00:	3720      	adds	r7, #32
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
	...

08007f08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007f10:	f001 f898 	bl	8009044 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007f14:	4b2a      	ldr	r3, [pc, #168]	; (8007fc0 <prvAddNewTaskToReadyList+0xb8>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	3301      	adds	r3, #1
 8007f1a:	4a29      	ldr	r2, [pc, #164]	; (8007fc0 <prvAddNewTaskToReadyList+0xb8>)
 8007f1c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007f1e:	4b29      	ldr	r3, [pc, #164]	; (8007fc4 <prvAddNewTaskToReadyList+0xbc>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d109      	bne.n	8007f3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007f26:	4a27      	ldr	r2, [pc, #156]	; (8007fc4 <prvAddNewTaskToReadyList+0xbc>)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007f2c:	4b24      	ldr	r3, [pc, #144]	; (8007fc0 <prvAddNewTaskToReadyList+0xb8>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d110      	bne.n	8007f56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007f34:	f000 fc64 	bl	8008800 <prvInitialiseTaskLists>
 8007f38:	e00d      	b.n	8007f56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007f3a:	4b23      	ldr	r3, [pc, #140]	; (8007fc8 <prvAddNewTaskToReadyList+0xc0>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d109      	bne.n	8007f56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007f42:	4b20      	ldr	r3, [pc, #128]	; (8007fc4 <prvAddNewTaskToReadyList+0xbc>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d802      	bhi.n	8007f56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007f50:	4a1c      	ldr	r2, [pc, #112]	; (8007fc4 <prvAddNewTaskToReadyList+0xbc>)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007f56:	4b1d      	ldr	r3, [pc, #116]	; (8007fcc <prvAddNewTaskToReadyList+0xc4>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	4a1b      	ldr	r2, [pc, #108]	; (8007fcc <prvAddNewTaskToReadyList+0xc4>)
 8007f5e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f64:	2201      	movs	r2, #1
 8007f66:	409a      	lsls	r2, r3
 8007f68:	4b19      	ldr	r3, [pc, #100]	; (8007fd0 <prvAddNewTaskToReadyList+0xc8>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	4a18      	ldr	r2, [pc, #96]	; (8007fd0 <prvAddNewTaskToReadyList+0xc8>)
 8007f70:	6013      	str	r3, [r2, #0]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f76:	4613      	mov	r3, r2
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	4413      	add	r3, r2
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	4a15      	ldr	r2, [pc, #84]	; (8007fd4 <prvAddNewTaskToReadyList+0xcc>)
 8007f80:	441a      	add	r2, r3
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	3304      	adds	r3, #4
 8007f86:	4619      	mov	r1, r3
 8007f88:	4610      	mov	r0, r2
 8007f8a:	f7ff f891 	bl	80070b0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007f8e:	f001 f889 	bl	80090a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007f92:	4b0d      	ldr	r3, [pc, #52]	; (8007fc8 <prvAddNewTaskToReadyList+0xc0>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d00e      	beq.n	8007fb8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007f9a:	4b0a      	ldr	r3, [pc, #40]	; (8007fc4 <prvAddNewTaskToReadyList+0xbc>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d207      	bcs.n	8007fb8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007fa8:	4b0b      	ldr	r3, [pc, #44]	; (8007fd8 <prvAddNewTaskToReadyList+0xd0>)
 8007faa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fae:	601a      	str	r2, [r3, #0]
 8007fb0:	f3bf 8f4f 	dsb	sy
 8007fb4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007fb8:	bf00      	nop
 8007fba:	3708      	adds	r7, #8
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}
 8007fc0:	20000884 	.word	0x20000884
 8007fc4:	20000784 	.word	0x20000784
 8007fc8:	20000890 	.word	0x20000890
 8007fcc:	200008a0 	.word	0x200008a0
 8007fd0:	2000088c 	.word	0x2000088c
 8007fd4:	20000788 	.word	0x20000788
 8007fd8:	e000ed04 	.word	0xe000ed04

08007fdc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d017      	beq.n	800801e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007fee:	4b13      	ldr	r3, [pc, #76]	; (800803c <vTaskDelay+0x60>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d00a      	beq.n	800800c <vTaskDelay+0x30>
	__asm volatile
 8007ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ffa:	f383 8811 	msr	BASEPRI, r3
 8007ffe:	f3bf 8f6f 	isb	sy
 8008002:	f3bf 8f4f 	dsb	sy
 8008006:	60bb      	str	r3, [r7, #8]
}
 8008008:	bf00      	nop
 800800a:	e7fe      	b.n	800800a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800800c:	f000 f87a 	bl	8008104 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008010:	2100      	movs	r1, #0
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 fe86 	bl	8008d24 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008018:	f000 f882 	bl	8008120 <xTaskResumeAll>
 800801c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d107      	bne.n	8008034 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008024:	4b06      	ldr	r3, [pc, #24]	; (8008040 <vTaskDelay+0x64>)
 8008026:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800802a:	601a      	str	r2, [r3, #0]
 800802c:	f3bf 8f4f 	dsb	sy
 8008030:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008034:	bf00      	nop
 8008036:	3710      	adds	r7, #16
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}
 800803c:	200008ac 	.word	0x200008ac
 8008040:	e000ed04 	.word	0xe000ed04

08008044 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b08a      	sub	sp, #40	; 0x28
 8008048:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800804a:	2300      	movs	r3, #0
 800804c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800804e:	2300      	movs	r3, #0
 8008050:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008052:	463a      	mov	r2, r7
 8008054:	1d39      	adds	r1, r7, #4
 8008056:	f107 0308 	add.w	r3, r7, #8
 800805a:	4618      	mov	r0, r3
 800805c:	f7f8 fa9a 	bl	8000594 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008060:	6839      	ldr	r1, [r7, #0]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	68ba      	ldr	r2, [r7, #8]
 8008066:	9202      	str	r2, [sp, #8]
 8008068:	9301      	str	r3, [sp, #4]
 800806a:	2300      	movs	r3, #0
 800806c:	9300      	str	r3, [sp, #0]
 800806e:	2300      	movs	r3, #0
 8008070:	460a      	mov	r2, r1
 8008072:	491e      	ldr	r1, [pc, #120]	; (80080ec <vTaskStartScheduler+0xa8>)
 8008074:	481e      	ldr	r0, [pc, #120]	; (80080f0 <vTaskStartScheduler+0xac>)
 8008076:	f7ff fe1d 	bl	8007cb4 <xTaskCreateStatic>
 800807a:	4603      	mov	r3, r0
 800807c:	4a1d      	ldr	r2, [pc, #116]	; (80080f4 <vTaskStartScheduler+0xb0>)
 800807e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008080:	4b1c      	ldr	r3, [pc, #112]	; (80080f4 <vTaskStartScheduler+0xb0>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d002      	beq.n	800808e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008088:	2301      	movs	r3, #1
 800808a:	617b      	str	r3, [r7, #20]
 800808c:	e001      	b.n	8008092 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800808e:	2300      	movs	r3, #0
 8008090:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	2b01      	cmp	r3, #1
 8008096:	d116      	bne.n	80080c6 <vTaskStartScheduler+0x82>
	__asm volatile
 8008098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800809c:	f383 8811 	msr	BASEPRI, r3
 80080a0:	f3bf 8f6f 	isb	sy
 80080a4:	f3bf 8f4f 	dsb	sy
 80080a8:	613b      	str	r3, [r7, #16]
}
 80080aa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80080ac:	4b12      	ldr	r3, [pc, #72]	; (80080f8 <vTaskStartScheduler+0xb4>)
 80080ae:	f04f 32ff 	mov.w	r2, #4294967295
 80080b2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80080b4:	4b11      	ldr	r3, [pc, #68]	; (80080fc <vTaskStartScheduler+0xb8>)
 80080b6:	2201      	movs	r2, #1
 80080b8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80080ba:	4b11      	ldr	r3, [pc, #68]	; (8008100 <vTaskStartScheduler+0xbc>)
 80080bc:	2200      	movs	r2, #0
 80080be:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80080c0:	f000 ff1e 	bl	8008f00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80080c4:	e00e      	b.n	80080e4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080cc:	d10a      	bne.n	80080e4 <vTaskStartScheduler+0xa0>
	__asm volatile
 80080ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d2:	f383 8811 	msr	BASEPRI, r3
 80080d6:	f3bf 8f6f 	isb	sy
 80080da:	f3bf 8f4f 	dsb	sy
 80080de:	60fb      	str	r3, [r7, #12]
}
 80080e0:	bf00      	nop
 80080e2:	e7fe      	b.n	80080e2 <vTaskStartScheduler+0x9e>
}
 80080e4:	bf00      	nop
 80080e6:	3718      	adds	r7, #24
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}
 80080ec:	0800a8ac 	.word	0x0800a8ac
 80080f0:	080087d1 	.word	0x080087d1
 80080f4:	200008a8 	.word	0x200008a8
 80080f8:	200008a4 	.word	0x200008a4
 80080fc:	20000890 	.word	0x20000890
 8008100:	20000888 	.word	0x20000888

08008104 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008104:	b480      	push	{r7}
 8008106:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008108:	4b04      	ldr	r3, [pc, #16]	; (800811c <vTaskSuspendAll+0x18>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	3301      	adds	r3, #1
 800810e:	4a03      	ldr	r2, [pc, #12]	; (800811c <vTaskSuspendAll+0x18>)
 8008110:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008112:	bf00      	nop
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr
 800811c:	200008ac 	.word	0x200008ac

08008120 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008126:	2300      	movs	r3, #0
 8008128:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800812a:	2300      	movs	r3, #0
 800812c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800812e:	4b41      	ldr	r3, [pc, #260]	; (8008234 <xTaskResumeAll+0x114>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d10a      	bne.n	800814c <xTaskResumeAll+0x2c>
	__asm volatile
 8008136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800813a:	f383 8811 	msr	BASEPRI, r3
 800813e:	f3bf 8f6f 	isb	sy
 8008142:	f3bf 8f4f 	dsb	sy
 8008146:	603b      	str	r3, [r7, #0]
}
 8008148:	bf00      	nop
 800814a:	e7fe      	b.n	800814a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800814c:	f000 ff7a 	bl	8009044 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008150:	4b38      	ldr	r3, [pc, #224]	; (8008234 <xTaskResumeAll+0x114>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	3b01      	subs	r3, #1
 8008156:	4a37      	ldr	r2, [pc, #220]	; (8008234 <xTaskResumeAll+0x114>)
 8008158:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800815a:	4b36      	ldr	r3, [pc, #216]	; (8008234 <xTaskResumeAll+0x114>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d161      	bne.n	8008226 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008162:	4b35      	ldr	r3, [pc, #212]	; (8008238 <xTaskResumeAll+0x118>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d05d      	beq.n	8008226 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800816a:	e02e      	b.n	80081ca <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800816c:	4b33      	ldr	r3, [pc, #204]	; (800823c <xTaskResumeAll+0x11c>)
 800816e:	68db      	ldr	r3, [r3, #12]
 8008170:	68db      	ldr	r3, [r3, #12]
 8008172:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	3318      	adds	r3, #24
 8008178:	4618      	mov	r0, r3
 800817a:	f7fe fff6 	bl	800716a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	3304      	adds	r3, #4
 8008182:	4618      	mov	r0, r3
 8008184:	f7fe fff1 	bl	800716a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800818c:	2201      	movs	r2, #1
 800818e:	409a      	lsls	r2, r3
 8008190:	4b2b      	ldr	r3, [pc, #172]	; (8008240 <xTaskResumeAll+0x120>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4313      	orrs	r3, r2
 8008196:	4a2a      	ldr	r2, [pc, #168]	; (8008240 <xTaskResumeAll+0x120>)
 8008198:	6013      	str	r3, [r2, #0]
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800819e:	4613      	mov	r3, r2
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	4413      	add	r3, r2
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	4a27      	ldr	r2, [pc, #156]	; (8008244 <xTaskResumeAll+0x124>)
 80081a8:	441a      	add	r2, r3
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	3304      	adds	r3, #4
 80081ae:	4619      	mov	r1, r3
 80081b0:	4610      	mov	r0, r2
 80081b2:	f7fe ff7d 	bl	80070b0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081ba:	4b23      	ldr	r3, [pc, #140]	; (8008248 <xTaskResumeAll+0x128>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d302      	bcc.n	80081ca <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80081c4:	4b21      	ldr	r3, [pc, #132]	; (800824c <xTaskResumeAll+0x12c>)
 80081c6:	2201      	movs	r2, #1
 80081c8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80081ca:	4b1c      	ldr	r3, [pc, #112]	; (800823c <xTaskResumeAll+0x11c>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d1cc      	bne.n	800816c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d001      	beq.n	80081dc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80081d8:	f000 fbb0 	bl	800893c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80081dc:	4b1c      	ldr	r3, [pc, #112]	; (8008250 <xTaskResumeAll+0x130>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d010      	beq.n	800820a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80081e8:	f000 f836 	bl	8008258 <xTaskIncrementTick>
 80081ec:	4603      	mov	r3, r0
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d002      	beq.n	80081f8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80081f2:	4b16      	ldr	r3, [pc, #88]	; (800824c <xTaskResumeAll+0x12c>)
 80081f4:	2201      	movs	r2, #1
 80081f6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	3b01      	subs	r3, #1
 80081fc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d1f1      	bne.n	80081e8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8008204:	4b12      	ldr	r3, [pc, #72]	; (8008250 <xTaskResumeAll+0x130>)
 8008206:	2200      	movs	r2, #0
 8008208:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800820a:	4b10      	ldr	r3, [pc, #64]	; (800824c <xTaskResumeAll+0x12c>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d009      	beq.n	8008226 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008212:	2301      	movs	r3, #1
 8008214:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008216:	4b0f      	ldr	r3, [pc, #60]	; (8008254 <xTaskResumeAll+0x134>)
 8008218:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800821c:	601a      	str	r2, [r3, #0]
 800821e:	f3bf 8f4f 	dsb	sy
 8008222:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008226:	f000 ff3d 	bl	80090a4 <vPortExitCritical>

	return xAlreadyYielded;
 800822a:	68bb      	ldr	r3, [r7, #8]
}
 800822c:	4618      	mov	r0, r3
 800822e:	3710      	adds	r7, #16
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}
 8008234:	200008ac 	.word	0x200008ac
 8008238:	20000884 	.word	0x20000884
 800823c:	20000844 	.word	0x20000844
 8008240:	2000088c 	.word	0x2000088c
 8008244:	20000788 	.word	0x20000788
 8008248:	20000784 	.word	0x20000784
 800824c:	20000898 	.word	0x20000898
 8008250:	20000894 	.word	0x20000894
 8008254:	e000ed04 	.word	0xe000ed04

08008258 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b086      	sub	sp, #24
 800825c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800825e:	2300      	movs	r3, #0
 8008260:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008262:	4b4e      	ldr	r3, [pc, #312]	; (800839c <xTaskIncrementTick+0x144>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	2b00      	cmp	r3, #0
 8008268:	f040 808e 	bne.w	8008388 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800826c:	4b4c      	ldr	r3, [pc, #304]	; (80083a0 <xTaskIncrementTick+0x148>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	3301      	adds	r3, #1
 8008272:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008274:	4a4a      	ldr	r2, [pc, #296]	; (80083a0 <xTaskIncrementTick+0x148>)
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d120      	bne.n	80082c2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008280:	4b48      	ldr	r3, [pc, #288]	; (80083a4 <xTaskIncrementTick+0x14c>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d00a      	beq.n	80082a0 <xTaskIncrementTick+0x48>
	__asm volatile
 800828a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800828e:	f383 8811 	msr	BASEPRI, r3
 8008292:	f3bf 8f6f 	isb	sy
 8008296:	f3bf 8f4f 	dsb	sy
 800829a:	603b      	str	r3, [r7, #0]
}
 800829c:	bf00      	nop
 800829e:	e7fe      	b.n	800829e <xTaskIncrementTick+0x46>
 80082a0:	4b40      	ldr	r3, [pc, #256]	; (80083a4 <xTaskIncrementTick+0x14c>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	60fb      	str	r3, [r7, #12]
 80082a6:	4b40      	ldr	r3, [pc, #256]	; (80083a8 <xTaskIncrementTick+0x150>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a3e      	ldr	r2, [pc, #248]	; (80083a4 <xTaskIncrementTick+0x14c>)
 80082ac:	6013      	str	r3, [r2, #0]
 80082ae:	4a3e      	ldr	r2, [pc, #248]	; (80083a8 <xTaskIncrementTick+0x150>)
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	6013      	str	r3, [r2, #0]
 80082b4:	4b3d      	ldr	r3, [pc, #244]	; (80083ac <xTaskIncrementTick+0x154>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	3301      	adds	r3, #1
 80082ba:	4a3c      	ldr	r2, [pc, #240]	; (80083ac <xTaskIncrementTick+0x154>)
 80082bc:	6013      	str	r3, [r2, #0]
 80082be:	f000 fb3d 	bl	800893c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80082c2:	4b3b      	ldr	r3, [pc, #236]	; (80083b0 <xTaskIncrementTick+0x158>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	693a      	ldr	r2, [r7, #16]
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d348      	bcc.n	800835e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082cc:	4b35      	ldr	r3, [pc, #212]	; (80083a4 <xTaskIncrementTick+0x14c>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d104      	bne.n	80082e0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082d6:	4b36      	ldr	r3, [pc, #216]	; (80083b0 <xTaskIncrementTick+0x158>)
 80082d8:	f04f 32ff 	mov.w	r2, #4294967295
 80082dc:	601a      	str	r2, [r3, #0]
					break;
 80082de:	e03e      	b.n	800835e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082e0:	4b30      	ldr	r3, [pc, #192]	; (80083a4 <xTaskIncrementTick+0x14c>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	68db      	ldr	r3, [r3, #12]
 80082e6:	68db      	ldr	r3, [r3, #12]
 80082e8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80082f0:	693a      	ldr	r2, [r7, #16]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d203      	bcs.n	8008300 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80082f8:	4a2d      	ldr	r2, [pc, #180]	; (80083b0 <xTaskIncrementTick+0x158>)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80082fe:	e02e      	b.n	800835e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	3304      	adds	r3, #4
 8008304:	4618      	mov	r0, r3
 8008306:	f7fe ff30 	bl	800716a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800830e:	2b00      	cmp	r3, #0
 8008310:	d004      	beq.n	800831c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	3318      	adds	r3, #24
 8008316:	4618      	mov	r0, r3
 8008318:	f7fe ff27 	bl	800716a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008320:	2201      	movs	r2, #1
 8008322:	409a      	lsls	r2, r3
 8008324:	4b23      	ldr	r3, [pc, #140]	; (80083b4 <xTaskIncrementTick+0x15c>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4313      	orrs	r3, r2
 800832a:	4a22      	ldr	r2, [pc, #136]	; (80083b4 <xTaskIncrementTick+0x15c>)
 800832c:	6013      	str	r3, [r2, #0]
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008332:	4613      	mov	r3, r2
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	4413      	add	r3, r2
 8008338:	009b      	lsls	r3, r3, #2
 800833a:	4a1f      	ldr	r2, [pc, #124]	; (80083b8 <xTaskIncrementTick+0x160>)
 800833c:	441a      	add	r2, r3
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	3304      	adds	r3, #4
 8008342:	4619      	mov	r1, r3
 8008344:	4610      	mov	r0, r2
 8008346:	f7fe feb3 	bl	80070b0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800834e:	4b1b      	ldr	r3, [pc, #108]	; (80083bc <xTaskIncrementTick+0x164>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008354:	429a      	cmp	r2, r3
 8008356:	d3b9      	bcc.n	80082cc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008358:	2301      	movs	r3, #1
 800835a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800835c:	e7b6      	b.n	80082cc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800835e:	4b17      	ldr	r3, [pc, #92]	; (80083bc <xTaskIncrementTick+0x164>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008364:	4914      	ldr	r1, [pc, #80]	; (80083b8 <xTaskIncrementTick+0x160>)
 8008366:	4613      	mov	r3, r2
 8008368:	009b      	lsls	r3, r3, #2
 800836a:	4413      	add	r3, r2
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	440b      	add	r3, r1
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	2b01      	cmp	r3, #1
 8008374:	d901      	bls.n	800837a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8008376:	2301      	movs	r3, #1
 8008378:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800837a:	4b11      	ldr	r3, [pc, #68]	; (80083c0 <xTaskIncrementTick+0x168>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d007      	beq.n	8008392 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8008382:	2301      	movs	r3, #1
 8008384:	617b      	str	r3, [r7, #20]
 8008386:	e004      	b.n	8008392 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008388:	4b0e      	ldr	r3, [pc, #56]	; (80083c4 <xTaskIncrementTick+0x16c>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	3301      	adds	r3, #1
 800838e:	4a0d      	ldr	r2, [pc, #52]	; (80083c4 <xTaskIncrementTick+0x16c>)
 8008390:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008392:	697b      	ldr	r3, [r7, #20]
}
 8008394:	4618      	mov	r0, r3
 8008396:	3718      	adds	r7, #24
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}
 800839c:	200008ac 	.word	0x200008ac
 80083a0:	20000888 	.word	0x20000888
 80083a4:	2000083c 	.word	0x2000083c
 80083a8:	20000840 	.word	0x20000840
 80083ac:	2000089c 	.word	0x2000089c
 80083b0:	200008a4 	.word	0x200008a4
 80083b4:	2000088c 	.word	0x2000088c
 80083b8:	20000788 	.word	0x20000788
 80083bc:	20000784 	.word	0x20000784
 80083c0:	20000898 	.word	0x20000898
 80083c4:	20000894 	.word	0x20000894

080083c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80083c8:	b480      	push	{r7}
 80083ca:	b087      	sub	sp, #28
 80083cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80083ce:	4b27      	ldr	r3, [pc, #156]	; (800846c <vTaskSwitchContext+0xa4>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d003      	beq.n	80083de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80083d6:	4b26      	ldr	r3, [pc, #152]	; (8008470 <vTaskSwitchContext+0xa8>)
 80083d8:	2201      	movs	r2, #1
 80083da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80083dc:	e03f      	b.n	800845e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80083de:	4b24      	ldr	r3, [pc, #144]	; (8008470 <vTaskSwitchContext+0xa8>)
 80083e0:	2200      	movs	r2, #0
 80083e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083e4:	4b23      	ldr	r3, [pc, #140]	; (8008474 <vTaskSwitchContext+0xac>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	fab3 f383 	clz	r3, r3
 80083f0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80083f2:	7afb      	ldrb	r3, [r7, #11]
 80083f4:	f1c3 031f 	rsb	r3, r3, #31
 80083f8:	617b      	str	r3, [r7, #20]
 80083fa:	491f      	ldr	r1, [pc, #124]	; (8008478 <vTaskSwitchContext+0xb0>)
 80083fc:	697a      	ldr	r2, [r7, #20]
 80083fe:	4613      	mov	r3, r2
 8008400:	009b      	lsls	r3, r3, #2
 8008402:	4413      	add	r3, r2
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	440b      	add	r3, r1
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d10a      	bne.n	8008424 <vTaskSwitchContext+0x5c>
	__asm volatile
 800840e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008412:	f383 8811 	msr	BASEPRI, r3
 8008416:	f3bf 8f6f 	isb	sy
 800841a:	f3bf 8f4f 	dsb	sy
 800841e:	607b      	str	r3, [r7, #4]
}
 8008420:	bf00      	nop
 8008422:	e7fe      	b.n	8008422 <vTaskSwitchContext+0x5a>
 8008424:	697a      	ldr	r2, [r7, #20]
 8008426:	4613      	mov	r3, r2
 8008428:	009b      	lsls	r3, r3, #2
 800842a:	4413      	add	r3, r2
 800842c:	009b      	lsls	r3, r3, #2
 800842e:	4a12      	ldr	r2, [pc, #72]	; (8008478 <vTaskSwitchContext+0xb0>)
 8008430:	4413      	add	r3, r2
 8008432:	613b      	str	r3, [r7, #16]
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	685a      	ldr	r2, [r3, #4]
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	605a      	str	r2, [r3, #4]
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	685a      	ldr	r2, [r3, #4]
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	3308      	adds	r3, #8
 8008446:	429a      	cmp	r2, r3
 8008448:	d104      	bne.n	8008454 <vTaskSwitchContext+0x8c>
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	685a      	ldr	r2, [r3, #4]
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	605a      	str	r2, [r3, #4]
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	68db      	ldr	r3, [r3, #12]
 800845a:	4a08      	ldr	r2, [pc, #32]	; (800847c <vTaskSwitchContext+0xb4>)
 800845c:	6013      	str	r3, [r2, #0]
}
 800845e:	bf00      	nop
 8008460:	371c      	adds	r7, #28
 8008462:	46bd      	mov	sp, r7
 8008464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008468:	4770      	bx	lr
 800846a:	bf00      	nop
 800846c:	200008ac 	.word	0x200008ac
 8008470:	20000898 	.word	0x20000898
 8008474:	2000088c 	.word	0x2000088c
 8008478:	20000788 	.word	0x20000788
 800847c:	20000784 	.word	0x20000784

08008480 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b084      	sub	sp, #16
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d10a      	bne.n	80084a6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008494:	f383 8811 	msr	BASEPRI, r3
 8008498:	f3bf 8f6f 	isb	sy
 800849c:	f3bf 8f4f 	dsb	sy
 80084a0:	60fb      	str	r3, [r7, #12]
}
 80084a2:	bf00      	nop
 80084a4:	e7fe      	b.n	80084a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80084a6:	4b07      	ldr	r3, [pc, #28]	; (80084c4 <vTaskPlaceOnEventList+0x44>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	3318      	adds	r3, #24
 80084ac:	4619      	mov	r1, r3
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f7fe fe22 	bl	80070f8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80084b4:	2101      	movs	r1, #1
 80084b6:	6838      	ldr	r0, [r7, #0]
 80084b8:	f000 fc34 	bl	8008d24 <prvAddCurrentTaskToDelayedList>
}
 80084bc:	bf00      	nop
 80084be:	3710      	adds	r7, #16
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}
 80084c4:	20000784 	.word	0x20000784

080084c8 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b086      	sub	sp, #24
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	60f8      	str	r0, [r7, #12]
 80084d0:	60b9      	str	r1, [r7, #8]
 80084d2:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d10a      	bne.n	80084f0 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 80084da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084de:	f383 8811 	msr	BASEPRI, r3
 80084e2:	f3bf 8f6f 	isb	sy
 80084e6:	f3bf 8f4f 	dsb	sy
 80084ea:	617b      	str	r3, [r7, #20]
}
 80084ec:	bf00      	nop
 80084ee:	e7fe      	b.n	80084ee <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80084f0:	4b11      	ldr	r3, [pc, #68]	; (8008538 <vTaskPlaceOnUnorderedEventList+0x70>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d10a      	bne.n	800850e <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 80084f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084fc:	f383 8811 	msr	BASEPRI, r3
 8008500:	f3bf 8f6f 	isb	sy
 8008504:	f3bf 8f4f 	dsb	sy
 8008508:	613b      	str	r3, [r7, #16]
}
 800850a:	bf00      	nop
 800850c:	e7fe      	b.n	800850c <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800850e:	4b0b      	ldr	r3, [pc, #44]	; (800853c <vTaskPlaceOnUnorderedEventList+0x74>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	68ba      	ldr	r2, [r7, #8]
 8008514:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8008518:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800851a:	4b08      	ldr	r3, [pc, #32]	; (800853c <vTaskPlaceOnUnorderedEventList+0x74>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	3318      	adds	r3, #24
 8008520:	4619      	mov	r1, r3
 8008522:	68f8      	ldr	r0, [r7, #12]
 8008524:	f7fe fdc4 	bl	80070b0 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008528:	2101      	movs	r1, #1
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 fbfa 	bl	8008d24 <prvAddCurrentTaskToDelayedList>
}
 8008530:	bf00      	nop
 8008532:	3718      	adds	r7, #24
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}
 8008538:	200008ac 	.word	0x200008ac
 800853c:	20000784 	.word	0x20000784

08008540 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b086      	sub	sp, #24
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	68db      	ldr	r3, [r3, #12]
 800854c:	68db      	ldr	r3, [r3, #12]
 800854e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d10a      	bne.n	800856c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800855a:	f383 8811 	msr	BASEPRI, r3
 800855e:	f3bf 8f6f 	isb	sy
 8008562:	f3bf 8f4f 	dsb	sy
 8008566:	60fb      	str	r3, [r7, #12]
}
 8008568:	bf00      	nop
 800856a:	e7fe      	b.n	800856a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	3318      	adds	r3, #24
 8008570:	4618      	mov	r0, r3
 8008572:	f7fe fdfa 	bl	800716a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008576:	4b1d      	ldr	r3, [pc, #116]	; (80085ec <xTaskRemoveFromEventList+0xac>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d11c      	bne.n	80085b8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	3304      	adds	r3, #4
 8008582:	4618      	mov	r0, r3
 8008584:	f7fe fdf1 	bl	800716a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800858c:	2201      	movs	r2, #1
 800858e:	409a      	lsls	r2, r3
 8008590:	4b17      	ldr	r3, [pc, #92]	; (80085f0 <xTaskRemoveFromEventList+0xb0>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4313      	orrs	r3, r2
 8008596:	4a16      	ldr	r2, [pc, #88]	; (80085f0 <xTaskRemoveFromEventList+0xb0>)
 8008598:	6013      	str	r3, [r2, #0]
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800859e:	4613      	mov	r3, r2
 80085a0:	009b      	lsls	r3, r3, #2
 80085a2:	4413      	add	r3, r2
 80085a4:	009b      	lsls	r3, r3, #2
 80085a6:	4a13      	ldr	r2, [pc, #76]	; (80085f4 <xTaskRemoveFromEventList+0xb4>)
 80085a8:	441a      	add	r2, r3
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	3304      	adds	r3, #4
 80085ae:	4619      	mov	r1, r3
 80085b0:	4610      	mov	r0, r2
 80085b2:	f7fe fd7d 	bl	80070b0 <vListInsertEnd>
 80085b6:	e005      	b.n	80085c4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	3318      	adds	r3, #24
 80085bc:	4619      	mov	r1, r3
 80085be:	480e      	ldr	r0, [pc, #56]	; (80085f8 <xTaskRemoveFromEventList+0xb8>)
 80085c0:	f7fe fd76 	bl	80070b0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085c8:	4b0c      	ldr	r3, [pc, #48]	; (80085fc <xTaskRemoveFromEventList+0xbc>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d905      	bls.n	80085de <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80085d2:	2301      	movs	r3, #1
 80085d4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80085d6:	4b0a      	ldr	r3, [pc, #40]	; (8008600 <xTaskRemoveFromEventList+0xc0>)
 80085d8:	2201      	movs	r2, #1
 80085da:	601a      	str	r2, [r3, #0]
 80085dc:	e001      	b.n	80085e2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80085de:	2300      	movs	r3, #0
 80085e0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80085e2:	697b      	ldr	r3, [r7, #20]
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3718      	adds	r7, #24
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}
 80085ec:	200008ac 	.word	0x200008ac
 80085f0:	2000088c 	.word	0x2000088c
 80085f4:	20000788 	.word	0x20000788
 80085f8:	20000844 	.word	0x20000844
 80085fc:	20000784 	.word	0x20000784
 8008600:	20000898 	.word	0x20000898

08008604 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b086      	sub	sp, #24
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800860e:	4b29      	ldr	r3, [pc, #164]	; (80086b4 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d10a      	bne.n	800862c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8008616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800861a:	f383 8811 	msr	BASEPRI, r3
 800861e:	f3bf 8f6f 	isb	sy
 8008622:	f3bf 8f4f 	dsb	sy
 8008626:	613b      	str	r3, [r7, #16]
}
 8008628:	bf00      	nop
 800862a:	e7fe      	b.n	800862a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	68db      	ldr	r3, [r3, #12]
 800863a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d10a      	bne.n	8008658 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8008642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008646:	f383 8811 	msr	BASEPRI, r3
 800864a:	f3bf 8f6f 	isb	sy
 800864e:	f3bf 8f4f 	dsb	sy
 8008652:	60fb      	str	r3, [r7, #12]
}
 8008654:	bf00      	nop
 8008656:	e7fe      	b.n	8008656 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f7fe fd86 	bl	800716a <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	3304      	adds	r3, #4
 8008662:	4618      	mov	r0, r3
 8008664:	f7fe fd81 	bl	800716a <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800866c:	2201      	movs	r2, #1
 800866e:	409a      	lsls	r2, r3
 8008670:	4b11      	ldr	r3, [pc, #68]	; (80086b8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4313      	orrs	r3, r2
 8008676:	4a10      	ldr	r2, [pc, #64]	; (80086b8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8008678:	6013      	str	r3, [r2, #0]
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800867e:	4613      	mov	r3, r2
 8008680:	009b      	lsls	r3, r3, #2
 8008682:	4413      	add	r3, r2
 8008684:	009b      	lsls	r3, r3, #2
 8008686:	4a0d      	ldr	r2, [pc, #52]	; (80086bc <vTaskRemoveFromUnorderedEventList+0xb8>)
 8008688:	441a      	add	r2, r3
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	3304      	adds	r3, #4
 800868e:	4619      	mov	r1, r3
 8008690:	4610      	mov	r0, r2
 8008692:	f7fe fd0d 	bl	80070b0 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800869a:	4b09      	ldr	r3, [pc, #36]	; (80086c0 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d902      	bls.n	80086aa <vTaskRemoveFromUnorderedEventList+0xa6>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80086a4:	4b07      	ldr	r3, [pc, #28]	; (80086c4 <vTaskRemoveFromUnorderedEventList+0xc0>)
 80086a6:	2201      	movs	r2, #1
 80086a8:	601a      	str	r2, [r3, #0]
	}
}
 80086aa:	bf00      	nop
 80086ac:	3718      	adds	r7, #24
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}
 80086b2:	bf00      	nop
 80086b4:	200008ac 	.word	0x200008ac
 80086b8:	2000088c 	.word	0x2000088c
 80086bc:	20000788 	.word	0x20000788
 80086c0:	20000784 	.word	0x20000784
 80086c4:	20000898 	.word	0x20000898

080086c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80086c8:	b480      	push	{r7}
 80086ca:	b083      	sub	sp, #12
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80086d0:	4b06      	ldr	r3, [pc, #24]	; (80086ec <vTaskInternalSetTimeOutState+0x24>)
 80086d2:	681a      	ldr	r2, [r3, #0]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80086d8:	4b05      	ldr	r3, [pc, #20]	; (80086f0 <vTaskInternalSetTimeOutState+0x28>)
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	605a      	str	r2, [r3, #4]
}
 80086e0:	bf00      	nop
 80086e2:	370c      	adds	r7, #12
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr
 80086ec:	2000089c 	.word	0x2000089c
 80086f0:	20000888 	.word	0x20000888

080086f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b088      	sub	sp, #32
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d10a      	bne.n	800871a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008708:	f383 8811 	msr	BASEPRI, r3
 800870c:	f3bf 8f6f 	isb	sy
 8008710:	f3bf 8f4f 	dsb	sy
 8008714:	613b      	str	r3, [r7, #16]
}
 8008716:	bf00      	nop
 8008718:	e7fe      	b.n	8008718 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d10a      	bne.n	8008736 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008724:	f383 8811 	msr	BASEPRI, r3
 8008728:	f3bf 8f6f 	isb	sy
 800872c:	f3bf 8f4f 	dsb	sy
 8008730:	60fb      	str	r3, [r7, #12]
}
 8008732:	bf00      	nop
 8008734:	e7fe      	b.n	8008734 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008736:	f000 fc85 	bl	8009044 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800873a:	4b1d      	ldr	r3, [pc, #116]	; (80087b0 <xTaskCheckForTimeOut+0xbc>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	69ba      	ldr	r2, [r7, #24]
 8008746:	1ad3      	subs	r3, r2, r3
 8008748:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008752:	d102      	bne.n	800875a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008754:	2300      	movs	r3, #0
 8008756:	61fb      	str	r3, [r7, #28]
 8008758:	e023      	b.n	80087a2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681a      	ldr	r2, [r3, #0]
 800875e:	4b15      	ldr	r3, [pc, #84]	; (80087b4 <xTaskCheckForTimeOut+0xc0>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	429a      	cmp	r2, r3
 8008764:	d007      	beq.n	8008776 <xTaskCheckForTimeOut+0x82>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	69ba      	ldr	r2, [r7, #24]
 800876c:	429a      	cmp	r2, r3
 800876e:	d302      	bcc.n	8008776 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008770:	2301      	movs	r3, #1
 8008772:	61fb      	str	r3, [r7, #28]
 8008774:	e015      	b.n	80087a2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	697a      	ldr	r2, [r7, #20]
 800877c:	429a      	cmp	r2, r3
 800877e:	d20b      	bcs.n	8008798 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	681a      	ldr	r2, [r3, #0]
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	1ad2      	subs	r2, r2, r3
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f7ff ff9b 	bl	80086c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008792:	2300      	movs	r3, #0
 8008794:	61fb      	str	r3, [r7, #28]
 8008796:	e004      	b.n	80087a2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	2200      	movs	r2, #0
 800879c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800879e:	2301      	movs	r3, #1
 80087a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80087a2:	f000 fc7f 	bl	80090a4 <vPortExitCritical>

	return xReturn;
 80087a6:	69fb      	ldr	r3, [r7, #28]
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3720      	adds	r7, #32
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}
 80087b0:	20000888 	.word	0x20000888
 80087b4:	2000089c 	.word	0x2000089c

080087b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80087b8:	b480      	push	{r7}
 80087ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80087bc:	4b03      	ldr	r3, [pc, #12]	; (80087cc <vTaskMissedYield+0x14>)
 80087be:	2201      	movs	r2, #1
 80087c0:	601a      	str	r2, [r3, #0]
}
 80087c2:	bf00      	nop
 80087c4:	46bd      	mov	sp, r7
 80087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ca:	4770      	bx	lr
 80087cc:	20000898 	.word	0x20000898

080087d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b082      	sub	sp, #8
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80087d8:	f000 f852 	bl	8008880 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80087dc:	4b06      	ldr	r3, [pc, #24]	; (80087f8 <prvIdleTask+0x28>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d9f9      	bls.n	80087d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80087e4:	4b05      	ldr	r3, [pc, #20]	; (80087fc <prvIdleTask+0x2c>)
 80087e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087ea:	601a      	str	r2, [r3, #0]
 80087ec:	f3bf 8f4f 	dsb	sy
 80087f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80087f4:	e7f0      	b.n	80087d8 <prvIdleTask+0x8>
 80087f6:	bf00      	nop
 80087f8:	20000788 	.word	0x20000788
 80087fc:	e000ed04 	.word	0xe000ed04

08008800 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b082      	sub	sp, #8
 8008804:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008806:	2300      	movs	r3, #0
 8008808:	607b      	str	r3, [r7, #4]
 800880a:	e00c      	b.n	8008826 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	4613      	mov	r3, r2
 8008810:	009b      	lsls	r3, r3, #2
 8008812:	4413      	add	r3, r2
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	4a12      	ldr	r2, [pc, #72]	; (8008860 <prvInitialiseTaskLists+0x60>)
 8008818:	4413      	add	r3, r2
 800881a:	4618      	mov	r0, r3
 800881c:	f7fe fc1b 	bl	8007056 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	3301      	adds	r3, #1
 8008824:	607b      	str	r3, [r7, #4]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2b06      	cmp	r3, #6
 800882a:	d9ef      	bls.n	800880c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800882c:	480d      	ldr	r0, [pc, #52]	; (8008864 <prvInitialiseTaskLists+0x64>)
 800882e:	f7fe fc12 	bl	8007056 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008832:	480d      	ldr	r0, [pc, #52]	; (8008868 <prvInitialiseTaskLists+0x68>)
 8008834:	f7fe fc0f 	bl	8007056 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008838:	480c      	ldr	r0, [pc, #48]	; (800886c <prvInitialiseTaskLists+0x6c>)
 800883a:	f7fe fc0c 	bl	8007056 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800883e:	480c      	ldr	r0, [pc, #48]	; (8008870 <prvInitialiseTaskLists+0x70>)
 8008840:	f7fe fc09 	bl	8007056 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008844:	480b      	ldr	r0, [pc, #44]	; (8008874 <prvInitialiseTaskLists+0x74>)
 8008846:	f7fe fc06 	bl	8007056 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800884a:	4b0b      	ldr	r3, [pc, #44]	; (8008878 <prvInitialiseTaskLists+0x78>)
 800884c:	4a05      	ldr	r2, [pc, #20]	; (8008864 <prvInitialiseTaskLists+0x64>)
 800884e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008850:	4b0a      	ldr	r3, [pc, #40]	; (800887c <prvInitialiseTaskLists+0x7c>)
 8008852:	4a05      	ldr	r2, [pc, #20]	; (8008868 <prvInitialiseTaskLists+0x68>)
 8008854:	601a      	str	r2, [r3, #0]
}
 8008856:	bf00      	nop
 8008858:	3708      	adds	r7, #8
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}
 800885e:	bf00      	nop
 8008860:	20000788 	.word	0x20000788
 8008864:	20000814 	.word	0x20000814
 8008868:	20000828 	.word	0x20000828
 800886c:	20000844 	.word	0x20000844
 8008870:	20000858 	.word	0x20000858
 8008874:	20000870 	.word	0x20000870
 8008878:	2000083c 	.word	0x2000083c
 800887c:	20000840 	.word	0x20000840

08008880 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b082      	sub	sp, #8
 8008884:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008886:	e019      	b.n	80088bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008888:	f000 fbdc 	bl	8009044 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800888c:	4b10      	ldr	r3, [pc, #64]	; (80088d0 <prvCheckTasksWaitingTermination+0x50>)
 800888e:	68db      	ldr	r3, [r3, #12]
 8008890:	68db      	ldr	r3, [r3, #12]
 8008892:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	3304      	adds	r3, #4
 8008898:	4618      	mov	r0, r3
 800889a:	f7fe fc66 	bl	800716a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800889e:	4b0d      	ldr	r3, [pc, #52]	; (80088d4 <prvCheckTasksWaitingTermination+0x54>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	3b01      	subs	r3, #1
 80088a4:	4a0b      	ldr	r2, [pc, #44]	; (80088d4 <prvCheckTasksWaitingTermination+0x54>)
 80088a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80088a8:	4b0b      	ldr	r3, [pc, #44]	; (80088d8 <prvCheckTasksWaitingTermination+0x58>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	3b01      	subs	r3, #1
 80088ae:	4a0a      	ldr	r2, [pc, #40]	; (80088d8 <prvCheckTasksWaitingTermination+0x58>)
 80088b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80088b2:	f000 fbf7 	bl	80090a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f000 f810 	bl	80088dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80088bc:	4b06      	ldr	r3, [pc, #24]	; (80088d8 <prvCheckTasksWaitingTermination+0x58>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d1e1      	bne.n	8008888 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80088c4:	bf00      	nop
 80088c6:	bf00      	nop
 80088c8:	3708      	adds	r7, #8
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	bf00      	nop
 80088d0:	20000858 	.word	0x20000858
 80088d4:	20000884 	.word	0x20000884
 80088d8:	2000086c 	.word	0x2000086c

080088dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b084      	sub	sp, #16
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d108      	bne.n	8008900 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088f2:	4618      	mov	r0, r3
 80088f4:	f000 fd94 	bl	8009420 <vPortFree>
				vPortFree( pxTCB );
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f000 fd91 	bl	8009420 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80088fe:	e018      	b.n	8008932 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008906:	2b01      	cmp	r3, #1
 8008908:	d103      	bne.n	8008912 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 fd88 	bl	8009420 <vPortFree>
	}
 8008910:	e00f      	b.n	8008932 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008918:	2b02      	cmp	r3, #2
 800891a:	d00a      	beq.n	8008932 <prvDeleteTCB+0x56>
	__asm volatile
 800891c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008920:	f383 8811 	msr	BASEPRI, r3
 8008924:	f3bf 8f6f 	isb	sy
 8008928:	f3bf 8f4f 	dsb	sy
 800892c:	60fb      	str	r3, [r7, #12]
}
 800892e:	bf00      	nop
 8008930:	e7fe      	b.n	8008930 <prvDeleteTCB+0x54>
	}
 8008932:	bf00      	nop
 8008934:	3710      	adds	r7, #16
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}
	...

0800893c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800893c:	b480      	push	{r7}
 800893e:	b083      	sub	sp, #12
 8008940:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008942:	4b0c      	ldr	r3, [pc, #48]	; (8008974 <prvResetNextTaskUnblockTime+0x38>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d104      	bne.n	8008956 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800894c:	4b0a      	ldr	r3, [pc, #40]	; (8008978 <prvResetNextTaskUnblockTime+0x3c>)
 800894e:	f04f 32ff 	mov.w	r2, #4294967295
 8008952:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008954:	e008      	b.n	8008968 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008956:	4b07      	ldr	r3, [pc, #28]	; (8008974 <prvResetNextTaskUnblockTime+0x38>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	68db      	ldr	r3, [r3, #12]
 800895c:	68db      	ldr	r3, [r3, #12]
 800895e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	4a04      	ldr	r2, [pc, #16]	; (8008978 <prvResetNextTaskUnblockTime+0x3c>)
 8008966:	6013      	str	r3, [r2, #0]
}
 8008968:	bf00      	nop
 800896a:	370c      	adds	r7, #12
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr
 8008974:	2000083c 	.word	0x2000083c
 8008978:	200008a4 	.word	0x200008a4

0800897c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800897c:	b480      	push	{r7}
 800897e:	b083      	sub	sp, #12
 8008980:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008982:	4b0b      	ldr	r3, [pc, #44]	; (80089b0 <xTaskGetSchedulerState+0x34>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d102      	bne.n	8008990 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800898a:	2301      	movs	r3, #1
 800898c:	607b      	str	r3, [r7, #4]
 800898e:	e008      	b.n	80089a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008990:	4b08      	ldr	r3, [pc, #32]	; (80089b4 <xTaskGetSchedulerState+0x38>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d102      	bne.n	800899e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008998:	2302      	movs	r3, #2
 800899a:	607b      	str	r3, [r7, #4]
 800899c:	e001      	b.n	80089a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800899e:	2300      	movs	r3, #0
 80089a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80089a2:	687b      	ldr	r3, [r7, #4]
	}
 80089a4:	4618      	mov	r0, r3
 80089a6:	370c      	adds	r7, #12
 80089a8:	46bd      	mov	sp, r7
 80089aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ae:	4770      	bx	lr
 80089b0:	20000890 	.word	0x20000890
 80089b4:	200008ac 	.word	0x200008ac

080089b8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b084      	sub	sp, #16
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80089c4:	2300      	movs	r3, #0
 80089c6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d05e      	beq.n	8008a8c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089d2:	4b31      	ldr	r3, [pc, #196]	; (8008a98 <xTaskPriorityInherit+0xe0>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089d8:	429a      	cmp	r2, r3
 80089da:	d24e      	bcs.n	8008a7a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	699b      	ldr	r3, [r3, #24]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	db06      	blt.n	80089f2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089e4:	4b2c      	ldr	r3, [pc, #176]	; (8008a98 <xTaskPriorityInherit+0xe0>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ea:	f1c3 0207 	rsb	r2, r3, #7
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	6959      	ldr	r1, [r3, #20]
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089fa:	4613      	mov	r3, r2
 80089fc:	009b      	lsls	r3, r3, #2
 80089fe:	4413      	add	r3, r2
 8008a00:	009b      	lsls	r3, r3, #2
 8008a02:	4a26      	ldr	r2, [pc, #152]	; (8008a9c <xTaskPriorityInherit+0xe4>)
 8008a04:	4413      	add	r3, r2
 8008a06:	4299      	cmp	r1, r3
 8008a08:	d12f      	bne.n	8008a6a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	3304      	adds	r3, #4
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f7fe fbab 	bl	800716a <uxListRemove>
 8008a14:	4603      	mov	r3, r0
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d10a      	bne.n	8008a30 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a1e:	2201      	movs	r2, #1
 8008a20:	fa02 f303 	lsl.w	r3, r2, r3
 8008a24:	43da      	mvns	r2, r3
 8008a26:	4b1e      	ldr	r3, [pc, #120]	; (8008aa0 <xTaskPriorityInherit+0xe8>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4013      	ands	r3, r2
 8008a2c:	4a1c      	ldr	r2, [pc, #112]	; (8008aa0 <xTaskPriorityInherit+0xe8>)
 8008a2e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008a30:	4b19      	ldr	r3, [pc, #100]	; (8008a98 <xTaskPriorityInherit+0xe0>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a3e:	2201      	movs	r2, #1
 8008a40:	409a      	lsls	r2, r3
 8008a42:	4b17      	ldr	r3, [pc, #92]	; (8008aa0 <xTaskPriorityInherit+0xe8>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4313      	orrs	r3, r2
 8008a48:	4a15      	ldr	r2, [pc, #84]	; (8008aa0 <xTaskPriorityInherit+0xe8>)
 8008a4a:	6013      	str	r3, [r2, #0]
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a50:	4613      	mov	r3, r2
 8008a52:	009b      	lsls	r3, r3, #2
 8008a54:	4413      	add	r3, r2
 8008a56:	009b      	lsls	r3, r3, #2
 8008a58:	4a10      	ldr	r2, [pc, #64]	; (8008a9c <xTaskPriorityInherit+0xe4>)
 8008a5a:	441a      	add	r2, r3
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	3304      	adds	r3, #4
 8008a60:	4619      	mov	r1, r3
 8008a62:	4610      	mov	r0, r2
 8008a64:	f7fe fb24 	bl	80070b0 <vListInsertEnd>
 8008a68:	e004      	b.n	8008a74 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008a6a:	4b0b      	ldr	r3, [pc, #44]	; (8008a98 <xTaskPriorityInherit+0xe0>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008a74:	2301      	movs	r3, #1
 8008a76:	60fb      	str	r3, [r7, #12]
 8008a78:	e008      	b.n	8008a8c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a7e:	4b06      	ldr	r3, [pc, #24]	; (8008a98 <xTaskPriorityInherit+0xe0>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d201      	bcs.n	8008a8c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
	}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3710      	adds	r7, #16
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}
 8008a96:	bf00      	nop
 8008a98:	20000784 	.word	0x20000784
 8008a9c:	20000788 	.word	0x20000788
 8008aa0:	2000088c 	.word	0x2000088c

08008aa4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b086      	sub	sp, #24
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d06e      	beq.n	8008b98 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008aba:	4b3a      	ldr	r3, [pc, #232]	; (8008ba4 <xTaskPriorityDisinherit+0x100>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	693a      	ldr	r2, [r7, #16]
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d00a      	beq.n	8008ada <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac8:	f383 8811 	msr	BASEPRI, r3
 8008acc:	f3bf 8f6f 	isb	sy
 8008ad0:	f3bf 8f4f 	dsb	sy
 8008ad4:	60fb      	str	r3, [r7, #12]
}
 8008ad6:	bf00      	nop
 8008ad8:	e7fe      	b.n	8008ad8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d10a      	bne.n	8008af8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae6:	f383 8811 	msr	BASEPRI, r3
 8008aea:	f3bf 8f6f 	isb	sy
 8008aee:	f3bf 8f4f 	dsb	sy
 8008af2:	60bb      	str	r3, [r7, #8]
}
 8008af4:	bf00      	nop
 8008af6:	e7fe      	b.n	8008af6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008afc:	1e5a      	subs	r2, r3, #1
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d044      	beq.n	8008b98 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d140      	bne.n	8008b98 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	3304      	adds	r3, #4
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f7fe fb25 	bl	800716a <uxListRemove>
 8008b20:	4603      	mov	r3, r0
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d115      	bne.n	8008b52 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b2a:	491f      	ldr	r1, [pc, #124]	; (8008ba8 <xTaskPriorityDisinherit+0x104>)
 8008b2c:	4613      	mov	r3, r2
 8008b2e:	009b      	lsls	r3, r3, #2
 8008b30:	4413      	add	r3, r2
 8008b32:	009b      	lsls	r3, r3, #2
 8008b34:	440b      	add	r3, r1
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d10a      	bne.n	8008b52 <xTaskPriorityDisinherit+0xae>
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b40:	2201      	movs	r2, #1
 8008b42:	fa02 f303 	lsl.w	r3, r2, r3
 8008b46:	43da      	mvns	r2, r3
 8008b48:	4b18      	ldr	r3, [pc, #96]	; (8008bac <xTaskPriorityDisinherit+0x108>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4013      	ands	r3, r2
 8008b4e:	4a17      	ldr	r2, [pc, #92]	; (8008bac <xTaskPriorityDisinherit+0x108>)
 8008b50:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b5e:	f1c3 0207 	rsb	r2, r3, #7
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	409a      	lsls	r2, r3
 8008b6e:	4b0f      	ldr	r3, [pc, #60]	; (8008bac <xTaskPriorityDisinherit+0x108>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4313      	orrs	r3, r2
 8008b74:	4a0d      	ldr	r2, [pc, #52]	; (8008bac <xTaskPriorityDisinherit+0x108>)
 8008b76:	6013      	str	r3, [r2, #0]
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b7c:	4613      	mov	r3, r2
 8008b7e:	009b      	lsls	r3, r3, #2
 8008b80:	4413      	add	r3, r2
 8008b82:	009b      	lsls	r3, r3, #2
 8008b84:	4a08      	ldr	r2, [pc, #32]	; (8008ba8 <xTaskPriorityDisinherit+0x104>)
 8008b86:	441a      	add	r2, r3
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	3304      	adds	r3, #4
 8008b8c:	4619      	mov	r1, r3
 8008b8e:	4610      	mov	r0, r2
 8008b90:	f7fe fa8e 	bl	80070b0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008b94:	2301      	movs	r3, #1
 8008b96:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008b98:	697b      	ldr	r3, [r7, #20]
	}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3718      	adds	r7, #24
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}
 8008ba2:	bf00      	nop
 8008ba4:	20000784 	.word	0x20000784
 8008ba8:	20000788 	.word	0x20000788
 8008bac:	2000088c 	.word	0x2000088c

08008bb0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b088      	sub	sp, #32
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d077      	beq.n	8008cb8 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008bc8:	69bb      	ldr	r3, [r7, #24]
 8008bca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d10a      	bne.n	8008be6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd4:	f383 8811 	msr	BASEPRI, r3
 8008bd8:	f3bf 8f6f 	isb	sy
 8008bdc:	f3bf 8f4f 	dsb	sy
 8008be0:	60fb      	str	r3, [r7, #12]
}
 8008be2:	bf00      	nop
 8008be4:	e7fe      	b.n	8008be4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008be6:	69bb      	ldr	r3, [r7, #24]
 8008be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bea:	683a      	ldr	r2, [r7, #0]
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d902      	bls.n	8008bf6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	61fb      	str	r3, [r7, #28]
 8008bf4:	e002      	b.n	8008bfc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008bf6:	69bb      	ldr	r3, [r7, #24]
 8008bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bfa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008bfc:	69bb      	ldr	r3, [r7, #24]
 8008bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c00:	69fa      	ldr	r2, [r7, #28]
 8008c02:	429a      	cmp	r2, r3
 8008c04:	d058      	beq.n	8008cb8 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008c06:	69bb      	ldr	r3, [r7, #24]
 8008c08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c0a:	697a      	ldr	r2, [r7, #20]
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d153      	bne.n	8008cb8 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008c10:	4b2b      	ldr	r3, [pc, #172]	; (8008cc0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	69ba      	ldr	r2, [r7, #24]
 8008c16:	429a      	cmp	r2, r3
 8008c18:	d10a      	bne.n	8008c30 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c1e:	f383 8811 	msr	BASEPRI, r3
 8008c22:	f3bf 8f6f 	isb	sy
 8008c26:	f3bf 8f4f 	dsb	sy
 8008c2a:	60bb      	str	r3, [r7, #8]
}
 8008c2c:	bf00      	nop
 8008c2e:	e7fe      	b.n	8008c2e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008c30:	69bb      	ldr	r3, [r7, #24]
 8008c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c34:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008c36:	69bb      	ldr	r3, [r7, #24]
 8008c38:	69fa      	ldr	r2, [r7, #28]
 8008c3a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008c3c:	69bb      	ldr	r3, [r7, #24]
 8008c3e:	699b      	ldr	r3, [r3, #24]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	db04      	blt.n	8008c4e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c44:	69fb      	ldr	r3, [r7, #28]
 8008c46:	f1c3 0207 	rsb	r2, r3, #7
 8008c4a:	69bb      	ldr	r3, [r7, #24]
 8008c4c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008c4e:	69bb      	ldr	r3, [r7, #24]
 8008c50:	6959      	ldr	r1, [r3, #20]
 8008c52:	693a      	ldr	r2, [r7, #16]
 8008c54:	4613      	mov	r3, r2
 8008c56:	009b      	lsls	r3, r3, #2
 8008c58:	4413      	add	r3, r2
 8008c5a:	009b      	lsls	r3, r3, #2
 8008c5c:	4a19      	ldr	r2, [pc, #100]	; (8008cc4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008c5e:	4413      	add	r3, r2
 8008c60:	4299      	cmp	r1, r3
 8008c62:	d129      	bne.n	8008cb8 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c64:	69bb      	ldr	r3, [r7, #24]
 8008c66:	3304      	adds	r3, #4
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f7fe fa7e 	bl	800716a <uxListRemove>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d10a      	bne.n	8008c8a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8008c74:	69bb      	ldr	r3, [r7, #24]
 8008c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c78:	2201      	movs	r2, #1
 8008c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c7e:	43da      	mvns	r2, r3
 8008c80:	4b11      	ldr	r3, [pc, #68]	; (8008cc8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4013      	ands	r3, r2
 8008c86:	4a10      	ldr	r2, [pc, #64]	; (8008cc8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008c88:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008c8a:	69bb      	ldr	r3, [r7, #24]
 8008c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c8e:	2201      	movs	r2, #1
 8008c90:	409a      	lsls	r2, r3
 8008c92:	4b0d      	ldr	r3, [pc, #52]	; (8008cc8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4313      	orrs	r3, r2
 8008c98:	4a0b      	ldr	r2, [pc, #44]	; (8008cc8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008c9a:	6013      	str	r3, [r2, #0]
 8008c9c:	69bb      	ldr	r3, [r7, #24]
 8008c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ca0:	4613      	mov	r3, r2
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	4413      	add	r3, r2
 8008ca6:	009b      	lsls	r3, r3, #2
 8008ca8:	4a06      	ldr	r2, [pc, #24]	; (8008cc4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008caa:	441a      	add	r2, r3
 8008cac:	69bb      	ldr	r3, [r7, #24]
 8008cae:	3304      	adds	r3, #4
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	4610      	mov	r0, r2
 8008cb4:	f7fe f9fc 	bl	80070b0 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008cb8:	bf00      	nop
 8008cba:	3720      	adds	r7, #32
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}
 8008cc0:	20000784 	.word	0x20000784
 8008cc4:	20000788 	.word	0x20000788
 8008cc8:	2000088c 	.word	0x2000088c

08008ccc <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b083      	sub	sp, #12
 8008cd0:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8008cd2:	4b09      	ldr	r3, [pc, #36]	; (8008cf8 <uxTaskResetEventItemValue+0x2c>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	699b      	ldr	r3, [r3, #24]
 8008cd8:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cda:	4b07      	ldr	r3, [pc, #28]	; (8008cf8 <uxTaskResetEventItemValue+0x2c>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ce0:	4b05      	ldr	r3, [pc, #20]	; (8008cf8 <uxTaskResetEventItemValue+0x2c>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f1c2 0207 	rsb	r2, r2, #7
 8008ce8:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8008cea:	687b      	ldr	r3, [r7, #4]
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	370c      	adds	r7, #12
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf6:	4770      	bx	lr
 8008cf8:	20000784 	.word	0x20000784

08008cfc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008cfc:	b480      	push	{r7}
 8008cfe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008d00:	4b07      	ldr	r3, [pc, #28]	; (8008d20 <pvTaskIncrementMutexHeldCount+0x24>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d004      	beq.n	8008d12 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008d08:	4b05      	ldr	r3, [pc, #20]	; (8008d20 <pvTaskIncrementMutexHeldCount+0x24>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008d0e:	3201      	adds	r2, #1
 8008d10:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8008d12:	4b03      	ldr	r3, [pc, #12]	; (8008d20 <pvTaskIncrementMutexHeldCount+0x24>)
 8008d14:	681b      	ldr	r3, [r3, #0]
	}
 8008d16:	4618      	mov	r0, r3
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr
 8008d20:	20000784 	.word	0x20000784

08008d24 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b084      	sub	sp, #16
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008d2e:	4b29      	ldr	r3, [pc, #164]	; (8008dd4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d34:	4b28      	ldr	r3, [pc, #160]	; (8008dd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	3304      	adds	r3, #4
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f7fe fa15 	bl	800716a <uxListRemove>
 8008d40:	4603      	mov	r3, r0
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d10b      	bne.n	8008d5e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008d46:	4b24      	ldr	r3, [pc, #144]	; (8008dd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d4c:	2201      	movs	r2, #1
 8008d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d52:	43da      	mvns	r2, r3
 8008d54:	4b21      	ldr	r3, [pc, #132]	; (8008ddc <prvAddCurrentTaskToDelayedList+0xb8>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4013      	ands	r3, r2
 8008d5a:	4a20      	ldr	r2, [pc, #128]	; (8008ddc <prvAddCurrentTaskToDelayedList+0xb8>)
 8008d5c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d64:	d10a      	bne.n	8008d7c <prvAddCurrentTaskToDelayedList+0x58>
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d007      	beq.n	8008d7c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d6c:	4b1a      	ldr	r3, [pc, #104]	; (8008dd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	3304      	adds	r3, #4
 8008d72:	4619      	mov	r1, r3
 8008d74:	481a      	ldr	r0, [pc, #104]	; (8008de0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008d76:	f7fe f99b 	bl	80070b0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008d7a:	e026      	b.n	8008dca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008d7c:	68fa      	ldr	r2, [r7, #12]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	4413      	add	r3, r2
 8008d82:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008d84:	4b14      	ldr	r3, [pc, #80]	; (8008dd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	68ba      	ldr	r2, [r7, #8]
 8008d8a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008d8c:	68ba      	ldr	r2, [r7, #8]
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	429a      	cmp	r2, r3
 8008d92:	d209      	bcs.n	8008da8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d94:	4b13      	ldr	r3, [pc, #76]	; (8008de4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008d96:	681a      	ldr	r2, [r3, #0]
 8008d98:	4b0f      	ldr	r3, [pc, #60]	; (8008dd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	3304      	adds	r3, #4
 8008d9e:	4619      	mov	r1, r3
 8008da0:	4610      	mov	r0, r2
 8008da2:	f7fe f9a9 	bl	80070f8 <vListInsert>
}
 8008da6:	e010      	b.n	8008dca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008da8:	4b0f      	ldr	r3, [pc, #60]	; (8008de8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008daa:	681a      	ldr	r2, [r3, #0]
 8008dac:	4b0a      	ldr	r3, [pc, #40]	; (8008dd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	3304      	adds	r3, #4
 8008db2:	4619      	mov	r1, r3
 8008db4:	4610      	mov	r0, r2
 8008db6:	f7fe f99f 	bl	80070f8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008dba:	4b0c      	ldr	r3, [pc, #48]	; (8008dec <prvAddCurrentTaskToDelayedList+0xc8>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	68ba      	ldr	r2, [r7, #8]
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	d202      	bcs.n	8008dca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008dc4:	4a09      	ldr	r2, [pc, #36]	; (8008dec <prvAddCurrentTaskToDelayedList+0xc8>)
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	6013      	str	r3, [r2, #0]
}
 8008dca:	bf00      	nop
 8008dcc:	3710      	adds	r7, #16
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
 8008dd2:	bf00      	nop
 8008dd4:	20000888 	.word	0x20000888
 8008dd8:	20000784 	.word	0x20000784
 8008ddc:	2000088c 	.word	0x2000088c
 8008de0:	20000870 	.word	0x20000870
 8008de4:	20000840 	.word	0x20000840
 8008de8:	2000083c 	.word	0x2000083c
 8008dec:	200008a4 	.word	0x200008a4

08008df0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008df0:	b480      	push	{r7}
 8008df2:	b085      	sub	sp, #20
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	60f8      	str	r0, [r7, #12]
 8008df8:	60b9      	str	r1, [r7, #8]
 8008dfa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	3b04      	subs	r3, #4
 8008e00:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008e08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	3b04      	subs	r3, #4
 8008e0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	f023 0201 	bic.w	r2, r3, #1
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	3b04      	subs	r3, #4
 8008e1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008e20:	4a0c      	ldr	r2, [pc, #48]	; (8008e54 <pxPortInitialiseStack+0x64>)
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	3b14      	subs	r3, #20
 8008e2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	3b04      	subs	r3, #4
 8008e36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f06f 0202 	mvn.w	r2, #2
 8008e3e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	3b20      	subs	r3, #32
 8008e44:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008e46:	68fb      	ldr	r3, [r7, #12]
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3714      	adds	r7, #20
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e52:	4770      	bx	lr
 8008e54:	08008e59 	.word	0x08008e59

08008e58 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b085      	sub	sp, #20
 8008e5c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008e62:	4b12      	ldr	r3, [pc, #72]	; (8008eac <prvTaskExitError+0x54>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e6a:	d00a      	beq.n	8008e82 <prvTaskExitError+0x2a>
	__asm volatile
 8008e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e70:	f383 8811 	msr	BASEPRI, r3
 8008e74:	f3bf 8f6f 	isb	sy
 8008e78:	f3bf 8f4f 	dsb	sy
 8008e7c:	60fb      	str	r3, [r7, #12]
}
 8008e7e:	bf00      	nop
 8008e80:	e7fe      	b.n	8008e80 <prvTaskExitError+0x28>
	__asm volatile
 8008e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e86:	f383 8811 	msr	BASEPRI, r3
 8008e8a:	f3bf 8f6f 	isb	sy
 8008e8e:	f3bf 8f4f 	dsb	sy
 8008e92:	60bb      	str	r3, [r7, #8]
}
 8008e94:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008e96:	bf00      	nop
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d0fc      	beq.n	8008e98 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008e9e:	bf00      	nop
 8008ea0:	bf00      	nop
 8008ea2:	3714      	adds	r7, #20
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr
 8008eac:	2000000c 	.word	0x2000000c

08008eb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008eb0:	4b07      	ldr	r3, [pc, #28]	; (8008ed0 <pxCurrentTCBConst2>)
 8008eb2:	6819      	ldr	r1, [r3, #0]
 8008eb4:	6808      	ldr	r0, [r1, #0]
 8008eb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eba:	f380 8809 	msr	PSP, r0
 8008ebe:	f3bf 8f6f 	isb	sy
 8008ec2:	f04f 0000 	mov.w	r0, #0
 8008ec6:	f380 8811 	msr	BASEPRI, r0
 8008eca:	4770      	bx	lr
 8008ecc:	f3af 8000 	nop.w

08008ed0 <pxCurrentTCBConst2>:
 8008ed0:	20000784 	.word	0x20000784
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008ed4:	bf00      	nop
 8008ed6:	bf00      	nop

08008ed8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008ed8:	4808      	ldr	r0, [pc, #32]	; (8008efc <prvPortStartFirstTask+0x24>)
 8008eda:	6800      	ldr	r0, [r0, #0]
 8008edc:	6800      	ldr	r0, [r0, #0]
 8008ede:	f380 8808 	msr	MSP, r0
 8008ee2:	f04f 0000 	mov.w	r0, #0
 8008ee6:	f380 8814 	msr	CONTROL, r0
 8008eea:	b662      	cpsie	i
 8008eec:	b661      	cpsie	f
 8008eee:	f3bf 8f4f 	dsb	sy
 8008ef2:	f3bf 8f6f 	isb	sy
 8008ef6:	df00      	svc	0
 8008ef8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008efa:	bf00      	nop
 8008efc:	e000ed08 	.word	0xe000ed08

08008f00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b086      	sub	sp, #24
 8008f04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008f06:	4b46      	ldr	r3, [pc, #280]	; (8009020 <xPortStartScheduler+0x120>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4a46      	ldr	r2, [pc, #280]	; (8009024 <xPortStartScheduler+0x124>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d10a      	bne.n	8008f26 <xPortStartScheduler+0x26>
	__asm volatile
 8008f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f14:	f383 8811 	msr	BASEPRI, r3
 8008f18:	f3bf 8f6f 	isb	sy
 8008f1c:	f3bf 8f4f 	dsb	sy
 8008f20:	613b      	str	r3, [r7, #16]
}
 8008f22:	bf00      	nop
 8008f24:	e7fe      	b.n	8008f24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008f26:	4b3e      	ldr	r3, [pc, #248]	; (8009020 <xPortStartScheduler+0x120>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4a3f      	ldr	r2, [pc, #252]	; (8009028 <xPortStartScheduler+0x128>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d10a      	bne.n	8008f46 <xPortStartScheduler+0x46>
	__asm volatile
 8008f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f34:	f383 8811 	msr	BASEPRI, r3
 8008f38:	f3bf 8f6f 	isb	sy
 8008f3c:	f3bf 8f4f 	dsb	sy
 8008f40:	60fb      	str	r3, [r7, #12]
}
 8008f42:	bf00      	nop
 8008f44:	e7fe      	b.n	8008f44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008f46:	4b39      	ldr	r3, [pc, #228]	; (800902c <xPortStartScheduler+0x12c>)
 8008f48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	b2db      	uxtb	r3, r3
 8008f50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	22ff      	movs	r2, #255	; 0xff
 8008f56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	b2db      	uxtb	r3, r3
 8008f5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008f60:	78fb      	ldrb	r3, [r7, #3]
 8008f62:	b2db      	uxtb	r3, r3
 8008f64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008f68:	b2da      	uxtb	r2, r3
 8008f6a:	4b31      	ldr	r3, [pc, #196]	; (8009030 <xPortStartScheduler+0x130>)
 8008f6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008f6e:	4b31      	ldr	r3, [pc, #196]	; (8009034 <xPortStartScheduler+0x134>)
 8008f70:	2207      	movs	r2, #7
 8008f72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f74:	e009      	b.n	8008f8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008f76:	4b2f      	ldr	r3, [pc, #188]	; (8009034 <xPortStartScheduler+0x134>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	3b01      	subs	r3, #1
 8008f7c:	4a2d      	ldr	r2, [pc, #180]	; (8009034 <xPortStartScheduler+0x134>)
 8008f7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008f80:	78fb      	ldrb	r3, [r7, #3]
 8008f82:	b2db      	uxtb	r3, r3
 8008f84:	005b      	lsls	r3, r3, #1
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f8a:	78fb      	ldrb	r3, [r7, #3]
 8008f8c:	b2db      	uxtb	r3, r3
 8008f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f92:	2b80      	cmp	r3, #128	; 0x80
 8008f94:	d0ef      	beq.n	8008f76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008f96:	4b27      	ldr	r3, [pc, #156]	; (8009034 <xPortStartScheduler+0x134>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f1c3 0307 	rsb	r3, r3, #7
 8008f9e:	2b04      	cmp	r3, #4
 8008fa0:	d00a      	beq.n	8008fb8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa6:	f383 8811 	msr	BASEPRI, r3
 8008faa:	f3bf 8f6f 	isb	sy
 8008fae:	f3bf 8f4f 	dsb	sy
 8008fb2:	60bb      	str	r3, [r7, #8]
}
 8008fb4:	bf00      	nop
 8008fb6:	e7fe      	b.n	8008fb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008fb8:	4b1e      	ldr	r3, [pc, #120]	; (8009034 <xPortStartScheduler+0x134>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	021b      	lsls	r3, r3, #8
 8008fbe:	4a1d      	ldr	r2, [pc, #116]	; (8009034 <xPortStartScheduler+0x134>)
 8008fc0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008fc2:	4b1c      	ldr	r3, [pc, #112]	; (8009034 <xPortStartScheduler+0x134>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008fca:	4a1a      	ldr	r2, [pc, #104]	; (8009034 <xPortStartScheduler+0x134>)
 8008fcc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	b2da      	uxtb	r2, r3
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008fd6:	4b18      	ldr	r3, [pc, #96]	; (8009038 <xPortStartScheduler+0x138>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4a17      	ldr	r2, [pc, #92]	; (8009038 <xPortStartScheduler+0x138>)
 8008fdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008fe0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008fe2:	4b15      	ldr	r3, [pc, #84]	; (8009038 <xPortStartScheduler+0x138>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a14      	ldr	r2, [pc, #80]	; (8009038 <xPortStartScheduler+0x138>)
 8008fe8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008fec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008fee:	f000 f8dd 	bl	80091ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008ff2:	4b12      	ldr	r3, [pc, #72]	; (800903c <xPortStartScheduler+0x13c>)
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008ff8:	f000 f8fc 	bl	80091f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008ffc:	4b10      	ldr	r3, [pc, #64]	; (8009040 <xPortStartScheduler+0x140>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4a0f      	ldr	r2, [pc, #60]	; (8009040 <xPortStartScheduler+0x140>)
 8009002:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009006:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009008:	f7ff ff66 	bl	8008ed8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800900c:	f7ff f9dc 	bl	80083c8 <vTaskSwitchContext>
	prvTaskExitError();
 8009010:	f7ff ff22 	bl	8008e58 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009014:	2300      	movs	r3, #0
}
 8009016:	4618      	mov	r0, r3
 8009018:	3718      	adds	r7, #24
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
 800901e:	bf00      	nop
 8009020:	e000ed00 	.word	0xe000ed00
 8009024:	410fc271 	.word	0x410fc271
 8009028:	410fc270 	.word	0x410fc270
 800902c:	e000e400 	.word	0xe000e400
 8009030:	200008b0 	.word	0x200008b0
 8009034:	200008b4 	.word	0x200008b4
 8009038:	e000ed20 	.word	0xe000ed20
 800903c:	2000000c 	.word	0x2000000c
 8009040:	e000ef34 	.word	0xe000ef34

08009044 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009044:	b480      	push	{r7}
 8009046:	b083      	sub	sp, #12
 8009048:	af00      	add	r7, sp, #0
	__asm volatile
 800904a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800904e:	f383 8811 	msr	BASEPRI, r3
 8009052:	f3bf 8f6f 	isb	sy
 8009056:	f3bf 8f4f 	dsb	sy
 800905a:	607b      	str	r3, [r7, #4]
}
 800905c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800905e:	4b0f      	ldr	r3, [pc, #60]	; (800909c <vPortEnterCritical+0x58>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	3301      	adds	r3, #1
 8009064:	4a0d      	ldr	r2, [pc, #52]	; (800909c <vPortEnterCritical+0x58>)
 8009066:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009068:	4b0c      	ldr	r3, [pc, #48]	; (800909c <vPortEnterCritical+0x58>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	2b01      	cmp	r3, #1
 800906e:	d10f      	bne.n	8009090 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009070:	4b0b      	ldr	r3, [pc, #44]	; (80090a0 <vPortEnterCritical+0x5c>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	b2db      	uxtb	r3, r3
 8009076:	2b00      	cmp	r3, #0
 8009078:	d00a      	beq.n	8009090 <vPortEnterCritical+0x4c>
	__asm volatile
 800907a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800907e:	f383 8811 	msr	BASEPRI, r3
 8009082:	f3bf 8f6f 	isb	sy
 8009086:	f3bf 8f4f 	dsb	sy
 800908a:	603b      	str	r3, [r7, #0]
}
 800908c:	bf00      	nop
 800908e:	e7fe      	b.n	800908e <vPortEnterCritical+0x4a>
	}
}
 8009090:	bf00      	nop
 8009092:	370c      	adds	r7, #12
 8009094:	46bd      	mov	sp, r7
 8009096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909a:	4770      	bx	lr
 800909c:	2000000c 	.word	0x2000000c
 80090a0:	e000ed04 	.word	0xe000ed04

080090a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80090a4:	b480      	push	{r7}
 80090a6:	b083      	sub	sp, #12
 80090a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80090aa:	4b12      	ldr	r3, [pc, #72]	; (80090f4 <vPortExitCritical+0x50>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d10a      	bne.n	80090c8 <vPortExitCritical+0x24>
	__asm volatile
 80090b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b6:	f383 8811 	msr	BASEPRI, r3
 80090ba:	f3bf 8f6f 	isb	sy
 80090be:	f3bf 8f4f 	dsb	sy
 80090c2:	607b      	str	r3, [r7, #4]
}
 80090c4:	bf00      	nop
 80090c6:	e7fe      	b.n	80090c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80090c8:	4b0a      	ldr	r3, [pc, #40]	; (80090f4 <vPortExitCritical+0x50>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	3b01      	subs	r3, #1
 80090ce:	4a09      	ldr	r2, [pc, #36]	; (80090f4 <vPortExitCritical+0x50>)
 80090d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80090d2:	4b08      	ldr	r3, [pc, #32]	; (80090f4 <vPortExitCritical+0x50>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d105      	bne.n	80090e6 <vPortExitCritical+0x42>
 80090da:	2300      	movs	r3, #0
 80090dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	f383 8811 	msr	BASEPRI, r3
}
 80090e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80090e6:	bf00      	nop
 80090e8:	370c      	adds	r7, #12
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr
 80090f2:	bf00      	nop
 80090f4:	2000000c 	.word	0x2000000c
	...

08009100 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009100:	f3ef 8009 	mrs	r0, PSP
 8009104:	f3bf 8f6f 	isb	sy
 8009108:	4b15      	ldr	r3, [pc, #84]	; (8009160 <pxCurrentTCBConst>)
 800910a:	681a      	ldr	r2, [r3, #0]
 800910c:	f01e 0f10 	tst.w	lr, #16
 8009110:	bf08      	it	eq
 8009112:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009116:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800911a:	6010      	str	r0, [r2, #0]
 800911c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009120:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009124:	f380 8811 	msr	BASEPRI, r0
 8009128:	f3bf 8f4f 	dsb	sy
 800912c:	f3bf 8f6f 	isb	sy
 8009130:	f7ff f94a 	bl	80083c8 <vTaskSwitchContext>
 8009134:	f04f 0000 	mov.w	r0, #0
 8009138:	f380 8811 	msr	BASEPRI, r0
 800913c:	bc09      	pop	{r0, r3}
 800913e:	6819      	ldr	r1, [r3, #0]
 8009140:	6808      	ldr	r0, [r1, #0]
 8009142:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009146:	f01e 0f10 	tst.w	lr, #16
 800914a:	bf08      	it	eq
 800914c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009150:	f380 8809 	msr	PSP, r0
 8009154:	f3bf 8f6f 	isb	sy
 8009158:	4770      	bx	lr
 800915a:	bf00      	nop
 800915c:	f3af 8000 	nop.w

08009160 <pxCurrentTCBConst>:
 8009160:	20000784 	.word	0x20000784
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009164:	bf00      	nop
 8009166:	bf00      	nop

08009168 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b082      	sub	sp, #8
 800916c:	af00      	add	r7, sp, #0
	__asm volatile
 800916e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009172:	f383 8811 	msr	BASEPRI, r3
 8009176:	f3bf 8f6f 	isb	sy
 800917a:	f3bf 8f4f 	dsb	sy
 800917e:	607b      	str	r3, [r7, #4]
}
 8009180:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009182:	f7ff f869 	bl	8008258 <xTaskIncrementTick>
 8009186:	4603      	mov	r3, r0
 8009188:	2b00      	cmp	r3, #0
 800918a:	d003      	beq.n	8009194 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800918c:	4b06      	ldr	r3, [pc, #24]	; (80091a8 <SysTick_Handler+0x40>)
 800918e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009192:	601a      	str	r2, [r3, #0]
 8009194:	2300      	movs	r3, #0
 8009196:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	f383 8811 	msr	BASEPRI, r3
}
 800919e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80091a0:	bf00      	nop
 80091a2:	3708      	adds	r7, #8
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}
 80091a8:	e000ed04 	.word	0xe000ed04

080091ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80091ac:	b480      	push	{r7}
 80091ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80091b0:	4b0b      	ldr	r3, [pc, #44]	; (80091e0 <vPortSetupTimerInterrupt+0x34>)
 80091b2:	2200      	movs	r2, #0
 80091b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80091b6:	4b0b      	ldr	r3, [pc, #44]	; (80091e4 <vPortSetupTimerInterrupt+0x38>)
 80091b8:	2200      	movs	r2, #0
 80091ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80091bc:	4b0a      	ldr	r3, [pc, #40]	; (80091e8 <vPortSetupTimerInterrupt+0x3c>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a0a      	ldr	r2, [pc, #40]	; (80091ec <vPortSetupTimerInterrupt+0x40>)
 80091c2:	fba2 2303 	umull	r2, r3, r2, r3
 80091c6:	099b      	lsrs	r3, r3, #6
 80091c8:	4a09      	ldr	r2, [pc, #36]	; (80091f0 <vPortSetupTimerInterrupt+0x44>)
 80091ca:	3b01      	subs	r3, #1
 80091cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80091ce:	4b04      	ldr	r3, [pc, #16]	; (80091e0 <vPortSetupTimerInterrupt+0x34>)
 80091d0:	2207      	movs	r2, #7
 80091d2:	601a      	str	r2, [r3, #0]
}
 80091d4:	bf00      	nop
 80091d6:	46bd      	mov	sp, r7
 80091d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091dc:	4770      	bx	lr
 80091de:	bf00      	nop
 80091e0:	e000e010 	.word	0xe000e010
 80091e4:	e000e018 	.word	0xe000e018
 80091e8:	20000000 	.word	0x20000000
 80091ec:	10624dd3 	.word	0x10624dd3
 80091f0:	e000e014 	.word	0xe000e014

080091f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80091f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009204 <vPortEnableVFP+0x10>
 80091f8:	6801      	ldr	r1, [r0, #0]
 80091fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80091fe:	6001      	str	r1, [r0, #0]
 8009200:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009202:	bf00      	nop
 8009204:	e000ed88 	.word	0xe000ed88

08009208 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009208:	b480      	push	{r7}
 800920a:	b085      	sub	sp, #20
 800920c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800920e:	f3ef 8305 	mrs	r3, IPSR
 8009212:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2b0f      	cmp	r3, #15
 8009218:	d914      	bls.n	8009244 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800921a:	4a17      	ldr	r2, [pc, #92]	; (8009278 <vPortValidateInterruptPriority+0x70>)
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	4413      	add	r3, r2
 8009220:	781b      	ldrb	r3, [r3, #0]
 8009222:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009224:	4b15      	ldr	r3, [pc, #84]	; (800927c <vPortValidateInterruptPriority+0x74>)
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	7afa      	ldrb	r2, [r7, #11]
 800922a:	429a      	cmp	r2, r3
 800922c:	d20a      	bcs.n	8009244 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800922e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009232:	f383 8811 	msr	BASEPRI, r3
 8009236:	f3bf 8f6f 	isb	sy
 800923a:	f3bf 8f4f 	dsb	sy
 800923e:	607b      	str	r3, [r7, #4]
}
 8009240:	bf00      	nop
 8009242:	e7fe      	b.n	8009242 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009244:	4b0e      	ldr	r3, [pc, #56]	; (8009280 <vPortValidateInterruptPriority+0x78>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800924c:	4b0d      	ldr	r3, [pc, #52]	; (8009284 <vPortValidateInterruptPriority+0x7c>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	429a      	cmp	r2, r3
 8009252:	d90a      	bls.n	800926a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009258:	f383 8811 	msr	BASEPRI, r3
 800925c:	f3bf 8f6f 	isb	sy
 8009260:	f3bf 8f4f 	dsb	sy
 8009264:	603b      	str	r3, [r7, #0]
}
 8009266:	bf00      	nop
 8009268:	e7fe      	b.n	8009268 <vPortValidateInterruptPriority+0x60>
	}
 800926a:	bf00      	nop
 800926c:	3714      	adds	r7, #20
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr
 8009276:	bf00      	nop
 8009278:	e000e3f0 	.word	0xe000e3f0
 800927c:	200008b0 	.word	0x200008b0
 8009280:	e000ed0c 	.word	0xe000ed0c
 8009284:	200008b4 	.word	0x200008b4

08009288 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b08a      	sub	sp, #40	; 0x28
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009290:	2300      	movs	r3, #0
 8009292:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009294:	f7fe ff36 	bl	8008104 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009298:	4b5b      	ldr	r3, [pc, #364]	; (8009408 <pvPortMalloc+0x180>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d101      	bne.n	80092a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80092a0:	f000 f920 	bl	80094e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80092a4:	4b59      	ldr	r3, [pc, #356]	; (800940c <pvPortMalloc+0x184>)
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	4013      	ands	r3, r2
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	f040 8093 	bne.w	80093d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d01d      	beq.n	80092f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80092b8:	2208      	movs	r2, #8
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	4413      	add	r3, r2
 80092be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f003 0307 	and.w	r3, r3, #7
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d014      	beq.n	80092f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f023 0307 	bic.w	r3, r3, #7
 80092d0:	3308      	adds	r3, #8
 80092d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f003 0307 	and.w	r3, r3, #7
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d00a      	beq.n	80092f4 <pvPortMalloc+0x6c>
	__asm volatile
 80092de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e2:	f383 8811 	msr	BASEPRI, r3
 80092e6:	f3bf 8f6f 	isb	sy
 80092ea:	f3bf 8f4f 	dsb	sy
 80092ee:	617b      	str	r3, [r7, #20]
}
 80092f0:	bf00      	nop
 80092f2:	e7fe      	b.n	80092f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d06e      	beq.n	80093d8 <pvPortMalloc+0x150>
 80092fa:	4b45      	ldr	r3, [pc, #276]	; (8009410 <pvPortMalloc+0x188>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	687a      	ldr	r2, [r7, #4]
 8009300:	429a      	cmp	r2, r3
 8009302:	d869      	bhi.n	80093d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009304:	4b43      	ldr	r3, [pc, #268]	; (8009414 <pvPortMalloc+0x18c>)
 8009306:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009308:	4b42      	ldr	r3, [pc, #264]	; (8009414 <pvPortMalloc+0x18c>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800930e:	e004      	b.n	800931a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009312:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800931a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931c:	685b      	ldr	r3, [r3, #4]
 800931e:	687a      	ldr	r2, [r7, #4]
 8009320:	429a      	cmp	r2, r3
 8009322:	d903      	bls.n	800932c <pvPortMalloc+0xa4>
 8009324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d1f1      	bne.n	8009310 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800932c:	4b36      	ldr	r3, [pc, #216]	; (8009408 <pvPortMalloc+0x180>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009332:	429a      	cmp	r2, r3
 8009334:	d050      	beq.n	80093d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009336:	6a3b      	ldr	r3, [r7, #32]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	2208      	movs	r2, #8
 800933c:	4413      	add	r3, r2
 800933e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009342:	681a      	ldr	r2, [r3, #0]
 8009344:	6a3b      	ldr	r3, [r7, #32]
 8009346:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800934a:	685a      	ldr	r2, [r3, #4]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	1ad2      	subs	r2, r2, r3
 8009350:	2308      	movs	r3, #8
 8009352:	005b      	lsls	r3, r3, #1
 8009354:	429a      	cmp	r2, r3
 8009356:	d91f      	bls.n	8009398 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	4413      	add	r3, r2
 800935e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009360:	69bb      	ldr	r3, [r7, #24]
 8009362:	f003 0307 	and.w	r3, r3, #7
 8009366:	2b00      	cmp	r3, #0
 8009368:	d00a      	beq.n	8009380 <pvPortMalloc+0xf8>
	__asm volatile
 800936a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800936e:	f383 8811 	msr	BASEPRI, r3
 8009372:	f3bf 8f6f 	isb	sy
 8009376:	f3bf 8f4f 	dsb	sy
 800937a:	613b      	str	r3, [r7, #16]
}
 800937c:	bf00      	nop
 800937e:	e7fe      	b.n	800937e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009382:	685a      	ldr	r2, [r3, #4]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	1ad2      	subs	r2, r2, r3
 8009388:	69bb      	ldr	r3, [r7, #24]
 800938a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800938c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800938e:	687a      	ldr	r2, [r7, #4]
 8009390:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009392:	69b8      	ldr	r0, [r7, #24]
 8009394:	f000 f908 	bl	80095a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009398:	4b1d      	ldr	r3, [pc, #116]	; (8009410 <pvPortMalloc+0x188>)
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	1ad3      	subs	r3, r2, r3
 80093a2:	4a1b      	ldr	r2, [pc, #108]	; (8009410 <pvPortMalloc+0x188>)
 80093a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80093a6:	4b1a      	ldr	r3, [pc, #104]	; (8009410 <pvPortMalloc+0x188>)
 80093a8:	681a      	ldr	r2, [r3, #0]
 80093aa:	4b1b      	ldr	r3, [pc, #108]	; (8009418 <pvPortMalloc+0x190>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	429a      	cmp	r2, r3
 80093b0:	d203      	bcs.n	80093ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80093b2:	4b17      	ldr	r3, [pc, #92]	; (8009410 <pvPortMalloc+0x188>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4a18      	ldr	r2, [pc, #96]	; (8009418 <pvPortMalloc+0x190>)
 80093b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80093ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093bc:	685a      	ldr	r2, [r3, #4]
 80093be:	4b13      	ldr	r3, [pc, #76]	; (800940c <pvPortMalloc+0x184>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	431a      	orrs	r2, r3
 80093c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80093c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ca:	2200      	movs	r2, #0
 80093cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80093ce:	4b13      	ldr	r3, [pc, #76]	; (800941c <pvPortMalloc+0x194>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	3301      	adds	r3, #1
 80093d4:	4a11      	ldr	r2, [pc, #68]	; (800941c <pvPortMalloc+0x194>)
 80093d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80093d8:	f7fe fea2 	bl	8008120 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80093dc:	69fb      	ldr	r3, [r7, #28]
 80093de:	f003 0307 	and.w	r3, r3, #7
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d00a      	beq.n	80093fc <pvPortMalloc+0x174>
	__asm volatile
 80093e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ea:	f383 8811 	msr	BASEPRI, r3
 80093ee:	f3bf 8f6f 	isb	sy
 80093f2:	f3bf 8f4f 	dsb	sy
 80093f6:	60fb      	str	r3, [r7, #12]
}
 80093f8:	bf00      	nop
 80093fa:	e7fe      	b.n	80093fa <pvPortMalloc+0x172>
	return pvReturn;
 80093fc:	69fb      	ldr	r3, [r7, #28]
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3728      	adds	r7, #40	; 0x28
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}
 8009406:	bf00      	nop
 8009408:	200044c0 	.word	0x200044c0
 800940c:	200044d4 	.word	0x200044d4
 8009410:	200044c4 	.word	0x200044c4
 8009414:	200044b8 	.word	0x200044b8
 8009418:	200044c8 	.word	0x200044c8
 800941c:	200044cc 	.word	0x200044cc

08009420 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b086      	sub	sp, #24
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d04d      	beq.n	80094ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009432:	2308      	movs	r3, #8
 8009434:	425b      	negs	r3, r3
 8009436:	697a      	ldr	r2, [r7, #20]
 8009438:	4413      	add	r3, r2
 800943a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	685a      	ldr	r2, [r3, #4]
 8009444:	4b24      	ldr	r3, [pc, #144]	; (80094d8 <vPortFree+0xb8>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4013      	ands	r3, r2
 800944a:	2b00      	cmp	r3, #0
 800944c:	d10a      	bne.n	8009464 <vPortFree+0x44>
	__asm volatile
 800944e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009452:	f383 8811 	msr	BASEPRI, r3
 8009456:	f3bf 8f6f 	isb	sy
 800945a:	f3bf 8f4f 	dsb	sy
 800945e:	60fb      	str	r3, [r7, #12]
}
 8009460:	bf00      	nop
 8009462:	e7fe      	b.n	8009462 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d00a      	beq.n	8009482 <vPortFree+0x62>
	__asm volatile
 800946c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009470:	f383 8811 	msr	BASEPRI, r3
 8009474:	f3bf 8f6f 	isb	sy
 8009478:	f3bf 8f4f 	dsb	sy
 800947c:	60bb      	str	r3, [r7, #8]
}
 800947e:	bf00      	nop
 8009480:	e7fe      	b.n	8009480 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	685a      	ldr	r2, [r3, #4]
 8009486:	4b14      	ldr	r3, [pc, #80]	; (80094d8 <vPortFree+0xb8>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4013      	ands	r3, r2
 800948c:	2b00      	cmp	r3, #0
 800948e:	d01e      	beq.n	80094ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d11a      	bne.n	80094ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	685a      	ldr	r2, [r3, #4]
 800949c:	4b0e      	ldr	r3, [pc, #56]	; (80094d8 <vPortFree+0xb8>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	43db      	mvns	r3, r3
 80094a2:	401a      	ands	r2, r3
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80094a8:	f7fe fe2c 	bl	8008104 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	685a      	ldr	r2, [r3, #4]
 80094b0:	4b0a      	ldr	r3, [pc, #40]	; (80094dc <vPortFree+0xbc>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	4413      	add	r3, r2
 80094b6:	4a09      	ldr	r2, [pc, #36]	; (80094dc <vPortFree+0xbc>)
 80094b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80094ba:	6938      	ldr	r0, [r7, #16]
 80094bc:	f000 f874 	bl	80095a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80094c0:	4b07      	ldr	r3, [pc, #28]	; (80094e0 <vPortFree+0xc0>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	3301      	adds	r3, #1
 80094c6:	4a06      	ldr	r2, [pc, #24]	; (80094e0 <vPortFree+0xc0>)
 80094c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80094ca:	f7fe fe29 	bl	8008120 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80094ce:	bf00      	nop
 80094d0:	3718      	adds	r7, #24
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	200044d4 	.word	0x200044d4
 80094dc:	200044c4 	.word	0x200044c4
 80094e0:	200044d0 	.word	0x200044d0

080094e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80094e4:	b480      	push	{r7}
 80094e6:	b085      	sub	sp, #20
 80094e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80094ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80094ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80094f0:	4b27      	ldr	r3, [pc, #156]	; (8009590 <prvHeapInit+0xac>)
 80094f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f003 0307 	and.w	r3, r3, #7
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d00c      	beq.n	8009518 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	3307      	adds	r3, #7
 8009502:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f023 0307 	bic.w	r3, r3, #7
 800950a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800950c:	68ba      	ldr	r2, [r7, #8]
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	1ad3      	subs	r3, r2, r3
 8009512:	4a1f      	ldr	r2, [pc, #124]	; (8009590 <prvHeapInit+0xac>)
 8009514:	4413      	add	r3, r2
 8009516:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800951c:	4a1d      	ldr	r2, [pc, #116]	; (8009594 <prvHeapInit+0xb0>)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009522:	4b1c      	ldr	r3, [pc, #112]	; (8009594 <prvHeapInit+0xb0>)
 8009524:	2200      	movs	r2, #0
 8009526:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	68ba      	ldr	r2, [r7, #8]
 800952c:	4413      	add	r3, r2
 800952e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009530:	2208      	movs	r2, #8
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	1a9b      	subs	r3, r3, r2
 8009536:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f023 0307 	bic.w	r3, r3, #7
 800953e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	4a15      	ldr	r2, [pc, #84]	; (8009598 <prvHeapInit+0xb4>)
 8009544:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009546:	4b14      	ldr	r3, [pc, #80]	; (8009598 <prvHeapInit+0xb4>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	2200      	movs	r2, #0
 800954c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800954e:	4b12      	ldr	r3, [pc, #72]	; (8009598 <prvHeapInit+0xb4>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	2200      	movs	r2, #0
 8009554:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	68fa      	ldr	r2, [r7, #12]
 800955e:	1ad2      	subs	r2, r2, r3
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009564:	4b0c      	ldr	r3, [pc, #48]	; (8009598 <prvHeapInit+0xb4>)
 8009566:	681a      	ldr	r2, [r3, #0]
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	4a0a      	ldr	r2, [pc, #40]	; (800959c <prvHeapInit+0xb8>)
 8009572:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	4a09      	ldr	r2, [pc, #36]	; (80095a0 <prvHeapInit+0xbc>)
 800957a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800957c:	4b09      	ldr	r3, [pc, #36]	; (80095a4 <prvHeapInit+0xc0>)
 800957e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009582:	601a      	str	r2, [r3, #0]
}
 8009584:	bf00      	nop
 8009586:	3714      	adds	r7, #20
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr
 8009590:	200008b8 	.word	0x200008b8
 8009594:	200044b8 	.word	0x200044b8
 8009598:	200044c0 	.word	0x200044c0
 800959c:	200044c8 	.word	0x200044c8
 80095a0:	200044c4 	.word	0x200044c4
 80095a4:	200044d4 	.word	0x200044d4

080095a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80095a8:	b480      	push	{r7}
 80095aa:	b085      	sub	sp, #20
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80095b0:	4b28      	ldr	r3, [pc, #160]	; (8009654 <prvInsertBlockIntoFreeList+0xac>)
 80095b2:	60fb      	str	r3, [r7, #12]
 80095b4:	e002      	b.n	80095bc <prvInsertBlockIntoFreeList+0x14>
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	60fb      	str	r3, [r7, #12]
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	687a      	ldr	r2, [r7, #4]
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d8f7      	bhi.n	80095b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	685b      	ldr	r3, [r3, #4]
 80095ce:	68ba      	ldr	r2, [r7, #8]
 80095d0:	4413      	add	r3, r2
 80095d2:	687a      	ldr	r2, [r7, #4]
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d108      	bne.n	80095ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	685a      	ldr	r2, [r3, #4]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	441a      	add	r2, r3
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	685b      	ldr	r3, [r3, #4]
 80095f2:	68ba      	ldr	r2, [r7, #8]
 80095f4:	441a      	add	r2, r3
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	429a      	cmp	r2, r3
 80095fc:	d118      	bne.n	8009630 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681a      	ldr	r2, [r3, #0]
 8009602:	4b15      	ldr	r3, [pc, #84]	; (8009658 <prvInsertBlockIntoFreeList+0xb0>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	429a      	cmp	r2, r3
 8009608:	d00d      	beq.n	8009626 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	685a      	ldr	r2, [r3, #4]
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	441a      	add	r2, r3
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	681a      	ldr	r2, [r3, #0]
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	601a      	str	r2, [r3, #0]
 8009624:	e008      	b.n	8009638 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009626:	4b0c      	ldr	r3, [pc, #48]	; (8009658 <prvInsertBlockIntoFreeList+0xb0>)
 8009628:	681a      	ldr	r2, [r3, #0]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	601a      	str	r2, [r3, #0]
 800962e:	e003      	b.n	8009638 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681a      	ldr	r2, [r3, #0]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009638:	68fa      	ldr	r2, [r7, #12]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	429a      	cmp	r2, r3
 800963e:	d002      	beq.n	8009646 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	687a      	ldr	r2, [r7, #4]
 8009644:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009646:	bf00      	nop
 8009648:	3714      	adds	r7, #20
 800964a:	46bd      	mov	sp, r7
 800964c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009650:	4770      	bx	lr
 8009652:	bf00      	nop
 8009654:	200044b8 	.word	0x200044b8
 8009658:	200044c0 	.word	0x200044c0

0800965c <__errno>:
 800965c:	4b01      	ldr	r3, [pc, #4]	; (8009664 <__errno+0x8>)
 800965e:	6818      	ldr	r0, [r3, #0]
 8009660:	4770      	bx	lr
 8009662:	bf00      	nop
 8009664:	20000010 	.word	0x20000010

08009668 <__libc_init_array>:
 8009668:	b570      	push	{r4, r5, r6, lr}
 800966a:	4d0d      	ldr	r5, [pc, #52]	; (80096a0 <__libc_init_array+0x38>)
 800966c:	4c0d      	ldr	r4, [pc, #52]	; (80096a4 <__libc_init_array+0x3c>)
 800966e:	1b64      	subs	r4, r4, r5
 8009670:	10a4      	asrs	r4, r4, #2
 8009672:	2600      	movs	r6, #0
 8009674:	42a6      	cmp	r6, r4
 8009676:	d109      	bne.n	800968c <__libc_init_array+0x24>
 8009678:	4d0b      	ldr	r5, [pc, #44]	; (80096a8 <__libc_init_array+0x40>)
 800967a:	4c0c      	ldr	r4, [pc, #48]	; (80096ac <__libc_init_array+0x44>)
 800967c:	f001 f832 	bl	800a6e4 <_init>
 8009680:	1b64      	subs	r4, r4, r5
 8009682:	10a4      	asrs	r4, r4, #2
 8009684:	2600      	movs	r6, #0
 8009686:	42a6      	cmp	r6, r4
 8009688:	d105      	bne.n	8009696 <__libc_init_array+0x2e>
 800968a:	bd70      	pop	{r4, r5, r6, pc}
 800968c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009690:	4798      	blx	r3
 8009692:	3601      	adds	r6, #1
 8009694:	e7ee      	b.n	8009674 <__libc_init_array+0xc>
 8009696:	f855 3b04 	ldr.w	r3, [r5], #4
 800969a:	4798      	blx	r3
 800969c:	3601      	adds	r6, #1
 800969e:	e7f2      	b.n	8009686 <__libc_init_array+0x1e>
 80096a0:	0800a974 	.word	0x0800a974
 80096a4:	0800a974 	.word	0x0800a974
 80096a8:	0800a974 	.word	0x0800a974
 80096ac:	0800a978 	.word	0x0800a978

080096b0 <memcpy>:
 80096b0:	440a      	add	r2, r1
 80096b2:	4291      	cmp	r1, r2
 80096b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80096b8:	d100      	bne.n	80096bc <memcpy+0xc>
 80096ba:	4770      	bx	lr
 80096bc:	b510      	push	{r4, lr}
 80096be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096c6:	4291      	cmp	r1, r2
 80096c8:	d1f9      	bne.n	80096be <memcpy+0xe>
 80096ca:	bd10      	pop	{r4, pc}

080096cc <memset>:
 80096cc:	4402      	add	r2, r0
 80096ce:	4603      	mov	r3, r0
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d100      	bne.n	80096d6 <memset+0xa>
 80096d4:	4770      	bx	lr
 80096d6:	f803 1b01 	strb.w	r1, [r3], #1
 80096da:	e7f9      	b.n	80096d0 <memset+0x4>

080096dc <iprintf>:
 80096dc:	b40f      	push	{r0, r1, r2, r3}
 80096de:	4b0a      	ldr	r3, [pc, #40]	; (8009708 <iprintf+0x2c>)
 80096e0:	b513      	push	{r0, r1, r4, lr}
 80096e2:	681c      	ldr	r4, [r3, #0]
 80096e4:	b124      	cbz	r4, 80096f0 <iprintf+0x14>
 80096e6:	69a3      	ldr	r3, [r4, #24]
 80096e8:	b913      	cbnz	r3, 80096f0 <iprintf+0x14>
 80096ea:	4620      	mov	r0, r4
 80096ec:	f000 fa5e 	bl	8009bac <__sinit>
 80096f0:	ab05      	add	r3, sp, #20
 80096f2:	9a04      	ldr	r2, [sp, #16]
 80096f4:	68a1      	ldr	r1, [r4, #8]
 80096f6:	9301      	str	r3, [sp, #4]
 80096f8:	4620      	mov	r0, r4
 80096fa:	f000 fc67 	bl	8009fcc <_vfiprintf_r>
 80096fe:	b002      	add	sp, #8
 8009700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009704:	b004      	add	sp, #16
 8009706:	4770      	bx	lr
 8009708:	20000010 	.word	0x20000010

0800970c <_puts_r>:
 800970c:	b570      	push	{r4, r5, r6, lr}
 800970e:	460e      	mov	r6, r1
 8009710:	4605      	mov	r5, r0
 8009712:	b118      	cbz	r0, 800971c <_puts_r+0x10>
 8009714:	6983      	ldr	r3, [r0, #24]
 8009716:	b90b      	cbnz	r3, 800971c <_puts_r+0x10>
 8009718:	f000 fa48 	bl	8009bac <__sinit>
 800971c:	69ab      	ldr	r3, [r5, #24]
 800971e:	68ac      	ldr	r4, [r5, #8]
 8009720:	b913      	cbnz	r3, 8009728 <_puts_r+0x1c>
 8009722:	4628      	mov	r0, r5
 8009724:	f000 fa42 	bl	8009bac <__sinit>
 8009728:	4b2c      	ldr	r3, [pc, #176]	; (80097dc <_puts_r+0xd0>)
 800972a:	429c      	cmp	r4, r3
 800972c:	d120      	bne.n	8009770 <_puts_r+0x64>
 800972e:	686c      	ldr	r4, [r5, #4]
 8009730:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009732:	07db      	lsls	r3, r3, #31
 8009734:	d405      	bmi.n	8009742 <_puts_r+0x36>
 8009736:	89a3      	ldrh	r3, [r4, #12]
 8009738:	0598      	lsls	r0, r3, #22
 800973a:	d402      	bmi.n	8009742 <_puts_r+0x36>
 800973c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800973e:	f000 fad3 	bl	8009ce8 <__retarget_lock_acquire_recursive>
 8009742:	89a3      	ldrh	r3, [r4, #12]
 8009744:	0719      	lsls	r1, r3, #28
 8009746:	d51d      	bpl.n	8009784 <_puts_r+0x78>
 8009748:	6923      	ldr	r3, [r4, #16]
 800974a:	b1db      	cbz	r3, 8009784 <_puts_r+0x78>
 800974c:	3e01      	subs	r6, #1
 800974e:	68a3      	ldr	r3, [r4, #8]
 8009750:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009754:	3b01      	subs	r3, #1
 8009756:	60a3      	str	r3, [r4, #8]
 8009758:	bb39      	cbnz	r1, 80097aa <_puts_r+0x9e>
 800975a:	2b00      	cmp	r3, #0
 800975c:	da38      	bge.n	80097d0 <_puts_r+0xc4>
 800975e:	4622      	mov	r2, r4
 8009760:	210a      	movs	r1, #10
 8009762:	4628      	mov	r0, r5
 8009764:	f000 f848 	bl	80097f8 <__swbuf_r>
 8009768:	3001      	adds	r0, #1
 800976a:	d011      	beq.n	8009790 <_puts_r+0x84>
 800976c:	250a      	movs	r5, #10
 800976e:	e011      	b.n	8009794 <_puts_r+0x88>
 8009770:	4b1b      	ldr	r3, [pc, #108]	; (80097e0 <_puts_r+0xd4>)
 8009772:	429c      	cmp	r4, r3
 8009774:	d101      	bne.n	800977a <_puts_r+0x6e>
 8009776:	68ac      	ldr	r4, [r5, #8]
 8009778:	e7da      	b.n	8009730 <_puts_r+0x24>
 800977a:	4b1a      	ldr	r3, [pc, #104]	; (80097e4 <_puts_r+0xd8>)
 800977c:	429c      	cmp	r4, r3
 800977e:	bf08      	it	eq
 8009780:	68ec      	ldreq	r4, [r5, #12]
 8009782:	e7d5      	b.n	8009730 <_puts_r+0x24>
 8009784:	4621      	mov	r1, r4
 8009786:	4628      	mov	r0, r5
 8009788:	f000 f888 	bl	800989c <__swsetup_r>
 800978c:	2800      	cmp	r0, #0
 800978e:	d0dd      	beq.n	800974c <_puts_r+0x40>
 8009790:	f04f 35ff 	mov.w	r5, #4294967295
 8009794:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009796:	07da      	lsls	r2, r3, #31
 8009798:	d405      	bmi.n	80097a6 <_puts_r+0x9a>
 800979a:	89a3      	ldrh	r3, [r4, #12]
 800979c:	059b      	lsls	r3, r3, #22
 800979e:	d402      	bmi.n	80097a6 <_puts_r+0x9a>
 80097a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097a2:	f000 faa2 	bl	8009cea <__retarget_lock_release_recursive>
 80097a6:	4628      	mov	r0, r5
 80097a8:	bd70      	pop	{r4, r5, r6, pc}
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	da04      	bge.n	80097b8 <_puts_r+0xac>
 80097ae:	69a2      	ldr	r2, [r4, #24]
 80097b0:	429a      	cmp	r2, r3
 80097b2:	dc06      	bgt.n	80097c2 <_puts_r+0xb6>
 80097b4:	290a      	cmp	r1, #10
 80097b6:	d004      	beq.n	80097c2 <_puts_r+0xb6>
 80097b8:	6823      	ldr	r3, [r4, #0]
 80097ba:	1c5a      	adds	r2, r3, #1
 80097bc:	6022      	str	r2, [r4, #0]
 80097be:	7019      	strb	r1, [r3, #0]
 80097c0:	e7c5      	b.n	800974e <_puts_r+0x42>
 80097c2:	4622      	mov	r2, r4
 80097c4:	4628      	mov	r0, r5
 80097c6:	f000 f817 	bl	80097f8 <__swbuf_r>
 80097ca:	3001      	adds	r0, #1
 80097cc:	d1bf      	bne.n	800974e <_puts_r+0x42>
 80097ce:	e7df      	b.n	8009790 <_puts_r+0x84>
 80097d0:	6823      	ldr	r3, [r4, #0]
 80097d2:	250a      	movs	r5, #10
 80097d4:	1c5a      	adds	r2, r3, #1
 80097d6:	6022      	str	r2, [r4, #0]
 80097d8:	701d      	strb	r5, [r3, #0]
 80097da:	e7db      	b.n	8009794 <_puts_r+0x88>
 80097dc:	0800a8f8 	.word	0x0800a8f8
 80097e0:	0800a918 	.word	0x0800a918
 80097e4:	0800a8d8 	.word	0x0800a8d8

080097e8 <puts>:
 80097e8:	4b02      	ldr	r3, [pc, #8]	; (80097f4 <puts+0xc>)
 80097ea:	4601      	mov	r1, r0
 80097ec:	6818      	ldr	r0, [r3, #0]
 80097ee:	f7ff bf8d 	b.w	800970c <_puts_r>
 80097f2:	bf00      	nop
 80097f4:	20000010 	.word	0x20000010

080097f8 <__swbuf_r>:
 80097f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097fa:	460e      	mov	r6, r1
 80097fc:	4614      	mov	r4, r2
 80097fe:	4605      	mov	r5, r0
 8009800:	b118      	cbz	r0, 800980a <__swbuf_r+0x12>
 8009802:	6983      	ldr	r3, [r0, #24]
 8009804:	b90b      	cbnz	r3, 800980a <__swbuf_r+0x12>
 8009806:	f000 f9d1 	bl	8009bac <__sinit>
 800980a:	4b21      	ldr	r3, [pc, #132]	; (8009890 <__swbuf_r+0x98>)
 800980c:	429c      	cmp	r4, r3
 800980e:	d12b      	bne.n	8009868 <__swbuf_r+0x70>
 8009810:	686c      	ldr	r4, [r5, #4]
 8009812:	69a3      	ldr	r3, [r4, #24]
 8009814:	60a3      	str	r3, [r4, #8]
 8009816:	89a3      	ldrh	r3, [r4, #12]
 8009818:	071a      	lsls	r2, r3, #28
 800981a:	d52f      	bpl.n	800987c <__swbuf_r+0x84>
 800981c:	6923      	ldr	r3, [r4, #16]
 800981e:	b36b      	cbz	r3, 800987c <__swbuf_r+0x84>
 8009820:	6923      	ldr	r3, [r4, #16]
 8009822:	6820      	ldr	r0, [r4, #0]
 8009824:	1ac0      	subs	r0, r0, r3
 8009826:	6963      	ldr	r3, [r4, #20]
 8009828:	b2f6      	uxtb	r6, r6
 800982a:	4283      	cmp	r3, r0
 800982c:	4637      	mov	r7, r6
 800982e:	dc04      	bgt.n	800983a <__swbuf_r+0x42>
 8009830:	4621      	mov	r1, r4
 8009832:	4628      	mov	r0, r5
 8009834:	f000 f926 	bl	8009a84 <_fflush_r>
 8009838:	bb30      	cbnz	r0, 8009888 <__swbuf_r+0x90>
 800983a:	68a3      	ldr	r3, [r4, #8]
 800983c:	3b01      	subs	r3, #1
 800983e:	60a3      	str	r3, [r4, #8]
 8009840:	6823      	ldr	r3, [r4, #0]
 8009842:	1c5a      	adds	r2, r3, #1
 8009844:	6022      	str	r2, [r4, #0]
 8009846:	701e      	strb	r6, [r3, #0]
 8009848:	6963      	ldr	r3, [r4, #20]
 800984a:	3001      	adds	r0, #1
 800984c:	4283      	cmp	r3, r0
 800984e:	d004      	beq.n	800985a <__swbuf_r+0x62>
 8009850:	89a3      	ldrh	r3, [r4, #12]
 8009852:	07db      	lsls	r3, r3, #31
 8009854:	d506      	bpl.n	8009864 <__swbuf_r+0x6c>
 8009856:	2e0a      	cmp	r6, #10
 8009858:	d104      	bne.n	8009864 <__swbuf_r+0x6c>
 800985a:	4621      	mov	r1, r4
 800985c:	4628      	mov	r0, r5
 800985e:	f000 f911 	bl	8009a84 <_fflush_r>
 8009862:	b988      	cbnz	r0, 8009888 <__swbuf_r+0x90>
 8009864:	4638      	mov	r0, r7
 8009866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009868:	4b0a      	ldr	r3, [pc, #40]	; (8009894 <__swbuf_r+0x9c>)
 800986a:	429c      	cmp	r4, r3
 800986c:	d101      	bne.n	8009872 <__swbuf_r+0x7a>
 800986e:	68ac      	ldr	r4, [r5, #8]
 8009870:	e7cf      	b.n	8009812 <__swbuf_r+0x1a>
 8009872:	4b09      	ldr	r3, [pc, #36]	; (8009898 <__swbuf_r+0xa0>)
 8009874:	429c      	cmp	r4, r3
 8009876:	bf08      	it	eq
 8009878:	68ec      	ldreq	r4, [r5, #12]
 800987a:	e7ca      	b.n	8009812 <__swbuf_r+0x1a>
 800987c:	4621      	mov	r1, r4
 800987e:	4628      	mov	r0, r5
 8009880:	f000 f80c 	bl	800989c <__swsetup_r>
 8009884:	2800      	cmp	r0, #0
 8009886:	d0cb      	beq.n	8009820 <__swbuf_r+0x28>
 8009888:	f04f 37ff 	mov.w	r7, #4294967295
 800988c:	e7ea      	b.n	8009864 <__swbuf_r+0x6c>
 800988e:	bf00      	nop
 8009890:	0800a8f8 	.word	0x0800a8f8
 8009894:	0800a918 	.word	0x0800a918
 8009898:	0800a8d8 	.word	0x0800a8d8

0800989c <__swsetup_r>:
 800989c:	4b32      	ldr	r3, [pc, #200]	; (8009968 <__swsetup_r+0xcc>)
 800989e:	b570      	push	{r4, r5, r6, lr}
 80098a0:	681d      	ldr	r5, [r3, #0]
 80098a2:	4606      	mov	r6, r0
 80098a4:	460c      	mov	r4, r1
 80098a6:	b125      	cbz	r5, 80098b2 <__swsetup_r+0x16>
 80098a8:	69ab      	ldr	r3, [r5, #24]
 80098aa:	b913      	cbnz	r3, 80098b2 <__swsetup_r+0x16>
 80098ac:	4628      	mov	r0, r5
 80098ae:	f000 f97d 	bl	8009bac <__sinit>
 80098b2:	4b2e      	ldr	r3, [pc, #184]	; (800996c <__swsetup_r+0xd0>)
 80098b4:	429c      	cmp	r4, r3
 80098b6:	d10f      	bne.n	80098d8 <__swsetup_r+0x3c>
 80098b8:	686c      	ldr	r4, [r5, #4]
 80098ba:	89a3      	ldrh	r3, [r4, #12]
 80098bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80098c0:	0719      	lsls	r1, r3, #28
 80098c2:	d42c      	bmi.n	800991e <__swsetup_r+0x82>
 80098c4:	06dd      	lsls	r5, r3, #27
 80098c6:	d411      	bmi.n	80098ec <__swsetup_r+0x50>
 80098c8:	2309      	movs	r3, #9
 80098ca:	6033      	str	r3, [r6, #0]
 80098cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80098d0:	81a3      	strh	r3, [r4, #12]
 80098d2:	f04f 30ff 	mov.w	r0, #4294967295
 80098d6:	e03e      	b.n	8009956 <__swsetup_r+0xba>
 80098d8:	4b25      	ldr	r3, [pc, #148]	; (8009970 <__swsetup_r+0xd4>)
 80098da:	429c      	cmp	r4, r3
 80098dc:	d101      	bne.n	80098e2 <__swsetup_r+0x46>
 80098de:	68ac      	ldr	r4, [r5, #8]
 80098e0:	e7eb      	b.n	80098ba <__swsetup_r+0x1e>
 80098e2:	4b24      	ldr	r3, [pc, #144]	; (8009974 <__swsetup_r+0xd8>)
 80098e4:	429c      	cmp	r4, r3
 80098e6:	bf08      	it	eq
 80098e8:	68ec      	ldreq	r4, [r5, #12]
 80098ea:	e7e6      	b.n	80098ba <__swsetup_r+0x1e>
 80098ec:	0758      	lsls	r0, r3, #29
 80098ee:	d512      	bpl.n	8009916 <__swsetup_r+0x7a>
 80098f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098f2:	b141      	cbz	r1, 8009906 <__swsetup_r+0x6a>
 80098f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098f8:	4299      	cmp	r1, r3
 80098fa:	d002      	beq.n	8009902 <__swsetup_r+0x66>
 80098fc:	4630      	mov	r0, r6
 80098fe:	f000 fa5b 	bl	8009db8 <_free_r>
 8009902:	2300      	movs	r3, #0
 8009904:	6363      	str	r3, [r4, #52]	; 0x34
 8009906:	89a3      	ldrh	r3, [r4, #12]
 8009908:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800990c:	81a3      	strh	r3, [r4, #12]
 800990e:	2300      	movs	r3, #0
 8009910:	6063      	str	r3, [r4, #4]
 8009912:	6923      	ldr	r3, [r4, #16]
 8009914:	6023      	str	r3, [r4, #0]
 8009916:	89a3      	ldrh	r3, [r4, #12]
 8009918:	f043 0308 	orr.w	r3, r3, #8
 800991c:	81a3      	strh	r3, [r4, #12]
 800991e:	6923      	ldr	r3, [r4, #16]
 8009920:	b94b      	cbnz	r3, 8009936 <__swsetup_r+0x9a>
 8009922:	89a3      	ldrh	r3, [r4, #12]
 8009924:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009928:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800992c:	d003      	beq.n	8009936 <__swsetup_r+0x9a>
 800992e:	4621      	mov	r1, r4
 8009930:	4630      	mov	r0, r6
 8009932:	f000 fa01 	bl	8009d38 <__smakebuf_r>
 8009936:	89a0      	ldrh	r0, [r4, #12]
 8009938:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800993c:	f010 0301 	ands.w	r3, r0, #1
 8009940:	d00a      	beq.n	8009958 <__swsetup_r+0xbc>
 8009942:	2300      	movs	r3, #0
 8009944:	60a3      	str	r3, [r4, #8]
 8009946:	6963      	ldr	r3, [r4, #20]
 8009948:	425b      	negs	r3, r3
 800994a:	61a3      	str	r3, [r4, #24]
 800994c:	6923      	ldr	r3, [r4, #16]
 800994e:	b943      	cbnz	r3, 8009962 <__swsetup_r+0xc6>
 8009950:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009954:	d1ba      	bne.n	80098cc <__swsetup_r+0x30>
 8009956:	bd70      	pop	{r4, r5, r6, pc}
 8009958:	0781      	lsls	r1, r0, #30
 800995a:	bf58      	it	pl
 800995c:	6963      	ldrpl	r3, [r4, #20]
 800995e:	60a3      	str	r3, [r4, #8]
 8009960:	e7f4      	b.n	800994c <__swsetup_r+0xb0>
 8009962:	2000      	movs	r0, #0
 8009964:	e7f7      	b.n	8009956 <__swsetup_r+0xba>
 8009966:	bf00      	nop
 8009968:	20000010 	.word	0x20000010
 800996c:	0800a8f8 	.word	0x0800a8f8
 8009970:	0800a918 	.word	0x0800a918
 8009974:	0800a8d8 	.word	0x0800a8d8

08009978 <__sflush_r>:
 8009978:	898a      	ldrh	r2, [r1, #12]
 800997a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800997e:	4605      	mov	r5, r0
 8009980:	0710      	lsls	r0, r2, #28
 8009982:	460c      	mov	r4, r1
 8009984:	d458      	bmi.n	8009a38 <__sflush_r+0xc0>
 8009986:	684b      	ldr	r3, [r1, #4]
 8009988:	2b00      	cmp	r3, #0
 800998a:	dc05      	bgt.n	8009998 <__sflush_r+0x20>
 800998c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800998e:	2b00      	cmp	r3, #0
 8009990:	dc02      	bgt.n	8009998 <__sflush_r+0x20>
 8009992:	2000      	movs	r0, #0
 8009994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009998:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800999a:	2e00      	cmp	r6, #0
 800999c:	d0f9      	beq.n	8009992 <__sflush_r+0x1a>
 800999e:	2300      	movs	r3, #0
 80099a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80099a4:	682f      	ldr	r7, [r5, #0]
 80099a6:	602b      	str	r3, [r5, #0]
 80099a8:	d032      	beq.n	8009a10 <__sflush_r+0x98>
 80099aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80099ac:	89a3      	ldrh	r3, [r4, #12]
 80099ae:	075a      	lsls	r2, r3, #29
 80099b0:	d505      	bpl.n	80099be <__sflush_r+0x46>
 80099b2:	6863      	ldr	r3, [r4, #4]
 80099b4:	1ac0      	subs	r0, r0, r3
 80099b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80099b8:	b10b      	cbz	r3, 80099be <__sflush_r+0x46>
 80099ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80099bc:	1ac0      	subs	r0, r0, r3
 80099be:	2300      	movs	r3, #0
 80099c0:	4602      	mov	r2, r0
 80099c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099c4:	6a21      	ldr	r1, [r4, #32]
 80099c6:	4628      	mov	r0, r5
 80099c8:	47b0      	blx	r6
 80099ca:	1c43      	adds	r3, r0, #1
 80099cc:	89a3      	ldrh	r3, [r4, #12]
 80099ce:	d106      	bne.n	80099de <__sflush_r+0x66>
 80099d0:	6829      	ldr	r1, [r5, #0]
 80099d2:	291d      	cmp	r1, #29
 80099d4:	d82c      	bhi.n	8009a30 <__sflush_r+0xb8>
 80099d6:	4a2a      	ldr	r2, [pc, #168]	; (8009a80 <__sflush_r+0x108>)
 80099d8:	40ca      	lsrs	r2, r1
 80099da:	07d6      	lsls	r6, r2, #31
 80099dc:	d528      	bpl.n	8009a30 <__sflush_r+0xb8>
 80099de:	2200      	movs	r2, #0
 80099e0:	6062      	str	r2, [r4, #4]
 80099e2:	04d9      	lsls	r1, r3, #19
 80099e4:	6922      	ldr	r2, [r4, #16]
 80099e6:	6022      	str	r2, [r4, #0]
 80099e8:	d504      	bpl.n	80099f4 <__sflush_r+0x7c>
 80099ea:	1c42      	adds	r2, r0, #1
 80099ec:	d101      	bne.n	80099f2 <__sflush_r+0x7a>
 80099ee:	682b      	ldr	r3, [r5, #0]
 80099f0:	b903      	cbnz	r3, 80099f4 <__sflush_r+0x7c>
 80099f2:	6560      	str	r0, [r4, #84]	; 0x54
 80099f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80099f6:	602f      	str	r7, [r5, #0]
 80099f8:	2900      	cmp	r1, #0
 80099fa:	d0ca      	beq.n	8009992 <__sflush_r+0x1a>
 80099fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a00:	4299      	cmp	r1, r3
 8009a02:	d002      	beq.n	8009a0a <__sflush_r+0x92>
 8009a04:	4628      	mov	r0, r5
 8009a06:	f000 f9d7 	bl	8009db8 <_free_r>
 8009a0a:	2000      	movs	r0, #0
 8009a0c:	6360      	str	r0, [r4, #52]	; 0x34
 8009a0e:	e7c1      	b.n	8009994 <__sflush_r+0x1c>
 8009a10:	6a21      	ldr	r1, [r4, #32]
 8009a12:	2301      	movs	r3, #1
 8009a14:	4628      	mov	r0, r5
 8009a16:	47b0      	blx	r6
 8009a18:	1c41      	adds	r1, r0, #1
 8009a1a:	d1c7      	bne.n	80099ac <__sflush_r+0x34>
 8009a1c:	682b      	ldr	r3, [r5, #0]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d0c4      	beq.n	80099ac <__sflush_r+0x34>
 8009a22:	2b1d      	cmp	r3, #29
 8009a24:	d001      	beq.n	8009a2a <__sflush_r+0xb2>
 8009a26:	2b16      	cmp	r3, #22
 8009a28:	d101      	bne.n	8009a2e <__sflush_r+0xb6>
 8009a2a:	602f      	str	r7, [r5, #0]
 8009a2c:	e7b1      	b.n	8009992 <__sflush_r+0x1a>
 8009a2e:	89a3      	ldrh	r3, [r4, #12]
 8009a30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a34:	81a3      	strh	r3, [r4, #12]
 8009a36:	e7ad      	b.n	8009994 <__sflush_r+0x1c>
 8009a38:	690f      	ldr	r7, [r1, #16]
 8009a3a:	2f00      	cmp	r7, #0
 8009a3c:	d0a9      	beq.n	8009992 <__sflush_r+0x1a>
 8009a3e:	0793      	lsls	r3, r2, #30
 8009a40:	680e      	ldr	r6, [r1, #0]
 8009a42:	bf08      	it	eq
 8009a44:	694b      	ldreq	r3, [r1, #20]
 8009a46:	600f      	str	r7, [r1, #0]
 8009a48:	bf18      	it	ne
 8009a4a:	2300      	movne	r3, #0
 8009a4c:	eba6 0807 	sub.w	r8, r6, r7
 8009a50:	608b      	str	r3, [r1, #8]
 8009a52:	f1b8 0f00 	cmp.w	r8, #0
 8009a56:	dd9c      	ble.n	8009992 <__sflush_r+0x1a>
 8009a58:	6a21      	ldr	r1, [r4, #32]
 8009a5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009a5c:	4643      	mov	r3, r8
 8009a5e:	463a      	mov	r2, r7
 8009a60:	4628      	mov	r0, r5
 8009a62:	47b0      	blx	r6
 8009a64:	2800      	cmp	r0, #0
 8009a66:	dc06      	bgt.n	8009a76 <__sflush_r+0xfe>
 8009a68:	89a3      	ldrh	r3, [r4, #12]
 8009a6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a6e:	81a3      	strh	r3, [r4, #12]
 8009a70:	f04f 30ff 	mov.w	r0, #4294967295
 8009a74:	e78e      	b.n	8009994 <__sflush_r+0x1c>
 8009a76:	4407      	add	r7, r0
 8009a78:	eba8 0800 	sub.w	r8, r8, r0
 8009a7c:	e7e9      	b.n	8009a52 <__sflush_r+0xda>
 8009a7e:	bf00      	nop
 8009a80:	20400001 	.word	0x20400001

08009a84 <_fflush_r>:
 8009a84:	b538      	push	{r3, r4, r5, lr}
 8009a86:	690b      	ldr	r3, [r1, #16]
 8009a88:	4605      	mov	r5, r0
 8009a8a:	460c      	mov	r4, r1
 8009a8c:	b913      	cbnz	r3, 8009a94 <_fflush_r+0x10>
 8009a8e:	2500      	movs	r5, #0
 8009a90:	4628      	mov	r0, r5
 8009a92:	bd38      	pop	{r3, r4, r5, pc}
 8009a94:	b118      	cbz	r0, 8009a9e <_fflush_r+0x1a>
 8009a96:	6983      	ldr	r3, [r0, #24]
 8009a98:	b90b      	cbnz	r3, 8009a9e <_fflush_r+0x1a>
 8009a9a:	f000 f887 	bl	8009bac <__sinit>
 8009a9e:	4b14      	ldr	r3, [pc, #80]	; (8009af0 <_fflush_r+0x6c>)
 8009aa0:	429c      	cmp	r4, r3
 8009aa2:	d11b      	bne.n	8009adc <_fflush_r+0x58>
 8009aa4:	686c      	ldr	r4, [r5, #4]
 8009aa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d0ef      	beq.n	8009a8e <_fflush_r+0xa>
 8009aae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009ab0:	07d0      	lsls	r0, r2, #31
 8009ab2:	d404      	bmi.n	8009abe <_fflush_r+0x3a>
 8009ab4:	0599      	lsls	r1, r3, #22
 8009ab6:	d402      	bmi.n	8009abe <_fflush_r+0x3a>
 8009ab8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009aba:	f000 f915 	bl	8009ce8 <__retarget_lock_acquire_recursive>
 8009abe:	4628      	mov	r0, r5
 8009ac0:	4621      	mov	r1, r4
 8009ac2:	f7ff ff59 	bl	8009978 <__sflush_r>
 8009ac6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ac8:	07da      	lsls	r2, r3, #31
 8009aca:	4605      	mov	r5, r0
 8009acc:	d4e0      	bmi.n	8009a90 <_fflush_r+0xc>
 8009ace:	89a3      	ldrh	r3, [r4, #12]
 8009ad0:	059b      	lsls	r3, r3, #22
 8009ad2:	d4dd      	bmi.n	8009a90 <_fflush_r+0xc>
 8009ad4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ad6:	f000 f908 	bl	8009cea <__retarget_lock_release_recursive>
 8009ada:	e7d9      	b.n	8009a90 <_fflush_r+0xc>
 8009adc:	4b05      	ldr	r3, [pc, #20]	; (8009af4 <_fflush_r+0x70>)
 8009ade:	429c      	cmp	r4, r3
 8009ae0:	d101      	bne.n	8009ae6 <_fflush_r+0x62>
 8009ae2:	68ac      	ldr	r4, [r5, #8]
 8009ae4:	e7df      	b.n	8009aa6 <_fflush_r+0x22>
 8009ae6:	4b04      	ldr	r3, [pc, #16]	; (8009af8 <_fflush_r+0x74>)
 8009ae8:	429c      	cmp	r4, r3
 8009aea:	bf08      	it	eq
 8009aec:	68ec      	ldreq	r4, [r5, #12]
 8009aee:	e7da      	b.n	8009aa6 <_fflush_r+0x22>
 8009af0:	0800a8f8 	.word	0x0800a8f8
 8009af4:	0800a918 	.word	0x0800a918
 8009af8:	0800a8d8 	.word	0x0800a8d8

08009afc <std>:
 8009afc:	2300      	movs	r3, #0
 8009afe:	b510      	push	{r4, lr}
 8009b00:	4604      	mov	r4, r0
 8009b02:	e9c0 3300 	strd	r3, r3, [r0]
 8009b06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b0a:	6083      	str	r3, [r0, #8]
 8009b0c:	8181      	strh	r1, [r0, #12]
 8009b0e:	6643      	str	r3, [r0, #100]	; 0x64
 8009b10:	81c2      	strh	r2, [r0, #14]
 8009b12:	6183      	str	r3, [r0, #24]
 8009b14:	4619      	mov	r1, r3
 8009b16:	2208      	movs	r2, #8
 8009b18:	305c      	adds	r0, #92	; 0x5c
 8009b1a:	f7ff fdd7 	bl	80096cc <memset>
 8009b1e:	4b05      	ldr	r3, [pc, #20]	; (8009b34 <std+0x38>)
 8009b20:	6263      	str	r3, [r4, #36]	; 0x24
 8009b22:	4b05      	ldr	r3, [pc, #20]	; (8009b38 <std+0x3c>)
 8009b24:	62a3      	str	r3, [r4, #40]	; 0x28
 8009b26:	4b05      	ldr	r3, [pc, #20]	; (8009b3c <std+0x40>)
 8009b28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009b2a:	4b05      	ldr	r3, [pc, #20]	; (8009b40 <std+0x44>)
 8009b2c:	6224      	str	r4, [r4, #32]
 8009b2e:	6323      	str	r3, [r4, #48]	; 0x30
 8009b30:	bd10      	pop	{r4, pc}
 8009b32:	bf00      	nop
 8009b34:	0800a575 	.word	0x0800a575
 8009b38:	0800a597 	.word	0x0800a597
 8009b3c:	0800a5cf 	.word	0x0800a5cf
 8009b40:	0800a5f3 	.word	0x0800a5f3

08009b44 <_cleanup_r>:
 8009b44:	4901      	ldr	r1, [pc, #4]	; (8009b4c <_cleanup_r+0x8>)
 8009b46:	f000 b8af 	b.w	8009ca8 <_fwalk_reent>
 8009b4a:	bf00      	nop
 8009b4c:	08009a85 	.word	0x08009a85

08009b50 <__sfmoreglue>:
 8009b50:	b570      	push	{r4, r5, r6, lr}
 8009b52:	2268      	movs	r2, #104	; 0x68
 8009b54:	1e4d      	subs	r5, r1, #1
 8009b56:	4355      	muls	r5, r2
 8009b58:	460e      	mov	r6, r1
 8009b5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009b5e:	f000 f997 	bl	8009e90 <_malloc_r>
 8009b62:	4604      	mov	r4, r0
 8009b64:	b140      	cbz	r0, 8009b78 <__sfmoreglue+0x28>
 8009b66:	2100      	movs	r1, #0
 8009b68:	e9c0 1600 	strd	r1, r6, [r0]
 8009b6c:	300c      	adds	r0, #12
 8009b6e:	60a0      	str	r0, [r4, #8]
 8009b70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009b74:	f7ff fdaa 	bl	80096cc <memset>
 8009b78:	4620      	mov	r0, r4
 8009b7a:	bd70      	pop	{r4, r5, r6, pc}

08009b7c <__sfp_lock_acquire>:
 8009b7c:	4801      	ldr	r0, [pc, #4]	; (8009b84 <__sfp_lock_acquire+0x8>)
 8009b7e:	f000 b8b3 	b.w	8009ce8 <__retarget_lock_acquire_recursive>
 8009b82:	bf00      	nop
 8009b84:	200044d9 	.word	0x200044d9

08009b88 <__sfp_lock_release>:
 8009b88:	4801      	ldr	r0, [pc, #4]	; (8009b90 <__sfp_lock_release+0x8>)
 8009b8a:	f000 b8ae 	b.w	8009cea <__retarget_lock_release_recursive>
 8009b8e:	bf00      	nop
 8009b90:	200044d9 	.word	0x200044d9

08009b94 <__sinit_lock_acquire>:
 8009b94:	4801      	ldr	r0, [pc, #4]	; (8009b9c <__sinit_lock_acquire+0x8>)
 8009b96:	f000 b8a7 	b.w	8009ce8 <__retarget_lock_acquire_recursive>
 8009b9a:	bf00      	nop
 8009b9c:	200044da 	.word	0x200044da

08009ba0 <__sinit_lock_release>:
 8009ba0:	4801      	ldr	r0, [pc, #4]	; (8009ba8 <__sinit_lock_release+0x8>)
 8009ba2:	f000 b8a2 	b.w	8009cea <__retarget_lock_release_recursive>
 8009ba6:	bf00      	nop
 8009ba8:	200044da 	.word	0x200044da

08009bac <__sinit>:
 8009bac:	b510      	push	{r4, lr}
 8009bae:	4604      	mov	r4, r0
 8009bb0:	f7ff fff0 	bl	8009b94 <__sinit_lock_acquire>
 8009bb4:	69a3      	ldr	r3, [r4, #24]
 8009bb6:	b11b      	cbz	r3, 8009bc0 <__sinit+0x14>
 8009bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bbc:	f7ff bff0 	b.w	8009ba0 <__sinit_lock_release>
 8009bc0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009bc4:	6523      	str	r3, [r4, #80]	; 0x50
 8009bc6:	4b13      	ldr	r3, [pc, #76]	; (8009c14 <__sinit+0x68>)
 8009bc8:	4a13      	ldr	r2, [pc, #76]	; (8009c18 <__sinit+0x6c>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	62a2      	str	r2, [r4, #40]	; 0x28
 8009bce:	42a3      	cmp	r3, r4
 8009bd0:	bf04      	itt	eq
 8009bd2:	2301      	moveq	r3, #1
 8009bd4:	61a3      	streq	r3, [r4, #24]
 8009bd6:	4620      	mov	r0, r4
 8009bd8:	f000 f820 	bl	8009c1c <__sfp>
 8009bdc:	6060      	str	r0, [r4, #4]
 8009bde:	4620      	mov	r0, r4
 8009be0:	f000 f81c 	bl	8009c1c <__sfp>
 8009be4:	60a0      	str	r0, [r4, #8]
 8009be6:	4620      	mov	r0, r4
 8009be8:	f000 f818 	bl	8009c1c <__sfp>
 8009bec:	2200      	movs	r2, #0
 8009bee:	60e0      	str	r0, [r4, #12]
 8009bf0:	2104      	movs	r1, #4
 8009bf2:	6860      	ldr	r0, [r4, #4]
 8009bf4:	f7ff ff82 	bl	8009afc <std>
 8009bf8:	68a0      	ldr	r0, [r4, #8]
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	2109      	movs	r1, #9
 8009bfe:	f7ff ff7d 	bl	8009afc <std>
 8009c02:	68e0      	ldr	r0, [r4, #12]
 8009c04:	2202      	movs	r2, #2
 8009c06:	2112      	movs	r1, #18
 8009c08:	f7ff ff78 	bl	8009afc <std>
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	61a3      	str	r3, [r4, #24]
 8009c10:	e7d2      	b.n	8009bb8 <__sinit+0xc>
 8009c12:	bf00      	nop
 8009c14:	0800a8d4 	.word	0x0800a8d4
 8009c18:	08009b45 	.word	0x08009b45

08009c1c <__sfp>:
 8009c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c1e:	4607      	mov	r7, r0
 8009c20:	f7ff ffac 	bl	8009b7c <__sfp_lock_acquire>
 8009c24:	4b1e      	ldr	r3, [pc, #120]	; (8009ca0 <__sfp+0x84>)
 8009c26:	681e      	ldr	r6, [r3, #0]
 8009c28:	69b3      	ldr	r3, [r6, #24]
 8009c2a:	b913      	cbnz	r3, 8009c32 <__sfp+0x16>
 8009c2c:	4630      	mov	r0, r6
 8009c2e:	f7ff ffbd 	bl	8009bac <__sinit>
 8009c32:	3648      	adds	r6, #72	; 0x48
 8009c34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009c38:	3b01      	subs	r3, #1
 8009c3a:	d503      	bpl.n	8009c44 <__sfp+0x28>
 8009c3c:	6833      	ldr	r3, [r6, #0]
 8009c3e:	b30b      	cbz	r3, 8009c84 <__sfp+0x68>
 8009c40:	6836      	ldr	r6, [r6, #0]
 8009c42:	e7f7      	b.n	8009c34 <__sfp+0x18>
 8009c44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009c48:	b9d5      	cbnz	r5, 8009c80 <__sfp+0x64>
 8009c4a:	4b16      	ldr	r3, [pc, #88]	; (8009ca4 <__sfp+0x88>)
 8009c4c:	60e3      	str	r3, [r4, #12]
 8009c4e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009c52:	6665      	str	r5, [r4, #100]	; 0x64
 8009c54:	f000 f847 	bl	8009ce6 <__retarget_lock_init_recursive>
 8009c58:	f7ff ff96 	bl	8009b88 <__sfp_lock_release>
 8009c5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009c60:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009c64:	6025      	str	r5, [r4, #0]
 8009c66:	61a5      	str	r5, [r4, #24]
 8009c68:	2208      	movs	r2, #8
 8009c6a:	4629      	mov	r1, r5
 8009c6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009c70:	f7ff fd2c 	bl	80096cc <memset>
 8009c74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009c78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009c7c:	4620      	mov	r0, r4
 8009c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c80:	3468      	adds	r4, #104	; 0x68
 8009c82:	e7d9      	b.n	8009c38 <__sfp+0x1c>
 8009c84:	2104      	movs	r1, #4
 8009c86:	4638      	mov	r0, r7
 8009c88:	f7ff ff62 	bl	8009b50 <__sfmoreglue>
 8009c8c:	4604      	mov	r4, r0
 8009c8e:	6030      	str	r0, [r6, #0]
 8009c90:	2800      	cmp	r0, #0
 8009c92:	d1d5      	bne.n	8009c40 <__sfp+0x24>
 8009c94:	f7ff ff78 	bl	8009b88 <__sfp_lock_release>
 8009c98:	230c      	movs	r3, #12
 8009c9a:	603b      	str	r3, [r7, #0]
 8009c9c:	e7ee      	b.n	8009c7c <__sfp+0x60>
 8009c9e:	bf00      	nop
 8009ca0:	0800a8d4 	.word	0x0800a8d4
 8009ca4:	ffff0001 	.word	0xffff0001

08009ca8 <_fwalk_reent>:
 8009ca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cac:	4606      	mov	r6, r0
 8009cae:	4688      	mov	r8, r1
 8009cb0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009cb4:	2700      	movs	r7, #0
 8009cb6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009cba:	f1b9 0901 	subs.w	r9, r9, #1
 8009cbe:	d505      	bpl.n	8009ccc <_fwalk_reent+0x24>
 8009cc0:	6824      	ldr	r4, [r4, #0]
 8009cc2:	2c00      	cmp	r4, #0
 8009cc4:	d1f7      	bne.n	8009cb6 <_fwalk_reent+0xe>
 8009cc6:	4638      	mov	r0, r7
 8009cc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ccc:	89ab      	ldrh	r3, [r5, #12]
 8009cce:	2b01      	cmp	r3, #1
 8009cd0:	d907      	bls.n	8009ce2 <_fwalk_reent+0x3a>
 8009cd2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009cd6:	3301      	adds	r3, #1
 8009cd8:	d003      	beq.n	8009ce2 <_fwalk_reent+0x3a>
 8009cda:	4629      	mov	r1, r5
 8009cdc:	4630      	mov	r0, r6
 8009cde:	47c0      	blx	r8
 8009ce0:	4307      	orrs	r7, r0
 8009ce2:	3568      	adds	r5, #104	; 0x68
 8009ce4:	e7e9      	b.n	8009cba <_fwalk_reent+0x12>

08009ce6 <__retarget_lock_init_recursive>:
 8009ce6:	4770      	bx	lr

08009ce8 <__retarget_lock_acquire_recursive>:
 8009ce8:	4770      	bx	lr

08009cea <__retarget_lock_release_recursive>:
 8009cea:	4770      	bx	lr

08009cec <__swhatbuf_r>:
 8009cec:	b570      	push	{r4, r5, r6, lr}
 8009cee:	460e      	mov	r6, r1
 8009cf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cf4:	2900      	cmp	r1, #0
 8009cf6:	b096      	sub	sp, #88	; 0x58
 8009cf8:	4614      	mov	r4, r2
 8009cfa:	461d      	mov	r5, r3
 8009cfc:	da08      	bge.n	8009d10 <__swhatbuf_r+0x24>
 8009cfe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009d02:	2200      	movs	r2, #0
 8009d04:	602a      	str	r2, [r5, #0]
 8009d06:	061a      	lsls	r2, r3, #24
 8009d08:	d410      	bmi.n	8009d2c <__swhatbuf_r+0x40>
 8009d0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d0e:	e00e      	b.n	8009d2e <__swhatbuf_r+0x42>
 8009d10:	466a      	mov	r2, sp
 8009d12:	f000 fc95 	bl	800a640 <_fstat_r>
 8009d16:	2800      	cmp	r0, #0
 8009d18:	dbf1      	blt.n	8009cfe <__swhatbuf_r+0x12>
 8009d1a:	9a01      	ldr	r2, [sp, #4]
 8009d1c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009d20:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009d24:	425a      	negs	r2, r3
 8009d26:	415a      	adcs	r2, r3
 8009d28:	602a      	str	r2, [r5, #0]
 8009d2a:	e7ee      	b.n	8009d0a <__swhatbuf_r+0x1e>
 8009d2c:	2340      	movs	r3, #64	; 0x40
 8009d2e:	2000      	movs	r0, #0
 8009d30:	6023      	str	r3, [r4, #0]
 8009d32:	b016      	add	sp, #88	; 0x58
 8009d34:	bd70      	pop	{r4, r5, r6, pc}
	...

08009d38 <__smakebuf_r>:
 8009d38:	898b      	ldrh	r3, [r1, #12]
 8009d3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009d3c:	079d      	lsls	r5, r3, #30
 8009d3e:	4606      	mov	r6, r0
 8009d40:	460c      	mov	r4, r1
 8009d42:	d507      	bpl.n	8009d54 <__smakebuf_r+0x1c>
 8009d44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009d48:	6023      	str	r3, [r4, #0]
 8009d4a:	6123      	str	r3, [r4, #16]
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	6163      	str	r3, [r4, #20]
 8009d50:	b002      	add	sp, #8
 8009d52:	bd70      	pop	{r4, r5, r6, pc}
 8009d54:	ab01      	add	r3, sp, #4
 8009d56:	466a      	mov	r2, sp
 8009d58:	f7ff ffc8 	bl	8009cec <__swhatbuf_r>
 8009d5c:	9900      	ldr	r1, [sp, #0]
 8009d5e:	4605      	mov	r5, r0
 8009d60:	4630      	mov	r0, r6
 8009d62:	f000 f895 	bl	8009e90 <_malloc_r>
 8009d66:	b948      	cbnz	r0, 8009d7c <__smakebuf_r+0x44>
 8009d68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d6c:	059a      	lsls	r2, r3, #22
 8009d6e:	d4ef      	bmi.n	8009d50 <__smakebuf_r+0x18>
 8009d70:	f023 0303 	bic.w	r3, r3, #3
 8009d74:	f043 0302 	orr.w	r3, r3, #2
 8009d78:	81a3      	strh	r3, [r4, #12]
 8009d7a:	e7e3      	b.n	8009d44 <__smakebuf_r+0xc>
 8009d7c:	4b0d      	ldr	r3, [pc, #52]	; (8009db4 <__smakebuf_r+0x7c>)
 8009d7e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009d80:	89a3      	ldrh	r3, [r4, #12]
 8009d82:	6020      	str	r0, [r4, #0]
 8009d84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d88:	81a3      	strh	r3, [r4, #12]
 8009d8a:	9b00      	ldr	r3, [sp, #0]
 8009d8c:	6163      	str	r3, [r4, #20]
 8009d8e:	9b01      	ldr	r3, [sp, #4]
 8009d90:	6120      	str	r0, [r4, #16]
 8009d92:	b15b      	cbz	r3, 8009dac <__smakebuf_r+0x74>
 8009d94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d98:	4630      	mov	r0, r6
 8009d9a:	f000 fc63 	bl	800a664 <_isatty_r>
 8009d9e:	b128      	cbz	r0, 8009dac <__smakebuf_r+0x74>
 8009da0:	89a3      	ldrh	r3, [r4, #12]
 8009da2:	f023 0303 	bic.w	r3, r3, #3
 8009da6:	f043 0301 	orr.w	r3, r3, #1
 8009daa:	81a3      	strh	r3, [r4, #12]
 8009dac:	89a0      	ldrh	r0, [r4, #12]
 8009dae:	4305      	orrs	r5, r0
 8009db0:	81a5      	strh	r5, [r4, #12]
 8009db2:	e7cd      	b.n	8009d50 <__smakebuf_r+0x18>
 8009db4:	08009b45 	.word	0x08009b45

08009db8 <_free_r>:
 8009db8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009dba:	2900      	cmp	r1, #0
 8009dbc:	d044      	beq.n	8009e48 <_free_r+0x90>
 8009dbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009dc2:	9001      	str	r0, [sp, #4]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	f1a1 0404 	sub.w	r4, r1, #4
 8009dca:	bfb8      	it	lt
 8009dcc:	18e4      	addlt	r4, r4, r3
 8009dce:	f000 fc6b 	bl	800a6a8 <__malloc_lock>
 8009dd2:	4a1e      	ldr	r2, [pc, #120]	; (8009e4c <_free_r+0x94>)
 8009dd4:	9801      	ldr	r0, [sp, #4]
 8009dd6:	6813      	ldr	r3, [r2, #0]
 8009dd8:	b933      	cbnz	r3, 8009de8 <_free_r+0x30>
 8009dda:	6063      	str	r3, [r4, #4]
 8009ddc:	6014      	str	r4, [r2, #0]
 8009dde:	b003      	add	sp, #12
 8009de0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009de4:	f000 bc66 	b.w	800a6b4 <__malloc_unlock>
 8009de8:	42a3      	cmp	r3, r4
 8009dea:	d908      	bls.n	8009dfe <_free_r+0x46>
 8009dec:	6825      	ldr	r5, [r4, #0]
 8009dee:	1961      	adds	r1, r4, r5
 8009df0:	428b      	cmp	r3, r1
 8009df2:	bf01      	itttt	eq
 8009df4:	6819      	ldreq	r1, [r3, #0]
 8009df6:	685b      	ldreq	r3, [r3, #4]
 8009df8:	1949      	addeq	r1, r1, r5
 8009dfa:	6021      	streq	r1, [r4, #0]
 8009dfc:	e7ed      	b.n	8009dda <_free_r+0x22>
 8009dfe:	461a      	mov	r2, r3
 8009e00:	685b      	ldr	r3, [r3, #4]
 8009e02:	b10b      	cbz	r3, 8009e08 <_free_r+0x50>
 8009e04:	42a3      	cmp	r3, r4
 8009e06:	d9fa      	bls.n	8009dfe <_free_r+0x46>
 8009e08:	6811      	ldr	r1, [r2, #0]
 8009e0a:	1855      	adds	r5, r2, r1
 8009e0c:	42a5      	cmp	r5, r4
 8009e0e:	d10b      	bne.n	8009e28 <_free_r+0x70>
 8009e10:	6824      	ldr	r4, [r4, #0]
 8009e12:	4421      	add	r1, r4
 8009e14:	1854      	adds	r4, r2, r1
 8009e16:	42a3      	cmp	r3, r4
 8009e18:	6011      	str	r1, [r2, #0]
 8009e1a:	d1e0      	bne.n	8009dde <_free_r+0x26>
 8009e1c:	681c      	ldr	r4, [r3, #0]
 8009e1e:	685b      	ldr	r3, [r3, #4]
 8009e20:	6053      	str	r3, [r2, #4]
 8009e22:	4421      	add	r1, r4
 8009e24:	6011      	str	r1, [r2, #0]
 8009e26:	e7da      	b.n	8009dde <_free_r+0x26>
 8009e28:	d902      	bls.n	8009e30 <_free_r+0x78>
 8009e2a:	230c      	movs	r3, #12
 8009e2c:	6003      	str	r3, [r0, #0]
 8009e2e:	e7d6      	b.n	8009dde <_free_r+0x26>
 8009e30:	6825      	ldr	r5, [r4, #0]
 8009e32:	1961      	adds	r1, r4, r5
 8009e34:	428b      	cmp	r3, r1
 8009e36:	bf04      	itt	eq
 8009e38:	6819      	ldreq	r1, [r3, #0]
 8009e3a:	685b      	ldreq	r3, [r3, #4]
 8009e3c:	6063      	str	r3, [r4, #4]
 8009e3e:	bf04      	itt	eq
 8009e40:	1949      	addeq	r1, r1, r5
 8009e42:	6021      	streq	r1, [r4, #0]
 8009e44:	6054      	str	r4, [r2, #4]
 8009e46:	e7ca      	b.n	8009dde <_free_r+0x26>
 8009e48:	b003      	add	sp, #12
 8009e4a:	bd30      	pop	{r4, r5, pc}
 8009e4c:	200044dc 	.word	0x200044dc

08009e50 <sbrk_aligned>:
 8009e50:	b570      	push	{r4, r5, r6, lr}
 8009e52:	4e0e      	ldr	r6, [pc, #56]	; (8009e8c <sbrk_aligned+0x3c>)
 8009e54:	460c      	mov	r4, r1
 8009e56:	6831      	ldr	r1, [r6, #0]
 8009e58:	4605      	mov	r5, r0
 8009e5a:	b911      	cbnz	r1, 8009e62 <sbrk_aligned+0x12>
 8009e5c:	f000 fb7a 	bl	800a554 <_sbrk_r>
 8009e60:	6030      	str	r0, [r6, #0]
 8009e62:	4621      	mov	r1, r4
 8009e64:	4628      	mov	r0, r5
 8009e66:	f000 fb75 	bl	800a554 <_sbrk_r>
 8009e6a:	1c43      	adds	r3, r0, #1
 8009e6c:	d00a      	beq.n	8009e84 <sbrk_aligned+0x34>
 8009e6e:	1cc4      	adds	r4, r0, #3
 8009e70:	f024 0403 	bic.w	r4, r4, #3
 8009e74:	42a0      	cmp	r0, r4
 8009e76:	d007      	beq.n	8009e88 <sbrk_aligned+0x38>
 8009e78:	1a21      	subs	r1, r4, r0
 8009e7a:	4628      	mov	r0, r5
 8009e7c:	f000 fb6a 	bl	800a554 <_sbrk_r>
 8009e80:	3001      	adds	r0, #1
 8009e82:	d101      	bne.n	8009e88 <sbrk_aligned+0x38>
 8009e84:	f04f 34ff 	mov.w	r4, #4294967295
 8009e88:	4620      	mov	r0, r4
 8009e8a:	bd70      	pop	{r4, r5, r6, pc}
 8009e8c:	200044e0 	.word	0x200044e0

08009e90 <_malloc_r>:
 8009e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e94:	1ccd      	adds	r5, r1, #3
 8009e96:	f025 0503 	bic.w	r5, r5, #3
 8009e9a:	3508      	adds	r5, #8
 8009e9c:	2d0c      	cmp	r5, #12
 8009e9e:	bf38      	it	cc
 8009ea0:	250c      	movcc	r5, #12
 8009ea2:	2d00      	cmp	r5, #0
 8009ea4:	4607      	mov	r7, r0
 8009ea6:	db01      	blt.n	8009eac <_malloc_r+0x1c>
 8009ea8:	42a9      	cmp	r1, r5
 8009eaa:	d905      	bls.n	8009eb8 <_malloc_r+0x28>
 8009eac:	230c      	movs	r3, #12
 8009eae:	603b      	str	r3, [r7, #0]
 8009eb0:	2600      	movs	r6, #0
 8009eb2:	4630      	mov	r0, r6
 8009eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009eb8:	4e2e      	ldr	r6, [pc, #184]	; (8009f74 <_malloc_r+0xe4>)
 8009eba:	f000 fbf5 	bl	800a6a8 <__malloc_lock>
 8009ebe:	6833      	ldr	r3, [r6, #0]
 8009ec0:	461c      	mov	r4, r3
 8009ec2:	bb34      	cbnz	r4, 8009f12 <_malloc_r+0x82>
 8009ec4:	4629      	mov	r1, r5
 8009ec6:	4638      	mov	r0, r7
 8009ec8:	f7ff ffc2 	bl	8009e50 <sbrk_aligned>
 8009ecc:	1c43      	adds	r3, r0, #1
 8009ece:	4604      	mov	r4, r0
 8009ed0:	d14d      	bne.n	8009f6e <_malloc_r+0xde>
 8009ed2:	6834      	ldr	r4, [r6, #0]
 8009ed4:	4626      	mov	r6, r4
 8009ed6:	2e00      	cmp	r6, #0
 8009ed8:	d140      	bne.n	8009f5c <_malloc_r+0xcc>
 8009eda:	6823      	ldr	r3, [r4, #0]
 8009edc:	4631      	mov	r1, r6
 8009ede:	4638      	mov	r0, r7
 8009ee0:	eb04 0803 	add.w	r8, r4, r3
 8009ee4:	f000 fb36 	bl	800a554 <_sbrk_r>
 8009ee8:	4580      	cmp	r8, r0
 8009eea:	d13a      	bne.n	8009f62 <_malloc_r+0xd2>
 8009eec:	6821      	ldr	r1, [r4, #0]
 8009eee:	3503      	adds	r5, #3
 8009ef0:	1a6d      	subs	r5, r5, r1
 8009ef2:	f025 0503 	bic.w	r5, r5, #3
 8009ef6:	3508      	adds	r5, #8
 8009ef8:	2d0c      	cmp	r5, #12
 8009efa:	bf38      	it	cc
 8009efc:	250c      	movcc	r5, #12
 8009efe:	4629      	mov	r1, r5
 8009f00:	4638      	mov	r0, r7
 8009f02:	f7ff ffa5 	bl	8009e50 <sbrk_aligned>
 8009f06:	3001      	adds	r0, #1
 8009f08:	d02b      	beq.n	8009f62 <_malloc_r+0xd2>
 8009f0a:	6823      	ldr	r3, [r4, #0]
 8009f0c:	442b      	add	r3, r5
 8009f0e:	6023      	str	r3, [r4, #0]
 8009f10:	e00e      	b.n	8009f30 <_malloc_r+0xa0>
 8009f12:	6822      	ldr	r2, [r4, #0]
 8009f14:	1b52      	subs	r2, r2, r5
 8009f16:	d41e      	bmi.n	8009f56 <_malloc_r+0xc6>
 8009f18:	2a0b      	cmp	r2, #11
 8009f1a:	d916      	bls.n	8009f4a <_malloc_r+0xba>
 8009f1c:	1961      	adds	r1, r4, r5
 8009f1e:	42a3      	cmp	r3, r4
 8009f20:	6025      	str	r5, [r4, #0]
 8009f22:	bf18      	it	ne
 8009f24:	6059      	strne	r1, [r3, #4]
 8009f26:	6863      	ldr	r3, [r4, #4]
 8009f28:	bf08      	it	eq
 8009f2a:	6031      	streq	r1, [r6, #0]
 8009f2c:	5162      	str	r2, [r4, r5]
 8009f2e:	604b      	str	r3, [r1, #4]
 8009f30:	4638      	mov	r0, r7
 8009f32:	f104 060b 	add.w	r6, r4, #11
 8009f36:	f000 fbbd 	bl	800a6b4 <__malloc_unlock>
 8009f3a:	f026 0607 	bic.w	r6, r6, #7
 8009f3e:	1d23      	adds	r3, r4, #4
 8009f40:	1af2      	subs	r2, r6, r3
 8009f42:	d0b6      	beq.n	8009eb2 <_malloc_r+0x22>
 8009f44:	1b9b      	subs	r3, r3, r6
 8009f46:	50a3      	str	r3, [r4, r2]
 8009f48:	e7b3      	b.n	8009eb2 <_malloc_r+0x22>
 8009f4a:	6862      	ldr	r2, [r4, #4]
 8009f4c:	42a3      	cmp	r3, r4
 8009f4e:	bf0c      	ite	eq
 8009f50:	6032      	streq	r2, [r6, #0]
 8009f52:	605a      	strne	r2, [r3, #4]
 8009f54:	e7ec      	b.n	8009f30 <_malloc_r+0xa0>
 8009f56:	4623      	mov	r3, r4
 8009f58:	6864      	ldr	r4, [r4, #4]
 8009f5a:	e7b2      	b.n	8009ec2 <_malloc_r+0x32>
 8009f5c:	4634      	mov	r4, r6
 8009f5e:	6876      	ldr	r6, [r6, #4]
 8009f60:	e7b9      	b.n	8009ed6 <_malloc_r+0x46>
 8009f62:	230c      	movs	r3, #12
 8009f64:	603b      	str	r3, [r7, #0]
 8009f66:	4638      	mov	r0, r7
 8009f68:	f000 fba4 	bl	800a6b4 <__malloc_unlock>
 8009f6c:	e7a1      	b.n	8009eb2 <_malloc_r+0x22>
 8009f6e:	6025      	str	r5, [r4, #0]
 8009f70:	e7de      	b.n	8009f30 <_malloc_r+0xa0>
 8009f72:	bf00      	nop
 8009f74:	200044dc 	.word	0x200044dc

08009f78 <__sfputc_r>:
 8009f78:	6893      	ldr	r3, [r2, #8]
 8009f7a:	3b01      	subs	r3, #1
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	b410      	push	{r4}
 8009f80:	6093      	str	r3, [r2, #8]
 8009f82:	da08      	bge.n	8009f96 <__sfputc_r+0x1e>
 8009f84:	6994      	ldr	r4, [r2, #24]
 8009f86:	42a3      	cmp	r3, r4
 8009f88:	db01      	blt.n	8009f8e <__sfputc_r+0x16>
 8009f8a:	290a      	cmp	r1, #10
 8009f8c:	d103      	bne.n	8009f96 <__sfputc_r+0x1e>
 8009f8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f92:	f7ff bc31 	b.w	80097f8 <__swbuf_r>
 8009f96:	6813      	ldr	r3, [r2, #0]
 8009f98:	1c58      	adds	r0, r3, #1
 8009f9a:	6010      	str	r0, [r2, #0]
 8009f9c:	7019      	strb	r1, [r3, #0]
 8009f9e:	4608      	mov	r0, r1
 8009fa0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fa4:	4770      	bx	lr

08009fa6 <__sfputs_r>:
 8009fa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fa8:	4606      	mov	r6, r0
 8009faa:	460f      	mov	r7, r1
 8009fac:	4614      	mov	r4, r2
 8009fae:	18d5      	adds	r5, r2, r3
 8009fb0:	42ac      	cmp	r4, r5
 8009fb2:	d101      	bne.n	8009fb8 <__sfputs_r+0x12>
 8009fb4:	2000      	movs	r0, #0
 8009fb6:	e007      	b.n	8009fc8 <__sfputs_r+0x22>
 8009fb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fbc:	463a      	mov	r2, r7
 8009fbe:	4630      	mov	r0, r6
 8009fc0:	f7ff ffda 	bl	8009f78 <__sfputc_r>
 8009fc4:	1c43      	adds	r3, r0, #1
 8009fc6:	d1f3      	bne.n	8009fb0 <__sfputs_r+0xa>
 8009fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009fcc <_vfiprintf_r>:
 8009fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fd0:	460d      	mov	r5, r1
 8009fd2:	b09d      	sub	sp, #116	; 0x74
 8009fd4:	4614      	mov	r4, r2
 8009fd6:	4698      	mov	r8, r3
 8009fd8:	4606      	mov	r6, r0
 8009fda:	b118      	cbz	r0, 8009fe4 <_vfiprintf_r+0x18>
 8009fdc:	6983      	ldr	r3, [r0, #24]
 8009fde:	b90b      	cbnz	r3, 8009fe4 <_vfiprintf_r+0x18>
 8009fe0:	f7ff fde4 	bl	8009bac <__sinit>
 8009fe4:	4b89      	ldr	r3, [pc, #548]	; (800a20c <_vfiprintf_r+0x240>)
 8009fe6:	429d      	cmp	r5, r3
 8009fe8:	d11b      	bne.n	800a022 <_vfiprintf_r+0x56>
 8009fea:	6875      	ldr	r5, [r6, #4]
 8009fec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009fee:	07d9      	lsls	r1, r3, #31
 8009ff0:	d405      	bmi.n	8009ffe <_vfiprintf_r+0x32>
 8009ff2:	89ab      	ldrh	r3, [r5, #12]
 8009ff4:	059a      	lsls	r2, r3, #22
 8009ff6:	d402      	bmi.n	8009ffe <_vfiprintf_r+0x32>
 8009ff8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ffa:	f7ff fe75 	bl	8009ce8 <__retarget_lock_acquire_recursive>
 8009ffe:	89ab      	ldrh	r3, [r5, #12]
 800a000:	071b      	lsls	r3, r3, #28
 800a002:	d501      	bpl.n	800a008 <_vfiprintf_r+0x3c>
 800a004:	692b      	ldr	r3, [r5, #16]
 800a006:	b9eb      	cbnz	r3, 800a044 <_vfiprintf_r+0x78>
 800a008:	4629      	mov	r1, r5
 800a00a:	4630      	mov	r0, r6
 800a00c:	f7ff fc46 	bl	800989c <__swsetup_r>
 800a010:	b1c0      	cbz	r0, 800a044 <_vfiprintf_r+0x78>
 800a012:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a014:	07dc      	lsls	r4, r3, #31
 800a016:	d50e      	bpl.n	800a036 <_vfiprintf_r+0x6a>
 800a018:	f04f 30ff 	mov.w	r0, #4294967295
 800a01c:	b01d      	add	sp, #116	; 0x74
 800a01e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a022:	4b7b      	ldr	r3, [pc, #492]	; (800a210 <_vfiprintf_r+0x244>)
 800a024:	429d      	cmp	r5, r3
 800a026:	d101      	bne.n	800a02c <_vfiprintf_r+0x60>
 800a028:	68b5      	ldr	r5, [r6, #8]
 800a02a:	e7df      	b.n	8009fec <_vfiprintf_r+0x20>
 800a02c:	4b79      	ldr	r3, [pc, #484]	; (800a214 <_vfiprintf_r+0x248>)
 800a02e:	429d      	cmp	r5, r3
 800a030:	bf08      	it	eq
 800a032:	68f5      	ldreq	r5, [r6, #12]
 800a034:	e7da      	b.n	8009fec <_vfiprintf_r+0x20>
 800a036:	89ab      	ldrh	r3, [r5, #12]
 800a038:	0598      	lsls	r0, r3, #22
 800a03a:	d4ed      	bmi.n	800a018 <_vfiprintf_r+0x4c>
 800a03c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a03e:	f7ff fe54 	bl	8009cea <__retarget_lock_release_recursive>
 800a042:	e7e9      	b.n	800a018 <_vfiprintf_r+0x4c>
 800a044:	2300      	movs	r3, #0
 800a046:	9309      	str	r3, [sp, #36]	; 0x24
 800a048:	2320      	movs	r3, #32
 800a04a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a04e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a052:	2330      	movs	r3, #48	; 0x30
 800a054:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a218 <_vfiprintf_r+0x24c>
 800a058:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a05c:	f04f 0901 	mov.w	r9, #1
 800a060:	4623      	mov	r3, r4
 800a062:	469a      	mov	sl, r3
 800a064:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a068:	b10a      	cbz	r2, 800a06e <_vfiprintf_r+0xa2>
 800a06a:	2a25      	cmp	r2, #37	; 0x25
 800a06c:	d1f9      	bne.n	800a062 <_vfiprintf_r+0x96>
 800a06e:	ebba 0b04 	subs.w	fp, sl, r4
 800a072:	d00b      	beq.n	800a08c <_vfiprintf_r+0xc0>
 800a074:	465b      	mov	r3, fp
 800a076:	4622      	mov	r2, r4
 800a078:	4629      	mov	r1, r5
 800a07a:	4630      	mov	r0, r6
 800a07c:	f7ff ff93 	bl	8009fa6 <__sfputs_r>
 800a080:	3001      	adds	r0, #1
 800a082:	f000 80aa 	beq.w	800a1da <_vfiprintf_r+0x20e>
 800a086:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a088:	445a      	add	r2, fp
 800a08a:	9209      	str	r2, [sp, #36]	; 0x24
 800a08c:	f89a 3000 	ldrb.w	r3, [sl]
 800a090:	2b00      	cmp	r3, #0
 800a092:	f000 80a2 	beq.w	800a1da <_vfiprintf_r+0x20e>
 800a096:	2300      	movs	r3, #0
 800a098:	f04f 32ff 	mov.w	r2, #4294967295
 800a09c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0a0:	f10a 0a01 	add.w	sl, sl, #1
 800a0a4:	9304      	str	r3, [sp, #16]
 800a0a6:	9307      	str	r3, [sp, #28]
 800a0a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0ac:	931a      	str	r3, [sp, #104]	; 0x68
 800a0ae:	4654      	mov	r4, sl
 800a0b0:	2205      	movs	r2, #5
 800a0b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0b6:	4858      	ldr	r0, [pc, #352]	; (800a218 <_vfiprintf_r+0x24c>)
 800a0b8:	f7f6 f89a 	bl	80001f0 <memchr>
 800a0bc:	9a04      	ldr	r2, [sp, #16]
 800a0be:	b9d8      	cbnz	r0, 800a0f8 <_vfiprintf_r+0x12c>
 800a0c0:	06d1      	lsls	r1, r2, #27
 800a0c2:	bf44      	itt	mi
 800a0c4:	2320      	movmi	r3, #32
 800a0c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0ca:	0713      	lsls	r3, r2, #28
 800a0cc:	bf44      	itt	mi
 800a0ce:	232b      	movmi	r3, #43	; 0x2b
 800a0d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0d4:	f89a 3000 	ldrb.w	r3, [sl]
 800a0d8:	2b2a      	cmp	r3, #42	; 0x2a
 800a0da:	d015      	beq.n	800a108 <_vfiprintf_r+0x13c>
 800a0dc:	9a07      	ldr	r2, [sp, #28]
 800a0de:	4654      	mov	r4, sl
 800a0e0:	2000      	movs	r0, #0
 800a0e2:	f04f 0c0a 	mov.w	ip, #10
 800a0e6:	4621      	mov	r1, r4
 800a0e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0ec:	3b30      	subs	r3, #48	; 0x30
 800a0ee:	2b09      	cmp	r3, #9
 800a0f0:	d94e      	bls.n	800a190 <_vfiprintf_r+0x1c4>
 800a0f2:	b1b0      	cbz	r0, 800a122 <_vfiprintf_r+0x156>
 800a0f4:	9207      	str	r2, [sp, #28]
 800a0f6:	e014      	b.n	800a122 <_vfiprintf_r+0x156>
 800a0f8:	eba0 0308 	sub.w	r3, r0, r8
 800a0fc:	fa09 f303 	lsl.w	r3, r9, r3
 800a100:	4313      	orrs	r3, r2
 800a102:	9304      	str	r3, [sp, #16]
 800a104:	46a2      	mov	sl, r4
 800a106:	e7d2      	b.n	800a0ae <_vfiprintf_r+0xe2>
 800a108:	9b03      	ldr	r3, [sp, #12]
 800a10a:	1d19      	adds	r1, r3, #4
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	9103      	str	r1, [sp, #12]
 800a110:	2b00      	cmp	r3, #0
 800a112:	bfbb      	ittet	lt
 800a114:	425b      	neglt	r3, r3
 800a116:	f042 0202 	orrlt.w	r2, r2, #2
 800a11a:	9307      	strge	r3, [sp, #28]
 800a11c:	9307      	strlt	r3, [sp, #28]
 800a11e:	bfb8      	it	lt
 800a120:	9204      	strlt	r2, [sp, #16]
 800a122:	7823      	ldrb	r3, [r4, #0]
 800a124:	2b2e      	cmp	r3, #46	; 0x2e
 800a126:	d10c      	bne.n	800a142 <_vfiprintf_r+0x176>
 800a128:	7863      	ldrb	r3, [r4, #1]
 800a12a:	2b2a      	cmp	r3, #42	; 0x2a
 800a12c:	d135      	bne.n	800a19a <_vfiprintf_r+0x1ce>
 800a12e:	9b03      	ldr	r3, [sp, #12]
 800a130:	1d1a      	adds	r2, r3, #4
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	9203      	str	r2, [sp, #12]
 800a136:	2b00      	cmp	r3, #0
 800a138:	bfb8      	it	lt
 800a13a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a13e:	3402      	adds	r4, #2
 800a140:	9305      	str	r3, [sp, #20]
 800a142:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a228 <_vfiprintf_r+0x25c>
 800a146:	7821      	ldrb	r1, [r4, #0]
 800a148:	2203      	movs	r2, #3
 800a14a:	4650      	mov	r0, sl
 800a14c:	f7f6 f850 	bl	80001f0 <memchr>
 800a150:	b140      	cbz	r0, 800a164 <_vfiprintf_r+0x198>
 800a152:	2340      	movs	r3, #64	; 0x40
 800a154:	eba0 000a 	sub.w	r0, r0, sl
 800a158:	fa03 f000 	lsl.w	r0, r3, r0
 800a15c:	9b04      	ldr	r3, [sp, #16]
 800a15e:	4303      	orrs	r3, r0
 800a160:	3401      	adds	r4, #1
 800a162:	9304      	str	r3, [sp, #16]
 800a164:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a168:	482c      	ldr	r0, [pc, #176]	; (800a21c <_vfiprintf_r+0x250>)
 800a16a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a16e:	2206      	movs	r2, #6
 800a170:	f7f6 f83e 	bl	80001f0 <memchr>
 800a174:	2800      	cmp	r0, #0
 800a176:	d03f      	beq.n	800a1f8 <_vfiprintf_r+0x22c>
 800a178:	4b29      	ldr	r3, [pc, #164]	; (800a220 <_vfiprintf_r+0x254>)
 800a17a:	bb1b      	cbnz	r3, 800a1c4 <_vfiprintf_r+0x1f8>
 800a17c:	9b03      	ldr	r3, [sp, #12]
 800a17e:	3307      	adds	r3, #7
 800a180:	f023 0307 	bic.w	r3, r3, #7
 800a184:	3308      	adds	r3, #8
 800a186:	9303      	str	r3, [sp, #12]
 800a188:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a18a:	443b      	add	r3, r7
 800a18c:	9309      	str	r3, [sp, #36]	; 0x24
 800a18e:	e767      	b.n	800a060 <_vfiprintf_r+0x94>
 800a190:	fb0c 3202 	mla	r2, ip, r2, r3
 800a194:	460c      	mov	r4, r1
 800a196:	2001      	movs	r0, #1
 800a198:	e7a5      	b.n	800a0e6 <_vfiprintf_r+0x11a>
 800a19a:	2300      	movs	r3, #0
 800a19c:	3401      	adds	r4, #1
 800a19e:	9305      	str	r3, [sp, #20]
 800a1a0:	4619      	mov	r1, r3
 800a1a2:	f04f 0c0a 	mov.w	ip, #10
 800a1a6:	4620      	mov	r0, r4
 800a1a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1ac:	3a30      	subs	r2, #48	; 0x30
 800a1ae:	2a09      	cmp	r2, #9
 800a1b0:	d903      	bls.n	800a1ba <_vfiprintf_r+0x1ee>
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d0c5      	beq.n	800a142 <_vfiprintf_r+0x176>
 800a1b6:	9105      	str	r1, [sp, #20]
 800a1b8:	e7c3      	b.n	800a142 <_vfiprintf_r+0x176>
 800a1ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1be:	4604      	mov	r4, r0
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	e7f0      	b.n	800a1a6 <_vfiprintf_r+0x1da>
 800a1c4:	ab03      	add	r3, sp, #12
 800a1c6:	9300      	str	r3, [sp, #0]
 800a1c8:	462a      	mov	r2, r5
 800a1ca:	4b16      	ldr	r3, [pc, #88]	; (800a224 <_vfiprintf_r+0x258>)
 800a1cc:	a904      	add	r1, sp, #16
 800a1ce:	4630      	mov	r0, r6
 800a1d0:	f3af 8000 	nop.w
 800a1d4:	4607      	mov	r7, r0
 800a1d6:	1c78      	adds	r0, r7, #1
 800a1d8:	d1d6      	bne.n	800a188 <_vfiprintf_r+0x1bc>
 800a1da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1dc:	07d9      	lsls	r1, r3, #31
 800a1de:	d405      	bmi.n	800a1ec <_vfiprintf_r+0x220>
 800a1e0:	89ab      	ldrh	r3, [r5, #12]
 800a1e2:	059a      	lsls	r2, r3, #22
 800a1e4:	d402      	bmi.n	800a1ec <_vfiprintf_r+0x220>
 800a1e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1e8:	f7ff fd7f 	bl	8009cea <__retarget_lock_release_recursive>
 800a1ec:	89ab      	ldrh	r3, [r5, #12]
 800a1ee:	065b      	lsls	r3, r3, #25
 800a1f0:	f53f af12 	bmi.w	800a018 <_vfiprintf_r+0x4c>
 800a1f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1f6:	e711      	b.n	800a01c <_vfiprintf_r+0x50>
 800a1f8:	ab03      	add	r3, sp, #12
 800a1fa:	9300      	str	r3, [sp, #0]
 800a1fc:	462a      	mov	r2, r5
 800a1fe:	4b09      	ldr	r3, [pc, #36]	; (800a224 <_vfiprintf_r+0x258>)
 800a200:	a904      	add	r1, sp, #16
 800a202:	4630      	mov	r0, r6
 800a204:	f000 f880 	bl	800a308 <_printf_i>
 800a208:	e7e4      	b.n	800a1d4 <_vfiprintf_r+0x208>
 800a20a:	bf00      	nop
 800a20c:	0800a8f8 	.word	0x0800a8f8
 800a210:	0800a918 	.word	0x0800a918
 800a214:	0800a8d8 	.word	0x0800a8d8
 800a218:	0800a938 	.word	0x0800a938
 800a21c:	0800a942 	.word	0x0800a942
 800a220:	00000000 	.word	0x00000000
 800a224:	08009fa7 	.word	0x08009fa7
 800a228:	0800a93e 	.word	0x0800a93e

0800a22c <_printf_common>:
 800a22c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a230:	4616      	mov	r6, r2
 800a232:	4699      	mov	r9, r3
 800a234:	688a      	ldr	r2, [r1, #8]
 800a236:	690b      	ldr	r3, [r1, #16]
 800a238:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a23c:	4293      	cmp	r3, r2
 800a23e:	bfb8      	it	lt
 800a240:	4613      	movlt	r3, r2
 800a242:	6033      	str	r3, [r6, #0]
 800a244:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a248:	4607      	mov	r7, r0
 800a24a:	460c      	mov	r4, r1
 800a24c:	b10a      	cbz	r2, 800a252 <_printf_common+0x26>
 800a24e:	3301      	adds	r3, #1
 800a250:	6033      	str	r3, [r6, #0]
 800a252:	6823      	ldr	r3, [r4, #0]
 800a254:	0699      	lsls	r1, r3, #26
 800a256:	bf42      	ittt	mi
 800a258:	6833      	ldrmi	r3, [r6, #0]
 800a25a:	3302      	addmi	r3, #2
 800a25c:	6033      	strmi	r3, [r6, #0]
 800a25e:	6825      	ldr	r5, [r4, #0]
 800a260:	f015 0506 	ands.w	r5, r5, #6
 800a264:	d106      	bne.n	800a274 <_printf_common+0x48>
 800a266:	f104 0a19 	add.w	sl, r4, #25
 800a26a:	68e3      	ldr	r3, [r4, #12]
 800a26c:	6832      	ldr	r2, [r6, #0]
 800a26e:	1a9b      	subs	r3, r3, r2
 800a270:	42ab      	cmp	r3, r5
 800a272:	dc26      	bgt.n	800a2c2 <_printf_common+0x96>
 800a274:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a278:	1e13      	subs	r3, r2, #0
 800a27a:	6822      	ldr	r2, [r4, #0]
 800a27c:	bf18      	it	ne
 800a27e:	2301      	movne	r3, #1
 800a280:	0692      	lsls	r2, r2, #26
 800a282:	d42b      	bmi.n	800a2dc <_printf_common+0xb0>
 800a284:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a288:	4649      	mov	r1, r9
 800a28a:	4638      	mov	r0, r7
 800a28c:	47c0      	blx	r8
 800a28e:	3001      	adds	r0, #1
 800a290:	d01e      	beq.n	800a2d0 <_printf_common+0xa4>
 800a292:	6823      	ldr	r3, [r4, #0]
 800a294:	68e5      	ldr	r5, [r4, #12]
 800a296:	6832      	ldr	r2, [r6, #0]
 800a298:	f003 0306 	and.w	r3, r3, #6
 800a29c:	2b04      	cmp	r3, #4
 800a29e:	bf08      	it	eq
 800a2a0:	1aad      	subeq	r5, r5, r2
 800a2a2:	68a3      	ldr	r3, [r4, #8]
 800a2a4:	6922      	ldr	r2, [r4, #16]
 800a2a6:	bf0c      	ite	eq
 800a2a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a2ac:	2500      	movne	r5, #0
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	bfc4      	itt	gt
 800a2b2:	1a9b      	subgt	r3, r3, r2
 800a2b4:	18ed      	addgt	r5, r5, r3
 800a2b6:	2600      	movs	r6, #0
 800a2b8:	341a      	adds	r4, #26
 800a2ba:	42b5      	cmp	r5, r6
 800a2bc:	d11a      	bne.n	800a2f4 <_printf_common+0xc8>
 800a2be:	2000      	movs	r0, #0
 800a2c0:	e008      	b.n	800a2d4 <_printf_common+0xa8>
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	4652      	mov	r2, sl
 800a2c6:	4649      	mov	r1, r9
 800a2c8:	4638      	mov	r0, r7
 800a2ca:	47c0      	blx	r8
 800a2cc:	3001      	adds	r0, #1
 800a2ce:	d103      	bne.n	800a2d8 <_printf_common+0xac>
 800a2d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a2d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2d8:	3501      	adds	r5, #1
 800a2da:	e7c6      	b.n	800a26a <_printf_common+0x3e>
 800a2dc:	18e1      	adds	r1, r4, r3
 800a2de:	1c5a      	adds	r2, r3, #1
 800a2e0:	2030      	movs	r0, #48	; 0x30
 800a2e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a2e6:	4422      	add	r2, r4
 800a2e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a2ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a2f0:	3302      	adds	r3, #2
 800a2f2:	e7c7      	b.n	800a284 <_printf_common+0x58>
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	4622      	mov	r2, r4
 800a2f8:	4649      	mov	r1, r9
 800a2fa:	4638      	mov	r0, r7
 800a2fc:	47c0      	blx	r8
 800a2fe:	3001      	adds	r0, #1
 800a300:	d0e6      	beq.n	800a2d0 <_printf_common+0xa4>
 800a302:	3601      	adds	r6, #1
 800a304:	e7d9      	b.n	800a2ba <_printf_common+0x8e>
	...

0800a308 <_printf_i>:
 800a308:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a30c:	7e0f      	ldrb	r7, [r1, #24]
 800a30e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a310:	2f78      	cmp	r7, #120	; 0x78
 800a312:	4691      	mov	r9, r2
 800a314:	4680      	mov	r8, r0
 800a316:	460c      	mov	r4, r1
 800a318:	469a      	mov	sl, r3
 800a31a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a31e:	d807      	bhi.n	800a330 <_printf_i+0x28>
 800a320:	2f62      	cmp	r7, #98	; 0x62
 800a322:	d80a      	bhi.n	800a33a <_printf_i+0x32>
 800a324:	2f00      	cmp	r7, #0
 800a326:	f000 80d8 	beq.w	800a4da <_printf_i+0x1d2>
 800a32a:	2f58      	cmp	r7, #88	; 0x58
 800a32c:	f000 80a3 	beq.w	800a476 <_printf_i+0x16e>
 800a330:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a334:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a338:	e03a      	b.n	800a3b0 <_printf_i+0xa8>
 800a33a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a33e:	2b15      	cmp	r3, #21
 800a340:	d8f6      	bhi.n	800a330 <_printf_i+0x28>
 800a342:	a101      	add	r1, pc, #4	; (adr r1, 800a348 <_printf_i+0x40>)
 800a344:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a348:	0800a3a1 	.word	0x0800a3a1
 800a34c:	0800a3b5 	.word	0x0800a3b5
 800a350:	0800a331 	.word	0x0800a331
 800a354:	0800a331 	.word	0x0800a331
 800a358:	0800a331 	.word	0x0800a331
 800a35c:	0800a331 	.word	0x0800a331
 800a360:	0800a3b5 	.word	0x0800a3b5
 800a364:	0800a331 	.word	0x0800a331
 800a368:	0800a331 	.word	0x0800a331
 800a36c:	0800a331 	.word	0x0800a331
 800a370:	0800a331 	.word	0x0800a331
 800a374:	0800a4c1 	.word	0x0800a4c1
 800a378:	0800a3e5 	.word	0x0800a3e5
 800a37c:	0800a4a3 	.word	0x0800a4a3
 800a380:	0800a331 	.word	0x0800a331
 800a384:	0800a331 	.word	0x0800a331
 800a388:	0800a4e3 	.word	0x0800a4e3
 800a38c:	0800a331 	.word	0x0800a331
 800a390:	0800a3e5 	.word	0x0800a3e5
 800a394:	0800a331 	.word	0x0800a331
 800a398:	0800a331 	.word	0x0800a331
 800a39c:	0800a4ab 	.word	0x0800a4ab
 800a3a0:	682b      	ldr	r3, [r5, #0]
 800a3a2:	1d1a      	adds	r2, r3, #4
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	602a      	str	r2, [r5, #0]
 800a3a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a3ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	e0a3      	b.n	800a4fc <_printf_i+0x1f4>
 800a3b4:	6820      	ldr	r0, [r4, #0]
 800a3b6:	6829      	ldr	r1, [r5, #0]
 800a3b8:	0606      	lsls	r6, r0, #24
 800a3ba:	f101 0304 	add.w	r3, r1, #4
 800a3be:	d50a      	bpl.n	800a3d6 <_printf_i+0xce>
 800a3c0:	680e      	ldr	r6, [r1, #0]
 800a3c2:	602b      	str	r3, [r5, #0]
 800a3c4:	2e00      	cmp	r6, #0
 800a3c6:	da03      	bge.n	800a3d0 <_printf_i+0xc8>
 800a3c8:	232d      	movs	r3, #45	; 0x2d
 800a3ca:	4276      	negs	r6, r6
 800a3cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3d0:	485e      	ldr	r0, [pc, #376]	; (800a54c <_printf_i+0x244>)
 800a3d2:	230a      	movs	r3, #10
 800a3d4:	e019      	b.n	800a40a <_printf_i+0x102>
 800a3d6:	680e      	ldr	r6, [r1, #0]
 800a3d8:	602b      	str	r3, [r5, #0]
 800a3da:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a3de:	bf18      	it	ne
 800a3e0:	b236      	sxthne	r6, r6
 800a3e2:	e7ef      	b.n	800a3c4 <_printf_i+0xbc>
 800a3e4:	682b      	ldr	r3, [r5, #0]
 800a3e6:	6820      	ldr	r0, [r4, #0]
 800a3e8:	1d19      	adds	r1, r3, #4
 800a3ea:	6029      	str	r1, [r5, #0]
 800a3ec:	0601      	lsls	r1, r0, #24
 800a3ee:	d501      	bpl.n	800a3f4 <_printf_i+0xec>
 800a3f0:	681e      	ldr	r6, [r3, #0]
 800a3f2:	e002      	b.n	800a3fa <_printf_i+0xf2>
 800a3f4:	0646      	lsls	r6, r0, #25
 800a3f6:	d5fb      	bpl.n	800a3f0 <_printf_i+0xe8>
 800a3f8:	881e      	ldrh	r6, [r3, #0]
 800a3fa:	4854      	ldr	r0, [pc, #336]	; (800a54c <_printf_i+0x244>)
 800a3fc:	2f6f      	cmp	r7, #111	; 0x6f
 800a3fe:	bf0c      	ite	eq
 800a400:	2308      	moveq	r3, #8
 800a402:	230a      	movne	r3, #10
 800a404:	2100      	movs	r1, #0
 800a406:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a40a:	6865      	ldr	r5, [r4, #4]
 800a40c:	60a5      	str	r5, [r4, #8]
 800a40e:	2d00      	cmp	r5, #0
 800a410:	bfa2      	ittt	ge
 800a412:	6821      	ldrge	r1, [r4, #0]
 800a414:	f021 0104 	bicge.w	r1, r1, #4
 800a418:	6021      	strge	r1, [r4, #0]
 800a41a:	b90e      	cbnz	r6, 800a420 <_printf_i+0x118>
 800a41c:	2d00      	cmp	r5, #0
 800a41e:	d04d      	beq.n	800a4bc <_printf_i+0x1b4>
 800a420:	4615      	mov	r5, r2
 800a422:	fbb6 f1f3 	udiv	r1, r6, r3
 800a426:	fb03 6711 	mls	r7, r3, r1, r6
 800a42a:	5dc7      	ldrb	r7, [r0, r7]
 800a42c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a430:	4637      	mov	r7, r6
 800a432:	42bb      	cmp	r3, r7
 800a434:	460e      	mov	r6, r1
 800a436:	d9f4      	bls.n	800a422 <_printf_i+0x11a>
 800a438:	2b08      	cmp	r3, #8
 800a43a:	d10b      	bne.n	800a454 <_printf_i+0x14c>
 800a43c:	6823      	ldr	r3, [r4, #0]
 800a43e:	07de      	lsls	r6, r3, #31
 800a440:	d508      	bpl.n	800a454 <_printf_i+0x14c>
 800a442:	6923      	ldr	r3, [r4, #16]
 800a444:	6861      	ldr	r1, [r4, #4]
 800a446:	4299      	cmp	r1, r3
 800a448:	bfde      	ittt	le
 800a44a:	2330      	movle	r3, #48	; 0x30
 800a44c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a450:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a454:	1b52      	subs	r2, r2, r5
 800a456:	6122      	str	r2, [r4, #16]
 800a458:	f8cd a000 	str.w	sl, [sp]
 800a45c:	464b      	mov	r3, r9
 800a45e:	aa03      	add	r2, sp, #12
 800a460:	4621      	mov	r1, r4
 800a462:	4640      	mov	r0, r8
 800a464:	f7ff fee2 	bl	800a22c <_printf_common>
 800a468:	3001      	adds	r0, #1
 800a46a:	d14c      	bne.n	800a506 <_printf_i+0x1fe>
 800a46c:	f04f 30ff 	mov.w	r0, #4294967295
 800a470:	b004      	add	sp, #16
 800a472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a476:	4835      	ldr	r0, [pc, #212]	; (800a54c <_printf_i+0x244>)
 800a478:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a47c:	6829      	ldr	r1, [r5, #0]
 800a47e:	6823      	ldr	r3, [r4, #0]
 800a480:	f851 6b04 	ldr.w	r6, [r1], #4
 800a484:	6029      	str	r1, [r5, #0]
 800a486:	061d      	lsls	r5, r3, #24
 800a488:	d514      	bpl.n	800a4b4 <_printf_i+0x1ac>
 800a48a:	07df      	lsls	r7, r3, #31
 800a48c:	bf44      	itt	mi
 800a48e:	f043 0320 	orrmi.w	r3, r3, #32
 800a492:	6023      	strmi	r3, [r4, #0]
 800a494:	b91e      	cbnz	r6, 800a49e <_printf_i+0x196>
 800a496:	6823      	ldr	r3, [r4, #0]
 800a498:	f023 0320 	bic.w	r3, r3, #32
 800a49c:	6023      	str	r3, [r4, #0]
 800a49e:	2310      	movs	r3, #16
 800a4a0:	e7b0      	b.n	800a404 <_printf_i+0xfc>
 800a4a2:	6823      	ldr	r3, [r4, #0]
 800a4a4:	f043 0320 	orr.w	r3, r3, #32
 800a4a8:	6023      	str	r3, [r4, #0]
 800a4aa:	2378      	movs	r3, #120	; 0x78
 800a4ac:	4828      	ldr	r0, [pc, #160]	; (800a550 <_printf_i+0x248>)
 800a4ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a4b2:	e7e3      	b.n	800a47c <_printf_i+0x174>
 800a4b4:	0659      	lsls	r1, r3, #25
 800a4b6:	bf48      	it	mi
 800a4b8:	b2b6      	uxthmi	r6, r6
 800a4ba:	e7e6      	b.n	800a48a <_printf_i+0x182>
 800a4bc:	4615      	mov	r5, r2
 800a4be:	e7bb      	b.n	800a438 <_printf_i+0x130>
 800a4c0:	682b      	ldr	r3, [r5, #0]
 800a4c2:	6826      	ldr	r6, [r4, #0]
 800a4c4:	6961      	ldr	r1, [r4, #20]
 800a4c6:	1d18      	adds	r0, r3, #4
 800a4c8:	6028      	str	r0, [r5, #0]
 800a4ca:	0635      	lsls	r5, r6, #24
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	d501      	bpl.n	800a4d4 <_printf_i+0x1cc>
 800a4d0:	6019      	str	r1, [r3, #0]
 800a4d2:	e002      	b.n	800a4da <_printf_i+0x1d2>
 800a4d4:	0670      	lsls	r0, r6, #25
 800a4d6:	d5fb      	bpl.n	800a4d0 <_printf_i+0x1c8>
 800a4d8:	8019      	strh	r1, [r3, #0]
 800a4da:	2300      	movs	r3, #0
 800a4dc:	6123      	str	r3, [r4, #16]
 800a4de:	4615      	mov	r5, r2
 800a4e0:	e7ba      	b.n	800a458 <_printf_i+0x150>
 800a4e2:	682b      	ldr	r3, [r5, #0]
 800a4e4:	1d1a      	adds	r2, r3, #4
 800a4e6:	602a      	str	r2, [r5, #0]
 800a4e8:	681d      	ldr	r5, [r3, #0]
 800a4ea:	6862      	ldr	r2, [r4, #4]
 800a4ec:	2100      	movs	r1, #0
 800a4ee:	4628      	mov	r0, r5
 800a4f0:	f7f5 fe7e 	bl	80001f0 <memchr>
 800a4f4:	b108      	cbz	r0, 800a4fa <_printf_i+0x1f2>
 800a4f6:	1b40      	subs	r0, r0, r5
 800a4f8:	6060      	str	r0, [r4, #4]
 800a4fa:	6863      	ldr	r3, [r4, #4]
 800a4fc:	6123      	str	r3, [r4, #16]
 800a4fe:	2300      	movs	r3, #0
 800a500:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a504:	e7a8      	b.n	800a458 <_printf_i+0x150>
 800a506:	6923      	ldr	r3, [r4, #16]
 800a508:	462a      	mov	r2, r5
 800a50a:	4649      	mov	r1, r9
 800a50c:	4640      	mov	r0, r8
 800a50e:	47d0      	blx	sl
 800a510:	3001      	adds	r0, #1
 800a512:	d0ab      	beq.n	800a46c <_printf_i+0x164>
 800a514:	6823      	ldr	r3, [r4, #0]
 800a516:	079b      	lsls	r3, r3, #30
 800a518:	d413      	bmi.n	800a542 <_printf_i+0x23a>
 800a51a:	68e0      	ldr	r0, [r4, #12]
 800a51c:	9b03      	ldr	r3, [sp, #12]
 800a51e:	4298      	cmp	r0, r3
 800a520:	bfb8      	it	lt
 800a522:	4618      	movlt	r0, r3
 800a524:	e7a4      	b.n	800a470 <_printf_i+0x168>
 800a526:	2301      	movs	r3, #1
 800a528:	4632      	mov	r2, r6
 800a52a:	4649      	mov	r1, r9
 800a52c:	4640      	mov	r0, r8
 800a52e:	47d0      	blx	sl
 800a530:	3001      	adds	r0, #1
 800a532:	d09b      	beq.n	800a46c <_printf_i+0x164>
 800a534:	3501      	adds	r5, #1
 800a536:	68e3      	ldr	r3, [r4, #12]
 800a538:	9903      	ldr	r1, [sp, #12]
 800a53a:	1a5b      	subs	r3, r3, r1
 800a53c:	42ab      	cmp	r3, r5
 800a53e:	dcf2      	bgt.n	800a526 <_printf_i+0x21e>
 800a540:	e7eb      	b.n	800a51a <_printf_i+0x212>
 800a542:	2500      	movs	r5, #0
 800a544:	f104 0619 	add.w	r6, r4, #25
 800a548:	e7f5      	b.n	800a536 <_printf_i+0x22e>
 800a54a:	bf00      	nop
 800a54c:	0800a949 	.word	0x0800a949
 800a550:	0800a95a 	.word	0x0800a95a

0800a554 <_sbrk_r>:
 800a554:	b538      	push	{r3, r4, r5, lr}
 800a556:	4d06      	ldr	r5, [pc, #24]	; (800a570 <_sbrk_r+0x1c>)
 800a558:	2300      	movs	r3, #0
 800a55a:	4604      	mov	r4, r0
 800a55c:	4608      	mov	r0, r1
 800a55e:	602b      	str	r3, [r5, #0]
 800a560:	f7f7 f85a 	bl	8001618 <_sbrk>
 800a564:	1c43      	adds	r3, r0, #1
 800a566:	d102      	bne.n	800a56e <_sbrk_r+0x1a>
 800a568:	682b      	ldr	r3, [r5, #0]
 800a56a:	b103      	cbz	r3, 800a56e <_sbrk_r+0x1a>
 800a56c:	6023      	str	r3, [r4, #0]
 800a56e:	bd38      	pop	{r3, r4, r5, pc}
 800a570:	200044e4 	.word	0x200044e4

0800a574 <__sread>:
 800a574:	b510      	push	{r4, lr}
 800a576:	460c      	mov	r4, r1
 800a578:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a57c:	f000 f8a0 	bl	800a6c0 <_read_r>
 800a580:	2800      	cmp	r0, #0
 800a582:	bfab      	itete	ge
 800a584:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a586:	89a3      	ldrhlt	r3, [r4, #12]
 800a588:	181b      	addge	r3, r3, r0
 800a58a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a58e:	bfac      	ite	ge
 800a590:	6563      	strge	r3, [r4, #84]	; 0x54
 800a592:	81a3      	strhlt	r3, [r4, #12]
 800a594:	bd10      	pop	{r4, pc}

0800a596 <__swrite>:
 800a596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a59a:	461f      	mov	r7, r3
 800a59c:	898b      	ldrh	r3, [r1, #12]
 800a59e:	05db      	lsls	r3, r3, #23
 800a5a0:	4605      	mov	r5, r0
 800a5a2:	460c      	mov	r4, r1
 800a5a4:	4616      	mov	r6, r2
 800a5a6:	d505      	bpl.n	800a5b4 <__swrite+0x1e>
 800a5a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5ac:	2302      	movs	r3, #2
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	f000 f868 	bl	800a684 <_lseek_r>
 800a5b4:	89a3      	ldrh	r3, [r4, #12]
 800a5b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a5be:	81a3      	strh	r3, [r4, #12]
 800a5c0:	4632      	mov	r2, r6
 800a5c2:	463b      	mov	r3, r7
 800a5c4:	4628      	mov	r0, r5
 800a5c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5ca:	f000 b817 	b.w	800a5fc <_write_r>

0800a5ce <__sseek>:
 800a5ce:	b510      	push	{r4, lr}
 800a5d0:	460c      	mov	r4, r1
 800a5d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5d6:	f000 f855 	bl	800a684 <_lseek_r>
 800a5da:	1c43      	adds	r3, r0, #1
 800a5dc:	89a3      	ldrh	r3, [r4, #12]
 800a5de:	bf15      	itete	ne
 800a5e0:	6560      	strne	r0, [r4, #84]	; 0x54
 800a5e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a5e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a5ea:	81a3      	strheq	r3, [r4, #12]
 800a5ec:	bf18      	it	ne
 800a5ee:	81a3      	strhne	r3, [r4, #12]
 800a5f0:	bd10      	pop	{r4, pc}

0800a5f2 <__sclose>:
 800a5f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5f6:	f000 b813 	b.w	800a620 <_close_r>
	...

0800a5fc <_write_r>:
 800a5fc:	b538      	push	{r3, r4, r5, lr}
 800a5fe:	4d07      	ldr	r5, [pc, #28]	; (800a61c <_write_r+0x20>)
 800a600:	4604      	mov	r4, r0
 800a602:	4608      	mov	r0, r1
 800a604:	4611      	mov	r1, r2
 800a606:	2200      	movs	r2, #0
 800a608:	602a      	str	r2, [r5, #0]
 800a60a:	461a      	mov	r2, r3
 800a60c:	f7f6 ffb3 	bl	8001576 <_write>
 800a610:	1c43      	adds	r3, r0, #1
 800a612:	d102      	bne.n	800a61a <_write_r+0x1e>
 800a614:	682b      	ldr	r3, [r5, #0]
 800a616:	b103      	cbz	r3, 800a61a <_write_r+0x1e>
 800a618:	6023      	str	r3, [r4, #0]
 800a61a:	bd38      	pop	{r3, r4, r5, pc}
 800a61c:	200044e4 	.word	0x200044e4

0800a620 <_close_r>:
 800a620:	b538      	push	{r3, r4, r5, lr}
 800a622:	4d06      	ldr	r5, [pc, #24]	; (800a63c <_close_r+0x1c>)
 800a624:	2300      	movs	r3, #0
 800a626:	4604      	mov	r4, r0
 800a628:	4608      	mov	r0, r1
 800a62a:	602b      	str	r3, [r5, #0]
 800a62c:	f7f6 ffbf 	bl	80015ae <_close>
 800a630:	1c43      	adds	r3, r0, #1
 800a632:	d102      	bne.n	800a63a <_close_r+0x1a>
 800a634:	682b      	ldr	r3, [r5, #0]
 800a636:	b103      	cbz	r3, 800a63a <_close_r+0x1a>
 800a638:	6023      	str	r3, [r4, #0]
 800a63a:	bd38      	pop	{r3, r4, r5, pc}
 800a63c:	200044e4 	.word	0x200044e4

0800a640 <_fstat_r>:
 800a640:	b538      	push	{r3, r4, r5, lr}
 800a642:	4d07      	ldr	r5, [pc, #28]	; (800a660 <_fstat_r+0x20>)
 800a644:	2300      	movs	r3, #0
 800a646:	4604      	mov	r4, r0
 800a648:	4608      	mov	r0, r1
 800a64a:	4611      	mov	r1, r2
 800a64c:	602b      	str	r3, [r5, #0]
 800a64e:	f7f6 ffba 	bl	80015c6 <_fstat>
 800a652:	1c43      	adds	r3, r0, #1
 800a654:	d102      	bne.n	800a65c <_fstat_r+0x1c>
 800a656:	682b      	ldr	r3, [r5, #0]
 800a658:	b103      	cbz	r3, 800a65c <_fstat_r+0x1c>
 800a65a:	6023      	str	r3, [r4, #0]
 800a65c:	bd38      	pop	{r3, r4, r5, pc}
 800a65e:	bf00      	nop
 800a660:	200044e4 	.word	0x200044e4

0800a664 <_isatty_r>:
 800a664:	b538      	push	{r3, r4, r5, lr}
 800a666:	4d06      	ldr	r5, [pc, #24]	; (800a680 <_isatty_r+0x1c>)
 800a668:	2300      	movs	r3, #0
 800a66a:	4604      	mov	r4, r0
 800a66c:	4608      	mov	r0, r1
 800a66e:	602b      	str	r3, [r5, #0]
 800a670:	f7f6 ffb9 	bl	80015e6 <_isatty>
 800a674:	1c43      	adds	r3, r0, #1
 800a676:	d102      	bne.n	800a67e <_isatty_r+0x1a>
 800a678:	682b      	ldr	r3, [r5, #0]
 800a67a:	b103      	cbz	r3, 800a67e <_isatty_r+0x1a>
 800a67c:	6023      	str	r3, [r4, #0]
 800a67e:	bd38      	pop	{r3, r4, r5, pc}
 800a680:	200044e4 	.word	0x200044e4

0800a684 <_lseek_r>:
 800a684:	b538      	push	{r3, r4, r5, lr}
 800a686:	4d07      	ldr	r5, [pc, #28]	; (800a6a4 <_lseek_r+0x20>)
 800a688:	4604      	mov	r4, r0
 800a68a:	4608      	mov	r0, r1
 800a68c:	4611      	mov	r1, r2
 800a68e:	2200      	movs	r2, #0
 800a690:	602a      	str	r2, [r5, #0]
 800a692:	461a      	mov	r2, r3
 800a694:	f7f6 ffb2 	bl	80015fc <_lseek>
 800a698:	1c43      	adds	r3, r0, #1
 800a69a:	d102      	bne.n	800a6a2 <_lseek_r+0x1e>
 800a69c:	682b      	ldr	r3, [r5, #0]
 800a69e:	b103      	cbz	r3, 800a6a2 <_lseek_r+0x1e>
 800a6a0:	6023      	str	r3, [r4, #0]
 800a6a2:	bd38      	pop	{r3, r4, r5, pc}
 800a6a4:	200044e4 	.word	0x200044e4

0800a6a8 <__malloc_lock>:
 800a6a8:	4801      	ldr	r0, [pc, #4]	; (800a6b0 <__malloc_lock+0x8>)
 800a6aa:	f7ff bb1d 	b.w	8009ce8 <__retarget_lock_acquire_recursive>
 800a6ae:	bf00      	nop
 800a6b0:	200044d8 	.word	0x200044d8

0800a6b4 <__malloc_unlock>:
 800a6b4:	4801      	ldr	r0, [pc, #4]	; (800a6bc <__malloc_unlock+0x8>)
 800a6b6:	f7ff bb18 	b.w	8009cea <__retarget_lock_release_recursive>
 800a6ba:	bf00      	nop
 800a6bc:	200044d8 	.word	0x200044d8

0800a6c0 <_read_r>:
 800a6c0:	b538      	push	{r3, r4, r5, lr}
 800a6c2:	4d07      	ldr	r5, [pc, #28]	; (800a6e0 <_read_r+0x20>)
 800a6c4:	4604      	mov	r4, r0
 800a6c6:	4608      	mov	r0, r1
 800a6c8:	4611      	mov	r1, r2
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	602a      	str	r2, [r5, #0]
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	f7f6 ff34 	bl	800153c <_read>
 800a6d4:	1c43      	adds	r3, r0, #1
 800a6d6:	d102      	bne.n	800a6de <_read_r+0x1e>
 800a6d8:	682b      	ldr	r3, [r5, #0]
 800a6da:	b103      	cbz	r3, 800a6de <_read_r+0x1e>
 800a6dc:	6023      	str	r3, [r4, #0]
 800a6de:	bd38      	pop	{r3, r4, r5, pc}
 800a6e0:	200044e4 	.word	0x200044e4

0800a6e4 <_init>:
 800a6e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6e6:	bf00      	nop
 800a6e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6ea:	bc08      	pop	{r3}
 800a6ec:	469e      	mov	lr, r3
 800a6ee:	4770      	bx	lr

0800a6f0 <_fini>:
 800a6f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6f2:	bf00      	nop
 800a6f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6f6:	bc08      	pop	{r3}
 800a6f8:	469e      	mov	lr, r3
 800a6fa:	4770      	bx	lr
