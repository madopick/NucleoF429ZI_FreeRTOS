
F429ZI_FRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f634  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cf4  0800f7e8  0800f7e8  0001f7e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080104dc  080104dc  000303b4  2**0
                  CONTENTS
  4 .ARM          00000008  080104dc  080104dc  000204dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080104e4  080104e4  000303b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080104e4  080104e4  000204e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080104e8  080104e8  000204e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003b4  20000000  080104ec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000303b4  2**0
                  CONTENTS
 10 .bss          000052b0  200003b4  200003b4  000303b4  2**2
                  ALLOC
 11 ._user_heap_stack 00001004  20005664  20005664  000303b4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000303b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020627  00000000  00000000  000303e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000480f  00000000  00000000  00050a0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c50  00000000  00000000  00055220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001ae0  00000000  00000000  00056e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028a45  00000000  00000000  00058950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021308  00000000  00000000  00081395  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ea205  00000000  00000000  000a269d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0018c8a2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000089b4  00000000  00000000  0018c8f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200003b4 	.word	0x200003b4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800f7cc 	.word	0x0800f7cc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200003b8 	.word	0x200003b8
 80001ec:	0800f7cc 	.word	0x0800f7cc

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b974 	b.w	8000ec8 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468e      	mov	lr, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14d      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4694      	mov	ip, r2
 8000c0a:	d969      	bls.n	8000ce0 <__udivmoddi4+0xe8>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b152      	cbz	r2, 8000c28 <__udivmoddi4+0x30>
 8000c12:	fa01 f302 	lsl.w	r3, r1, r2
 8000c16:	f1c2 0120 	rsb	r1, r2, #32
 8000c1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c22:	ea41 0e03 	orr.w	lr, r1, r3
 8000c26:	4094      	lsls	r4, r2
 8000c28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c2c:	0c21      	lsrs	r1, r4, #16
 8000c2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c32:	fa1f f78c 	uxth.w	r7, ip
 8000c36:	fb08 e316 	mls	r3, r8, r6, lr
 8000c3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c3e:	fb06 f107 	mul.w	r1, r6, r7
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4e:	f080 811f 	bcs.w	8000e90 <__udivmoddi4+0x298>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 811c 	bls.w	8000e90 <__udivmoddi4+0x298>
 8000c58:	3e02      	subs	r6, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a5b      	subs	r3, r3, r1
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c64:	fb08 3310 	mls	r3, r8, r0, r3
 8000c68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c6c:	fb00 f707 	mul.w	r7, r0, r7
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x92>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7c:	f080 810a 	bcs.w	8000e94 <__udivmoddi4+0x29c>
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	f240 8107 	bls.w	8000e94 <__udivmoddi4+0x29c>
 8000c86:	4464      	add	r4, ip
 8000c88:	3802      	subs	r0, #2
 8000c8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c8e:	1be4      	subs	r4, r4, r7
 8000c90:	2600      	movs	r6, #0
 8000c92:	b11d      	cbz	r5, 8000c9c <__udivmoddi4+0xa4>
 8000c94:	40d4      	lsrs	r4, r2
 8000c96:	2300      	movs	r3, #0
 8000c98:	e9c5 4300 	strd	r4, r3, [r5]
 8000c9c:	4631      	mov	r1, r6
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d909      	bls.n	8000cba <__udivmoddi4+0xc2>
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	f000 80ef 	beq.w	8000e8a <__udivmoddi4+0x292>
 8000cac:	2600      	movs	r6, #0
 8000cae:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	4631      	mov	r1, r6
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	fab3 f683 	clz	r6, r3
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	d14a      	bne.n	8000d58 <__udivmoddi4+0x160>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xd4>
 8000cc6:	4282      	cmp	r2, r0
 8000cc8:	f200 80f9 	bhi.w	8000ebe <__udivmoddi4+0x2c6>
 8000ccc:	1a84      	subs	r4, r0, r2
 8000cce:	eb61 0303 	sbc.w	r3, r1, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	469e      	mov	lr, r3
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	d0e0      	beq.n	8000c9c <__udivmoddi4+0xa4>
 8000cda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cde:	e7dd      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000ce0:	b902      	cbnz	r2, 8000ce4 <__udivmoddi4+0xec>
 8000ce2:	deff      	udf	#255	; 0xff
 8000ce4:	fab2 f282 	clz	r2, r2
 8000ce8:	2a00      	cmp	r2, #0
 8000cea:	f040 8092 	bne.w	8000e12 <__udivmoddi4+0x21a>
 8000cee:	eba1 010c 	sub.w	r1, r1, ip
 8000cf2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf6:	fa1f fe8c 	uxth.w	lr, ip
 8000cfa:	2601      	movs	r6, #1
 8000cfc:	0c20      	lsrs	r0, r4, #16
 8000cfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d02:	fb07 1113 	mls	r1, r7, r3, r1
 8000d06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d0a:	fb0e f003 	mul.w	r0, lr, r3
 8000d0e:	4288      	cmp	r0, r1
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x12c>
 8000d12:	eb1c 0101 	adds.w	r1, ip, r1
 8000d16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x12a>
 8000d1c:	4288      	cmp	r0, r1
 8000d1e:	f200 80cb 	bhi.w	8000eb8 <__udivmoddi4+0x2c0>
 8000d22:	4643      	mov	r3, r8
 8000d24:	1a09      	subs	r1, r1, r0
 8000d26:	b2a4      	uxth	r4, r4
 8000d28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d34:	fb0e fe00 	mul.w	lr, lr, r0
 8000d38:	45a6      	cmp	lr, r4
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x156>
 8000d3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d44:	d202      	bcs.n	8000d4c <__udivmoddi4+0x154>
 8000d46:	45a6      	cmp	lr, r4
 8000d48:	f200 80bb 	bhi.w	8000ec2 <__udivmoddi4+0x2ca>
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	eba4 040e 	sub.w	r4, r4, lr
 8000d52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d56:	e79c      	b.n	8000c92 <__udivmoddi4+0x9a>
 8000d58:	f1c6 0720 	rsb	r7, r6, #32
 8000d5c:	40b3      	lsls	r3, r6
 8000d5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d66:	fa20 f407 	lsr.w	r4, r0, r7
 8000d6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d6e:	431c      	orrs	r4, r3
 8000d70:	40f9      	lsrs	r1, r7
 8000d72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d76:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d7e:	0c20      	lsrs	r0, r4, #16
 8000d80:	fa1f fe8c 	uxth.w	lr, ip
 8000d84:	fb09 1118 	mls	r1, r9, r8, r1
 8000d88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d90:	4288      	cmp	r0, r1
 8000d92:	fa02 f206 	lsl.w	r2, r2, r6
 8000d96:	d90b      	bls.n	8000db0 <__udivmoddi4+0x1b8>
 8000d98:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da0:	f080 8088 	bcs.w	8000eb4 <__udivmoddi4+0x2bc>
 8000da4:	4288      	cmp	r0, r1
 8000da6:	f240 8085 	bls.w	8000eb4 <__udivmoddi4+0x2bc>
 8000daa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dae:	4461      	add	r1, ip
 8000db0:	1a09      	subs	r1, r1, r0
 8000db2:	b2a4      	uxth	r4, r4
 8000db4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000db8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dbc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc4:	458e      	cmp	lr, r1
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x1e2>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd0:	d26c      	bcs.n	8000eac <__udivmoddi4+0x2b4>
 8000dd2:	458e      	cmp	lr, r1
 8000dd4:	d96a      	bls.n	8000eac <__udivmoddi4+0x2b4>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	4461      	add	r1, ip
 8000dda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dde:	fba0 9402 	umull	r9, r4, r0, r2
 8000de2:	eba1 010e 	sub.w	r1, r1, lr
 8000de6:	42a1      	cmp	r1, r4
 8000de8:	46c8      	mov	r8, r9
 8000dea:	46a6      	mov	lr, r4
 8000dec:	d356      	bcc.n	8000e9c <__udivmoddi4+0x2a4>
 8000dee:	d053      	beq.n	8000e98 <__udivmoddi4+0x2a0>
 8000df0:	b15d      	cbz	r5, 8000e0a <__udivmoddi4+0x212>
 8000df2:	ebb3 0208 	subs.w	r2, r3, r8
 8000df6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dfa:	fa01 f707 	lsl.w	r7, r1, r7
 8000dfe:	fa22 f306 	lsr.w	r3, r2, r6
 8000e02:	40f1      	lsrs	r1, r6
 8000e04:	431f      	orrs	r7, r3
 8000e06:	e9c5 7100 	strd	r7, r1, [r5]
 8000e0a:	2600      	movs	r6, #0
 8000e0c:	4631      	mov	r1, r6
 8000e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e12:	f1c2 0320 	rsb	r3, r2, #32
 8000e16:	40d8      	lsrs	r0, r3
 8000e18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e20:	4091      	lsls	r1, r2
 8000e22:	4301      	orrs	r1, r0
 8000e24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e28:	fa1f fe8c 	uxth.w	lr, ip
 8000e2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e30:	fb07 3610 	mls	r6, r7, r0, r3
 8000e34:	0c0b      	lsrs	r3, r1, #16
 8000e36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e3e:	429e      	cmp	r6, r3
 8000e40:	fa04 f402 	lsl.w	r4, r4, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x260>
 8000e46:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4e:	d22f      	bcs.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e50:	429e      	cmp	r6, r3
 8000e52:	d92d      	bls.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e54:	3802      	subs	r0, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1b9b      	subs	r3, r3, r6
 8000e5a:	b289      	uxth	r1, r1
 8000e5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e60:	fb07 3316 	mls	r3, r7, r6, r3
 8000e64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e68:	fb06 f30e 	mul.w	r3, r6, lr
 8000e6c:	428b      	cmp	r3, r1
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x28a>
 8000e70:	eb1c 0101 	adds.w	r1, ip, r1
 8000e74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e78:	d216      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d914      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7e:	3e02      	subs	r6, #2
 8000e80:	4461      	add	r1, ip
 8000e82:	1ac9      	subs	r1, r1, r3
 8000e84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e88:	e738      	b.n	8000cfc <__udivmoddi4+0x104>
 8000e8a:	462e      	mov	r6, r5
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	e705      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000e90:	4606      	mov	r6, r0
 8000e92:	e6e3      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e94:	4618      	mov	r0, r3
 8000e96:	e6f8      	b.n	8000c8a <__udivmoddi4+0x92>
 8000e98:	454b      	cmp	r3, r9
 8000e9a:	d2a9      	bcs.n	8000df0 <__udivmoddi4+0x1f8>
 8000e9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	e7a3      	b.n	8000df0 <__udivmoddi4+0x1f8>
 8000ea8:	4646      	mov	r6, r8
 8000eaa:	e7ea      	b.n	8000e82 <__udivmoddi4+0x28a>
 8000eac:	4620      	mov	r0, r4
 8000eae:	e794      	b.n	8000dda <__udivmoddi4+0x1e2>
 8000eb0:	4640      	mov	r0, r8
 8000eb2:	e7d1      	b.n	8000e58 <__udivmoddi4+0x260>
 8000eb4:	46d0      	mov	r8, sl
 8000eb6:	e77b      	b.n	8000db0 <__udivmoddi4+0x1b8>
 8000eb8:	3b02      	subs	r3, #2
 8000eba:	4461      	add	r1, ip
 8000ebc:	e732      	b.n	8000d24 <__udivmoddi4+0x12c>
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	e709      	b.n	8000cd6 <__udivmoddi4+0xde>
 8000ec2:	4464      	add	r4, ip
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	e742      	b.n	8000d4e <__udivmoddi4+0x156>

08000ec8 <__aeabi_idiv0>:
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer 	= &xIdleTaskTCBBuffer;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	4a07      	ldr	r2, [pc, #28]	; (8000ef8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000edc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer 	= &xIdleStack[0];
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	4a06      	ldr	r2, [pc, #24]	; (8000efc <vApplicationGetIdleTaskMemory+0x30>)
 8000ee2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize 	= configMINIMAL_STACK_SIZE;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2280      	movs	r2, #128	; 0x80
 8000ee8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000eea:	bf00      	nop
 8000eec:	3714      	adds	r7, #20
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	200003d0 	.word	0x200003d0
 8000efc:	20000430 	.word	0x20000430

08000f00 <vApplicationGetTimerTaskMemory>:

static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer 	= &xTimerTaskTCBBuffer;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	4a07      	ldr	r2, [pc, #28]	; (8000f2c <vApplicationGetTimerTaskMemory+0x2c>)
 8000f10:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer 	= &xTimerStack[0];
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	4a06      	ldr	r2, [pc, #24]	; (8000f30 <vApplicationGetTimerTaskMemory+0x30>)
 8000f16:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize 	= configTIMER_TASK_STACK_DEPTH;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f1e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f20:	bf00      	nop
 8000f22:	3714      	adds	r7, #20
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	20000630 	.word	0x20000630
 8000f30:	20000690 	.word	0x20000690

08000f34 <tim3_get_counter>:

/****************************************************************************
 * @brief This function handles TIM3 global interrupt. (Calculate Process)
 ***************************************************************************/
uint32_t tim3_get_counter(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
	return tim3_counter;
 8000f38:	4b03      	ldr	r3, [pc, #12]	; (8000f48 <tim3_get_counter+0x14>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	20000df4 	.word	0x20000df4

08000f4c <vConfigureTimerForRunTimeStats>:

/****************************************************************************
 * @brief This function handles TIM3 global interrupt. (Calculate Process)
 ***************************************************************************/
void vConfigureTimerForRunTimeStats( void )
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
	htim3.Instance 					= TIM3;
 8000f50:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <vConfigureTimerForRunTimeStats+0x54>)
 8000f52:	4a14      	ldr	r2, [pc, #80]	; (8000fa4 <vConfigureTimerForRunTimeStats+0x58>)
 8000f54:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler 			= 45-1;			//TIM APB1 is 45 MHZ so divide by 45 get 1MHz, 1us delay
 8000f56:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <vConfigureTimerForRunTimeStats+0x54>)
 8000f58:	222c      	movs	r2, #44	; 0x2c
 8000f5a:	605a      	str	r2, [r3, #4]
	htim3.Init.Period 				= 100-1;		//100us timer
 8000f5c:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <vConfigureTimerForRunTimeStats+0x54>)
 8000f5e:	2263      	movs	r2, #99	; 0x63
 8000f60:	60da      	str	r2, [r3, #12]

	htim3.Init.CounterMode 			= TIM_COUNTERMODE_UP;
 8000f62:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <vConfigureTimerForRunTimeStats+0x54>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	609a      	str	r2, [r3, #8]
	htim3.Init.ClockDivision 		= TIM_CLOCKDIVISION_DIV1;
 8000f68:	4b0d      	ldr	r3, [pc, #52]	; (8000fa0 <vConfigureTimerForRunTimeStats+0x54>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload 	= TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f6e:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <vConfigureTimerForRunTimeStats+0x54>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f74:	480a      	ldr	r0, [pc, #40]	; (8000fa0 <vConfigureTimerForRunTimeStats+0x54>)
 8000f76:	f006 f98f 	bl	8007298 <HAL_TIM_Base_Init>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d003      	beq.n	8000f88 <vConfigureTimerForRunTimeStats+0x3c>
	{
		Error_Handler(__FILE__, __LINE__);
 8000f80:	217d      	movs	r1, #125	; 0x7d
 8000f82:	4809      	ldr	r0, [pc, #36]	; (8000fa8 <vConfigureTimerForRunTimeStats+0x5c>)
 8000f84:	f000 fd6c 	bl	8001a60 <Error_Handler>
	}

	if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 8000f88:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <vConfigureTimerForRunTimeStats+0x54>)
 8000f8a:	f006 f9d5 	bl	8007338 <HAL_TIM_Base_Start_IT>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d003      	beq.n	8000f9c <vConfigureTimerForRunTimeStats+0x50>
	{
		Error_Handler(__FILE__, __LINE__);
 8000f94:	2182      	movs	r1, #130	; 0x82
 8000f96:	4804      	ldr	r0, [pc, #16]	; (8000fa8 <vConfigureTimerForRunTimeStats+0x5c>)
 8000f98:	f000 fd62 	bl	8001a60 <Error_Handler>
	}
}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20000d84 	.word	0x20000d84
 8000fa4:	40000400 	.word	0x40000400
 8000fa8:	0800f7f4 	.word	0x0800f7f4

08000fac <TIM3_IRQHandler>:

/****************************************************************************
 * @brief This function handles TIM3 global interrupt. (Calculate Process)
 ***************************************************************************/
void TIM3_IRQHandler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim3);
 8000fb0:	4802      	ldr	r0, [pc, #8]	; (8000fbc <TIM3_IRQHandler+0x10>)
 8000fb2:	f006 fa31 	bl	8007418 <HAL_TIM_IRQHandler>
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000d84 	.word	0x20000d84

08000fc0 <vApplicationMallocFailedHook>:
 * internally by FreeRTOS API functions that create tasks, queues, software
 * timers, and semaphores.  The size of the FreeRTOS heap is set by the
 * configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h.
 ***************************************************************************/
void vApplicationMallocFailedHook( void )
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
	printf("Malloc Failed!!!\r\n\n");
 8000fc4:	4801      	ldr	r0, [pc, #4]	; (8000fcc <vApplicationMallocFailedHook+0xc>)
 8000fc6:	f00c f971 	bl	800d2ac <puts>
	for( ;; );
 8000fca:	e7fe      	b.n	8000fca <vApplicationMallocFailedHook+0xa>
 8000fcc:	0800f808 	.word	0x0800f808

08000fd0 <vApplicationStackOverflowHook>:
}


void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
	//( void ) pcTaskName;
	//( void ) pxTask;

	printf("stack overflow @%s !!!\r\n\n", pcTaskName);
 8000fda:	6839      	ldr	r1, [r7, #0]
 8000fdc:	4801      	ldr	r0, [pc, #4]	; (8000fe4 <vApplicationStackOverflowHook+0x14>)
 8000fde:	f00c f8df 	bl	800d1a0 <iprintf>

	/* Run time stack overflow checking is performed if
	configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	for( ;; );
 8000fe2:	e7fe      	b.n	8000fe2 <vApplicationStackOverflowHook+0x12>
 8000fe4:	0800f81c 	.word	0x0800f81c

08000fe8 <vApplicationIdleHook>:
/************************************************************
  * @brief  The application idle hook.
  * @retval void
  ***********************************************************/
void vApplicationIdleHook( void )
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
	volatile size_t xFreeStackSpace;

	/* This function is called on each cycle of the idle task.  In this case it
	does nothing useful, other than report the amout of FreeRTOS heap that
	remains unallocated. */
	xFreeStackSpace = xPortGetFreeHeapSize();
 8000fee:	f00b fb65 	bl	800c6bc <xPortGetFreeHeapSize>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	607b      	str	r3, [r7, #4]

	if( xFreeStackSpace > 100 )
 8000ff6:	687b      	ldr	r3, [r7, #4]
		/* By now, the kernel has allocated everything it is going to, so
		if there is a lot of heap remaining unallocated then
		the value of configTOTAL_HEAP_SIZE in FreeRTOSConfig.h can be
		reduced accordingly. */
	}
}
 8000ff8:	bf00      	nop
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <vApplicationTickHook>:
/************************************************************
  * @brief  The application tick hook.
  * @retval void
  ***********************************************************/
void vApplicationTickHook( void )
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0

}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
	...

08001010 <main>:
/************************************************************
  * @brief  The application entry point.
  * @retval int
  ***********************************************************/
int main(void)
{
 8001010:	b5b0      	push	{r4, r5, r7, lr}
 8001012:	b08a      	sub	sp, #40	; 0x28
 8001014:	af02      	add	r7, sp, #8
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001016:	f002 fc81 	bl	800391c <HAL_Init>

  /* Configure the system clock (HSE- PLL 180 MHz) */
  SystemClock_Config();
 800101a:	f000 fad9 	bl	80015d0 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800101e:	f000 fc35 	bl	800188c <MX_GPIO_Init>
  MX_DMA_Init();
 8001022:	f000 fbed 	bl	8001800 <MX_DMA_Init>
  MX_CRC_Init();
 8001026:	f000 fb4f 	bl	80016c8 <MX_CRC_Init>
  MX_I2C1_Init();
 800102a:	f000 fb65 	bl	80016f8 <MX_I2C1_Init>
  UARTPeriph.init(115200);
 800102e:	4b73      	ldr	r3, [pc, #460]	; (80011fc <main+0x1ec>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8001036:	4798      	blx	r3
  MX_SPI1_Init();
 8001038:	f000 fbaa 	bl	8001790 <MX_SPI1_Init>

  SystemCoreClockUpdate();
 800103c:	f001 f9fa 	bl	8002434 <SystemCoreClockUpdate>
  printf("\r\nMCU @ %ld MHz\r\n",SystemCoreClock/1000000);
 8001040:	4b6f      	ldr	r3, [pc, #444]	; (8001200 <main+0x1f0>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a6f      	ldr	r2, [pc, #444]	; (8001204 <main+0x1f4>)
 8001046:	fba2 2303 	umull	r2, r3, r2, r3
 800104a:	0c9b      	lsrs	r3, r3, #18
 800104c:	4619      	mov	r1, r3
 800104e:	486e      	ldr	r0, [pc, #440]	; (8001208 <main+0x1f8>)
 8001050:	f00c f8a6 	bl	800d1a0 <iprintf>
  printf("HCLK=%.2f MHz\r\n", (float)HAL_RCC_GetHCLKFreq()/1000000);
 8001054:	f005 ff12 	bl	8006e7c <HAL_RCC_GetHCLKFreq>
 8001058:	ee07 0a90 	vmov	s15, r0
 800105c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001060:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800120c <main+0x1fc>
 8001064:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001068:	ee16 0a90 	vmov	r0, s13
 800106c:	f7ff fa7c 	bl	8000568 <__aeabi_f2d>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	4866      	ldr	r0, [pc, #408]	; (8001210 <main+0x200>)
 8001076:	f00c f893 	bl	800d1a0 <iprintf>
  printf("APB1=%.2f MHz\r\n", (float)HAL_RCC_GetPCLK1Freq()/1000000);
 800107a:	f005 ff0b 	bl	8006e94 <HAL_RCC_GetPCLK1Freq>
 800107e:	ee07 0a90 	vmov	s15, r0
 8001082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001086:	ed9f 7a61 	vldr	s14, [pc, #388]	; 800120c <main+0x1fc>
 800108a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800108e:	ee16 0a90 	vmov	r0, s13
 8001092:	f7ff fa69 	bl	8000568 <__aeabi_f2d>
 8001096:	4602      	mov	r2, r0
 8001098:	460b      	mov	r3, r1
 800109a:	485e      	ldr	r0, [pc, #376]	; (8001214 <main+0x204>)
 800109c:	f00c f880 	bl	800d1a0 <iprintf>
  printf("APB2=%.2f MHz\r\n", (float)HAL_RCC_GetPCLK2Freq()/1000000);
 80010a0:	f005 ff0c 	bl	8006ebc <HAL_RCC_GetPCLK2Freq>
 80010a4:	ee07 0a90 	vmov	s15, r0
 80010a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010ac:	ed9f 7a57 	vldr	s14, [pc, #348]	; 800120c <main+0x1fc>
 80010b0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80010b4:	ee16 0a90 	vmov	r0, s13
 80010b8:	f7ff fa56 	bl	8000568 <__aeabi_f2d>
 80010bc:	4602      	mov	r2, r0
 80010be:	460b      	mov	r3, r1
 80010c0:	4855      	ldr	r0, [pc, #340]	; (8001218 <main+0x208>)
 80010c2:	f00c f86d 	bl	800d1a0 <iprintf>
  printf("\r\nHW Initialization OK\r\n");
 80010c6:	4855      	ldr	r0, [pc, #340]	; (800121c <main+0x20c>)
 80010c8:	f00c f8f0 	bl	800d2ac <puts>

  /* RTOS_TIMER */
  osTimers = xTimerCreate("timer5Sec", 					/* name */
 80010cc:	4b54      	ldr	r3, [pc, #336]	; (8001220 <main+0x210>)
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	2300      	movs	r3, #0
 80010d2:	2201      	movs	r2, #1
 80010d4:	f241 3188 	movw	r1, #5000	; 0x1388
 80010d8:	4852      	ldr	r0, [pc, #328]	; (8001224 <main+0x214>)
 80010da:	f00a fc25 	bl	800b928 <xTimerCreate>
 80010de:	4603      	mov	r3, r0
 80010e0:	4a51      	ldr	r2, [pc, #324]	; (8001228 <main+0x218>)
 80010e2:	6013      	str	r3, [r2, #0]
		  	  	  	  	  pdMS_TO_TICKS(5000), 			/* period/time */
						  pdTRUE, 						/* auto reload */
						  (void*)0, 					/* timer ID */
						  vTimerCallback5SecExpired); 	/* callback */
  if (osTimers==NULL) {
 80010e4:	4b50      	ldr	r3, [pc, #320]	; (8001228 <main+0x218>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d103      	bne.n	80010f4 <main+0xe4>
	  printf("OS Timer Fail!!!\r\n");
 80010ec:	484f      	ldr	r0, [pc, #316]	; (800122c <main+0x21c>)
 80010ee:	f00c f8dd 	bl	800d2ac <puts>
 80010f2:	e00b      	b.n	800110c <main+0xfc>
  }else{
	  xTimerStart(osTimers, 0);
 80010f4:	4b4c      	ldr	r3, [pc, #304]	; (8001228 <main+0x218>)
 80010f6:	681c      	ldr	r4, [r3, #0]
 80010f8:	f009 fb50 	bl	800a79c <xTaskGetTickCount>
 80010fc:	4602      	mov	r2, r0
 80010fe:	2300      	movs	r3, #0
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	2300      	movs	r3, #0
 8001104:	2101      	movs	r1, #1
 8001106:	4620      	mov	r0, r4
 8001108:	f00a fc6a 	bl	800b9e0 <xTimerGenericCommand>
  }

  /* RTOS_EVENT_GROUP */
  xEventGroup = xEventGroupCreate();
 800110c:	f007 fe6d 	bl	8008dea <xEventGroupCreate>
 8001110:	4603      	mov	r3, r0
 8001112:	4a47      	ldr	r2, [pc, #284]	; (8001230 <main+0x220>)
 8001114:	6013      	str	r3, [r2, #0]
  if( xEventGroup == NULL )
 8001116:	4b46      	ldr	r3, [pc, #280]	; (8001230 <main+0x220>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d102      	bne.n	8001124 <main+0x114>
  {
	  printf("Event Group Fail!!!\r\n");
 800111e:	4845      	ldr	r0, [pc, #276]	; (8001234 <main+0x224>)
 8001120:	f00c f8c4 	bl	800d2ac <puts>
  }

  /* RTOS_SEMAPHORES */
  osSemaphore = xSemaphoreCreateBinary();
 8001124:	2203      	movs	r2, #3
 8001126:	2100      	movs	r1, #0
 8001128:	2001      	movs	r0, #1
 800112a:	f008 f9c1 	bl	80094b0 <xQueueGenericCreate>
 800112e:	4603      	mov	r3, r0
 8001130:	4a41      	ldr	r2, [pc, #260]	; (8001238 <main+0x228>)
 8001132:	6013      	str	r3, [r2, #0]
  if( osSemaphore == NULL )
 8001134:	4b40      	ldr	r3, [pc, #256]	; (8001238 <main+0x228>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d102      	bne.n	8001142 <main+0x132>
  {
	  printf("Semaphore creation Fail!!!\r\n");
 800113c:	483f      	ldr	r0, [pc, #252]	; (800123c <main+0x22c>)
 800113e:	f00c f8b5 	bl	800d2ac <puts>
  }

  /* RTOS MUTEX */
  mutexSemaphore = xSemaphoreCreateMutex();
 8001142:	2001      	movs	r0, #1
 8001144:	f008 fa2b 	bl	800959e <xQueueCreateMutex>
 8001148:	4603      	mov	r3, r0
 800114a:	4a3d      	ldr	r2, [pc, #244]	; (8001240 <main+0x230>)
 800114c:	6013      	str	r3, [r2, #0]

  /* RTOS_QUEUE */
  delay_queue 	= xQueueCreate(delay_queue_len, sizeof(PrintMessage));
 800114e:	2305      	movs	r3, #5
 8001150:	2200      	movs	r2, #0
 8001152:	2118      	movs	r1, #24
 8001154:	4618      	mov	r0, r3
 8001156:	f008 f9ab 	bl	80094b0 <xQueueGenericCreate>
 800115a:	4603      	mov	r3, r0
 800115c:	4a39      	ldr	r2, [pc, #228]	; (8001244 <main+0x234>)
 800115e:	6013      	str	r3, [r2, #0]
  msg_queue 	= xQueueCreate(msg_queue_len, sizeof(PrintMessage));
 8001160:	2305      	movs	r3, #5
 8001162:	2200      	movs	r2, #0
 8001164:	2118      	movs	r1, #24
 8001166:	4618      	mov	r0, r3
 8001168:	f008 f9a2 	bl	80094b0 <xQueueGenericCreate>
 800116c:	4603      	mov	r3, r0
 800116e:	4a36      	ldr	r2, [pc, #216]	; (8001248 <main+0x238>)
 8001170:	6013      	str	r3, [r2, #0]
  if( ( delay_queue == NULL ) || ( msg_queue == NULL ) )
 8001172:	4b34      	ldr	r3, [pc, #208]	; (8001244 <main+0x234>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d003      	beq.n	8001182 <main+0x172>
 800117a:	4b33      	ldr	r3, [pc, #204]	; (8001248 <main+0x238>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d103      	bne.n	800118a <main+0x17a>
  {
	  printf("Queue creation Fail!!!\r\n");
 8001182:	4832      	ldr	r0, [pc, #200]	; (800124c <main+0x23c>)
 8001184:	f00c f892 	bl	800d2ac <puts>
 8001188:	e002      	b.n	8001190 <main+0x180>
  }else{
	  printf("Queue creation OK\r\n");
 800118a:	4831      	ldr	r0, [pc, #196]	; (8001250 <main+0x240>)
 800118c:	f00c f88e 	bl	800d2ac <puts>
  }

  /* RTOS TASKS */
  xTaskCreate(Default_Thread, "DEFAULT_TASK", 128, NULL, osPriorityNormal, &defaultThreadHandle);
 8001190:	4b30      	ldr	r3, [pc, #192]	; (8001254 <main+0x244>)
 8001192:	9301      	str	r3, [sp, #4]
 8001194:	2300      	movs	r3, #0
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2300      	movs	r3, #0
 800119a:	2280      	movs	r2, #128	; 0x80
 800119c:	492e      	ldr	r1, [pc, #184]	; (8001258 <main+0x248>)
 800119e:	482f      	ldr	r0, [pc, #188]	; (800125c <main+0x24c>)
 80011a0:	f009 f80b 	bl	800a1ba <xTaskCreate>
  xTaskCreate(LED_Thread, "LED_TASK", configMINIMAL_STACK_SIZE, NULL, osPriorityAboveNormal, &LEDThreadHandle);
 80011a4:	4b2e      	ldr	r3, [pc, #184]	; (8001260 <main+0x250>)
 80011a6:	9301      	str	r3, [sp, #4]
 80011a8:	2301      	movs	r3, #1
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	2300      	movs	r3, #0
 80011ae:	2280      	movs	r2, #128	; 0x80
 80011b0:	492c      	ldr	r1, [pc, #176]	; (8001264 <main+0x254>)
 80011b2:	482d      	ldr	r0, [pc, #180]	; (8001268 <main+0x258>)
 80011b4:	f009 f801 	bl	800a1ba <xTaskCreate>
  xTaskCreate(UART_Thread, "UART_TASK", 3*configMINIMAL_STACK_SIZE, NULL, osPriorityNormal, &UARTThreadHandle);
 80011b8:	4b2c      	ldr	r3, [pc, #176]	; (800126c <main+0x25c>)
 80011ba:	9301      	str	r3, [sp, #4]
 80011bc:	2300      	movs	r3, #0
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	2300      	movs	r3, #0
 80011c2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80011c6:	492a      	ldr	r1, [pc, #168]	; (8001270 <main+0x260>)
 80011c8:	482a      	ldr	r0, [pc, #168]	; (8001274 <main+0x264>)
 80011ca:	f008 fff6 	bl	800a1ba <xTaskCreate>

  /* Button Thread definition */
  osThreadDef(BUTTON_TASK, Button_Thread, osPriorityHigh, 0, 3*configMINIMAL_STACK_SIZE);
 80011ce:	4b2a      	ldr	r3, [pc, #168]	; (8001278 <main+0x268>)
 80011d0:	1d3c      	adds	r4, r7, #4
 80011d2:	461d      	mov	r5, r3
 80011d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ButtonThreadHandle = osThreadCreate (osThread(BUTTON_TASK), (void *) osSemaphore);
 80011e0:	4b15      	ldr	r3, [pc, #84]	; (8001238 <main+0x228>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	1d3b      	adds	r3, r7, #4
 80011e6:	4611      	mov	r1, r2
 80011e8:	4618      	mov	r0, r3
 80011ea:	f007 fd9e 	bl	8008d2a <osThreadCreate>
 80011ee:	4603      	mov	r3, r0
 80011f0:	4a22      	ldr	r2, [pc, #136]	; (800127c <main+0x26c>)
 80011f2:	6013      	str	r3, [r2, #0]

  /* Start scheduler */
  osKernelStart();
 80011f4:	f007 fd92 	bl	8008d1c <osKernelStart>

  /* Infinite loop */
  while (1)
 80011f8:	e7fe      	b.n	80011f8 <main+0x1e8>
 80011fa:	bf00      	nop
 80011fc:	080100ec 	.word	0x080100ec
 8001200:	20000000 	.word	0x20000000
 8001204:	431bde83 	.word	0x431bde83
 8001208:	0800f838 	.word	0x0800f838
 800120c:	49742400 	.word	0x49742400
 8001210:	0800f84c 	.word	0x0800f84c
 8001214:	0800f85c 	.word	0x0800f85c
 8001218:	0800f86c 	.word	0x0800f86c
 800121c:	0800f87c 	.word	0x0800f87c
 8001220:	08001281 	.word	0x08001281
 8001224:	0800f894 	.word	0x0800f894
 8001228:	20000df0 	.word	0x20000df0
 800122c:	0800f8a0 	.word	0x0800f8a0
 8001230:	20000dec 	.word	0x20000dec
 8001234:	0800f8b4 	.word	0x0800f8b4
 8001238:	20000de4 	.word	0x20000de4
 800123c:	0800f8cc 	.word	0x0800f8cc
 8001240:	20000de8 	.word	0x20000de8
 8001244:	20000ddc 	.word	0x20000ddc
 8001248:	20000de0 	.word	0x20000de0
 800124c:	0800f8e8 	.word	0x0800f8e8
 8001250:	0800f900 	.word	0x0800f900
 8001254:	20000dcc 	.word	0x20000dcc
 8001258:	0800f914 	.word	0x0800f914
 800125c:	08001599 	.word	0x08001599
 8001260:	20000dd8 	.word	0x20000dd8
 8001264:	0800f924 	.word	0x0800f924
 8001268:	080012e9 	.word	0x080012e9
 800126c:	20000dd4 	.word	0x20000dd4
 8001270:	0800f930 	.word	0x0800f930
 8001274:	08003839 	.word	0x08003839
 8001278:	0800f93c 	.word	0x0800f93c
 800127c:	20000dd0 	.word	0x20000dd0

08001280 <vTimerCallback5SecExpired>:
  * @brief  TIMER OS callback
  * @param
  * @retval
  ************************************************************/
void vTimerCallback5SecExpired( TimerHandle_t xTimer )
 {
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af02      	add	r7, sp, #8
 8001286:	6078      	str	r0, [r7, #4]
	static uint8_t ulCount;

	if (xTimer == osTimers){
 8001288:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <vTimerCallback5SecExpired+0x58>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	429a      	cmp	r2, r3
 8001290:	d11d      	bne.n	80012ce <vTimerCallback5SecExpired+0x4e>
		 ulCount++;
 8001292:	4b12      	ldr	r3, [pc, #72]	; (80012dc <vTimerCallback5SecExpired+0x5c>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	3301      	adds	r3, #1
 8001298:	b2da      	uxtb	r2, r3
 800129a:	4b10      	ldr	r3, [pc, #64]	; (80012dc <vTimerCallback5SecExpired+0x5c>)
 800129c:	701a      	strb	r2, [r3, #0]
		 //printf("timer callback %d \r\n", ulCount);

		 if(ulCount >= 10){
 800129e:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <vTimerCallback5SecExpired+0x5c>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	2b09      	cmp	r3, #9
 80012a4:	d913      	bls.n	80012ce <vTimerCallback5SecExpired+0x4e>
			 printf("OS TIMER STOPED \r\n");
 80012a6:	480e      	ldr	r0, [pc, #56]	; (80012e0 <vTimerCallback5SecExpired+0x60>)
 80012a8:	f00c f800 	bl	800d2ac <puts>
			 xTimerStop( xTimer, 0 );
 80012ac:	2300      	movs	r3, #0
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	2300      	movs	r3, #0
 80012b2:	2200      	movs	r2, #0
 80012b4:	2103      	movs	r1, #3
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f00a fb92 	bl	800b9e0 <xTimerGenericCommand>
			 ulCount = 0;
 80012bc:	4b07      	ldr	r3, [pc, #28]	; (80012dc <vTimerCallback5SecExpired+0x5c>)
 80012be:	2200      	movs	r2, #0
 80012c0:	701a      	strb	r2, [r3, #0]
			 xEventGroupSetBits(xEventGroup,BIT_3);
 80012c2:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <vTimerCallback5SecExpired+0x64>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2108      	movs	r1, #8
 80012c8:	4618      	mov	r0, r3
 80012ca:	f007 feaf 	bl	800902c <xEventGroupSetBits>
		 }
	}
 }
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000df0 	.word	0x20000df0
 80012dc:	20000df8 	.word	0x20000df8
 80012e0:	0800f958 	.word	0x0800f958
 80012e4:	20000dec 	.word	0x20000dec

080012e8 <LED_Thread>:
  * @brief  LED thread
  * @param  semaphore
  * @retval None
  ************************************************************/
void LED_Thread(void *argument)
{
 80012e8:	b590      	push	{r4, r7, lr}
 80012ea:	b08f      	sub	sp, #60	; 0x3c
 80012ec:	af02      	add	r7, sp, #8
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  const TickType_t xTicksToWait = 100 / portTICK_PERIOD_MS;
 80012f4:	2364      	movs	r3, #100	; 0x64
 80012f6:	62bb      	str	r3, [r7, #40]	; 0x28
  EventBits_t uxBits;

  for(;;)
  {
    /* Turn off LED */
    HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80012f8:	2200      	movs	r2, #0
 80012fa:	2101      	movs	r1, #1
 80012fc:	487b      	ldr	r0, [pc, #492]	; (80014ec <LED_Thread+0x204>)
 80012fe:	f003 fa2d 	bl	800475c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001302:	2200      	movs	r2, #0
 8001304:	2180      	movs	r1, #128	; 0x80
 8001306:	4879      	ldr	r0, [pc, #484]	; (80014ec <LED_Thread+0x204>)
 8001308:	f003 fa28 	bl	800475c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800130c:	2200      	movs	r2, #0
 800130e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001312:	4876      	ldr	r0, [pc, #472]	; (80014ec <LED_Thread+0x204>)
 8001314:	f003 fa22 	bl	800475c <HAL_GPIO_WritePin>

    /* Wait a maximum of 100ms for either bit 0,4 or bit 5 in event group.  Clear the bits before exiting. */
	uxBits = xEventGroupWaitBits(
 8001318:	4b75      	ldr	r3, [pc, #468]	; (80014f0 <LED_Thread+0x208>)
 800131a:	6818      	ldr	r0, [r3, #0]
 800131c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800131e:	9300      	str	r3, [sp, #0]
 8001320:	2300      	movs	r3, #0
 8001322:	2200      	movs	r2, #0
 8001324:	2103      	movs	r1, #3
 8001326:	f007 fd7b 	bl	8008e20 <xEventGroupWaitBits>
 800132a:	6278      	str	r0, [r7, #36]	; 0x24
			BIT_0 | BIT_1, 		/* The bits within the event group to wait for. */
			pdFALSE,        	/* BIT_0 & BIT_1 not cleared before returning. */
			pdFALSE,       		/* Don't wait for both bits, either bit will do. */
			xTicksToWait );		/* Wait a maximum of 100ms for either bit to be set. */

	if( uxBits  == ( BIT_0 | BIT_1 ) )
 800132c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132e:	2b03      	cmp	r3, #3
 8001330:	d136      	bne.n	80013a0 <LED_Thread+0xb8>
	{
		/*both bits were set. */
		count = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	62fb      	str	r3, [r7, #44]	; 0x2c
		while (count <= 20)
 8001336:	e009      	b.n	800134c <LED_Thread+0x64>
		{
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001338:	2180      	movs	r1, #128	; 0x80
 800133a:	486c      	ldr	r0, [pc, #432]	; (80014ec <LED_Thread+0x204>)
 800133c:	f003 fa27 	bl	800478e <HAL_GPIO_TogglePin>
			vTaskDelay(200);
 8001340:	20c8      	movs	r0, #200	; 0xc8
 8001342:	f009 f87f 	bl	800a444 <vTaskDelay>
			count++;
 8001346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001348:	3301      	adds	r3, #1
 800134a:	62fb      	str	r3, [r7, #44]	; 0x2c
		while (count <= 20)
 800134c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800134e:	2b14      	cmp	r3, #20
 8001350:	d9f2      	bls.n	8001338 <LED_Thread+0x50>
		}

		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001352:	2200      	movs	r2, #0
 8001354:	2180      	movs	r1, #128	; 0x80
 8001356:	4865      	ldr	r0, [pc, #404]	; (80014ec <LED_Thread+0x204>)
 8001358:	f003 fa00 	bl	800475c <HAL_GPIO_WritePin>
		uxBits = xEventGroupClearBits( xEventGroup,  BIT_0 | BIT_1 );
 800135c:	4b64      	ldr	r3, [pc, #400]	; (80014f0 <LED_Thread+0x208>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2103      	movs	r1, #3
 8001362:	4618      	mov	r0, r3
 8001364:	f007 fe2a 	bl	8008fbc <xEventGroupClearBits>
 8001368:	6278      	str	r0, [r7, #36]	; 0x24

		// Construct message and send
		PrintMessage msg;
		strcpy(msg.body, "LED Thread");
 800136a:	f107 0308 	add.w	r3, r7, #8
 800136e:	4a61      	ldr	r2, [pc, #388]	; (80014f4 <LED_Thread+0x20c>)
 8001370:	ca07      	ldmia	r2, {r0, r1, r2}
 8001372:	c303      	stmia	r3!, {r0, r1}
 8001374:	801a      	strh	r2, [r3, #0]
 8001376:	3302      	adds	r3, #2
 8001378:	0c12      	lsrs	r2, r2, #16
 800137a:	701a      	strb	r2, [r3, #0]
		msg.count = 1;
 800137c:	2301      	movs	r3, #1
 800137e:	61fb      	str	r3, [r7, #28]

		if (xQueueSend(msg_queue, &msg, portMAX_DELAY) == pdPASS){
 8001380:	4b5d      	ldr	r3, [pc, #372]	; (80014f8 <LED_Thread+0x210>)
 8001382:	6818      	ldr	r0, [r3, #0]
 8001384:	f107 0108 	add.w	r1, r7, #8
 8001388:	2300      	movs	r3, #0
 800138a:	f04f 32ff 	mov.w	r2, #4294967295
 800138e:	f008 f91f 	bl	80095d0 <xQueueGenericSend>
			//printf("\r\n\nsent msg queue\r\n");
		}

		uint32_t TickDelay = pdMS_TO_TICKS(2000);
 8001392:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001396:	623b      	str	r3, [r7, #32]
		vTaskDelay(TickDelay);
 8001398:	6a38      	ldr	r0, [r7, #32]
 800139a:	f009 f853 	bl	800a444 <vTaskDelay>
 800139e:	e7ab      	b.n	80012f8 <LED_Thread+0x10>

	}
	else if ((( uxBits & BIT_0 ) != 0) && (( uxBits & (BIT_2|BIT_3)) == 0))
 80013a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d01c      	beq.n	80013e4 <LED_Thread+0xfc>
 80013aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ac:	f003 030c 	and.w	r3, r3, #12
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d117      	bne.n	80013e4 <LED_Thread+0xfc>
	{
		/* BIT_0 was set. */
		uxBits = xEventGroupSetBits(xEventGroup, BIT_1);
 80013b4:	4b4e      	ldr	r3, [pc, #312]	; (80014f0 <LED_Thread+0x208>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2102      	movs	r1, #2
 80013ba:	4618      	mov	r0, r3
 80013bc:	f007 fe36 	bl	800902c <xEventGroupSetBits>
 80013c0:	6278      	str	r0, [r7, #36]	; 0x24
		//printf("BIT0 set \r\n\n\n");

		count = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	62fb      	str	r3, [r7, #44]	; 0x2c
		while (count <= 20)
 80013c6:	e009      	b.n	80013dc <LED_Thread+0xf4>
		{
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80013c8:	2101      	movs	r1, #1
 80013ca:	4848      	ldr	r0, [pc, #288]	; (80014ec <LED_Thread+0x204>)
 80013cc:	f003 f9df 	bl	800478e <HAL_GPIO_TogglePin>
			vTaskDelay(200);
 80013d0:	20c8      	movs	r0, #200	; 0xc8
 80013d2:	f009 f837 	bl	800a444 <vTaskDelay>
			count++;
 80013d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013d8:	3301      	adds	r3, #1
 80013da:	62fb      	str	r3, [r7, #44]	; 0x2c
		while (count <= 20)
 80013dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013de:	2b14      	cmp	r3, #20
 80013e0:	d9f2      	bls.n	80013c8 <LED_Thread+0xe0>
	else if ((( uxBits & BIT_0 ) != 0) && (( uxBits & (BIT_2|BIT_3)) == 0))
 80013e2:	e081      	b.n	80014e8 <LED_Thread+0x200>
		}
	}
	else if((( uxBits & BIT_1 ) != 0 ) && (( uxBits & (BIT_2|BIT_3)) == 0))
 80013e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d00c      	beq.n	8001408 <LED_Thread+0x120>
 80013ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f0:	f003 030c 	and.w	r3, r3, #12
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d107      	bne.n	8001408 <LED_Thread+0x120>
	{
		/* BIT_1 was set. */
		uxBits = xEventGroupSetBits(xEventGroup, BIT_0);
 80013f8:	4b3d      	ldr	r3, [pc, #244]	; (80014f0 <LED_Thread+0x208>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2101      	movs	r1, #1
 80013fe:	4618      	mov	r0, r3
 8001400:	f007 fe14 	bl	800902c <xEventGroupSetBits>
 8001404:	6278      	str	r0, [r7, #36]	; 0x24
 8001406:	e06f      	b.n	80014e8 <LED_Thread+0x200>
		//printf("BIT4 set \r\n\n\n");
	}
	else if(( uxBits & BIT_2 ) != 0 )
 8001408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140a:	f003 0304 	and.w	r3, r3, #4
 800140e:	2b00      	cmp	r3, #0
 8001410:	d031      	beq.n	8001476 <LED_Thread+0x18e>
	{
		/* BIT_2 was set. */
		uxBits = xEventGroupClearBits(xEventGroup,  BIT_2);
 8001412:	4b37      	ldr	r3, [pc, #220]	; (80014f0 <LED_Thread+0x208>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2104      	movs	r1, #4
 8001418:	4618      	mov	r0, r3
 800141a:	f007 fdcf 	bl	8008fbc <xEventGroupClearBits>
 800141e:	6278      	str	r0, [r7, #36]	; 0x24

		if(xSemaphoreTake(mutexSemaphore, (TickType_t)10) == pdTRUE ){
 8001420:	4b36      	ldr	r3, [pc, #216]	; (80014fc <LED_Thread+0x214>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	210a      	movs	r1, #10
 8001426:	4618      	mov	r0, r3
 8001428:	f008 fbd8 	bl	8009bdc <xQueueSemaphoreTake>
 800142c:	4603      	mov	r3, r0
 800142e:	2b01      	cmp	r3, #1
 8001430:	d11a      	bne.n	8001468 <LED_Thread+0x180>
			printf("Mutex hold by LED\r\n");
 8001432:	4833      	ldr	r0, [pc, #204]	; (8001500 <LED_Thread+0x218>)
 8001434:	f00b ff3a 	bl	800d2ac <puts>

			count = 0;
 8001438:	2300      	movs	r3, #0
 800143a:	62fb      	str	r3, [r7, #44]	; 0x2c
			while (count <= 20)
 800143c:	e00a      	b.n	8001454 <LED_Thread+0x16c>
			{
				HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800143e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001442:	482a      	ldr	r0, [pc, #168]	; (80014ec <LED_Thread+0x204>)
 8001444:	f003 f9a3 	bl	800478e <HAL_GPIO_TogglePin>
				vTaskDelay(200);
 8001448:	20c8      	movs	r0, #200	; 0xc8
 800144a:	f008 fffb 	bl	800a444 <vTaskDelay>
				count++;
 800144e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001450:	3301      	adds	r3, #1
 8001452:	62fb      	str	r3, [r7, #44]	; 0x2c
			while (count <= 20)
 8001454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001456:	2b14      	cmp	r3, #20
 8001458:	d9f1      	bls.n	800143e <LED_Thread+0x156>
			}

			xSemaphoreGive(mutexSemaphore);
 800145a:	4b28      	ldr	r3, [pc, #160]	; (80014fc <LED_Thread+0x214>)
 800145c:	6818      	ldr	r0, [r3, #0]
 800145e:	2300      	movs	r3, #0
 8001460:	2200      	movs	r2, #0
 8001462:	2100      	movs	r1, #0
 8001464:	f008 f8b4 	bl	80095d0 <xQueueGenericSend>
		}



		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001468:	2200      	movs	r2, #0
 800146a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800146e:	481f      	ldr	r0, [pc, #124]	; (80014ec <LED_Thread+0x204>)
 8001470:	f003 f974 	bl	800475c <HAL_GPIO_WritePin>
 8001474:	e740      	b.n	80012f8 <LED_Thread+0x10>
	}
	else if( ( uxBits & BIT_3 ) != 0 )
 8001476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001478:	f003 0308 	and.w	r3, r3, #8
 800147c:	2b00      	cmp	r3, #0
 800147e:	d02c      	beq.n	80014da <LED_Thread+0x1f2>
	{
		/* BIT_3 was set. */
		uxBits = xEventGroupClearBits(xEventGroup,  BIT_3);
 8001480:	4b1b      	ldr	r3, [pc, #108]	; (80014f0 <LED_Thread+0x208>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2108      	movs	r1, #8
 8001486:	4618      	mov	r0, r3
 8001488:	f007 fd98 	bl	8008fbc <xEventGroupClearBits>
 800148c:	6278      	str	r0, [r7, #36]	; 0x24
		xTimerStart(osTimers, 0);
 800148e:	4b1d      	ldr	r3, [pc, #116]	; (8001504 <LED_Thread+0x21c>)
 8001490:	681c      	ldr	r4, [r3, #0]
 8001492:	f009 f983 	bl	800a79c <xTaskGetTickCount>
 8001496:	4602      	mov	r2, r0
 8001498:	2300      	movs	r3, #0
 800149a:	9300      	str	r3, [sp, #0]
 800149c:	2300      	movs	r3, #0
 800149e:	2101      	movs	r1, #1
 80014a0:	4620      	mov	r0, r4
 80014a2:	f00a fa9d 	bl	800b9e0 <xTimerGenericCommand>

		count = 0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	62fb      	str	r3, [r7, #44]	; 0x2c
		while (count <= 20)
 80014aa:	e012      	b.n	80014d2 <LED_Thread+0x1ea>
		{
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80014ac:	2101      	movs	r1, #1
 80014ae:	480f      	ldr	r0, [pc, #60]	; (80014ec <LED_Thread+0x204>)
 80014b0:	f003 f96d 	bl	800478e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80014b4:	2180      	movs	r1, #128	; 0x80
 80014b6:	480d      	ldr	r0, [pc, #52]	; (80014ec <LED_Thread+0x204>)
 80014b8:	f003 f969 	bl	800478e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80014bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014c0:	480a      	ldr	r0, [pc, #40]	; (80014ec <LED_Thread+0x204>)
 80014c2:	f003 f964 	bl	800478e <HAL_GPIO_TogglePin>
			vTaskDelay(200);
 80014c6:	20c8      	movs	r0, #200	; 0xc8
 80014c8:	f008 ffbc 	bl	800a444 <vTaskDelay>
			count++;
 80014cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ce:	3301      	adds	r3, #1
 80014d0:	62fb      	str	r3, [r7, #44]	; 0x2c
		while (count <= 20)
 80014d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014d4:	2b14      	cmp	r3, #20
 80014d6:	d9e9      	bls.n	80014ac <LED_Thread+0x1c4>
 80014d8:	e70e      	b.n	80012f8 <LED_Thread+0x10>
	}
	else
	{
		/* Timeout */
		//printf("timeout xEventGroup\r\n\n\n");
		uxBits = xEventGroupSetBits(xEventGroup,BIT_0);
 80014da:	4b05      	ldr	r3, [pc, #20]	; (80014f0 <LED_Thread+0x208>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2101      	movs	r1, #1
 80014e0:	4618      	mov	r0, r3
 80014e2:	f007 fda3 	bl	800902c <xEventGroupSetBits>
 80014e6:	6278      	str	r0, [r7, #36]	; 0x24
    HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80014e8:	e706      	b.n	80012f8 <LED_Thread+0x10>
 80014ea:	bf00      	nop
 80014ec:	40020400 	.word	0x40020400
 80014f0:	20000dec 	.word	0x20000dec
 80014f4:	0800f96c 	.word	0x0800f96c
 80014f8:	20000de0 	.word	0x20000de0
 80014fc:	20000de8 	.word	0x20000de8
 8001500:	0800f978 	.word	0x0800f978
 8001504:	20000df0 	.word	0x20000df0

08001508 <Button_Thread>:
  * @brief  Button thread
  * @param  semaphore
  * @retval None
  ************************************************************/
void Button_Thread(void const *argument)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b0c4      	sub	sp, #272	; 0x110
 800150c:	af00      	add	r7, sp, #0
 800150e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001512:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001516:	6018      	str	r0, [r3, #0]
  UBaseType_t uxHighWaterMark;

  /* Inspect our own high water mark on entering the task. */
  uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 8001518:	2000      	movs	r0, #0
 800151a:	f009 fe6d 	bl	800b1f8 <uxTaskGetStackHighWaterMark>
 800151e:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c

  for(;;)
  {
	if (osSemaphore != NULL)
 8001522:	4b18      	ldr	r3, [pc, #96]	; (8001584 <Button_Thread+0x7c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d0fb      	beq.n	8001522 <Button_Thread+0x1a>
	{
		/* Try to obtain the semaphore. */
		if( xSemaphoreTake( osSemaphore,portMAX_DELAY ) == pdTRUE ){
 800152a:	4b16      	ldr	r3, [pc, #88]	; (8001584 <Button_Thread+0x7c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f04f 31ff 	mov.w	r1, #4294967295
 8001532:	4618      	mov	r0, r3
 8001534:	f008 fb52 	bl	8009bdc <xQueueSemaphoreTake>
 8001538:	4603      	mov	r3, r0
 800153a:	2b01      	cmp	r3, #1
 800153c:	d11d      	bne.n	800157a <Button_Thread+0x72>
			//printf("btn int\r\n");
			xEventGroupSetBits(xEventGroup,BIT_2);
 800153e:	4b12      	ldr	r3, [pc, #72]	; (8001588 <Button_Thread+0x80>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2104      	movs	r1, #4
 8001544:	4618      	mov	r0, r3
 8001546:	f007 fd71 	bl	800902c <xEventGroupSetBits>
			/*******************************************************************
			 * Calling the function will have used some stack space.
			 * uxTaskGetStackHighWaterMark() to return a
			 * value = 0 (overflow)
			 *******************************************************************/
			uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 800154a:	2000      	movs	r0, #0
 800154c:	f009 fe54 	bl	800b1f8 <uxTaskGetStackHighWaterMark>
 8001550:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c

			printf("Task\t\tABS Time\tTime(%%) | %ld\r\n", uxHighWaterMark);
 8001554:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8001558:	480c      	ldr	r0, [pc, #48]	; (800158c <Button_Thread+0x84>)
 800155a:	f00b fe21 	bl	800d1a0 <iprintf>
			printf("=============================================\r\n");
 800155e:	480c      	ldr	r0, [pc, #48]	; (8001590 <Button_Thread+0x88>)
 8001560:	f00b fea4 	bl	800d2ac <puts>
			char stats[256];
			vTaskGetRunTimeStats(stats);
 8001564:	f107 030c 	add.w	r3, r7, #12
 8001568:	4618      	mov	r0, r3
 800156a:	f00a f87f 	bl	800b66c <vTaskGetRunTimeStats>
			printf("%s\r\n\n\n", stats);
 800156e:	f107 030c 	add.w	r3, r7, #12
 8001572:	4619      	mov	r1, r3
 8001574:	4807      	ldr	r0, [pc, #28]	; (8001594 <Button_Thread+0x8c>)
 8001576:	f00b fe13 	bl	800d1a0 <iprintf>
		}
		vTaskDelay(100);
 800157a:	2064      	movs	r0, #100	; 0x64
 800157c:	f008 ff62 	bl	800a444 <vTaskDelay>
	if (osSemaphore != NULL)
 8001580:	e7cf      	b.n	8001522 <Button_Thread+0x1a>
 8001582:	bf00      	nop
 8001584:	20000de4 	.word	0x20000de4
 8001588:	20000dec 	.word	0x20000dec
 800158c:	0800f98c 	.word	0x0800f98c
 8001590:	0800f9ac 	.word	0x0800f9ac
 8001594:	0800f9dc 	.word	0x0800f9dc

08001598 <Default_Thread>:
  * @param  argument: Not used
  * @retval None
  ***********************************************************/

void Default_Thread(void * argument)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	  if(xSemaphoreTake(mutexSemaphore, (TickType_t)10) == pdTRUE ){
 80015a0:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <Default_Thread+0x34>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	210a      	movs	r1, #10
 80015a6:	4618      	mov	r0, r3
 80015a8:	f008 fb18 	bl	8009bdc <xQueueSemaphoreTake>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d106      	bne.n	80015c0 <Default_Thread+0x28>
		  //printf("Default Task\r\n");
		  xSemaphoreGive(mutexSemaphore);
 80015b2:	4b06      	ldr	r3, [pc, #24]	; (80015cc <Default_Thread+0x34>)
 80015b4:	6818      	ldr	r0, [r3, #0]
 80015b6:	2300      	movs	r3, #0
 80015b8:	2200      	movs	r2, #0
 80015ba:	2100      	movs	r1, #0
 80015bc:	f008 f808 	bl	80095d0 <xQueueGenericSend>
	  }
	  osDelay(1000);
 80015c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015c4:	f007 fbfd 	bl	8008dc2 <osDelay>
	  if(xSemaphoreTake(mutexSemaphore, (TickType_t)10) == pdTRUE ){
 80015c8:	e7ea      	b.n	80015a0 <Default_Thread+0x8>
 80015ca:	bf00      	nop
 80015cc:	20000de8 	.word	0x20000de8

080015d0 <SystemClock_Config>:
/************************************************************
  * @brief System Clock Configuration
  * @retval None
  ************************************************************/
void SystemClock_Config(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b094      	sub	sp, #80	; 0x50
 80015d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015d6:	f107 0320 	add.w	r3, r7, #32
 80015da:	2230      	movs	r2, #48	; 0x30
 80015dc:	2100      	movs	r1, #0
 80015de:	4618      	mov	r0, r3
 80015e0:	f00b f96c 	bl	800c8bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015e4:	f107 030c 	add.w	r3, r7, #12
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage*/
  __HAL_RCC_PWR_CLK_ENABLE();
 80015f4:	2300      	movs	r3, #0
 80015f6:	60bb      	str	r3, [r7, #8]
 80015f8:	4b30      	ldr	r3, [pc, #192]	; (80016bc <SystemClock_Config+0xec>)
 80015fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fc:	4a2f      	ldr	r2, [pc, #188]	; (80016bc <SystemClock_Config+0xec>)
 80015fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001602:	6413      	str	r3, [r2, #64]	; 0x40
 8001604:	4b2d      	ldr	r3, [pc, #180]	; (80016bc <SystemClock_Config+0xec>)
 8001606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160c:	60bb      	str	r3, [r7, #8]
 800160e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001610:	2300      	movs	r3, #0
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	4b2a      	ldr	r3, [pc, #168]	; (80016c0 <SystemClock_Config+0xf0>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a29      	ldr	r2, [pc, #164]	; (80016c0 <SystemClock_Config+0xf0>)
 800161a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800161e:	6013      	str	r3, [r2, #0]
 8001620:	4b27      	ldr	r3, [pc, #156]	; (80016c0 <SystemClock_Config+0xf0>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001628:	607b      	str	r3, [r7, #4]
 800162a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators */
  RCC_OscInitStruct.OscillatorType 	= RCC_OSCILLATORTYPE_HSE;
 800162c:	2301      	movs	r3, #1
 800162e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState 		= RCC_HSE_BYPASS;
 8001630:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState	= RCC_PLL_ON;
 8001636:	2302      	movs	r3, #2
 8001638:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource 	= RCC_PLLSOURCE_HSE;
 800163a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800163e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM 		= 4;
 8001640:	2304      	movs	r3, #4
 8001642:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN 		= 180;
 8001644:	23b4      	movs	r3, #180	; 0xb4
 8001646:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP 		= RCC_PLLP_DIV2;
 8001648:	2302      	movs	r3, #2
 800164a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ 		= 7;
 800164c:	2307      	movs	r3, #7
 800164e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001650:	f107 0320 	add.w	r3, r7, #32
 8001654:	4618      	mov	r0, r3
 8001656:	f004 ffad 	bl	80065b4 <HAL_RCC_OscConfig>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d004      	beq.n	800166a <SystemClock_Config+0x9a>
  {
    Error_Handler(__FILE__, __LINE__);
 8001660:	f240 211a 	movw	r1, #538	; 0x21a
 8001664:	4817      	ldr	r0, [pc, #92]	; (80016c4 <SystemClock_Config+0xf4>)
 8001666:	f000 f9fb 	bl	8001a60 <Error_Handler>
  }

  /** Activate the Over-Drive mode */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800166a:	f004 ff53 	bl	8006514 <HAL_PWREx_EnableOverDrive>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d004      	beq.n	800167e <SystemClock_Config+0xae>
  {
    Error_Handler(__FILE__, __LINE__);
 8001674:	f44f 7108 	mov.w	r1, #544	; 0x220
 8001678:	4812      	ldr	r0, [pc, #72]	; (80016c4 <SystemClock_Config+0xf4>)
 800167a:	f000 f9f1 	bl	8001a60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocksm */
  RCC_ClkInitStruct.ClockType 		= RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800167e:	230f      	movs	r3, #15
 8001680:	60fb      	str	r3, [r7, #12]
                              	  	  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource 	= RCC_SYSCLKSOURCE_PLLCLK;
 8001682:	2302      	movs	r3, #2
 8001684:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider 	= RCC_SYSCLK_DIV1;
 8001686:	2300      	movs	r3, #0
 8001688:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider 	= RCC_HCLK_DIV4;
 800168a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800168e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider 	= RCC_HCLK_DIV2;
 8001690:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001694:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001696:	f107 030c 	add.w	r3, r7, #12
 800169a:	2105      	movs	r1, #5
 800169c:	4618      	mov	r0, r3
 800169e:	f005 fa01 	bl	8006aa4 <HAL_RCC_ClockConfig>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d004      	beq.n	80016b2 <SystemClock_Config+0xe2>
  {
    Error_Handler(__FILE__, __LINE__);
 80016a8:	f240 212d 	movw	r1, #557	; 0x22d
 80016ac:	4805      	ldr	r0, [pc, #20]	; (80016c4 <SystemClock_Config+0xf4>)
 80016ae:	f000 f9d7 	bl	8001a60 <Error_Handler>
  }
}
 80016b2:	bf00      	nop
 80016b4:	3750      	adds	r7, #80	; 0x50
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40007000 	.word	0x40007000
 80016c4:	0800f7f4 	.word	0x0800f7f4

080016c8 <MX_CRC_Init>:
  * @brief 	CRC Initialization Function
  * @param 	None
  * @retval None
  ************************************************************/
static void MX_CRC_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  hcrc.Instance = CRC;
 80016cc:	4b07      	ldr	r3, [pc, #28]	; (80016ec <MX_CRC_Init+0x24>)
 80016ce:	4a08      	ldr	r2, [pc, #32]	; (80016f0 <MX_CRC_Init+0x28>)
 80016d0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80016d2:	4806      	ldr	r0, [pc, #24]	; (80016ec <MX_CRC_Init+0x24>)
 80016d4:	f002 fa6a 	bl	8003bac <HAL_CRC_Init>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d004      	beq.n	80016e8 <MX_CRC_Init+0x20>
  {
    Error_Handler(__FILE__, __LINE__);
 80016de:	f44f 710f 	mov.w	r1, #572	; 0x23c
 80016e2:	4804      	ldr	r0, [pc, #16]	; (80016f4 <MX_CRC_Init+0x2c>)
 80016e4:	f000 f9bc 	bl	8001a60 <Error_Handler>
  }
}
 80016e8:	bf00      	nop
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20000a90 	.word	0x20000a90
 80016f0:	40023000 	.word	0x40023000
 80016f4:	0800f7f4 	.word	0x0800f7f4

080016f8 <MX_I2C1_Init>:
  * @brief 	I2C1 Initialization Function
  * @param 	None
  * @retval None
  ************************************************************/
static void MX_I2C1_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  hi2c1.Instance 				= I2C1;
 80016fc:	4b20      	ldr	r3, [pc, #128]	; (8001780 <MX_I2C1_Init+0x88>)
 80016fe:	4a21      	ldr	r2, [pc, #132]	; (8001784 <MX_I2C1_Init+0x8c>)
 8001700:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed 		= 100000;
 8001702:	4b1f      	ldr	r3, [pc, #124]	; (8001780 <MX_I2C1_Init+0x88>)
 8001704:	4a20      	ldr	r2, [pc, #128]	; (8001788 <MX_I2C1_Init+0x90>)
 8001706:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle 			= I2C_DUTYCYCLE_2;
 8001708:	4b1d      	ldr	r3, [pc, #116]	; (8001780 <MX_I2C1_Init+0x88>)
 800170a:	2200      	movs	r2, #0
 800170c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 		= 0;
 800170e:	4b1c      	ldr	r3, [pc, #112]	; (8001780 <MX_I2C1_Init+0x88>)
 8001710:	2200      	movs	r2, #0
 8001712:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode 	= I2C_ADDRESSINGMODE_7BIT;
 8001714:	4b1a      	ldr	r3, [pc, #104]	; (8001780 <MX_I2C1_Init+0x88>)
 8001716:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800171a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode 	= I2C_DUALADDRESS_DISABLE;
 800171c:	4b18      	ldr	r3, [pc, #96]	; (8001780 <MX_I2C1_Init+0x88>)
 800171e:	2200      	movs	r2, #0
 8001720:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 		= 0;
 8001722:	4b17      	ldr	r3, [pc, #92]	; (8001780 <MX_I2C1_Init+0x88>)
 8001724:	2200      	movs	r2, #0
 8001726:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode 	= I2C_GENERALCALL_DISABLE;
 8001728:	4b15      	ldr	r3, [pc, #84]	; (8001780 <MX_I2C1_Init+0x88>)
 800172a:	2200      	movs	r2, #0
 800172c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode 		= I2C_NOSTRETCH_DISABLE;
 800172e:	4b14      	ldr	r3, [pc, #80]	; (8001780 <MX_I2C1_Init+0x88>)
 8001730:	2200      	movs	r2, #0
 8001732:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001734:	4812      	ldr	r0, [pc, #72]	; (8001780 <MX_I2C1_Init+0x88>)
 8001736:	f003 f85d 	bl	80047f4 <HAL_I2C_Init>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d004      	beq.n	800174a <MX_I2C1_Init+0x52>
  {
    Error_Handler(__FILE__, __LINE__);
 8001740:	f240 2153 	movw	r1, #595	; 0x253
 8001744:	4811      	ldr	r0, [pc, #68]	; (800178c <MX_I2C1_Init+0x94>)
 8001746:	f000 f98b 	bl	8001a60 <Error_Handler>
  }

  /** Configure Analogue filter*/
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800174a:	2100      	movs	r1, #0
 800174c:	480c      	ldr	r0, [pc, #48]	; (8001780 <MX_I2C1_Init+0x88>)
 800174e:	f004 fe66 	bl	800641e <HAL_I2CEx_ConfigAnalogFilter>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d004      	beq.n	8001762 <MX_I2C1_Init+0x6a>
  {
    Error_Handler(__FILE__, __LINE__);
 8001758:	f240 2159 	movw	r1, #601	; 0x259
 800175c:	480b      	ldr	r0, [pc, #44]	; (800178c <MX_I2C1_Init+0x94>)
 800175e:	f000 f97f 	bl	8001a60 <Error_Handler>
  }

  /** Configure Digital filter*/
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001762:	2100      	movs	r1, #0
 8001764:	4806      	ldr	r0, [pc, #24]	; (8001780 <MX_I2C1_Init+0x88>)
 8001766:	f004 fe96 	bl	8006496 <HAL_I2CEx_ConfigDigitalFilter>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d004      	beq.n	800177a <MX_I2C1_Init+0x82>
  {
    Error_Handler(__FILE__, __LINE__);
 8001770:	f240 215f 	movw	r1, #607	; 0x25f
 8001774:	4805      	ldr	r0, [pc, #20]	; (800178c <MX_I2C1_Init+0x94>)
 8001776:	f000 f973 	bl	8001a60 <Error_Handler>
  }
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000a98 	.word	0x20000a98
 8001784:	40005400 	.word	0x40005400
 8001788:	000186a0 	.word	0x000186a0
 800178c:	0800f7f4 	.word	0x0800f7f4

08001790 <MX_SPI1_Init>:
  * @brief 	SPI1 Initialization Function
  * @param 	None
  * @retval None
  ************************************************************/
static void MX_SPI1_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* SPI1 parameter configuration*/
  hspi1.Instance 					= SPI1;
 8001794:	4b17      	ldr	r3, [pc, #92]	; (80017f4 <MX_SPI1_Init+0x64>)
 8001796:	4a18      	ldr	r2, [pc, #96]	; (80017f8 <MX_SPI1_Init+0x68>)
 8001798:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode 					= SPI_MODE_SLAVE;
 800179a:	4b16      	ldr	r3, [pc, #88]	; (80017f4 <MX_SPI1_Init+0x64>)
 800179c:	2200      	movs	r2, #0
 800179e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction 				= SPI_DIRECTION_2LINES;
 80017a0:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <MX_SPI1_Init+0x64>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize 				= SPI_DATASIZE_8BIT;
 80017a6:	4b13      	ldr	r3, [pc, #76]	; (80017f4 <MX_SPI1_Init+0x64>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity 			= SPI_POLARITY_LOW;
 80017ac:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <MX_SPI1_Init+0x64>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase 				= SPI_PHASE_1EDGE;
 80017b2:	4b10      	ldr	r3, [pc, #64]	; (80017f4 <MX_SPI1_Init+0x64>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS 					= SPI_NSS_SOFT;
 80017b8:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <MX_SPI1_Init+0x64>)
 80017ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017be:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit 				= SPI_FIRSTBIT_MSB;
 80017c0:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <MX_SPI1_Init+0x64>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode 				= SPI_TIMODE_DISABLE;
 80017c6:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <MX_SPI1_Init+0x64>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation 		= SPI_CRCCALCULATION_DISABLE;
 80017cc:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <MX_SPI1_Init+0x64>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial 			= 10;
 80017d2:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <MX_SPI1_Init+0x64>)
 80017d4:	220a      	movs	r2, #10
 80017d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017d8:	4806      	ldr	r0, [pc, #24]	; (80017f4 <MX_SPI1_Init+0x64>)
 80017da:	f005 fbb5 	bl	8006f48 <HAL_SPI_Init>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d004      	beq.n	80017ee <MX_SPI1_Init+0x5e>
  {
    Error_Handler(__FILE__, __LINE__);
 80017e4:	f240 2179 	movw	r1, #633	; 0x279
 80017e8:	4804      	ldr	r0, [pc, #16]	; (80017fc <MX_SPI1_Init+0x6c>)
 80017ea:	f000 f939 	bl	8001a60 <Error_Handler>
  }
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000bac 	.word	0x20000bac
 80017f8:	40013000 	.word	0x40013000
 80017fc:	0800f7f4 	.word	0x0800f7f4

08001800 <MX_DMA_Init>:

/************************************************************
  * Enable DMA controller clock
  ************************************************************/
static void MX_DMA_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	607b      	str	r3, [r7, #4]
 800180a:	4b1f      	ldr	r3, [pc, #124]	; (8001888 <MX_DMA_Init+0x88>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	4a1e      	ldr	r2, [pc, #120]	; (8001888 <MX_DMA_Init+0x88>)
 8001810:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001814:	6313      	str	r3, [r2, #48]	; 0x30
 8001816:	4b1c      	ldr	r3, [pc, #112]	; (8001888 <MX_DMA_Init+0x88>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800181e:	607b      	str	r3, [r7, #4]
 8001820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	603b      	str	r3, [r7, #0]
 8001826:	4b18      	ldr	r3, [pc, #96]	; (8001888 <MX_DMA_Init+0x88>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	4a17      	ldr	r2, [pc, #92]	; (8001888 <MX_DMA_Init+0x88>)
 800182c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001830:	6313      	str	r3, [r2, #48]	; 0x30
 8001832:	4b15      	ldr	r3, [pc, #84]	; (8001888 <MX_DMA_Init+0x88>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800183a:	603b      	str	r3, [r7, #0]
 800183c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800183e:	2200      	movs	r2, #0
 8001840:	2105      	movs	r1, #5
 8001842:	200b      	movs	r0, #11
 8001844:	f002 f988 	bl	8003b58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001848:	200b      	movs	r0, #11
 800184a:	f002 f9a1 	bl	8003b90 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800184e:	2200      	movs	r2, #0
 8001850:	2105      	movs	r1, #5
 8001852:	2011      	movs	r0, #17
 8001854:	f002 f980 	bl	8003b58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001858:	2011      	movs	r0, #17
 800185a:	f002 f999 	bl	8003b90 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800185e:	2200      	movs	r2, #0
 8001860:	2105      	movs	r1, #5
 8001862:	2038      	movs	r0, #56	; 0x38
 8001864:	f002 f978 	bl	8003b58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001868:	2038      	movs	r0, #56	; 0x38
 800186a:	f002 f991 	bl	8003b90 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800186e:	2200      	movs	r2, #0
 8001870:	2105      	movs	r1, #5
 8001872:	203b      	movs	r0, #59	; 0x3b
 8001874:	f002 f970 	bl	8003b58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001878:	203b      	movs	r0, #59	; 0x3b
 800187a:	f002 f989 	bl	8003b90 <HAL_NVIC_EnableIRQ>

}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40023800 	.word	0x40023800

0800188c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  ************************************************************/
static void MX_GPIO_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b08c      	sub	sp, #48	; 0x30
 8001890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001892:	f107 031c 	add.w	r3, r7, #28
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	605a      	str	r2, [r3, #4]
 800189c:	609a      	str	r2, [r3, #8]
 800189e:	60da      	str	r2, [r3, #12]
 80018a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	61bb      	str	r3, [r7, #24]
 80018a6:	4b48      	ldr	r3, [pc, #288]	; (80019c8 <MX_GPIO_Init+0x13c>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	4a47      	ldr	r2, [pc, #284]	; (80019c8 <MX_GPIO_Init+0x13c>)
 80018ac:	f043 0304 	orr.w	r3, r3, #4
 80018b0:	6313      	str	r3, [r2, #48]	; 0x30
 80018b2:	4b45      	ldr	r3, [pc, #276]	; (80019c8 <MX_GPIO_Init+0x13c>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	f003 0304 	and.w	r3, r3, #4
 80018ba:	61bb      	str	r3, [r7, #24]
 80018bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	617b      	str	r3, [r7, #20]
 80018c2:	4b41      	ldr	r3, [pc, #260]	; (80019c8 <MX_GPIO_Init+0x13c>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	4a40      	ldr	r2, [pc, #256]	; (80019c8 <MX_GPIO_Init+0x13c>)
 80018c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018cc:	6313      	str	r3, [r2, #48]	; 0x30
 80018ce:	4b3e      	ldr	r3, [pc, #248]	; (80019c8 <MX_GPIO_Init+0x13c>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018d6:	617b      	str	r3, [r7, #20]
 80018d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	613b      	str	r3, [r7, #16]
 80018de:	4b3a      	ldr	r3, [pc, #232]	; (80019c8 <MX_GPIO_Init+0x13c>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	4a39      	ldr	r2, [pc, #228]	; (80019c8 <MX_GPIO_Init+0x13c>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ea:	4b37      	ldr	r3, [pc, #220]	; (80019c8 <MX_GPIO_Init+0x13c>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	613b      	str	r3, [r7, #16]
 80018f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	4b33      	ldr	r3, [pc, #204]	; (80019c8 <MX_GPIO_Init+0x13c>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	4a32      	ldr	r2, [pc, #200]	; (80019c8 <MX_GPIO_Init+0x13c>)
 8001900:	f043 0302 	orr.w	r3, r3, #2
 8001904:	6313      	str	r3, [r2, #48]	; 0x30
 8001906:	4b30      	ldr	r3, [pc, #192]	; (80019c8 <MX_GPIO_Init+0x13c>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	60bb      	str	r3, [r7, #8]
 8001916:	4b2c      	ldr	r3, [pc, #176]	; (80019c8 <MX_GPIO_Init+0x13c>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	4a2b      	ldr	r2, [pc, #172]	; (80019c8 <MX_GPIO_Init+0x13c>)
 800191c:	f043 0308 	orr.w	r3, r3, #8
 8001920:	6313      	str	r3, [r2, #48]	; 0x30
 8001922:	4b29      	ldr	r3, [pc, #164]	; (80019c8 <MX_GPIO_Init+0x13c>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	f003 0308 	and.w	r3, r3, #8
 800192a:	60bb      	str	r3, [r7, #8]
 800192c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	607b      	str	r3, [r7, #4]
 8001932:	4b25      	ldr	r3, [pc, #148]	; (80019c8 <MX_GPIO_Init+0x13c>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	4a24      	ldr	r2, [pc, #144]	; (80019c8 <MX_GPIO_Init+0x13c>)
 8001938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800193c:	6313      	str	r3, [r2, #48]	; 0x30
 800193e:	4b22      	ldr	r3, [pc, #136]	; (80019c8 <MX_GPIO_Init+0x13c>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001946:	607b      	str	r3, [r7, #4]
 8001948:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800194a:	2200      	movs	r2, #0
 800194c:	f244 0181 	movw	r1, #16513	; 0x4081
 8001950:	481e      	ldr	r0, [pc, #120]	; (80019cc <MX_GPIO_Init+0x140>)
 8001952:	f002 ff03 	bl	800475c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin 	= USER_Btn_Pin;
 8001956:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800195a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode 	= GPIO_MODE_IT_RISING;
 800195c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001966:	f107 031c 	add.w	r3, r7, #28
 800196a:	4619      	mov	r1, r3
 800196c:	4818      	ldr	r0, [pc, #96]	; (80019d0 <MX_GPIO_Init+0x144>)
 800196e:	f002 fd49 	bl	8004404 <HAL_GPIO_Init>

  /* Enable and set EXTI lines 15 to 10 Interrupt */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 15, 0);
 8001972:	2200      	movs	r2, #0
 8001974:	210f      	movs	r1, #15
 8001976:	2028      	movs	r0, #40	; 0x28
 8001978:	f002 f8ee 	bl	8003b58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800197c:	2028      	movs	r0, #40	; 0x28
 800197e:	f002 f907 	bl	8003b90 <HAL_NVIC_EnableIRQ>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin 	= LD1_Pin|LD3_Pin|LD2_Pin;
 8001982:	f244 0381 	movw	r3, #16513	; 0x4081
 8001986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 8001988:	2301      	movs	r3, #1
 800198a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001990:	2300      	movs	r3, #0
 8001992:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001994:	f107 031c 	add.w	r3, r7, #28
 8001998:	4619      	mov	r1, r3
 800199a:	480c      	ldr	r0, [pc, #48]	; (80019cc <MX_GPIO_Init+0x140>)
 800199c:	f002 fd32 	bl	8004404 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80019a0:	2200      	movs	r2, #0
 80019a2:	2101      	movs	r1, #1
 80019a4:	4809      	ldr	r0, [pc, #36]	; (80019cc <MX_GPIO_Init+0x140>)
 80019a6:	f002 fed9 	bl	800475c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80019aa:	2200      	movs	r2, #0
 80019ac:	2180      	movs	r1, #128	; 0x80
 80019ae:	4807      	ldr	r0, [pc, #28]	; (80019cc <MX_GPIO_Init+0x140>)
 80019b0:	f002 fed4 	bl	800475c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80019b4:	2200      	movs	r2, #0
 80019b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019ba:	4804      	ldr	r0, [pc, #16]	; (80019cc <MX_GPIO_Init+0x140>)
 80019bc:	f002 fece 	bl	800475c <HAL_GPIO_WritePin>

}
 80019c0:	bf00      	nop
 80019c2:	3730      	adds	r7, #48	; 0x30
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40023800 	.word	0x40023800
 80019cc:	40020400 	.word	0x40020400
 80019d0:	40020800 	.word	0x40020800

080019d4 <HAL_GPIO_EXTI_Callback>:
  * @brief EXTI line detection callbacks
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  ***********************************************************/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == USER_Btn_Pin)
 80019de:	88fb      	ldrh	r3, [r7, #6]
 80019e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019e4:	d114      	bne.n	8001a10 <HAL_GPIO_EXTI_Callback+0x3c>
  {
	  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80019e6:	2300      	movs	r3, #0
 80019e8:	60fb      	str	r3, [r7, #12]

	  /* Unblock the task by releasing the semaphore. */
	  xSemaphoreGiveFromISR( osSemaphore, &xHigherPriorityTaskWoken );
 80019ea:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <HAL_GPIO_EXTI_Callback+0x44>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f107 020c 	add.w	r2, r7, #12
 80019f2:	4611      	mov	r1, r2
 80019f4:	4618      	mov	r0, r3
 80019f6:	f007 ff84 	bl	8009902 <xQueueGiveFromISR>

	  /* If xHigherPriorityTaskWoken was set to true, we should yield.  */
	  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d007      	beq.n	8001a10 <HAL_GPIO_EXTI_Callback+0x3c>
 8001a00:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <HAL_GPIO_EXTI_Callback+0x48>)
 8001a02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	f3bf 8f4f 	dsb	sy
 8001a0c:	f3bf 8f6f 	isb	sy

  }
}
 8001a10:	bf00      	nop
 8001a12:	3710      	adds	r7, #16
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	20000de4 	.word	0x20000de4
 8001a1c:	e000ed04 	.word	0xe000ed04

08001a20 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  ************************************************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) {
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a09      	ldr	r2, [pc, #36]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d102      	bne.n	8001a38 <HAL_TIM_PeriodElapsedCallback+0x18>
	  HAL_IncTick();
 8001a32:	f001 ff95 	bl	8003960 <HAL_IncTick>
  }
  else if (htim->Instance == TIM3) {
	  tim3_counter++;
	  //printf("TIM3\r\n");
  }
}
 8001a36:	e009      	b.n	8001a4c <HAL_TIM_PeriodElapsedCallback+0x2c>
  else if (htim->Instance == TIM3) {
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a06      	ldr	r2, [pc, #24]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d104      	bne.n	8001a4c <HAL_TIM_PeriodElapsedCallback+0x2c>
	  tim3_counter++;
 8001a42:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	3301      	adds	r3, #1
 8001a48:	4a04      	ldr	r2, [pc, #16]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001a4a:	6013      	str	r3, [r2, #0]
}
 8001a4c:	bf00      	nop
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40010000 	.word	0x40010000
 8001a58:	40000400 	.word	0x40000400
 8001a5c:	20000df4 	.word	0x20000df4

08001a60 <Error_Handler>:
/************************************************************
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  ************************************************************/
void Error_Handler(char * file, int line)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a6a:	b672      	cpsid	i
}
 8001a6c:	bf00      	nop
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001a6e:	2180      	movs	r1, #128	; 0x80
 8001a70:	4803      	ldr	r0, [pc, #12]	; (8001a80 <Error_Handler+0x20>)
 8001a72:	f002 fe8c 	bl	800478e <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8001a76:	2064      	movs	r0, #100	; 0x64
 8001a78:	f001 ff92 	bl	80039a0 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001a7c:	e7f7      	b.n	8001a6e <Error_Handler+0xe>
 8001a7e:	bf00      	nop
 8001a80:	40020400 	.word	0x40020400

08001a84 <HAL_MspInit>:

/********************************************************
  * Initializes the Global MSP.
  *******************************************************/
void HAL_MspInit(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	607b      	str	r3, [r7, #4]
 8001a8e:	4b12      	ldr	r3, [pc, #72]	; (8001ad8 <HAL_MspInit+0x54>)
 8001a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a92:	4a11      	ldr	r2, [pc, #68]	; (8001ad8 <HAL_MspInit+0x54>)
 8001a94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a98:	6453      	str	r3, [r2, #68]	; 0x44
 8001a9a:	4b0f      	ldr	r3, [pc, #60]	; (8001ad8 <HAL_MspInit+0x54>)
 8001a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aa2:	607b      	str	r3, [r7, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	603b      	str	r3, [r7, #0]
 8001aaa:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <HAL_MspInit+0x54>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	4a0a      	ldr	r2, [pc, #40]	; (8001ad8 <HAL_MspInit+0x54>)
 8001ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ab6:	4b08      	ldr	r3, [pc, #32]	; (8001ad8 <HAL_MspInit+0x54>)
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001abe:	603b      	str	r3, [r7, #0]
 8001ac0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	210f      	movs	r1, #15
 8001ac6:	f06f 0001 	mvn.w	r0, #1
 8001aca:	f002 f845 	bl	8003b58 <HAL_NVIC_SetPriority>
}
 8001ace:	bf00      	nop
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40023800 	.word	0x40023800

08001adc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*******************************************************/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a0b      	ldr	r2, [pc, #44]	; (8001b18 <HAL_CRC_MspInit+0x3c>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d10d      	bne.n	8001b0a <HAL_CRC_MspInit+0x2e>
  {
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	4b0a      	ldr	r3, [pc, #40]	; (8001b1c <HAL_CRC_MspInit+0x40>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	4a09      	ldr	r2, [pc, #36]	; (8001b1c <HAL_CRC_MspInit+0x40>)
 8001af8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001afc:	6313      	str	r3, [r2, #48]	; 0x30
 8001afe:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <HAL_CRC_MspInit+0x40>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]
  }

}
 8001b0a:	bf00      	nop
 8001b0c:	3714      	adds	r7, #20
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	40023000 	.word	0x40023000
 8001b1c:	40023800 	.word	0x40023800

08001b20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*************************************************************************/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a0e      	ldr	r2, [pc, #56]	; (8001b68 <HAL_TIM_Base_MspInit+0x48>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d115      	bne.n	8001b5e <HAL_TIM_Base_MspInit+0x3e>
  {
	  __HAL_RCC_TIM3_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	4b0d      	ldr	r3, [pc, #52]	; (8001b6c <HAL_TIM_Base_MspInit+0x4c>)
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	4a0c      	ldr	r2, [pc, #48]	; (8001b6c <HAL_TIM_Base_MspInit+0x4c>)
 8001b3c:	f043 0302 	orr.w	r3, r3, #2
 8001b40:	6413      	str	r3, [r2, #64]	; 0x40
 8001b42:	4b0a      	ldr	r3, [pc, #40]	; (8001b6c <HAL_TIM_Base_MspInit+0x4c>)
 8001b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
	  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 1);
 8001b4e:	2201      	movs	r2, #1
 8001b50:	2100      	movs	r1, #0
 8001b52:	201d      	movs	r0, #29
 8001b54:	f002 f800 	bl	8003b58 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b58:	201d      	movs	r0, #29
 8001b5a:	f002 f819 	bl	8003b90 <HAL_NVIC_EnableIRQ>
  }

}
 8001b5e:	bf00      	nop
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40000400 	.word	0x40000400
 8001b6c:	40023800 	.word	0x40023800

08001b70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*******************************************************/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b08a      	sub	sp, #40	; 0x28
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b78:	f107 0314 	add.w	r3, r7, #20
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
 8001b86:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a52      	ldr	r2, [pc, #328]	; (8001cd8 <HAL_I2C_MspInit+0x168>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	f040 809d 	bne.w	8001cce <HAL_I2C_MspInit+0x15e>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b94:	2300      	movs	r3, #0
 8001b96:	613b      	str	r3, [r7, #16]
 8001b98:	4b50      	ldr	r3, [pc, #320]	; (8001cdc <HAL_I2C_MspInit+0x16c>)
 8001b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9c:	4a4f      	ldr	r2, [pc, #316]	; (8001cdc <HAL_I2C_MspInit+0x16c>)
 8001b9e:	f043 0302 	orr.w	r3, r3, #2
 8001ba2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba4:	4b4d      	ldr	r3, [pc, #308]	; (8001cdc <HAL_I2C_MspInit+0x16c>)
 8001ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba8:	f003 0302 	and.w	r3, r3, #2
 8001bac:	613b      	str	r3, [r7, #16]
 8001bae:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin 		= GPIO_PIN_6|GPIO_PIN_9;
 8001bb0:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001bb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode 		= GPIO_MODE_AF_OD;
 8001bb6:	2312      	movs	r3, #18
 8001bb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_VERY_HIGH;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate 	= GPIO_AF4_I2C1;
 8001bc2:	2304      	movs	r3, #4
 8001bc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc6:	f107 0314 	add.w	r3, r7, #20
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4844      	ldr	r0, [pc, #272]	; (8001ce0 <HAL_I2C_MspInit+0x170>)
 8001bce:	f002 fc19 	bl	8004404 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	4b41      	ldr	r3, [pc, #260]	; (8001cdc <HAL_I2C_MspInit+0x16c>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	4a40      	ldr	r2, [pc, #256]	; (8001cdc <HAL_I2C_MspInit+0x16c>)
 8001bdc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001be0:	6413      	str	r3, [r2, #64]	; 0x40
 8001be2:	4b3e      	ldr	r3, [pc, #248]	; (8001cdc <HAL_I2C_MspInit+0x16c>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance 					= DMA1_Stream0;
 8001bee:	4b3d      	ldr	r3, [pc, #244]	; (8001ce4 <HAL_I2C_MspInit+0x174>)
 8001bf0:	4a3d      	ldr	r2, [pc, #244]	; (8001ce8 <HAL_I2C_MspInit+0x178>)
 8001bf2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel 				= DMA_CHANNEL_1;
 8001bf4:	4b3b      	ldr	r3, [pc, #236]	; (8001ce4 <HAL_I2C_MspInit+0x174>)
 8001bf6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bfa:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction 			= DMA_PERIPH_TO_MEMORY;
 8001bfc:	4b39      	ldr	r3, [pc, #228]	; (8001ce4 <HAL_I2C_MspInit+0x174>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc 			= DMA_PINC_DISABLE;
 8001c02:	4b38      	ldr	r3, [pc, #224]	; (8001ce4 <HAL_I2C_MspInit+0x174>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc 				= DMA_MINC_ENABLE;
 8001c08:	4b36      	ldr	r3, [pc, #216]	; (8001ce4 <HAL_I2C_MspInit+0x174>)
 8001c0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c0e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 8001c10:	4b34      	ldr	r3, [pc, #208]	; (8001ce4 <HAL_I2C_MspInit+0x174>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment 		= DMA_MDATAALIGN_BYTE;
 8001c16:	4b33      	ldr	r3, [pc, #204]	; (8001ce4 <HAL_I2C_MspInit+0x174>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode 					= DMA_NORMAL;
 8001c1c:	4b31      	ldr	r3, [pc, #196]	; (8001ce4 <HAL_I2C_MspInit+0x174>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority 				= DMA_PRIORITY_LOW;
 8001c22:	4b30      	ldr	r3, [pc, #192]	; (8001ce4 <HAL_I2C_MspInit+0x174>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode 				= DMA_FIFOMODE_DISABLE;
 8001c28:	4b2e      	ldr	r3, [pc, #184]	; (8001ce4 <HAL_I2C_MspInit+0x174>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001c2e:	482d      	ldr	r0, [pc, #180]	; (8001ce4 <HAL_I2C_MspInit+0x174>)
 8001c30:	f001 ffd8 	bl	8003be4 <HAL_DMA_Init>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d003      	beq.n	8001c42 <HAL_I2C_MspInit+0xd2>
    {
    	Error_Handler(__FILE__, __LINE__);
 8001c3a:	21a9      	movs	r1, #169	; 0xa9
 8001c3c:	482b      	ldr	r0, [pc, #172]	; (8001cec <HAL_I2C_MspInit+0x17c>)
 8001c3e:	f7ff ff0f 	bl	8001a60 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a27      	ldr	r2, [pc, #156]	; (8001ce4 <HAL_I2C_MspInit+0x174>)
 8001c46:	639a      	str	r2, [r3, #56]	; 0x38
 8001c48:	4a26      	ldr	r2, [pc, #152]	; (8001ce4 <HAL_I2C_MspInit+0x174>)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance 					= DMA1_Stream6;
 8001c4e:	4b28      	ldr	r3, [pc, #160]	; (8001cf0 <HAL_I2C_MspInit+0x180>)
 8001c50:	4a28      	ldr	r2, [pc, #160]	; (8001cf4 <HAL_I2C_MspInit+0x184>)
 8001c52:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel 				= DMA_CHANNEL_1;
 8001c54:	4b26      	ldr	r3, [pc, #152]	; (8001cf0 <HAL_I2C_MspInit+0x180>)
 8001c56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c5a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction 			= DMA_MEMORY_TO_PERIPH;
 8001c5c:	4b24      	ldr	r3, [pc, #144]	; (8001cf0 <HAL_I2C_MspInit+0x180>)
 8001c5e:	2240      	movs	r2, #64	; 0x40
 8001c60:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc 			= DMA_PINC_DISABLE;
 8001c62:	4b23      	ldr	r3, [pc, #140]	; (8001cf0 <HAL_I2C_MspInit+0x180>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc 				= DMA_MINC_ENABLE;
 8001c68:	4b21      	ldr	r3, [pc, #132]	; (8001cf0 <HAL_I2C_MspInit+0x180>)
 8001c6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c6e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 8001c70:	4b1f      	ldr	r3, [pc, #124]	; (8001cf0 <HAL_I2C_MspInit+0x180>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment 		= DMA_MDATAALIGN_BYTE;
 8001c76:	4b1e      	ldr	r3, [pc, #120]	; (8001cf0 <HAL_I2C_MspInit+0x180>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode 					= DMA_NORMAL;
 8001c7c:	4b1c      	ldr	r3, [pc, #112]	; (8001cf0 <HAL_I2C_MspInit+0x180>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority 				= DMA_PRIORITY_LOW;
 8001c82:	4b1b      	ldr	r3, [pc, #108]	; (8001cf0 <HAL_I2C_MspInit+0x180>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode 				= DMA_FIFOMODE_DISABLE;
 8001c88:	4b19      	ldr	r3, [pc, #100]	; (8001cf0 <HAL_I2C_MspInit+0x180>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001c8e:	4818      	ldr	r0, [pc, #96]	; (8001cf0 <HAL_I2C_MspInit+0x180>)
 8001c90:	f001 ffa8 	bl	8003be4 <HAL_DMA_Init>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d003      	beq.n	8001ca2 <HAL_I2C_MspInit+0x132>
    {
    	Error_Handler(__FILE__, __LINE__);
 8001c9a:	21bb      	movs	r1, #187	; 0xbb
 8001c9c:	4813      	ldr	r0, [pc, #76]	; (8001cec <HAL_I2C_MspInit+0x17c>)
 8001c9e:	f7ff fedf 	bl	8001a60 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a12      	ldr	r2, [pc, #72]	; (8001cf0 <HAL_I2C_MspInit+0x180>)
 8001ca6:	635a      	str	r2, [r3, #52]	; 0x34
 8001ca8:	4a11      	ldr	r2, [pc, #68]	; (8001cf0 <HAL_I2C_MspInit+0x180>)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001cae:	2200      	movs	r2, #0
 8001cb0:	2105      	movs	r1, #5
 8001cb2:	201f      	movs	r0, #31
 8001cb4:	f001 ff50 	bl	8003b58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001cb8:	201f      	movs	r0, #31
 8001cba:	f001 ff69 	bl	8003b90 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	2105      	movs	r1, #5
 8001cc2:	2020      	movs	r0, #32
 8001cc4:	f001 ff48 	bl	8003b58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001cc8:	2020      	movs	r0, #32
 8001cca:	f001 ff61 	bl	8003b90 <HAL_NVIC_EnableIRQ>
  }

}
 8001cce:	bf00      	nop
 8001cd0:	3728      	adds	r7, #40	; 0x28
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40005400 	.word	0x40005400
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	40020400 	.word	0x40020400
 8001ce4:	20000aec 	.word	0x20000aec
 8001ce8:	40026010 	.word	0x40026010
 8001cec:	0800f9e4 	.word	0x0800f9e4
 8001cf0:	20000b4c 	.word	0x20000b4c
 8001cf4:	400260a0 	.word	0x400260a0

08001cf8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*******************************************************/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08a      	sub	sp, #40	; 0x28
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a5e      	ldr	r2, [pc, #376]	; (8001e90 <HAL_SPI_MspInit+0x198>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	f040 80b6 	bne.w	8001e88 <HAL_SPI_MspInit+0x190>
  {
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	613b      	str	r3, [r7, #16]
 8001d20:	4b5c      	ldr	r3, [pc, #368]	; (8001e94 <HAL_SPI_MspInit+0x19c>)
 8001d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d24:	4a5b      	ldr	r2, [pc, #364]	; (8001e94 <HAL_SPI_MspInit+0x19c>)
 8001d26:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d2a:	6453      	str	r3, [r2, #68]	; 0x44
 8001d2c:	4b59      	ldr	r3, [pc, #356]	; (8001e94 <HAL_SPI_MspInit+0x19c>)
 8001d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d34:	613b      	str	r3, [r7, #16]
 8001d36:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d38:	2300      	movs	r3, #0
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	4b55      	ldr	r3, [pc, #340]	; (8001e94 <HAL_SPI_MspInit+0x19c>)
 8001d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d40:	4a54      	ldr	r2, [pc, #336]	; (8001e94 <HAL_SPI_MspInit+0x19c>)
 8001d42:	f043 0301 	orr.w	r3, r3, #1
 8001d46:	6313      	str	r3, [r2, #48]	; 0x30
 8001d48:	4b52      	ldr	r3, [pc, #328]	; (8001e94 <HAL_SPI_MspInit+0x19c>)
 8001d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d54:	2300      	movs	r3, #0
 8001d56:	60bb      	str	r3, [r7, #8]
 8001d58:	4b4e      	ldr	r3, [pc, #312]	; (8001e94 <HAL_SPI_MspInit+0x19c>)
 8001d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5c:	4a4d      	ldr	r2, [pc, #308]	; (8001e94 <HAL_SPI_MspInit+0x19c>)
 8001d5e:	f043 0302 	orr.w	r3, r3, #2
 8001d62:	6313      	str	r3, [r2, #48]	; 0x30
 8001d64:	4b4b      	ldr	r3, [pc, #300]	; (8001e94 <HAL_SPI_MspInit+0x19c>)
 8001d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	60bb      	str	r3, [r7, #8]
 8001d6e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin 		= GPIO_PIN_5|GPIO_PIN_6;
 8001d70:	2360      	movs	r3, #96	; 0x60
 8001d72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode 		= GPIO_MODE_AF_PP;
 8001d74:	2302      	movs	r3, #2
 8001d76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_VERY_HIGH;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate 	= GPIO_AF5_SPI1;
 8001d80:	2305      	movs	r3, #5
 8001d82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d84:	f107 0314 	add.w	r3, r7, #20
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4843      	ldr	r0, [pc, #268]	; (8001e98 <HAL_SPI_MspInit+0x1a0>)
 8001d8c:	f002 fb3a 	bl	8004404 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin 		= GPIO_PIN_5;
 8001d90:	2320      	movs	r3, #32
 8001d92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode 		= GPIO_MODE_AF_PP;
 8001d94:	2302      	movs	r3, #2
 8001d96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_VERY_HIGH;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate 	= GPIO_AF5_SPI1;
 8001da0:	2305      	movs	r3, #5
 8001da2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	4619      	mov	r1, r3
 8001daa:	483c      	ldr	r0, [pc, #240]	; (8001e9c <HAL_SPI_MspInit+0x1a4>)
 8001dac:	f002 fb2a 	bl	8004404 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance 					= DMA2_Stream0;
 8001db0:	4b3b      	ldr	r3, [pc, #236]	; (8001ea0 <HAL_SPI_MspInit+0x1a8>)
 8001db2:	4a3c      	ldr	r2, [pc, #240]	; (8001ea4 <HAL_SPI_MspInit+0x1ac>)
 8001db4:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel 				= DMA_CHANNEL_3;
 8001db6:	4b3a      	ldr	r3, [pc, #232]	; (8001ea0 <HAL_SPI_MspInit+0x1a8>)
 8001db8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001dbc:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction 			= DMA_PERIPH_TO_MEMORY;
 8001dbe:	4b38      	ldr	r3, [pc, #224]	; (8001ea0 <HAL_SPI_MspInit+0x1a8>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc 			= DMA_PINC_DISABLE;
 8001dc4:	4b36      	ldr	r3, [pc, #216]	; (8001ea0 <HAL_SPI_MspInit+0x1a8>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc 				= DMA_MINC_ENABLE;
 8001dca:	4b35      	ldr	r3, [pc, #212]	; (8001ea0 <HAL_SPI_MspInit+0x1a8>)
 8001dcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dd0:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 8001dd2:	4b33      	ldr	r3, [pc, #204]	; (8001ea0 <HAL_SPI_MspInit+0x1a8>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment 		= DMA_MDATAALIGN_BYTE;
 8001dd8:	4b31      	ldr	r3, [pc, #196]	; (8001ea0 <HAL_SPI_MspInit+0x1a8>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode 					= DMA_CIRCULAR;
 8001dde:	4b30      	ldr	r3, [pc, #192]	; (8001ea0 <HAL_SPI_MspInit+0x1a8>)
 8001de0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001de4:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority 				= DMA_PRIORITY_LOW;
 8001de6:	4b2e      	ldr	r3, [pc, #184]	; (8001ea0 <HAL_SPI_MspInit+0x1a8>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode 				= DMA_FIFOMODE_DISABLE;
 8001dec:	4b2c      	ldr	r3, [pc, #176]	; (8001ea0 <HAL_SPI_MspInit+0x1a8>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001df2:	482b      	ldr	r0, [pc, #172]	; (8001ea0 <HAL_SPI_MspInit+0x1a8>)
 8001df4:	f001 fef6 	bl	8003be4 <HAL_DMA_Init>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d004      	beq.n	8001e08 <HAL_SPI_MspInit+0x110>
    {
    	Error_Handler(__FILE__, __LINE__);
 8001dfe:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8001e02:	4829      	ldr	r0, [pc, #164]	; (8001ea8 <HAL_SPI_MspInit+0x1b0>)
 8001e04:	f7ff fe2c 	bl	8001a60 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a25      	ldr	r2, [pc, #148]	; (8001ea0 <HAL_SPI_MspInit+0x1a8>)
 8001e0c:	64da      	str	r2, [r3, #76]	; 0x4c
 8001e0e:	4a24      	ldr	r2, [pc, #144]	; (8001ea0 <HAL_SPI_MspInit+0x1a8>)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance 					= DMA2_Stream3;
 8001e14:	4b25      	ldr	r3, [pc, #148]	; (8001eac <HAL_SPI_MspInit+0x1b4>)
 8001e16:	4a26      	ldr	r2, [pc, #152]	; (8001eb0 <HAL_SPI_MspInit+0x1b8>)
 8001e18:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel 				= DMA_CHANNEL_3;
 8001e1a:	4b24      	ldr	r3, [pc, #144]	; (8001eac <HAL_SPI_MspInit+0x1b4>)
 8001e1c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001e20:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction 			= DMA_MEMORY_TO_PERIPH;
 8001e22:	4b22      	ldr	r3, [pc, #136]	; (8001eac <HAL_SPI_MspInit+0x1b4>)
 8001e24:	2240      	movs	r2, #64	; 0x40
 8001e26:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc 			= DMA_PINC_DISABLE;
 8001e28:	4b20      	ldr	r3, [pc, #128]	; (8001eac <HAL_SPI_MspInit+0x1b4>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc 				= DMA_MINC_ENABLE;
 8001e2e:	4b1f      	ldr	r3, [pc, #124]	; (8001eac <HAL_SPI_MspInit+0x1b4>)
 8001e30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e34:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 8001e36:	4b1d      	ldr	r3, [pc, #116]	; (8001eac <HAL_SPI_MspInit+0x1b4>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment 		= DMA_MDATAALIGN_BYTE;
 8001e3c:	4b1b      	ldr	r3, [pc, #108]	; (8001eac <HAL_SPI_MspInit+0x1b4>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode 					= DMA_CIRCULAR;
 8001e42:	4b1a      	ldr	r3, [pc, #104]	; (8001eac <HAL_SPI_MspInit+0x1b4>)
 8001e44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e48:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority 				= DMA_PRIORITY_LOW;
 8001e4a:	4b18      	ldr	r3, [pc, #96]	; (8001eac <HAL_SPI_MspInit+0x1b4>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode 				= DMA_FIFOMODE_DISABLE;
 8001e50:	4b16      	ldr	r3, [pc, #88]	; (8001eac <HAL_SPI_MspInit+0x1b4>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001e56:	4815      	ldr	r0, [pc, #84]	; (8001eac <HAL_SPI_MspInit+0x1b4>)
 8001e58:	f001 fec4 	bl	8003be4 <HAL_DMA_Init>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d004      	beq.n	8001e6c <HAL_SPI_MspInit+0x174>
    {
    	Error_Handler(__FILE__, __LINE__);
 8001e62:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001e66:	4810      	ldr	r0, [pc, #64]	; (8001ea8 <HAL_SPI_MspInit+0x1b0>)
 8001e68:	f7ff fdfa 	bl	8001a60 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a0f      	ldr	r2, [pc, #60]	; (8001eac <HAL_SPI_MspInit+0x1b4>)
 8001e70:	649a      	str	r2, [r3, #72]	; 0x48
 8001e72:	4a0e      	ldr	r2, [pc, #56]	; (8001eac <HAL_SPI_MspInit+0x1b4>)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001e78:	2200      	movs	r2, #0
 8001e7a:	2105      	movs	r1, #5
 8001e7c:	2023      	movs	r0, #35	; 0x23
 8001e7e:	f001 fe6b 	bl	8003b58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001e82:	2023      	movs	r0, #35	; 0x23
 8001e84:	f001 fe84 	bl	8003b90 <HAL_NVIC_EnableIRQ>
  }

}
 8001e88:	bf00      	nop
 8001e8a:	3728      	adds	r7, #40	; 0x28
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40013000 	.word	0x40013000
 8001e94:	40023800 	.word	0x40023800
 8001e98:	40020000 	.word	0x40020000
 8001e9c:	40020400 	.word	0x40020400
 8001ea0:	20000c04 	.word	0x20000c04
 8001ea4:	40026410 	.word	0x40026410
 8001ea8:	0800f9e4 	.word	0x0800f9e4
 8001eac:	20000c64 	.word	0x20000c64
 8001eb0:	40026458 	.word	0x40026458

08001eb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*******************************************************/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b08a      	sub	sp, #40	; 0x28
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ebc:	f107 0314 	add.w	r3, r7, #20
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	605a      	str	r2, [r3, #4]
 8001ec6:	609a      	str	r2, [r3, #8]
 8001ec8:	60da      	str	r2, [r3, #12]
 8001eca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a4f      	ldr	r2, [pc, #316]	; (8002010 <HAL_UART_MspInit+0x15c>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	f040 8097 	bne.w	8002006 <HAL_UART_MspInit+0x152>
  {
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ed8:	2300      	movs	r3, #0
 8001eda:	613b      	str	r3, [r7, #16]
 8001edc:	4b4d      	ldr	r3, [pc, #308]	; (8002014 <HAL_UART_MspInit+0x160>)
 8001ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee0:	4a4c      	ldr	r2, [pc, #304]	; (8002014 <HAL_UART_MspInit+0x160>)
 8001ee2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ee6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ee8:	4b4a      	ldr	r3, [pc, #296]	; (8002014 <HAL_UART_MspInit+0x160>)
 8001eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ef0:	613b      	str	r3, [r7, #16]
 8001ef2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	60fb      	str	r3, [r7, #12]
 8001ef8:	4b46      	ldr	r3, [pc, #280]	; (8002014 <HAL_UART_MspInit+0x160>)
 8001efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efc:	4a45      	ldr	r2, [pc, #276]	; (8002014 <HAL_UART_MspInit+0x160>)
 8001efe:	f043 0308 	orr.w	r3, r3, #8
 8001f02:	6313      	str	r3, [r2, #48]	; 0x30
 8001f04:	4b43      	ldr	r3, [pc, #268]	; (8002014 <HAL_UART_MspInit+0x160>)
 8001f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f08:	f003 0308 	and.w	r3, r3, #8
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin 		= STLK_RX_Pin|STLK_TX_Pin;
 8001f10:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode 		= GPIO_MODE_AF_PP;
 8001f16:	2302      	movs	r3, #2
 8001f18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_VERY_HIGH;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate 	= GPIO_AF7_USART3;
 8001f22:	2307      	movs	r3, #7
 8001f24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f26:	f107 0314 	add.w	r3, r7, #20
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	483a      	ldr	r0, [pc, #232]	; (8002018 <HAL_UART_MspInit+0x164>)
 8001f2e:	f002 fa69 	bl	8004404 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance 		= DMA1_Stream1;
 8001f32:	4b3a      	ldr	r3, [pc, #232]	; (800201c <HAL_UART_MspInit+0x168>)
 8001f34:	4a3a      	ldr	r2, [pc, #232]	; (8002020 <HAL_UART_MspInit+0x16c>)
 8001f36:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel 	= DMA_CHANNEL_4;
 8001f38:	4b38      	ldr	r3, [pc, #224]	; (800201c <HAL_UART_MspInit+0x168>)
 8001f3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f3e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction 	= DMA_PERIPH_TO_MEMORY;
 8001f40:	4b36      	ldr	r3, [pc, #216]	; (800201c <HAL_UART_MspInit+0x168>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc 	= DMA_PINC_DISABLE;
 8001f46:	4b35      	ldr	r3, [pc, #212]	; (800201c <HAL_UART_MspInit+0x168>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc 		= DMA_MINC_ENABLE;
 8001f4c:	4b33      	ldr	r3, [pc, #204]	; (800201c <HAL_UART_MspInit+0x168>)
 8001f4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f52:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f54:	4b31      	ldr	r3, [pc, #196]	; (800201c <HAL_UART_MspInit+0x168>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 8001f5a:	4b30      	ldr	r3, [pc, #192]	; (800201c <HAL_UART_MspInit+0x168>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode 		= DMA_NORMAL;
 8001f60:	4b2e      	ldr	r3, [pc, #184]	; (800201c <HAL_UART_MspInit+0x168>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority 	= DMA_PRIORITY_LOW;
 8001f66:	4b2d      	ldr	r3, [pc, #180]	; (800201c <HAL_UART_MspInit+0x168>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode 	= DMA_FIFOMODE_DISABLE;
 8001f6c:	4b2b      	ldr	r3, [pc, #172]	; (800201c <HAL_UART_MspInit+0x168>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001f72:	482a      	ldr	r0, [pc, #168]	; (800201c <HAL_UART_MspInit+0x168>)
 8001f74:	f001 fe36 	bl	8003be4 <HAL_DMA_Init>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d004      	beq.n	8001f88 <HAL_UART_MspInit+0xd4>
    {
    	Error_Handler(__FILE__, __LINE__);
 8001f7e:	f240 117f 	movw	r1, #383	; 0x17f
 8001f82:	4828      	ldr	r0, [pc, #160]	; (8002024 <HAL_UART_MspInit+0x170>)
 8001f84:	f7ff fd6c 	bl	8001a60 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a24      	ldr	r2, [pc, #144]	; (800201c <HAL_UART_MspInit+0x168>)
 8001f8c:	639a      	str	r2, [r3, #56]	; 0x38
 8001f8e:	4a23      	ldr	r2, [pc, #140]	; (800201c <HAL_UART_MspInit+0x168>)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance 		= DMA1_Stream3;
 8001f94:	4b24      	ldr	r3, [pc, #144]	; (8002028 <HAL_UART_MspInit+0x174>)
 8001f96:	4a25      	ldr	r2, [pc, #148]	; (800202c <HAL_UART_MspInit+0x178>)
 8001f98:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel 	= DMA_CHANNEL_4;
 8001f9a:	4b23      	ldr	r3, [pc, #140]	; (8002028 <HAL_UART_MspInit+0x174>)
 8001f9c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fa0:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction 	= DMA_MEMORY_TO_PERIPH;
 8001fa2:	4b21      	ldr	r3, [pc, #132]	; (8002028 <HAL_UART_MspInit+0x174>)
 8001fa4:	2240      	movs	r2, #64	; 0x40
 8001fa6:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc 	= DMA_PINC_DISABLE;
 8001fa8:	4b1f      	ldr	r3, [pc, #124]	; (8002028 <HAL_UART_MspInit+0x174>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc 		= DMA_MINC_ENABLE;
 8001fae:	4b1e      	ldr	r3, [pc, #120]	; (8002028 <HAL_UART_MspInit+0x174>)
 8001fb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fb4:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fb6:	4b1c      	ldr	r3, [pc, #112]	; (8002028 <HAL_UART_MspInit+0x174>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 8001fbc:	4b1a      	ldr	r3, [pc, #104]	; (8002028 <HAL_UART_MspInit+0x174>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode 		= DMA_NORMAL;
 8001fc2:	4b19      	ldr	r3, [pc, #100]	; (8002028 <HAL_UART_MspInit+0x174>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority 	= DMA_PRIORITY_LOW;
 8001fc8:	4b17      	ldr	r3, [pc, #92]	; (8002028 <HAL_UART_MspInit+0x174>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode 	= DMA_FIFOMODE_DISABLE;
 8001fce:	4b16      	ldr	r3, [pc, #88]	; (8002028 <HAL_UART_MspInit+0x174>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001fd4:	4814      	ldr	r0, [pc, #80]	; (8002028 <HAL_UART_MspInit+0x174>)
 8001fd6:	f001 fe05 	bl	8003be4 <HAL_DMA_Init>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d004      	beq.n	8001fea <HAL_UART_MspInit+0x136>
    {
    	Error_Handler(__FILE__, __LINE__);
 8001fe0:	f240 1191 	movw	r1, #401	; 0x191
 8001fe4:	480f      	ldr	r0, [pc, #60]	; (8002024 <HAL_UART_MspInit+0x170>)
 8001fe6:	f7ff fd3b 	bl	8001a60 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a0e      	ldr	r2, [pc, #56]	; (8002028 <HAL_UART_MspInit+0x174>)
 8001fee:	635a      	str	r2, [r3, #52]	; 0x34
 8001ff0:	4a0d      	ldr	r2, [pc, #52]	; (8002028 <HAL_UART_MspInit+0x174>)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6393      	str	r3, [r2, #56]	; 0x38


	/* UART2 interrupt Init */
	HAL_NVIC_SetPriority(USART3_IRQn, 15, 0);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	210f      	movs	r1, #15
 8001ffa:	2027      	movs	r0, #39	; 0x27
 8001ffc:	f001 fdac 	bl	8003b58 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002000:	2027      	movs	r0, #39	; 0x27
 8002002:	f001 fdc5 	bl	8003b90 <HAL_NVIC_EnableIRQ>
  }

}
 8002006:	bf00      	nop
 8002008:	3728      	adds	r7, #40	; 0x28
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40004800 	.word	0x40004800
 8002014:	40023800 	.word	0x40023800
 8002018:	40020c00 	.word	0x40020c00
 800201c:	20000d24 	.word	0x20000d24
 8002020:	40026028 	.word	0x40026028
 8002024:	0800f9e4 	.word	0x0800f9e4
 8002028:	20000cc4 	.word	0x20000cc4
 800202c:	40026058 	.word	0x40026058

08002030 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b08c      	sub	sp, #48	; 0x30
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002038:	2300      	movs	r3, #0
 800203a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800203c:	2300      	movs	r3, #0
 800203e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8002040:	2200      	movs	r2, #0
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	2019      	movs	r0, #25
 8002046:	f001 fd87 	bl	8003b58 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800204a:	2019      	movs	r0, #25
 800204c:	f001 fda0 	bl	8003b90 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002050:	2300      	movs	r3, #0
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	4b1f      	ldr	r3, [pc, #124]	; (80020d4 <HAL_InitTick+0xa4>)
 8002056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002058:	4a1e      	ldr	r2, [pc, #120]	; (80020d4 <HAL_InitTick+0xa4>)
 800205a:	f043 0301 	orr.w	r3, r3, #1
 800205e:	6453      	str	r3, [r2, #68]	; 0x44
 8002060:	4b1c      	ldr	r3, [pc, #112]	; (80020d4 <HAL_InitTick+0xa4>)
 8002062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800206c:	f107 0210 	add.w	r2, r7, #16
 8002070:	f107 0314 	add.w	r3, r7, #20
 8002074:	4611      	mov	r1, r2
 8002076:	4618      	mov	r0, r3
 8002078:	f004 ff34 	bl	8006ee4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800207c:	f004 ff1e 	bl	8006ebc <HAL_RCC_GetPCLK2Freq>
 8002080:	4603      	mov	r3, r0
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002088:	4a13      	ldr	r2, [pc, #76]	; (80020d8 <HAL_InitTick+0xa8>)
 800208a:	fba2 2303 	umull	r2, r3, r2, r3
 800208e:	0c9b      	lsrs	r3, r3, #18
 8002090:	3b01      	subs	r3, #1
 8002092:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002094:	4b11      	ldr	r3, [pc, #68]	; (80020dc <HAL_InitTick+0xac>)
 8002096:	4a12      	ldr	r2, [pc, #72]	; (80020e0 <HAL_InitTick+0xb0>)
 8002098:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800209a:	4b10      	ldr	r3, [pc, #64]	; (80020dc <HAL_InitTick+0xac>)
 800209c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80020a0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80020a2:	4a0e      	ldr	r2, [pc, #56]	; (80020dc <HAL_InitTick+0xac>)
 80020a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80020a8:	4b0c      	ldr	r3, [pc, #48]	; (80020dc <HAL_InitTick+0xac>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ae:	4b0b      	ldr	r3, [pc, #44]	; (80020dc <HAL_InitTick+0xac>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80020b4:	4809      	ldr	r0, [pc, #36]	; (80020dc <HAL_InitTick+0xac>)
 80020b6:	f005 f8ef 	bl	8007298 <HAL_TIM_Base_Init>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d104      	bne.n	80020ca <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80020c0:	4806      	ldr	r0, [pc, #24]	; (80020dc <HAL_InitTick+0xac>)
 80020c2:	f005 f939 	bl	8007338 <HAL_TIM_Base_Start_IT>
 80020c6:	4603      	mov	r3, r0
 80020c8:	e000      	b.n	80020cc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3730      	adds	r7, #48	; 0x30
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40023800 	.word	0x40023800
 80020d8:	431bde83 	.word	0x431bde83
 80020dc:	20000dfc 	.word	0x20000dfc
 80020e0:	40010000 	.word	0x40010000

080020e4 <NMI_Handler>:
/******************************************************************************/
/************************************************************
  * @brief This function handles Non maskable interrupt.
  ***********************************************************/
void NMI_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  while (1)
 80020e8:	e7fe      	b.n	80020e8 <NMI_Handler+0x4>

080020ea <HardFault_Handler>:

/************************************************************
  * @brief This function handles Hard fault interrupt.
  ***********************************************************/
void HardFault_Handler(void)
{
 80020ea:	b480      	push	{r7}
 80020ec:	af00      	add	r7, sp, #0
  while (1)
 80020ee:	e7fe      	b.n	80020ee <HardFault_Handler+0x4>

080020f0 <MemManage_Handler>:

/************************************************************
  * @brief This function handles Memory management fault.
  ***********************************************************/
void MemManage_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  while (1)
 80020f4:	e7fe      	b.n	80020f4 <MemManage_Handler+0x4>

080020f6 <BusFault_Handler>:

/************************************************************
  * @brief This function handles Pre-fetch fault, memory access fault.
  ***********************************************************/
void BusFault_Handler(void)
{
 80020f6:	b480      	push	{r7}
 80020f8:	af00      	add	r7, sp, #0
  while (1)
 80020fa:	e7fe      	b.n	80020fa <BusFault_Handler+0x4>

080020fc <UsageFault_Handler>:

/************************************************************
  * @brief This function handles Undefined instruction or illegal state.
  ***********************************************************/
void UsageFault_Handler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  while (1)
 8002100:	e7fe      	b.n	8002100 <UsageFault_Handler+0x4>

08002102 <DebugMon_Handler>:

/************************************************************
  * @brief This function handles Debug monitor.
  ***********************************************************/
void DebugMon_Handler(void)
{
 8002102:	b480      	push	{r7}
 8002104:	af00      	add	r7, sp, #0

}
 8002106:	bf00      	nop
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <EXTI15_10_IRQHandler>:
  * @brief  This function handles external lines 15 to 10 interrupt request.
  * @param  None
  * @retval None
  *****************************************************************************/
void EXTI15_10_IRQHandler(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8002114:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002118:	f002 fb54 	bl	80047c4 <HAL_GPIO_EXTI_IRQHandler>
}
 800211c:	bf00      	nop
 800211e:	bd80      	pop	{r7, pc}

08002120 <DMA1_Stream0_IRQHandler>:

/************************************************************
  * @brief This function handles DMA1 stream0 global interrupt.
  ************************************************************/
void DMA1_Stream0_IRQHandler(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002124:	4802      	ldr	r0, [pc, #8]	; (8002130 <DMA1_Stream0_IRQHandler+0x10>)
 8002126:	f001 fef5 	bl	8003f14 <HAL_DMA_IRQHandler>
}
 800212a:	bf00      	nop
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	20000aec 	.word	0x20000aec

08002134 <DMA1_Stream6_IRQHandler>:

/*************************************************************
  * @brief This function handles DMA1 stream6 global interrupt.
  ************************************************************/
void DMA1_Stream6_IRQHandler(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002138:	4802      	ldr	r0, [pc, #8]	; (8002144 <DMA1_Stream6_IRQHandler+0x10>)
 800213a:	f001 feeb 	bl	8003f14 <HAL_DMA_IRQHandler>
}
 800213e:	bf00      	nop
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	20000b4c 	.word	0x20000b4c

08002148 <TIM1_UP_TIM10_IRQHandler>:

/*************************************************************
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  ************************************************************/
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim1);
 800214c:	4802      	ldr	r0, [pc, #8]	; (8002158 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800214e:	f005 f963 	bl	8007418 <HAL_TIM_IRQHandler>
}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	20000dfc 	.word	0x20000dfc

0800215c <I2C1_EV_IRQHandler>:

/**************************************************************
  * @brief This function handles I2C1 event interrupt.
  *************************************************************/
void I2C1_EV_IRQHandler(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002160:	4802      	ldr	r0, [pc, #8]	; (800216c <I2C1_EV_IRQHandler+0x10>)
 8002162:	f002 fc8b 	bl	8004a7c <HAL_I2C_EV_IRQHandler>
}
 8002166:	bf00      	nop
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	20000a98 	.word	0x20000a98

08002170 <I2C1_ER_IRQHandler>:

/**************************************************************
  * @brief This function handles I2C1 error interrupt.
  *************************************************************/
void I2C1_ER_IRQHandler(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002174:	4802      	ldr	r0, [pc, #8]	; (8002180 <I2C1_ER_IRQHandler+0x10>)
 8002176:	f002 fdf2 	bl	8004d5e <HAL_I2C_ER_IRQHandler>
}
 800217a:	bf00      	nop
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	20000a98 	.word	0x20000a98

08002184 <SPI1_IRQHandler>:

/**************************************************************
  * @brief This function handles SPI1 global interrupt.
  *************************************************************/
void SPI1_IRQHandler(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi1);
 8002188:	4802      	ldr	r0, [pc, #8]	; (8002194 <SPI1_IRQHandler+0x10>)
 800218a:	f004 ff67 	bl	800705c <HAL_SPI_IRQHandler>
}
 800218e:	bf00      	nop
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	20000bac 	.word	0x20000bac

08002198 <DMA2_Stream0_IRQHandler>:

/**************************************************************
  * @brief This function handles DMA2 stream0 global interrupt.
  *************************************************************/
void DMA2_Stream0_IRQHandler(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800219c:	4802      	ldr	r0, [pc, #8]	; (80021a8 <DMA2_Stream0_IRQHandler+0x10>)
 800219e:	f001 feb9 	bl	8003f14 <HAL_DMA_IRQHandler>
}
 80021a2:	bf00      	nop
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	20000c04 	.word	0x20000c04

080021ac <DMA2_Stream3_IRQHandler>:

/**************************************************************
  * @brief This function handles DMA2 stream3 global interrupt.
  *************************************************************/
void DMA2_Stream3_IRQHandler(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80021b0:	4802      	ldr	r0, [pc, #8]	; (80021bc <DMA2_Stream3_IRQHandler+0x10>)
 80021b2:	f001 feaf 	bl	8003f14 <HAL_DMA_IRQHandler>
}
 80021b6:	bf00      	nop
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	20000c64 	.word	0x20000c64

080021c0 <DMA1_Stream1_IRQHandler>:
  * @brief This function handles DMA1 stream1 global interrupt.
  * @param  None
  * @retval None
  **************************************************************/
void DMA1_Stream1_IRQHandler(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80021c4:	4802      	ldr	r0, [pc, #8]	; (80021d0 <DMA1_Stream1_IRQHandler+0x10>)
 80021c6:	f001 fea5 	bl	8003f14 <HAL_DMA_IRQHandler>
}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	20000d24 	.word	0x20000d24

080021d4 <USART3_IRQHandler>:

/********************************************************
  * @brief This function handles USART3 interrupt.
  ******************************************************/
void USART3_IRQHandler(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b08a      	sub	sp, #40	; 0x28
 80021d8:	af00      	add	r7, sp, #0
	extern xQueueHandle msg_queue;

	HAL_UART_IRQHandler(&huart3);
 80021da:	4824      	ldr	r0, [pc, #144]	; (800226c <USART3_IRQHandler+0x98>)
 80021dc:	f005 fc8e 	bl	8007afc <HAL_UART_IRQHandler>

	if(RESET != __HAL_UART_GET_FLAG(&huart3, UART_FLAG_IDLE))   //Judging whether it is idle interruption
 80021e0:	4b22      	ldr	r3, [pc, #136]	; (800226c <USART3_IRQHandler+0x98>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0310 	and.w	r3, r3, #16
 80021ea:	2b10      	cmp	r3, #16
 80021ec:	d139      	bne.n	8002262 <USART3_IRQHandler+0x8e>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart3);                     //Clear idle interrupt sign (otherwise it will continue to enter interrupt)
 80021ee:	2300      	movs	r3, #0
 80021f0:	607b      	str	r3, [r7, #4]
 80021f2:	4b1e      	ldr	r3, [pc, #120]	; (800226c <USART3_IRQHandler+0x98>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	607b      	str	r3, [r7, #4]
 80021fa:	4b1c      	ldr	r3, [pc, #112]	; (800226c <USART3_IRQHandler+0x98>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	607b      	str	r3, [r7, #4]
 8002202:	687b      	ldr	r3, [r7, #4]

		//Stop this DMA transmission
		HAL_UART_DMAStop(&huart3);
 8002204:	4819      	ldr	r0, [pc, #100]	; (800226c <USART3_IRQHandler+0x98>)
 8002206:	f005 fbfa 	bl	80079fe <HAL_UART_DMAStop>

		//Calculate the length of the received data
		uint8_t data_length  = 255 - __HAL_DMA_GET_COUNTER(&hdma_usart3_rx);
 800220a:	4b19      	ldr	r3, [pc, #100]	; (8002270 <USART3_IRQHandler+0x9c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	b2db      	uxtb	r3, r3
 8002212:	43db      	mvns	r3, r3
 8002214:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uart3_buff_len 		 = data_length;
 8002218:	4a16      	ldr	r2, [pc, #88]	; (8002274 <USART3_IRQHandler+0xa0>)
 800221a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800221e:	7013      	strb	r3, [r2, #0]
		/*******************************************************************************
		* The xHigherPriorityTaskWoken parameter must be initialized to pdFALSE as
		* it will get set to pdTRUE inside the interrupt safe API function if a
		* context switch is required.
		*******************************************************************************/
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8002220:	2300      	movs	r3, #0
 8002222:	623b      	str	r3, [r7, #32]

		// Construct message and send
		PrintMessage msg;
		strncpy(msg.body, (char*)uart3Rcv_buff, data_length);
 8002224:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002228:	f107 0308 	add.w	r3, r7, #8
 800222c:	4912      	ldr	r1, [pc, #72]	; (8002278 <USART3_IRQHandler+0xa4>)
 800222e:	4618      	mov	r0, r3
 8002230:	f00b f86c 	bl	800d30c <strncpy>
		msg.count = data_length;
 8002234:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002238:	61fb      	str	r3, [r7, #28]

		if (xQueueSendToFrontFromISR(msg_queue, &msg, &xHigherPriorityTaskWoken) == pdPASS)
 800223a:	4b10      	ldr	r3, [pc, #64]	; (800227c <USART3_IRQHandler+0xa8>)
 800223c:	6818      	ldr	r0, [r3, #0]
 800223e:	f107 0220 	add.w	r2, r7, #32
 8002242:	f107 0108 	add.w	r1, r7, #8
 8002246:	2301      	movs	r3, #1
 8002248:	f007 fac0 	bl	80097cc <xQueueGenericSendFromISR>
		 * xHigherPriorityTaskWoken was set to pdTRUE inside xSemaphoreGiveFromISR()
		 * then calling portEND_SWITCHING_ISR() will request a context switch. If
		 * xHigherPriorityTaskWoken is still pdFALSE then calling
		 * portEND_SWITCHING_ISR() will have no effect
		 *****************************************************************************/
		portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 800224c:	6a3b      	ldr	r3, [r7, #32]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d007      	beq.n	8002262 <USART3_IRQHandler+0x8e>
 8002252:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <USART3_IRQHandler+0xac>)
 8002254:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	f3bf 8f4f 	dsb	sy
 800225e:	f3bf 8f6f 	isb	sy

		//Restart to start DMA transmission of 255 bytes of data at a time
		HAL_UART_Receive_DMA(&huart3, (uint8_t*)uart3Rcv_buff, UART3_RX_BUFFER_SIZE);
#endif
	}
}
 8002262:	bf00      	nop
 8002264:	3728      	adds	r7, #40	; 0x28
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	2000166c 	.word	0x2000166c
 8002270:	20000d24 	.word	0x20000d24
 8002274:	200017af 	.word	0x200017af
 8002278:	200016b0 	.word	0x200016b0
 800227c:	20000de0 	.word	0x20000de0
 8002280:	e000ed04 	.word	0xe000ed04

08002284 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
	return 1;
 8002288:	2301      	movs	r3, #1
}
 800228a:	4618      	mov	r0, r3
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <_kill>:

int _kill(int pid, int sig)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800229e:	f00a fad5 	bl	800c84c <__errno>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2216      	movs	r2, #22
 80022a6:	601a      	str	r2, [r3, #0]
	return -1;
 80022a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3708      	adds	r7, #8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <_exit>:

void _exit (int status)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80022bc:	f04f 31ff 	mov.w	r1, #4294967295
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f7ff ffe7 	bl	8002294 <_kill>
	while (1) {}		/* Make sure we hang here */
 80022c6:	e7fe      	b.n	80022c6 <_exit+0x12>

080022c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022d4:	2300      	movs	r3, #0
 80022d6:	617b      	str	r3, [r7, #20]
 80022d8:	e00a      	b.n	80022f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022da:	f3af 8000 	nop.w
 80022de:	4601      	mov	r1, r0
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	1c5a      	adds	r2, r3, #1
 80022e4:	60ba      	str	r2, [r7, #8]
 80022e6:	b2ca      	uxtb	r2, r1
 80022e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	3301      	adds	r3, #1
 80022ee:	617b      	str	r3, [r7, #20]
 80022f0:	697a      	ldr	r2, [r7, #20]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	dbf0      	blt.n	80022da <_read+0x12>
	}

return len;
 80022f8:	687b      	ldr	r3, [r7, #4]
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3718      	adds	r7, #24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b086      	sub	sp, #24
 8002306:	af00      	add	r7, sp, #0
 8002308:	60f8      	str	r0, [r7, #12]
 800230a:	60b9      	str	r1, [r7, #8]
 800230c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800230e:	2300      	movs	r3, #0
 8002310:	617b      	str	r3, [r7, #20]
 8002312:	e009      	b.n	8002328 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	1c5a      	adds	r2, r3, #1
 8002318:	60ba      	str	r2, [r7, #8]
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f001 fa11 	bl	8003744 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	3301      	adds	r3, #1
 8002326:	617b      	str	r3, [r7, #20]
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	429a      	cmp	r2, r3
 800232e:	dbf1      	blt.n	8002314 <_write+0x12>
	}
	return len;
 8002330:	687b      	ldr	r3, [r7, #4]
}
 8002332:	4618      	mov	r0, r3
 8002334:	3718      	adds	r7, #24
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <_close>:

int _close(int file)
{
 800233a:	b480      	push	{r7}
 800233c:	b083      	sub	sp, #12
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
	return -1;
 8002342:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002346:	4618      	mov	r0, r3
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002352:	b480      	push	{r7}
 8002354:	b083      	sub	sp, #12
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
 800235a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002362:	605a      	str	r2, [r3, #4]
	return 0;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <_isatty>:

int _isatty(int file)
{
 8002372:	b480      	push	{r7}
 8002374:	b083      	sub	sp, #12
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
	return 1;
 800237a:	2301      	movs	r3, #1
}
 800237c:	4618      	mov	r0, r3
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
	return 0;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3714      	adds	r7, #20
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
	...

080023a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023ac:	4a14      	ldr	r2, [pc, #80]	; (8002400 <_sbrk+0x5c>)
 80023ae:	4b15      	ldr	r3, [pc, #84]	; (8002404 <_sbrk+0x60>)
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023b8:	4b13      	ldr	r3, [pc, #76]	; (8002408 <_sbrk+0x64>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d102      	bne.n	80023c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023c0:	4b11      	ldr	r3, [pc, #68]	; (8002408 <_sbrk+0x64>)
 80023c2:	4a12      	ldr	r2, [pc, #72]	; (800240c <_sbrk+0x68>)
 80023c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023c6:	4b10      	ldr	r3, [pc, #64]	; (8002408 <_sbrk+0x64>)
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4413      	add	r3, r2
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d207      	bcs.n	80023e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023d4:	f00a fa3a 	bl	800c84c <__errno>
 80023d8:	4603      	mov	r3, r0
 80023da:	220c      	movs	r2, #12
 80023dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023de:	f04f 33ff 	mov.w	r3, #4294967295
 80023e2:	e009      	b.n	80023f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023e4:	4b08      	ldr	r3, [pc, #32]	; (8002408 <_sbrk+0x64>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ea:	4b07      	ldr	r3, [pc, #28]	; (8002408 <_sbrk+0x64>)
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4413      	add	r3, r2
 80023f2:	4a05      	ldr	r2, [pc, #20]	; (8002408 <_sbrk+0x64>)
 80023f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023f6:	68fb      	ldr	r3, [r7, #12]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	20030000 	.word	0x20030000
 8002404:	00000800 	.word	0x00000800
 8002408:	20000e44 	.word	0x20000e44
 800240c:	20005668 	.word	0x20005668

08002410 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002414:	4b06      	ldr	r3, [pc, #24]	; (8002430 <SystemInit+0x20>)
 8002416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800241a:	4a05      	ldr	r2, [pc, #20]	; (8002430 <SystemInit+0x20>)
 800241c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002420:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002424:	bf00      	nop
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	e000ed00 	.word	0xe000ed00

08002434 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002434:	b480      	push	{r7}
 8002436:	b087      	sub	sp, #28
 8002438:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800243a:	2300      	movs	r3, #0
 800243c:	613b      	str	r3, [r7, #16]
 800243e:	2300      	movs	r3, #0
 8002440:	617b      	str	r3, [r7, #20]
 8002442:	2302      	movs	r3, #2
 8002444:	60fb      	str	r3, [r7, #12]
 8002446:	2300      	movs	r3, #0
 8002448:	60bb      	str	r3, [r7, #8]
 800244a:	2302      	movs	r3, #2
 800244c:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800244e:	4b34      	ldr	r3, [pc, #208]	; (8002520 <SystemCoreClockUpdate+0xec>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 030c 	and.w	r3, r3, #12
 8002456:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	2b08      	cmp	r3, #8
 800245c:	d011      	beq.n	8002482 <SystemCoreClockUpdate+0x4e>
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	2b08      	cmp	r3, #8
 8002462:	d844      	bhi.n	80024ee <SystemCoreClockUpdate+0xba>
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d003      	beq.n	8002472 <SystemCoreClockUpdate+0x3e>
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	2b04      	cmp	r3, #4
 800246e:	d004      	beq.n	800247a <SystemCoreClockUpdate+0x46>
 8002470:	e03d      	b.n	80024ee <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8002472:	4b2c      	ldr	r3, [pc, #176]	; (8002524 <SystemCoreClockUpdate+0xf0>)
 8002474:	4a2c      	ldr	r2, [pc, #176]	; (8002528 <SystemCoreClockUpdate+0xf4>)
 8002476:	601a      	str	r2, [r3, #0]
      break;
 8002478:	e03d      	b.n	80024f6 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800247a:	4b2a      	ldr	r3, [pc, #168]	; (8002524 <SystemCoreClockUpdate+0xf0>)
 800247c:	4a2b      	ldr	r2, [pc, #172]	; (800252c <SystemCoreClockUpdate+0xf8>)
 800247e:	601a      	str	r2, [r3, #0]
      break;
 8002480:	e039      	b.n	80024f6 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8002482:	4b27      	ldr	r3, [pc, #156]	; (8002520 <SystemCoreClockUpdate+0xec>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	0d9b      	lsrs	r3, r3, #22
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800248e:	4b24      	ldr	r3, [pc, #144]	; (8002520 <SystemCoreClockUpdate+0xec>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002496:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00c      	beq.n	80024b8 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800249e:	4a23      	ldr	r2, [pc, #140]	; (800252c <SystemCoreClockUpdate+0xf8>)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a6:	4a1e      	ldr	r2, [pc, #120]	; (8002520 <SystemCoreClockUpdate+0xec>)
 80024a8:	6852      	ldr	r2, [r2, #4]
 80024aa:	0992      	lsrs	r2, r2, #6
 80024ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024b0:	fb02 f303 	mul.w	r3, r2, r3
 80024b4:	617b      	str	r3, [r7, #20]
 80024b6:	e00b      	b.n	80024d0 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80024b8:	4a1b      	ldr	r2, [pc, #108]	; (8002528 <SystemCoreClockUpdate+0xf4>)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c0:	4a17      	ldr	r2, [pc, #92]	; (8002520 <SystemCoreClockUpdate+0xec>)
 80024c2:	6852      	ldr	r2, [r2, #4]
 80024c4:	0992      	lsrs	r2, r2, #6
 80024c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024ca:	fb02 f303 	mul.w	r3, r2, r3
 80024ce:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80024d0:	4b13      	ldr	r3, [pc, #76]	; (8002520 <SystemCoreClockUpdate+0xec>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	0c1b      	lsrs	r3, r3, #16
 80024d6:	f003 0303 	and.w	r3, r3, #3
 80024da:	3301      	adds	r3, #1
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e8:	4a0e      	ldr	r2, [pc, #56]	; (8002524 <SystemCoreClockUpdate+0xf0>)
 80024ea:	6013      	str	r3, [r2, #0]
      break;
 80024ec:	e003      	b.n	80024f6 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80024ee:	4b0d      	ldr	r3, [pc, #52]	; (8002524 <SystemCoreClockUpdate+0xf0>)
 80024f0:	4a0d      	ldr	r2, [pc, #52]	; (8002528 <SystemCoreClockUpdate+0xf4>)
 80024f2:	601a      	str	r2, [r3, #0]
      break;
 80024f4:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80024f6:	4b0a      	ldr	r3, [pc, #40]	; (8002520 <SystemCoreClockUpdate+0xec>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	091b      	lsrs	r3, r3, #4
 80024fc:	f003 030f 	and.w	r3, r3, #15
 8002500:	4a0b      	ldr	r2, [pc, #44]	; (8002530 <SystemCoreClockUpdate+0xfc>)
 8002502:	5cd3      	ldrb	r3, [r2, r3]
 8002504:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8002506:	4b07      	ldr	r3, [pc, #28]	; (8002524 <SystemCoreClockUpdate+0xf0>)
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	fa22 f303 	lsr.w	r3, r2, r3
 8002510:	4a04      	ldr	r2, [pc, #16]	; (8002524 <SystemCoreClockUpdate+0xf0>)
 8002512:	6013      	str	r3, [r2, #0]
}
 8002514:	bf00      	nop
 8002516:	371c      	adds	r7, #28
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	40023800 	.word	0x40023800
 8002524:	20000000 	.word	0x20000000
 8002528:	00f42400 	.word	0x00f42400
 800252c:	007a1200 	.word	0x007a1200
 8002530:	080100d4 	.word	0x080100d4

08002534 <fEraseCMD>:

/**************************************
 * FLASH ERASE COMMAND	  			  *
 **************************************/
static void fEraseCMD(int argc, char **argv)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
	if (argc > 1){
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2b01      	cmp	r3, #1
 8002542:	dd03      	ble.n	800254c <fEraseCMD+0x18>
		puts("FERASE invalid arguments!\r\n");
 8002544:	4804      	ldr	r0, [pc, #16]	; (8002558 <fEraseCMD+0x24>)
 8002546:	f000 fa69 	bl	8002a1c <tinysh_puts>
		return;
 800254a:	e002      	b.n	8002552 <fEraseCMD+0x1e>
	}else{
		//flashErase();
		puts("FERASE finish!\r\n");
 800254c:	4803      	ldr	r0, [pc, #12]	; (800255c <fEraseCMD+0x28>)
 800254e:	f000 fa65 	bl	8002a1c <tinysh_puts>
	}
}
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	0800fa20 	.word	0x0800fa20
 800255c:	0800fa3c 	.word	0x0800fa3c

08002560 <fWriteCMD>:

/**************************************
 * FLASH WRITE COMMAND	  			  *
 **************************************/
static void fWriteCMD(int argc, char **argv)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
	if (argc != 2){
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b02      	cmp	r3, #2
 800256e:	d003      	beq.n	8002578 <fWriteCMD+0x18>
		puts("FWRITE invalid arguments!\r\n");
 8002570:	480d      	ldr	r0, [pc, #52]	; (80025a8 <fWriteCMD+0x48>)
 8002572:	f000 fa53 	bl	8002a1c <tinysh_puts>
		return;
 8002576:	e014      	b.n	80025a2 <fWriteCMD+0x42>
	}else{

		uint8_t len = strlen((uchar*)&argv[1][0]);
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	3304      	adds	r3, #4
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4618      	mov	r0, r3
 8002580:	f000 fa34 	bl	80029ec <tinysh_strlen>
 8002584:	4603      	mov	r3, r0
 8002586:	73fb      	strb	r3, [r7, #15]
		//printf("FWRITE: %s (%d)\r\n", (uchar*)&argv[1][0], len);

		uint32_t value = (uint32_t)tinysh_dec((char*)&argv[1][0]);
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	3304      	adds	r3, #4
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f001 f89a 	bl	80036c8 <tinysh_dec>
 8002594:	60b8      	str	r0, [r7, #8]
		printf("DEC (%d): %ld \r\n", len, value);
 8002596:	7bfb      	ldrb	r3, [r7, #15]
 8002598:	68ba      	ldr	r2, [r7, #8]
 800259a:	4619      	mov	r1, r3
 800259c:	4803      	ldr	r0, [pc, #12]	; (80025ac <fWriteCMD+0x4c>)
 800259e:	f00a fdff 	bl	800d1a0 <iprintf>
//		}else{
//			puts("FWRITE fail!");
//		}

	}
}
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	0800fa50 	.word	0x0800fa50
 80025ac:	0800fa6c 	.word	0x0800fa6c

080025b0 <fReadCMD>:

/**************************************
 * FLASH READ COMMAND	  			  *
 **************************************/
static void fReadCMD(int argc, char **argv)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
	if (argc > 1){
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2b01      	cmp	r3, #1
//					value, x, (value & 0x000000ff), x+1, (value & 0x0000ff00)>>8 , x+2, (value & 0x00ff0000)>>16, x+3, (value & 0xff000000) >> 24);
//			addr +=4;
//		}

	}
}
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <ram2ReadCMD>:

/**************************************
 * RAM READ COMMAND	  			      *
 **************************************/
static void ram2ReadCMD(int argc, char **argv)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
	uint32_t data32;

	data32 = *(__IO uint32_t *)0x2001F000;
 80025d2:	4b0c      	ldr	r3, [pc, #48]	; (8002604 <ram2ReadCMD+0x3c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	60fb      	str	r3, [r7, #12]
	printf("0x2001F000: %ld\r\n", data32);
 80025d8:	68f9      	ldr	r1, [r7, #12]
 80025da:	480b      	ldr	r0, [pc, #44]	; (8002608 <ram2ReadCMD+0x40>)
 80025dc:	f00a fde0 	bl	800d1a0 <iprintf>

	data32 = *(__IO uint32_t *)0x2001F004;
 80025e0:	4b0a      	ldr	r3, [pc, #40]	; (800260c <ram2ReadCMD+0x44>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	60fb      	str	r3, [r7, #12]
	printf("0x2001F004: %ld\r\n", data32);
 80025e6:	68f9      	ldr	r1, [r7, #12]
 80025e8:	4809      	ldr	r0, [pc, #36]	; (8002610 <ram2ReadCMD+0x48>)
 80025ea:	f00a fdd9 	bl	800d1a0 <iprintf>

	data32 = *(__IO uint32_t *)0x2001F008;
 80025ee:	4b09      	ldr	r3, [pc, #36]	; (8002614 <ram2ReadCMD+0x4c>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	60fb      	str	r3, [r7, #12]
	printf("0x2001F000: %ld\r\n", data32);
 80025f4:	68f9      	ldr	r1, [r7, #12]
 80025f6:	4804      	ldr	r0, [pc, #16]	; (8002608 <ram2ReadCMD+0x40>)
 80025f8:	f00a fdd2 	bl	800d1a0 <iprintf>

	//printf("userConfig: %d %d %d %d \r\n", userConfig.u32_crc, userConfig.u32_crcN, userConfig.u32_len, userConfig.u32_lenN);
}
 80025fc:	bf00      	nop
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	2001f000 	.word	0x2001f000
 8002608:	0800fa80 	.word	0x0800fa80
 800260c:	2001f004 	.word	0x2001f004
 8002610:	0800fa94 	.word	0x0800fa94
 8002614:	2001f008 	.word	0x2001f008

08002618 <ram2WriteCMD>:

/**************************************
 * RAM WRITE COMMAND	  			  *
 **************************************/
static void ram2WriteCMD(int argc, char **argv)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
	if (argc != 2){
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b02      	cmp	r3, #2
 8002626:	d003      	beq.n	8002630 <ram2WriteCMD+0x18>
		puts("RAMWRITE invalid arguments!\r\n");
 8002628:	4811      	ldr	r0, [pc, #68]	; (8002670 <ram2WriteCMD+0x58>)
 800262a:	f000 f9f7 	bl	8002a1c <tinysh_puts>
		return;
 800262e:	e01c      	b.n	800266a <ram2WriteCMD+0x52>
	}else{

		uint8_t len = strlen((uchar*)&argv[1][0]);
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	3304      	adds	r3, #4
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	f000 f9d8 	bl	80029ec <tinysh_strlen>
 800263c:	4603      	mov	r3, r0
 800263e:	75fb      	strb	r3, [r7, #23]
		//printf("FWRITE: %s (%d)\r\n", (uchar*)&argv[1][0], len);

		uint32_t value = (uint32_t)tinysh_dec((char*)&argv[1][0]);
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	3304      	adds	r3, #4
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4618      	mov	r0, r3
 8002648:	f001 f83e 	bl	80036c8 <tinysh_dec>
 800264c:	6138      	str	r0, [r7, #16]
		printf("DEC (%d): %ld \r\n", len, value);
 800264e:	7dfb      	ldrb	r3, [r7, #23]
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	4619      	mov	r1, r3
 8002654:	4807      	ldr	r0, [pc, #28]	; (8002674 <ram2WriteCMD+0x5c>)
 8002656:	f00a fda3 	bl	800d1a0 <iprintf>


		volatile int *point = (int *)0x2001F000;
 800265a:	4b07      	ldr	r3, [pc, #28]	; (8002678 <ram2WriteCMD+0x60>)
 800265c:	60fb      	str	r3, [r7, #12]
		*point = value;
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	601a      	str	r2, [r3, #0]

		puts("RAMWRITE complete!");
 8002664:	4805      	ldr	r0, [pc, #20]	; (800267c <ram2WriteCMD+0x64>)
 8002666:	f000 f9d9 	bl	8002a1c <tinysh_puts>
	}
}
 800266a:	3718      	adds	r7, #24
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	0800faa8 	.word	0x0800faa8
 8002674:	0800fa6c 	.word	0x0800fa6c
 8002678:	2001f000 	.word	0x2001f000
 800267c:	0800fac8 	.word	0x0800fac8

08002680 <configWriteCMD>:

/**************************************
 * CONFIG RAM WRITE COMMAND	  		  *
 **************************************/
static void configWriteCMD(int argc, char **argv)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
	if (argc != 7){
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2b07      	cmp	r3, #7
 800268e:	d003      	beq.n	8002698 <configWriteCMD+0x18>
		puts("RAMWRITE invalid arguments!\r\n");
 8002690:	4842      	ldr	r0, [pc, #264]	; (800279c <configWriteCMD+0x11c>)
 8002692:	f000 f9c3 	bl	8002a1c <tinysh_puts>
		return;
 8002696:	e07d      	b.n	8002794 <configWriteCMD+0x114>
	}else{
		uint8_t len = strlen((uchar*)&argv[1][0]);
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	3304      	adds	r3, #4
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f000 f9a4 	bl	80029ec <tinysh_strlen>
 80026a4:	4603      	mov	r3, r0
 80026a6:	73fb      	strb	r3, [r7, #15]
		uint32_t value = (uint32_t)tinysh_dec((char*)&argv[1][0]);
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	3304      	adds	r3, #4
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f001 f80a 	bl	80036c8 <tinysh_dec>
 80026b4:	60b8      	str	r0, [r7, #8]
		printf("New CRC value (%d): %ld \r\n", len, value);
 80026b6:	7bfb      	ldrb	r3, [r7, #15]
 80026b8:	68ba      	ldr	r2, [r7, #8]
 80026ba:	4619      	mov	r1, r3
 80026bc:	4838      	ldr	r0, [pc, #224]	; (80027a0 <configWriteCMD+0x120>)
 80026be:	f00a fd6f 	bl	800d1a0 <iprintf>
		//userConfig.u32_crc = value;

		len = strlen((uchar*)&argv[2][0]);
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	3308      	adds	r3, #8
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f000 f98f 	bl	80029ec <tinysh_strlen>
 80026ce:	4603      	mov	r3, r0
 80026d0:	73fb      	strb	r3, [r7, #15]
		value = (uint32_t)tinysh_dec((char*)&argv[2][0]);
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	3308      	adds	r3, #8
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4618      	mov	r0, r3
 80026da:	f000 fff5 	bl	80036c8 <tinysh_dec>
 80026de:	60b8      	str	r0, [r7, #8]
		printf("New LEN value (%d): %ld \r\n", len, value);
 80026e0:	7bfb      	ldrb	r3, [r7, #15]
 80026e2:	68ba      	ldr	r2, [r7, #8]
 80026e4:	4619      	mov	r1, r3
 80026e6:	482f      	ldr	r0, [pc, #188]	; (80027a4 <configWriteCMD+0x124>)
 80026e8:	f00a fd5a 	bl	800d1a0 <iprintf>
		//userConfig.u32_len = value;

		len = strlen((uchar*)&argv[3][0]);
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	330c      	adds	r3, #12
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f000 f97a 	bl	80029ec <tinysh_strlen>
 80026f8:	4603      	mov	r3, r0
 80026fa:	73fb      	strb	r3, [r7, #15]
		value = (uint32_t)tinysh_dec((char*)&argv[3][0]);
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	330c      	adds	r3, #12
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f000 ffe0 	bl	80036c8 <tinysh_dec>
 8002708:	60b8      	str	r0, [r7, #8]
		printf("New crcN value (%d): %ld \r\n", len, value);
 800270a:	7bfb      	ldrb	r3, [r7, #15]
 800270c:	68ba      	ldr	r2, [r7, #8]
 800270e:	4619      	mov	r1, r3
 8002710:	4825      	ldr	r0, [pc, #148]	; (80027a8 <configWriteCMD+0x128>)
 8002712:	f00a fd45 	bl	800d1a0 <iprintf>
		//userConfig.u32_crcN = value;

		len = strlen((uchar*)&argv[4][0]);
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	3310      	adds	r3, #16
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4618      	mov	r0, r3
 800271e:	f000 f965 	bl	80029ec <tinysh_strlen>
 8002722:	4603      	mov	r3, r0
 8002724:	73fb      	strb	r3, [r7, #15]
		value = (uint32_t)tinysh_dec((char*)&argv[4][0]);
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	3310      	adds	r3, #16
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4618      	mov	r0, r3
 800272e:	f000 ffcb 	bl	80036c8 <tinysh_dec>
 8002732:	60b8      	str	r0, [r7, #8]
		printf("New lenN value (%d): %ld \r\n", len, value);
 8002734:	7bfb      	ldrb	r3, [r7, #15]
 8002736:	68ba      	ldr	r2, [r7, #8]
 8002738:	4619      	mov	r1, r3
 800273a:	481c      	ldr	r0, [pc, #112]	; (80027ac <configWriteCMD+0x12c>)
 800273c:	f00a fd30 	bl	800d1a0 <iprintf>
		//userConfig.u32_lenN = value;

		len = strlen((uchar*)&argv[5][0]);
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	3314      	adds	r3, #20
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	f000 f950 	bl	80029ec <tinysh_strlen>
 800274c:	4603      	mov	r3, r0
 800274e:	73fb      	strb	r3, [r7, #15]
		value = (uint32_t)tinysh_dec((char*)&argv[5][0]);
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	3314      	adds	r3, #20
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4618      	mov	r0, r3
 8002758:	f000 ffb6 	bl	80036c8 <tinysh_dec>
 800275c:	60b8      	str	r0, [r7, #8]
		printf("New CFG ProID value (%d): %ld \r\n", len, value);
 800275e:	7bfb      	ldrb	r3, [r7, #15]
 8002760:	68ba      	ldr	r2, [r7, #8]
 8002762:	4619      	mov	r1, r3
 8002764:	4812      	ldr	r0, [pc, #72]	; (80027b0 <configWriteCMD+0x130>)
 8002766:	f00a fd1b 	bl	800d1a0 <iprintf>
		//CFG_U16_CFG_PROJECT_ID = value;

		len = strlen((uchar*)&argv[6][0]);
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	3318      	adds	r3, #24
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4618      	mov	r0, r3
 8002772:	f000 f93b 	bl	80029ec <tinysh_strlen>
 8002776:	4603      	mov	r3, r0
 8002778:	73fb      	strb	r3, [r7, #15]
		value = (uint32_t)tinysh_dec((char*)&argv[6][0]);
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	3318      	adds	r3, #24
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4618      	mov	r0, r3
 8002782:	f000 ffa1 	bl	80036c8 <tinysh_dec>
 8002786:	60b8      	str	r0, [r7, #8]
		printf("New CFG VER value (%d): %ld \r\n", len, value);
 8002788:	7bfb      	ldrb	r3, [r7, #15]
 800278a:	68ba      	ldr	r2, [r7, #8]
 800278c:	4619      	mov	r1, r3
 800278e:	4809      	ldr	r0, [pc, #36]	; (80027b4 <configWriteCMD+0x134>)
 8002790:	f00a fd06 	bl	800d1a0 <iprintf>
		//CFG_U16_CFG_VER = value;
	}
}
 8002794:	3710      	adds	r7, #16
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	0800faa8 	.word	0x0800faa8
 80027a0:	0800fadc 	.word	0x0800fadc
 80027a4:	0800faf8 	.word	0x0800faf8
 80027a8:	0800fb14 	.word	0x0800fb14
 80027ac:	0800fb30 	.word	0x0800fb30
 80027b0:	0800fb4c 	.word	0x0800fb4c
 80027b4:	0800fb70 	.word	0x0800fb70

080027b8 <configReadCMD>:

/**************************************
 * CONFIG VARIABLE READ COMMAND	  	  *
 **************************************/
static void configReadCMD(int argc, char **argv)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
	printf("\r\n\nb1_msFltUpdownChkEn: x%X, b1_msFltLeftrightChkEn: x%X,  u8_grpEdgeBigThumbAreaTotal: x%X,  u16_grpEdgeBigThumbSumEccen: x%X \r\n",
				userConfig.b1_msFltUpdownChkEn, userConfig.b1_msFltLeftrightChkEn, userConfig.u8_grpEdgeBigThumbAreaTotal, userConfig.u16_grpEdgeBigThumbSumEccen);

	printf("sizeof userConfig: x%X bytes\r\n", sizeof(userConfig));
#endif
}
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr

080027ce <flashAreaReadCMD>:
/**************************************************************
 * READ FLASH in particular sector  						  *
 * usecase: Read stored config value in FLASH_USER_START_ADDR *
 **************************************************************/
static void flashAreaReadCMD(int argc, char **argv)
{
 80027ce:	b480      	push	{r7}
 80027d0:	b083      	sub	sp, #12
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
 80027d6:	6039      	str	r1, [r7, #0]
	//flashAreaRead(FLASH_USER_START_ADDR, 1000);
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <printRAMCMD>:
/********************************************************
 * Print RAM value 										*
 * usecase: read RAM on addr 0x2001F000 (fw config)		*
 ********************************************************/
static void printRAMCMD(int argc, char **argv)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
	//printRAMvalue (0x2001F000, 1000);

	puts("PRINTRAM FINISH\r\n");
 80027ee:	4803      	ldr	r0, [pc, #12]	; (80027fc <printRAMCMD+0x18>)
 80027f0:	f000 f914 	bl	8002a1c <tinysh_puts>
}
 80027f4:	bf00      	nop
 80027f6:	3708      	adds	r7, #8
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	0800fb90 	.word	0x0800fb90

08002800 <copyToRamCMD>:

/********************************************************
 * Copy Config data from Flash Area to RAM area			*
 ********************************************************/
static void copyToRamCMD(int argc, char **argv)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
		puts("Copy Flash to RAM OK !!!\r\n");
	}else{
		puts("Copy Flash to RAM FAIL !!!\r\n");
	}
#endif
}
 800280a:	bf00      	nop
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr

08002816 <copyToFlashCMD>:

/********************************************************
 * 	Copy config data from RAM area to Flash Area    	*
 ********************************************************/
static void copyToFlashCMD(int argc, char **argv)
{
 8002816:	b480      	push	{r7}
 8002818:	b083      	sub	sp, #12
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
 800281e:	6039      	str	r1, [r7, #0]
		puts("Copy RAM to FLASH OK !!!\r\n");
	}else{
		puts("Copy RAM to FLASH FAIL !!!\r\n");
	}
#endif
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <changeCfgCMD>:

/********************************************************
 * 	Change Spesific Config Value   						*
 ********************************************************/
static void changeCfgCMD(int argc, char **argv)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b08a      	sub	sp, #40	; 0x28
 8002830:	af02      	add	r7, sp, #8
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
	if (argc != 3){
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2b03      	cmp	r3, #3
 800283a:	d003      	beq.n	8002844 <changeCfgCMD+0x18>
		puts("Change Config invalid arguments!\r\n");
 800283c:	4818      	ldr	r0, [pc, #96]	; (80028a0 <changeCfgCMD+0x74>)
 800283e:	f000 f8ed 	bl	8002a1c <tinysh_puts>
		return;
 8002842:	e02a      	b.n	800289a <changeCfgCMD+0x6e>
	}else{

		//uint8_t len = strlen((uchar*)&argv[1][0]);
		uint32_t offset = (uint32_t)tinysh_dec((char*)&argv[1][0]);
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	3304      	adds	r3, #4
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f000 ff3c 	bl	80036c8 <tinysh_dec>
 8002850:	61f8      	str	r0, [r7, #28]
		//printf("Offset value (%d): %ld \r\n", len, offset);

		//len = strlen((uchar*)&argv[2][0]);
		uint32_t value = (uint32_t)tinysh_dec((char*)&argv[2][0]);
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	3308      	adds	r3, #8
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4618      	mov	r0, r3
 800285a:	f000 ff35 	bl	80036c8 <tinysh_dec>
 800285e:	61b8      	str	r0, [r7, #24]
		//printf("Value (%d): %ld \r\n", len, value);

		uint32_t RAMaddr = 0x2001F000 + offset;
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8002866:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 800286a:	617b      	str	r3, [r7, #20]
		volatile int *point = (int *)RAMaddr;
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	613b      	str	r3, [r7, #16]
		*point = value;
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	601a      	str	r2, [r3, #0]

		//printf("Config Value Updated !!!\r\n");

		uint32_t dataReadBack  = *(__IO uint32_t *)RAMaddr;
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	60fb      	str	r3, [r7, #12]
		printf("%ld,%ld,%ld,%ld\r\n",
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	b2d9      	uxtb	r1, r3
			(dataReadBack & 0x000000ff), (dataReadBack & 0x0000ff00)>>8 , (dataReadBack & 0x00ff0000)>>16, (dataReadBack & 0xff000000) >> 24);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	0a1b      	lsrs	r3, r3, #8
		printf("%ld,%ld,%ld,%ld\r\n",
 8002884:	b2da      	uxtb	r2, r3
			(dataReadBack & 0x000000ff), (dataReadBack & 0x0000ff00)>>8 , (dataReadBack & 0x00ff0000)>>16, (dataReadBack & 0xff000000) >> 24);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	0c1b      	lsrs	r3, r3, #16
		printf("%ld,%ld,%ld,%ld\r\n",
 800288a:	b2d8      	uxtb	r0, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	0e1b      	lsrs	r3, r3, #24
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	4603      	mov	r3, r0
 8002894:	4803      	ldr	r0, [pc, #12]	; (80028a4 <changeCfgCMD+0x78>)
 8002896:	f00a fc83 	bl	800d1a0 <iprintf>
	}
}
 800289a:	3720      	adds	r7, #32
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	0800fba4 	.word	0x0800fba4
 80028a4:	0800fbc8 	.word	0x0800fbc8

080028a8 <readCfgCMD>:

/********************************************************
 * 	Read Spesific Config Value   						*
 ********************************************************/
static void readCfgCMD(int argc, char **argv)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af02      	add	r7, sp, #8
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
	if (argc != 2){
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d003      	beq.n	80028c0 <readCfgCMD+0x18>
		puts("Read Config invalid arguments!\r\n");
 80028b8:	4812      	ldr	r0, [pc, #72]	; (8002904 <readCfgCMD+0x5c>)
 80028ba:	f000 f8af 	bl	8002a1c <tinysh_puts>
		return;
 80028be:	e01e      	b.n	80028fe <readCfgCMD+0x56>
	}else{

		uint32_t offset = (uint32_t)tinysh_dec((char*)&argv[1][0]);
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	3304      	adds	r3, #4
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f000 fefe 	bl	80036c8 <tinysh_dec>
 80028cc:	60f8      	str	r0, [r7, #12]
		offset += 0x2001F000;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80028d4:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 80028d8:	60fb      	str	r3, [r7, #12]
		uint32_t dataReadBack  = *(__IO uint32_t *)offset;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	60bb      	str	r3, [r7, #8]
//		printf("Read 4 bytes of addr (%ld): %ld \r\n", 0x2001F000 + offset, dataReadBack);
//		printf("Data[0]: %ld, [1]: %ld, [2]: %ld, [3]: %ld  \r\n",
//				(dataReadBack & 0x000000ff), (dataReadBack & 0x0000ff00)>>8 , (dataReadBack & 0x00ff0000)>>16, (dataReadBack & 0xff000000) >> 24);


		printf("%ld,%ld,%ld,%ld\r\n",
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	b2d9      	uxtb	r1, r3
			  (dataReadBack & 0x000000ff), (dataReadBack & 0x0000ff00)>>8 , (dataReadBack & 0x00ff0000)>>16, (dataReadBack & 0xff000000) >> 24);
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	0a1b      	lsrs	r3, r3, #8
		printf("%ld,%ld,%ld,%ld\r\n",
 80028e8:	b2da      	uxtb	r2, r3
			  (dataReadBack & 0x000000ff), (dataReadBack & 0x0000ff00)>>8 , (dataReadBack & 0x00ff0000)>>16, (dataReadBack & 0xff000000) >> 24);
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	0c1b      	lsrs	r3, r3, #16
		printf("%ld,%ld,%ld,%ld\r\n",
 80028ee:	b2d8      	uxtb	r0, r3
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	0e1b      	lsrs	r3, r3, #24
 80028f4:	9300      	str	r3, [sp, #0]
 80028f6:	4603      	mov	r3, r0
 80028f8:	4803      	ldr	r0, [pc, #12]	; (8002908 <readCfgCMD+0x60>)
 80028fa:	f00a fc51 	bl	800d1a0 <iprintf>
	}
}
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	0800fbdc 	.word	0x0800fbdc
 8002908:	0800fbc8 	.word	0x0800fbc8

0800290c <tinysh_init>:
static tinysh_cmd_t copyToFlashcmd={0,"COPYTOFLASH","		[NONE]","[NONE]",copyToFlashCMD,0,0,0};
static tinysh_cmd_t changeCfgcmd={0,"VARCHANGE","		[OFFEST	VALUE]","[2 Arguments]",changeCfgCMD,0,0,0};
static tinysh_cmd_t readCfgcmd={0,"VARREAD","		[OFFSET]","[1 Arguments]",readCfgCMD,0,0,0};

void tinysh_init(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
	puts("\e[1;1H\e[2J");
 8002910:	481b      	ldr	r0, [pc, #108]	; (8002980 <tinysh_init+0x74>)
 8002912:	f000 f883 	bl	8002a1c <tinysh_puts>
	puts("\r\n");
 8002916:	481b      	ldr	r0, [pc, #108]	; (8002984 <tinysh_init+0x78>)
 8002918:	f000 f880 	bl	8002a1c <tinysh_puts>
	puts("=========================| CONSOLE CMD |=============================\r\n");
 800291c:	481a      	ldr	r0, [pc, #104]	; (8002988 <tinysh_init+0x7c>)
 800291e:	f000 f87d 	bl	8002a1c <tinysh_puts>
	puts("type '?' or HELP for Manual\r\n");
 8002922:	481a      	ldr	r0, [pc, #104]	; (800298c <tinysh_init+0x80>)
 8002924:	f000 f87a 	bl	8002a1c <tinysh_puts>

	tinysh_set_prompt("\r\n\nVT$");
 8002928:	4819      	ldr	r0, [pc, #100]	; (8002990 <tinysh_init+0x84>)
 800292a:	f000 fea3 	bl	8003674 <tinysh_set_prompt>
	tinysh_add_command(&fwritecmd);
 800292e:	4819      	ldr	r0, [pc, #100]	; (8002994 <tinysh_init+0x88>)
 8002930:	f000 fe62 	bl	80035f8 <tinysh_add_command>
	tinysh_add_command(&freadcmd);
 8002934:	4818      	ldr	r0, [pc, #96]	; (8002998 <tinysh_init+0x8c>)
 8002936:	f000 fe5f 	bl	80035f8 <tinysh_add_command>
	tinysh_add_command(&ferasecmd);
 800293a:	4818      	ldr	r0, [pc, #96]	; (800299c <tinysh_init+0x90>)
 800293c:	f000 fe5c 	bl	80035f8 <tinysh_add_command>
	tinysh_add_command(&ram2readcmd);
 8002940:	4817      	ldr	r0, [pc, #92]	; (80029a0 <tinysh_init+0x94>)
 8002942:	f000 fe59 	bl	80035f8 <tinysh_add_command>
	tinysh_add_command(&ram2writecmd);
 8002946:	4817      	ldr	r0, [pc, #92]	; (80029a4 <tinysh_init+0x98>)
 8002948:	f000 fe56 	bl	80035f8 <tinysh_add_command>
	tinysh_add_command(&configWritecmd);
 800294c:	4816      	ldr	r0, [pc, #88]	; (80029a8 <tinysh_init+0x9c>)
 800294e:	f000 fe53 	bl	80035f8 <tinysh_add_command>
	tinysh_add_command(&configReadcmd);
 8002952:	4816      	ldr	r0, [pc, #88]	; (80029ac <tinysh_init+0xa0>)
 8002954:	f000 fe50 	bl	80035f8 <tinysh_add_command>
	tinysh_add_command(&printFlashcmd);
 8002958:	4815      	ldr	r0, [pc, #84]	; (80029b0 <tinysh_init+0xa4>)
 800295a:	f000 fe4d 	bl	80035f8 <tinysh_add_command>
	tinysh_add_command(&printRAMcmd);
 800295e:	4815      	ldr	r0, [pc, #84]	; (80029b4 <tinysh_init+0xa8>)
 8002960:	f000 fe4a 	bl	80035f8 <tinysh_add_command>
	tinysh_add_command(&copyToRAMcmd);
 8002964:	4814      	ldr	r0, [pc, #80]	; (80029b8 <tinysh_init+0xac>)
 8002966:	f000 fe47 	bl	80035f8 <tinysh_add_command>
	tinysh_add_command(&copyToFlashcmd);
 800296a:	4814      	ldr	r0, [pc, #80]	; (80029bc <tinysh_init+0xb0>)
 800296c:	f000 fe44 	bl	80035f8 <tinysh_add_command>
	tinysh_add_command(&changeCfgcmd);
 8002970:	4813      	ldr	r0, [pc, #76]	; (80029c0 <tinysh_init+0xb4>)
 8002972:	f000 fe41 	bl	80035f8 <tinysh_add_command>
	tinysh_add_command(&readCfgcmd);
 8002976:	4813      	ldr	r0, [pc, #76]	; (80029c4 <tinysh_init+0xb8>)
 8002978:	f000 fe3e 	bl	80035f8 <tinysh_add_command>
}
 800297c:	bf00      	nop
 800297e:	bd80      	pop	{r7, pc}
 8002980:	0800fcd0 	.word	0x0800fcd0
 8002984:	0800fcdc 	.word	0x0800fcdc
 8002988:	0800fce0 	.word	0x0800fce0
 800298c:	0800fd28 	.word	0x0800fd28
 8002990:	0800fd48 	.word	0x0800fd48
 8002994:	20000038 	.word	0x20000038
 8002998:	20000058 	.word	0x20000058
 800299c:	20000078 	.word	0x20000078
 80029a0:	20000098 	.word	0x20000098
 80029a4:	200000b8 	.word	0x200000b8
 80029a8:	200000d8 	.word	0x200000d8
 80029ac:	200000f8 	.word	0x200000f8
 80029b0:	20000118 	.word	0x20000118
 80029b4:	20000138 	.word	0x20000138
 80029b8:	20000158 	.word	0x20000158
 80029bc:	20000178 	.word	0x20000178
 80029c0:	20000198 	.word	0x20000198
 80029c4:	200001b8 	.word	0x200001b8

080029c8 <tinysh_char_out>:



/* few useful utilities that may be missing */
void tinysh_char_out(unsigned char c)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4603      	mov	r3, r0
 80029d0:	71fb      	strb	r3, [r7, #7]
  HAL_UART_Transmit(&huart3, (uint8_t *)&c, 1, 0xFFFF);	//Use UART1
 80029d2:	1df9      	adds	r1, r7, #7
 80029d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029d8:	2201      	movs	r2, #1
 80029da:	4803      	ldr	r0, [pc, #12]	; (80029e8 <tinysh_char_out+0x20>)
 80029dc:	f004 ff4d 	bl	800787a <HAL_UART_Transmit>
}
 80029e0:	bf00      	nop
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	2000166c 	.word	0x2000166c

080029ec <tinysh_strlen>:

static int strlen(uchar *s)	{
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
	int i;
	for(i=0;*s;s++,i++);
 80029f4:	2300      	movs	r3, #0
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	e005      	b.n	8002a06 <tinysh_strlen+0x1a>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	3301      	adds	r3, #1
 80029fe:	607b      	str	r3, [r7, #4]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	3301      	adds	r3, #1
 8002a04:	60fb      	str	r3, [r7, #12]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f5      	bne.n	80029fa <tinysh_strlen+0xe>
	return i;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3714      	adds	r7, #20
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <tinysh_puts>:

static void puts(char *s)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
	while(*s)
 8002a24:	e006      	b.n	8002a34 <tinysh_puts+0x18>
	    putchar(*s++);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	1c5a      	adds	r2, r3, #1
 8002a2a:	607a      	str	r2, [r7, #4]
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff ffca 	bl	80029c8 <tinysh_char_out>
	while(*s)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1f4      	bne.n	8002a26 <tinysh_puts+0xa>
}
 8002a3c:	bf00      	nop
 8002a3e:	bf00      	nop
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
	...

08002a48 <help_fnt>:


/* callback for help function */
static void help_fnt(int argc, char **argv)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  puts("\e[1;1H\e[2J");
 8002a52:	481a      	ldr	r0, [pc, #104]	; (8002abc <help_fnt+0x74>)
 8002a54:	f7ff ffe2 	bl	8002a1c <tinysh_puts>
  puts("\r\n");
 8002a58:	4819      	ldr	r0, [pc, #100]	; (8002ac0 <help_fnt+0x78>)
 8002a5a:	f7ff ffdf 	bl	8002a1c <tinysh_puts>
  puts("=========================| HELP PAGE |=================================\r\n");
 8002a5e:	4819      	ldr	r0, [pc, #100]	; (8002ac4 <help_fnt+0x7c>)
 8002a60:	f7ff ffdc 	bl	8002a1c <tinysh_puts>
  puts("[COMMANDS]?				CMD Help.\r\n");
 8002a64:	4818      	ldr	r0, [pc, #96]	; (8002ac8 <help_fnt+0x80>)
 8002a66:	f7ff ffd9 	bl	8002a1c <tinysh_puts>
  puts("CTRL-P or N				Previous/Next CMD.\r\n");
 8002a6a:	4818      	ldr	r0, [pc, #96]	; (8002acc <help_fnt+0x84>)
 8002a6c:	f7ff ffd6 	bl	8002a1c <tinysh_puts>
  puts("TAB					Auto complete.\r\n\n");
 8002a70:	4817      	ldr	r0, [pc, #92]	; (8002ad0 <help_fnt+0x88>)
 8002a72:	f7ff ffd3 	bl	8002a1c <tinysh_puts>
  puts("COMMANDS:       ARGUMENTS:	        NOTE:\r\n");
 8002a76:	4817      	ldr	r0, [pc, #92]	; (8002ad4 <help_fnt+0x8c>)
 8002a78:	f7ff ffd0 	bl	8002a1c <tinysh_puts>
  puts("========================================================================\r\n");
 8002a7c:	4816      	ldr	r0, [pc, #88]	; (8002ad8 <help_fnt+0x90>)
 8002a7e:	f7ff ffcd 	bl	8002a1c <tinysh_puts>
  puts("PRINTRAM	NONE			Display 60 bytes value of RAM @x2001F000\r\n");
 8002a82:	4816      	ldr	r0, [pc, #88]	; (8002adc <help_fnt+0x94>)
 8002a84:	f7ff ffca 	bl	8002a1c <tinysh_puts>
  puts("PRINTFLASH	NONE			Display 60 bytes value of Flash Data Area\r\n");
 8002a88:	4815      	ldr	r0, [pc, #84]	; (8002ae0 <help_fnt+0x98>)
 8002a8a:	f7ff ffc7 	bl	8002a1c <tinysh_puts>
  puts("COPYTORAM	NONE			Copy Value Flash Data Area to RAM @x2001F000\r\n");
 8002a8e:	4815      	ldr	r0, [pc, #84]	; (8002ae4 <help_fnt+0x9c>)
 8002a90:	f7ff ffc4 	bl	8002a1c <tinysh_puts>
  puts("COPYTOFLASH	NONE			Copy Value RAM @x2001F000 to Flash Data Area\r\n");
 8002a94:	4814      	ldr	r0, [pc, #80]	; (8002ae8 <help_fnt+0xa0>)
 8002a96:	f7ff ffc1 	bl	8002a1c <tinysh_puts>
  puts("CFGREAD		NONE			Display Config Value\r\n");
 8002a9a:	4814      	ldr	r0, [pc, #80]	; (8002aec <help_fnt+0xa4>)
 8002a9c:	f7ff ffbe 	bl	8002a1c <tinysh_puts>
  puts("VARCHANGE	OFFSET & VALUE		Change Config Value\r\n");
 8002aa0:	4813      	ldr	r0, [pc, #76]	; (8002af0 <help_fnt+0xa8>)
 8002aa2:	f7ff ffbb 	bl	8002a1c <tinysh_puts>
  puts("VARREAD		OFFSET			Read Config Value\r\n");
 8002aa6:	4813      	ldr	r0, [pc, #76]	; (8002af4 <help_fnt+0xac>)
 8002aa8:	f7ff ffb8 	bl	8002a1c <tinysh_puts>
  puts("\r\n");
 8002aac:	4804      	ldr	r0, [pc, #16]	; (8002ac0 <help_fnt+0x78>)
 8002aae:	f7ff ffb5 	bl	8002a1c <tinysh_puts>

}
 8002ab2:	bf00      	nop
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	0800fcd0 	.word	0x0800fcd0
 8002ac0:	0800fcdc 	.word	0x0800fcdc
 8002ac4:	0800fd50 	.word	0x0800fd50
 8002ac8:	0800fd9c 	.word	0x0800fd9c
 8002acc:	0800fdb8 	.word	0x0800fdb8
 8002ad0:	0800fddc 	.word	0x0800fddc
 8002ad4:	0800fdf8 	.word	0x0800fdf8
 8002ad8:	0800fe24 	.word	0x0800fe24
 8002adc:	0800fe70 	.word	0x0800fe70
 8002ae0:	0800feac 	.word	0x0800feac
 8002ae4:	0800feec 	.word	0x0800feec
 8002ae8:	0800ff2c 	.word	0x0800ff2c
 8002aec:	0800ff70 	.word	0x0800ff70
 8002af0:	0800ff98 	.word	0x0800ff98
 8002af4:	0800ffc8 	.word	0x0800ffc8

08002af8 <strstart>:
 * return FULLMATCH if s2 equal to s1, PARTMATCH if s1 starts with s2
 * but there are remaining chars in s1, UNMATCH if s1 does not start with
 * s2
 */
int strstart(uchar *s1, uchar *s2)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
	while(*s1 && *s1==*s2) { s1++; s2++; }
 8002b02:	e005      	b.n	8002b10 <strstart+0x18>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	3301      	adds	r3, #1
 8002b08:	607b      	str	r3, [r7, #4]
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	603b      	str	r3, [r7, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d005      	beq.n	8002b24 <strstart+0x2c>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	781a      	ldrb	r2, [r3, #0]
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d0ef      	beq.n	8002b04 <strstart+0xc>

	if(*s2==' ' || *s2==0)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	2b20      	cmp	r3, #32
 8002b2a:	d003      	beq.n	8002b34 <strstart+0x3c>
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d107      	bne.n	8002b44 <strstart+0x4c>
	{
	  if(*s1==0)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <strstart+0x48>
		return FULLMATCH; /* full match */
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e002      	b.n	8002b46 <strstart+0x4e>
	  else
		return PARTMATCH; /* partial match */
 8002b40:	2302      	movs	r3, #2
 8002b42:	e000      	b.n	8002b46 <strstart+0x4e>
	}
	else
	return UNMATCH;     /* no match */
 8002b44:	2303      	movs	r3, #3
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <parse_command>:
 * check commands at given level with input string.
 * _cmd: point to first command at this level, return matched cmd
 * _str: point to current unprocessed input, return next unprocessed
 */
static int parse_command(tinysh_cmd_t **_cmd, uchar **_str)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b086      	sub	sp, #24
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
 8002b5a:	6039      	str	r1, [r7, #0]
  uchar *str=*_str;
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	617b      	str	r3, [r7, #20]
  tinysh_cmd_t *cmd;
  tinysh_cmd_t *matched_cmd=0;
 8002b62:	2300      	movs	r3, #0
 8002b64:	60fb      	str	r3, [r7, #12]

  /* first eliminate first blanks */
  while(*str==' ') str++;
 8002b66:	e002      	b.n	8002b6e <parse_command+0x1c>
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	617b      	str	r3, [r7, #20]
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	2b20      	cmp	r3, #32
 8002b74:	d0f8      	beq.n	8002b68 <parse_command+0x16>
  if(!*str)
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d104      	bne.n	8002b88 <parse_command+0x36>
    {
      *_str=str;
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	697a      	ldr	r2, [r7, #20]
 8002b82:	601a      	str	r2, [r3, #0]
      return NULLMATCH; /* end of input */
 8002b84:	2300      	movs	r3, #0
 8002b86:	e05c      	b.n	8002c42 <parse_command+0xf0>
    }

  /* first pass: count matches */
  for(cmd=*_cmd;cmd;cmd=cmd->next)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	613b      	str	r3, [r7, #16]
 8002b8e:	e035      	b.n	8002bfc <parse_command+0xaa>
    {
      int ret=strstart((uchar*)cmd->name,str);
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	6979      	ldr	r1, [r7, #20]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7ff ffae 	bl	8002af8 <strstart>
 8002b9c:	60b8      	str	r0, [r7, #8]

      if(ret==FULLMATCH)
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d11b      	bne.n	8002bdc <parse_command+0x8a>
        {
          /* found full match */
          while(*str && *str!=' ') str++;
 8002ba4:	e002      	b.n	8002bac <parse_command+0x5a>
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	3301      	adds	r3, #1
 8002baa:	617b      	str	r3, [r7, #20]
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d007      	beq.n	8002bc4 <parse_command+0x72>
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	2b20      	cmp	r3, #32
 8002bba:	d1f4      	bne.n	8002ba6 <parse_command+0x54>
          while(*str==' ') str++;
 8002bbc:	e002      	b.n	8002bc4 <parse_command+0x72>
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	617b      	str	r3, [r7, #20]
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b20      	cmp	r3, #32
 8002bca:	d0f8      	beq.n	8002bbe <parse_command+0x6c>
          *_str=str;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	601a      	str	r2, [r3, #0]
          *_cmd=cmd;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	601a      	str	r2, [r3, #0]
          return MATCH;
 8002bd8:	2304      	movs	r3, #4
 8002bda:	e032      	b.n	8002c42 <parse_command+0xf0>
        }
      else if (ret==PARTMATCH)
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d109      	bne.n	8002bf6 <parse_command+0xa4>
        {
          if(matched_cmd)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d004      	beq.n	8002bf2 <parse_command+0xa0>
            {
              *_cmd=matched_cmd;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	601a      	str	r2, [r3, #0]
              return AMBIG;
 8002bee:	2305      	movs	r3, #5
 8002bf0:	e027      	b.n	8002c42 <parse_command+0xf0>
            }
          else
            {
              matched_cmd=cmd;
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	60fb      	str	r3, [r7, #12]
  for(cmd=*_cmd;cmd;cmd=cmd->next)
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	613b      	str	r3, [r7, #16]
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1c6      	bne.n	8002b90 <parse_command+0x3e>
        }
      else /* UNMATCH */
        {
        }
    }
  if(matched_cmd)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d01b      	beq.n	8002c40 <parse_command+0xee>
    {
      while(*str && *str!=' ') str++;
 8002c08:	e002      	b.n	8002c10 <parse_command+0xbe>
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	617b      	str	r3, [r7, #20]
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d007      	beq.n	8002c28 <parse_command+0xd6>
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2b20      	cmp	r3, #32
 8002c1e:	d1f4      	bne.n	8002c0a <parse_command+0xb8>
      while(*str==' ') str++;
 8002c20:	e002      	b.n	8002c28 <parse_command+0xd6>
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	3301      	adds	r3, #1
 8002c26:	617b      	str	r3, [r7, #20]
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	2b20      	cmp	r3, #32
 8002c2e:	d0f8      	beq.n	8002c22 <parse_command+0xd0>
      *_cmd=matched_cmd;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	601a      	str	r2, [r3, #0]
      *_str=str;
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	601a      	str	r2, [r3, #0]
      return MATCH;
 8002c3c:	2304      	movs	r3, #4
 8002c3e:	e000      	b.n	8002c42 <parse_command+0xf0>
    }
  else
    return UNMATCH;
 8002c40:	2303      	movs	r3, #3
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3718      	adds	r7, #24
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
	...

08002c4c <do_context>:

/* create a context from current input line
 */
static void do_context(tinysh_cmd_t *cmd, uchar *str)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  while(*str)
 8002c56:	e00a      	b.n	8002c6e <do_context+0x22>
    context_buffer[cur_context++]=*str++;
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	1c53      	adds	r3, r2, #1
 8002c5c:	603b      	str	r3, [r7, #0]
 8002c5e:	4b0d      	ldr	r3, [pc, #52]	; (8002c94 <do_context+0x48>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	1c59      	adds	r1, r3, #1
 8002c64:	480b      	ldr	r0, [pc, #44]	; (8002c94 <do_context+0x48>)
 8002c66:	6001      	str	r1, [r0, #0]
 8002c68:	7811      	ldrb	r1, [r2, #0]
 8002c6a:	4a0b      	ldr	r2, [pc, #44]	; (8002c98 <do_context+0x4c>)
 8002c6c:	54d1      	strb	r1, [r2, r3]
  while(*str)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1f0      	bne.n	8002c58 <do_context+0xc>
  context_buffer[cur_context]=0;
 8002c76:	4b07      	ldr	r3, [pc, #28]	; (8002c94 <do_context+0x48>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a07      	ldr	r2, [pc, #28]	; (8002c98 <do_context+0x4c>)
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	54d1      	strb	r1, [r2, r3]
  cur_cmd_ctx=cmd;
 8002c80:	4a06      	ldr	r2, [pc, #24]	; (8002c9c <do_context+0x50>)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6013      	str	r3, [r2, #0]
}
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	2000165c 	.word	0x2000165c
 8002c98:	20001558 	.word	0x20001558
 8002c9c:	20001664 	.word	0x20001664

08002ca0 <exec_command>:

/* execute the given command by calling callback with appropriate
 * arguments
 */
static void exec_command(tinysh_cmd_t *cmd, uchar *str)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08e      	sub	sp, #56	; 0x38
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  char *argv[MAX_ARGS];
  int argc=0;
 8002caa:	2300      	movs	r3, #0
 8002cac:	637b      	str	r3, [r7, #52]	; 0x34
  int i;

  /* copy command line to preserve it for history */
  for(i=0;i<BUFFER_SIZE;i++)
 8002cae:	2300      	movs	r3, #0
 8002cb0:	633b      	str	r3, [r7, #48]	; 0x30
 8002cb2:	e00b      	b.n	8002ccc <exec_command+0x2c>
    trash_buffer[i]=str[i];
 8002cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb6:	683a      	ldr	r2, [r7, #0]
 8002cb8:	4413      	add	r3, r2
 8002cba:	7819      	ldrb	r1, [r3, #0]
 8002cbc:	4a2f      	ldr	r2, [pc, #188]	; (8002d7c <exec_command+0xdc>)
 8002cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc0:	4413      	add	r3, r2
 8002cc2:	460a      	mov	r2, r1
 8002cc4:	701a      	strb	r2, [r3, #0]
  for(i=0;i<BUFFER_SIZE;i++)
 8002cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc8:	3301      	adds	r3, #1
 8002cca:	633b      	str	r3, [r7, #48]	; 0x30
 8002ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cce:	2bff      	cmp	r3, #255	; 0xff
 8002cd0:	ddf0      	ble.n	8002cb4 <exec_command+0x14>
  str=trash_buffer;
 8002cd2:	4b2a      	ldr	r3, [pc, #168]	; (8002d7c <exec_command+0xdc>)
 8002cd4:	603b      	str	r3, [r7, #0]

  /* cut into arguments */
  argv[argc++]=cmd->name;
 8002cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cd8:	1c5a      	adds	r2, r3, #1
 8002cda:	637a      	str	r2, [r7, #52]	; 0x34
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	6852      	ldr	r2, [r2, #4]
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	3338      	adds	r3, #56	; 0x38
 8002ce4:	443b      	add	r3, r7
 8002ce6:	f843 2c30 	str.w	r2, [r3, #-48]
  while(*str && argc<MAX_ARGS)
 8002cea:	e028      	b.n	8002d3e <exec_command+0x9e>
    {
      while(*str==' ') str++;
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	603b      	str	r3, [r7, #0]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b20      	cmp	r3, #32
 8002cf8:	d0f8      	beq.n	8002cec <exec_command+0x4c>
      if(*str==0)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d025      	beq.n	8002d4e <exec_command+0xae>
        break;
      argv[argc++]=(char*)str;
 8002d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d04:	1c5a      	adds	r2, r3, #1
 8002d06:	637a      	str	r2, [r7, #52]	; 0x34
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	3338      	adds	r3, #56	; 0x38
 8002d0c:	443b      	add	r3, r7
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	f843 2c30 	str.w	r2, [r3, #-48]
      while(*str!=' ' && *str) str++;
 8002d14:	e002      	b.n	8002d1c <exec_command+0x7c>
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	603b      	str	r3, [r7, #0]
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2b20      	cmp	r3, #32
 8002d22:	d003      	beq.n	8002d2c <exec_command+0x8c>
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1f4      	bne.n	8002d16 <exec_command+0x76>
      if(!*str) break;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00e      	beq.n	8002d52 <exec_command+0xb2>
      *str++=0;
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	1c5a      	adds	r2, r3, #1
 8002d38:	603a      	str	r2, [r7, #0]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	701a      	strb	r2, [r3, #0]
  while(*str && argc<MAX_ARGS)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d006      	beq.n	8002d54 <exec_command+0xb4>
 8002d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d48:	2b09      	cmp	r3, #9
 8002d4a:	ddd2      	ble.n	8002cf2 <exec_command+0x52>
 8002d4c:	e002      	b.n	8002d54 <exec_command+0xb4>
        break;
 8002d4e:	bf00      	nop
 8002d50:	e000      	b.n	8002d54 <exec_command+0xb4>
      if(!*str) break;
 8002d52:	bf00      	nop
    }
  /* call command function if present */
  if(cmd->function)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00a      	beq.n	8002d72 <exec_command+0xd2>
    {
      tinysh_arg=cmd->arg;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	4a07      	ldr	r2, [pc, #28]	; (8002d80 <exec_command+0xe0>)
 8002d62:	6013      	str	r3, [r2, #0]
      cmd->function(argc,&argv[0]);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	f107 0208 	add.w	r2, r7, #8
 8002d6c:	4611      	mov	r1, r2
 8002d6e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002d70:	4798      	blx	r3
    }
}
 8002d72:	bf00      	nop
 8002d74:	3738      	adds	r7, #56	; 0x38
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	20001450 	.word	0x20001450
 8002d80:	20001668 	.word	0x20001668

08002d84 <exec_command_line>:

/* try to execute the current command line
 */
static int exec_command_line(tinysh_cmd_t *cmd, uchar *_str)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  uchar *str=_str;
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	60bb      	str	r3, [r7, #8]

  while(1)
    {
      int ret;
      ret=parse_command(&cmd,&str);
 8002d92:	f107 0208 	add.w	r2, r7, #8
 8002d96:	1d3b      	adds	r3, r7, #4
 8002d98:	4611      	mov	r1, r2
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff fed9 	bl	8002b52 <parse_command>
 8002da0:	60f8      	str	r0, [r7, #12]
      if(ret==MATCH) /* found unique match */
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2b04      	cmp	r3, #4
 8002da6:	d125      	bne.n	8002df4 <exec_command_line+0x70>
        {
          if(cmd)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d01d      	beq.n	8002dea <exec_command_line+0x66>
            {
              if(!cmd->child) /* no sub-command, execute */
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	69db      	ldr	r3, [r3, #28]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10a      	bne.n	8002dcc <exec_command_line+0x48>
                {
                  puts("\r\n");
 8002db6:	4821      	ldr	r0, [pc, #132]	; (8002e3c <exec_command_line+0xb8>)
 8002db8:	f7ff fe30 	bl	8002a1c <tinysh_puts>
                  exec_command(cmd,str);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	68ba      	ldr	r2, [r7, #8]
 8002dc0:	4611      	mov	r1, r2
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7ff ff6c 	bl	8002ca0 <exec_command>
                  return 0;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	e032      	b.n	8002e32 <exec_command_line+0xae>
                }
              else
                {
                  if(*str==0) /* no more input, this is a context */
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d106      	bne.n	8002de2 <exec_command_line+0x5e>
                    {
                      do_context(cmd,_str);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6839      	ldr	r1, [r7, #0]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7ff ff37 	bl	8002c4c <do_context>
                      return 0;
 8002dde:	2300      	movs	r3, #0
 8002de0:	e027      	b.n	8002e32 <exec_command_line+0xae>
                    }
                  else /* process next command word */
                    {
                      cmd=cmd->child;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	69db      	ldr	r3, [r3, #28]
 8002de6:	607b      	str	r3, [r7, #4]
 8002de8:	e7d3      	b.n	8002d92 <exec_command_line+0xe>
                    }
                }
            }
          else /* cmd == 0 */
            {
              puts("\r\n");
 8002dea:	4814      	ldr	r0, [pc, #80]	; (8002e3c <exec_command_line+0xb8>)
 8002dec:	f7ff fe16 	bl	8002a1c <tinysh_puts>
              return 0;
 8002df0:	2300      	movs	r3, #0
 8002df2:	e01e      	b.n	8002e32 <exec_command_line+0xae>
            }
        }
      else if(ret==AMBIG)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2b05      	cmp	r3, #5
 8002df8:	d10b      	bne.n	8002e12 <exec_command_line+0x8e>
        {
          puts("AMBIGUITY: ");
 8002dfa:	4811      	ldr	r0, [pc, #68]	; (8002e40 <exec_command_line+0xbc>)
 8002dfc:	f7ff fe0e 	bl	8002a1c <tinysh_puts>
          puts((char*)str);
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7ff fe0a 	bl	8002a1c <tinysh_puts>
          puts("\r\n");
 8002e08:	480c      	ldr	r0, [pc, #48]	; (8002e3c <exec_command_line+0xb8>)
 8002e0a:	f7ff fe07 	bl	8002a1c <tinysh_puts>
          return 0;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	e00f      	b.n	8002e32 <exec_command_line+0xae>
        }
      else if(ret==UNMATCH) /* UNMATCH */
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2b03      	cmp	r3, #3
 8002e16:	d10b      	bne.n	8002e30 <exec_command_line+0xac>
        {
          puts("\r\n  NO MATCH: ");
 8002e18:	480a      	ldr	r0, [pc, #40]	; (8002e44 <exec_command_line+0xc0>)
 8002e1a:	f7ff fdff 	bl	8002a1c <tinysh_puts>
          puts((char*)str);
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7ff fdfb 	bl	8002a1c <tinysh_puts>
          puts("\r\n");
 8002e26:	4805      	ldr	r0, [pc, #20]	; (8002e3c <exec_command_line+0xb8>)
 8002e28:	f7ff fdf8 	bl	8002a1c <tinysh_puts>
          return 0;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	e000      	b.n	8002e32 <exec_command_line+0xae>
        }
      else /* NULLMATCH */
        return 0;
 8002e30:	2300      	movs	r3, #0
    }
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	0800fcdc 	.word	0x0800fcdc
 8002e40:	0800fff0 	.word	0x0800fff0
 8002e44:	0800fffc 	.word	0x0800fffc

08002e48 <display_child_help>:

/* display help for list of commands
*/
static void display_child_help(tinysh_cmd_t *cmd)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  tinysh_cmd_t *cm;
  int len=0;
 8002e50:	2300      	movs	r3, #0
 8002e52:	613b      	str	r3, [r7, #16]

  putchar('\n');
 8002e54:	200a      	movs	r0, #10
 8002e56:	f7ff fdb7 	bl	80029c8 <tinysh_char_out>
  for(cm=cmd;cm;cm=cm->next)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	617b      	str	r3, [r7, #20]
 8002e5e:	e011      	b.n	8002e84 <display_child_help+0x3c>
    if(len<strlen((uchar*)cm->name))
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7ff fdc1 	bl	80029ec <tinysh_strlen>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	da05      	bge.n	8002e7e <display_child_help+0x36>
      len=strlen((uchar*)cm->name);
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7ff fdb8 	bl	80029ec <tinysh_strlen>
 8002e7c:	6138      	str	r0, [r7, #16]
  for(cm=cmd;cm;cm=cm->next)
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	617b      	str	r3, [r7, #20]
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1ea      	bne.n	8002e60 <display_child_help+0x18>
  for(cm=cmd;cm;cm=cm->next)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	617b      	str	r3, [r7, #20]
 8002e8e:	e025      	b.n	8002edc <display_child_help+0x94>
    if(cm->help)
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d01e      	beq.n	8002ed6 <display_child_help+0x8e>
      {
        int i;
        puts(cm->name);
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7ff fdbd 	bl	8002a1c <tinysh_puts>
        for(i=strlen((uchar*)cm->name);i<len+2;i++)
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7ff fda0 	bl	80029ec <tinysh_strlen>
 8002eac:	60f8      	str	r0, [r7, #12]
 8002eae:	e005      	b.n	8002ebc <display_child_help+0x74>
          putchar(' ');
 8002eb0:	2020      	movs	r0, #32
 8002eb2:	f7ff fd89 	bl	80029c8 <tinysh_char_out>
        for(i=strlen((uchar*)cm->name);i<len+2;i++)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	3301      	adds	r3, #1
 8002eba:	60fb      	str	r3, [r7, #12]
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	ddf4      	ble.n	8002eb0 <display_child_help+0x68>
        puts(cm->help);
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7ff fda6 	bl	8002a1c <tinysh_puts>
        puts("\r\n");
 8002ed0:	4806      	ldr	r0, [pc, #24]	; (8002eec <display_child_help+0xa4>)
 8002ed2:	f7ff fda3 	bl	8002a1c <tinysh_puts>
  for(cm=cmd;cm;cm=cm->next)
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	617b      	str	r3, [r7, #20]
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1d6      	bne.n	8002e90 <display_child_help+0x48>
      }
}
 8002ee2:	bf00      	nop
 8002ee4:	bf00      	nop
 8002ee6:	3718      	adds	r7, #24
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	0800fcdc 	.word	0x0800fcdc

08002ef0 <help_command_line>:

/* try to display help for current comand line
 */
static int help_command_line(tinysh_cmd_t *cmd, uchar *_str)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
	uchar *str=_str;
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	60bb      	str	r3, [r7, #8]

	while(1)
	{
	  int ret;
	  ret=parse_command(&cmd,&str);
 8002efe:	f107 0208 	add.w	r2, r7, #8
 8002f02:	1d3b      	adds	r3, r7, #4
 8002f04:	4611      	mov	r1, r2
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff fe23 	bl	8002b52 <parse_command>
 8002f0c:	60f8      	str	r0, [r7, #12]
	  if(ret==MATCH && *str==0) 				/* found unique match or empty line */
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2b04      	cmp	r3, #4
 8002f12:	d134      	bne.n	8002f7e <help_command_line+0x8e>
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d130      	bne.n	8002f7e <help_command_line+0x8e>
	  {
		  if(cmd->child) 						/* display sub-commands help */
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	69db      	ldr	r3, [r3, #28]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d006      	beq.n	8002f32 <help_command_line+0x42>
		  {
			  display_child_help(cmd->child);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	69db      	ldr	r3, [r3, #28]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff ff8d 	bl	8002e48 <display_child_help>
			  return 0;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	e05f      	b.n	8002ff2 <help_command_line+0x102>
		  }
		  else  								/* no sub-command, show single help */
		  {
			  if(*(str-1)!=' ')
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	3b01      	subs	r3, #1
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	2b20      	cmp	r3, #32
 8002f3a:	d002      	beq.n	8002f42 <help_command_line+0x52>
				  putchar(' ');
 8002f3c:	2020      	movs	r0, #32
 8002f3e:	f7ff fd43 	bl	80029c8 <tinysh_char_out>
			  if(cmd->usage)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d004      	beq.n	8002f54 <help_command_line+0x64>
				  puts(cmd->usage);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff fd64 	bl	8002a1c <tinysh_puts>
			  puts(": ");
 8002f54:	4829      	ldr	r0, [pc, #164]	; (8002ffc <help_command_line+0x10c>)
 8002f56:	f7ff fd61 	bl	8002a1c <tinysh_puts>
			  if(cmd->help)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d005      	beq.n	8002f6e <help_command_line+0x7e>
				  puts(cmd->help);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7ff fd58 	bl	8002a1c <tinysh_puts>
 8002f6c:	e002      	b.n	8002f74 <help_command_line+0x84>
			  else
				  puts("no help available");
 8002f6e:	4824      	ldr	r0, [pc, #144]	; (8003000 <help_command_line+0x110>)
 8002f70:	f7ff fd54 	bl	8002a1c <tinysh_puts>
			  	  putchar('\n');
 8002f74:	200a      	movs	r0, #10
 8002f76:	f7ff fd27 	bl	80029c8 <tinysh_char_out>
		  }
		  return 0;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	e039      	b.n	8002ff2 <help_command_line+0x102>
	  }
	  else if(ret==MATCH && *str)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2b04      	cmp	r3, #4
 8002f82:	d107      	bne.n	8002f94 <help_command_line+0xa4>
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d003      	beq.n	8002f94 <help_command_line+0xa4>
	  {
		  /* continue processing the line */
	  cmd=cmd->child;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	69db      	ldr	r3, [r3, #28]
 8002f90:	607b      	str	r3, [r7, #4]
	{
 8002f92:	e7b4      	b.n	8002efe <help_command_line+0xe>
	}
	  else if(ret==AMBIG)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2b05      	cmp	r3, #5
 8002f98:	d10b      	bne.n	8002fb2 <help_command_line+0xc2>
		{
		  puts("\r\nambiguity: ");
 8002f9a:	481a      	ldr	r0, [pc, #104]	; (8003004 <help_command_line+0x114>)
 8002f9c:	f7ff fd3e 	bl	8002a1c <tinysh_puts>
		  puts((char*)str);
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7ff fd3a 	bl	8002a1c <tinysh_puts>
		  puts("\r\n");
 8002fa8:	4817      	ldr	r0, [pc, #92]	; (8003008 <help_command_line+0x118>)
 8002faa:	f7ff fd37 	bl	8002a1c <tinysh_puts>
		  return 0;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	e01f      	b.n	8002ff2 <help_command_line+0x102>
		}
	  else if(ret==UNMATCH)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2b03      	cmp	r3, #3
 8002fb6:	d10b      	bne.n	8002fd0 <help_command_line+0xe0>
		{
		  puts("\r\nno match: ");
 8002fb8:	4814      	ldr	r0, [pc, #80]	; (800300c <help_command_line+0x11c>)
 8002fba:	f7ff fd2f 	bl	8002a1c <tinysh_puts>
		  puts((char*)str);
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7ff fd2b 	bl	8002a1c <tinysh_puts>
		  puts("\r\n");
 8002fc6:	4810      	ldr	r0, [pc, #64]	; (8003008 <help_command_line+0x118>)
 8002fc8:	f7ff fd28 	bl	8002a1c <tinysh_puts>
		  return 0;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	e010      	b.n	8002ff2 <help_command_line+0x102>
		}
	  else /* NULLMATCH */
		{
		  if(cur_cmd_ctx)
 8002fd0:	4b0f      	ldr	r3, [pc, #60]	; (8003010 <help_command_line+0x120>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d006      	beq.n	8002fe6 <help_command_line+0xf6>
			display_child_help(cur_cmd_ctx->child);
 8002fd8:	4b0d      	ldr	r3, [pc, #52]	; (8003010 <help_command_line+0x120>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	69db      	ldr	r3, [r3, #28]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7ff ff32 	bl	8002e48 <display_child_help>
 8002fe4:	e004      	b.n	8002ff0 <help_command_line+0x100>
		  else
			display_child_help(root_cmd);
 8002fe6:	4b0b      	ldr	r3, [pc, #44]	; (8003014 <help_command_line+0x124>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7ff ff2c 	bl	8002e48 <display_child_help>
		  return 0;
 8002ff0:	2300      	movs	r3, #0
		}
	}
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	0801000c 	.word	0x0801000c
 8003000:	08010010 	.word	0x08010010
 8003004:	08010024 	.word	0x08010024
 8003008:	0800fcdc 	.word	0x0800fcdc
 800300c:	08010034 	.word	0x08010034
 8003010:	20001664 	.word	0x20001664
 8003014:	20000034 	.word	0x20000034

08003018 <complete_command_line>:

/* try to complete current command line
 */
static int complete_command_line(tinysh_cmd_t *cmd, uchar *_str)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b08e      	sub	sp, #56	; 0x38
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  uchar *str=_str;
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	60fb      	str	r3, [r7, #12]

  while(1)
  {
      int ret;
      int common_len=BUFFER_SIZE;
 8003026:	f44f 7380 	mov.w	r3, #256	; 0x100
 800302a:	637b      	str	r3, [r7, #52]	; 0x34
      int _str_len;
      int i;
      uchar *__str=str;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	61fb      	str	r3, [r7, #28]

      ret=parse_command(&cmd,&str);
 8003030:	f107 020c 	add.w	r2, r7, #12
 8003034:	1d3b      	adds	r3, r7, #4
 8003036:	4611      	mov	r1, r2
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff fd8a 	bl	8002b52 <parse_command>
 800303e:	61b8      	str	r0, [r7, #24]
      for(_str_len=0;__str[_str_len]&&__str[_str_len]!=' ';_str_len++);
 8003040:	2300      	movs	r3, #0
 8003042:	633b      	str	r3, [r7, #48]	; 0x30
 8003044:	e002      	b.n	800304c <complete_command_line+0x34>
 8003046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003048:	3301      	adds	r3, #1
 800304a:	633b      	str	r3, [r7, #48]	; 0x30
 800304c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800304e:	69fa      	ldr	r2, [r7, #28]
 8003050:	4413      	add	r3, r2
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d005      	beq.n	8003064 <complete_command_line+0x4c>
 8003058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305a:	69fa      	ldr	r2, [r7, #28]
 800305c:	4413      	add	r3, r2
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	2b20      	cmp	r3, #32
 8003062:	d1f0      	bne.n	8003046 <complete_command_line+0x2e>
      if(ret==MATCH && *str){
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	2b04      	cmp	r3, #4
 8003068:	d107      	bne.n	800307a <complete_command_line+0x62>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <complete_command_line+0x62>
          cmd=cmd->child;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	607b      	str	r3, [r7, #4]
 8003078:	e0d7      	b.n	800322a <complete_command_line+0x212>

  	  }else if(ret==AMBIG || ret==MATCH || ret==NULLMATCH)
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	2b05      	cmp	r3, #5
 800307e:	d006      	beq.n	800308e <complete_command_line+0x76>
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	2b04      	cmp	r3, #4
 8003084:	d003      	beq.n	800308e <complete_command_line+0x76>
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	2b00      	cmp	r3, #0
 800308a:	f040 80cb 	bne.w	8003224 <complete_command_line+0x20c>
        {
          tinysh_cmd_t *cm;
          tinysh_cmd_t *matched_cmd=0;
 800308e:	2300      	movs	r3, #0
 8003090:	627b      	str	r3, [r7, #36]	; 0x24
          int nb_match=0;
 8003092:	2300      	movs	r3, #0
 8003094:	623b      	str	r3, [r7, #32]

          for(cm=cmd;cm;cm=cm->next)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	62bb      	str	r3, [r7, #40]	; 0x28
 800309a:	e076      	b.n	800318a <complete_command_line+0x172>
            {
              int r=strstart((uchar*)cm->name,__str);
 800309c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	69f9      	ldr	r1, [r7, #28]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7ff fd28 	bl	8002af8 <strstart>
 80030a8:	6178      	str	r0, [r7, #20]
              if(r==FULLMATCH)
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d134      	bne.n	800311a <complete_command_line+0x102>
                {
                  for(i=_str_len;cmd->name[i];i++)
 80030b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030b4:	e00a      	b.n	80030cc <complete_command_line+0xb4>
                    tinysh_char_in(cmd->name[i]);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685a      	ldr	r2, [r3, #4]
 80030ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030bc:	4413      	add	r3, r2
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f000 fa8b 	bl	80035dc <tinysh_char_in>
                  for(i=_str_len;cmd->name[i];i++)
 80030c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c8:	3301      	adds	r3, #1
 80030ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030d2:	4413      	add	r3, r2
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1ed      	bne.n	80030b6 <complete_command_line+0x9e>
                  if(*(str-1)!=' ')
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	3b01      	subs	r3, #1
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	2b20      	cmp	r3, #32
 80030e2:	d002      	beq.n	80030ea <complete_command_line+0xd2>
                    tinysh_char_in(' ');
 80030e4:	2020      	movs	r0, #32
 80030e6:	f000 fa79 	bl	80035dc <tinysh_char_in>
                  if(!cmd->child)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	69db      	ldr	r3, [r3, #28]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10f      	bne.n	8003112 <complete_command_line+0xfa>
                    {
                      if(cmd->usage)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d009      	beq.n	800310e <complete_command_line+0xf6>
                        {
                          puts(cmd->usage);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	4618      	mov	r0, r3
 8003100:	f7ff fc8c 	bl	8002a1c <tinysh_puts>
                          puts("\r\n");
 8003104:	484b      	ldr	r0, [pc, #300]	; (8003234 <complete_command_line+0x21c>)
 8003106:	f7ff fc89 	bl	8002a1c <tinysh_puts>
                          return 1;
 800310a:	2301      	movs	r3, #1
 800310c:	e08e      	b.n	800322c <complete_command_line+0x214>
                        }
                      else
                        return 0;
 800310e:	2300      	movs	r3, #0
 8003110:	e08c      	b.n	800322c <complete_command_line+0x214>
                    }
                  else
                    {
                      cmd=cmd->child;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	607b      	str	r3, [r7, #4]
                      break;
 8003118:	e03a      	b.n	8003190 <complete_command_line+0x178>
                    }
                }
              else if(r==PARTMATCH)
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	2b02      	cmp	r3, #2
 800311e:	d131      	bne.n	8003184 <complete_command_line+0x16c>
                {
                  nb_match++;
 8003120:	6a3b      	ldr	r3, [r7, #32]
 8003122:	3301      	adds	r3, #1
 8003124:	623b      	str	r3, [r7, #32]
                  if(!matched_cmd)
 8003126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003128:	2b00      	cmp	r3, #0
 800312a:	d108      	bne.n	800313e <complete_command_line+0x126>
                    {
                      matched_cmd=cm;
 800312c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800312e:	627b      	str	r3, [r7, #36]	; 0x24
                      common_len=strlen((uchar*)cm->name);
 8003130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	4618      	mov	r0, r3
 8003136:	f7ff fc59 	bl	80029ec <tinysh_strlen>
 800313a:	6378      	str	r0, [r7, #52]	; 0x34
 800313c:	e022      	b.n	8003184 <complete_command_line+0x16c>
                    }
                  else
                    {
                      for(i=_str_len;cm->name[i] && i<common_len &&
 800313e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003140:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003142:	e002      	b.n	800314a <complete_command_line+0x132>
                            cm->name[i]==matched_cmd->name[i];i++);
 8003144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003146:	3301      	adds	r3, #1
 8003148:	62fb      	str	r3, [r7, #44]	; 0x2c
                      for(i=_str_len;cm->name[i] && i<common_len &&
 800314a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800314c:	685a      	ldr	r2, [r3, #4]
 800314e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003150:	4413      	add	r3, r2
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00f      	beq.n	8003178 <complete_command_line+0x160>
 8003158:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800315a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800315c:	429a      	cmp	r2, r3
 800315e:	da0b      	bge.n	8003178 <complete_command_line+0x160>
                            cm->name[i]==matched_cmd->name[i];i++);
 8003160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003166:	4413      	add	r3, r2
 8003168:	781a      	ldrb	r2, [r3, #0]
 800316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316c:	6859      	ldr	r1, [r3, #4]
 800316e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003170:	440b      	add	r3, r1
 8003172:	781b      	ldrb	r3, [r3, #0]
                      for(i=_str_len;cm->name[i] && i<common_len &&
 8003174:	429a      	cmp	r2, r3
 8003176:	d0e5      	beq.n	8003144 <complete_command_line+0x12c>
                      if(i<common_len)
 8003178:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800317a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800317c:	429a      	cmp	r2, r3
 800317e:	da01      	bge.n	8003184 <complete_command_line+0x16c>
                        common_len=i;
 8003180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003182:	637b      	str	r3, [r7, #52]	; 0x34
          for(cm=cmd;cm;cm=cm->next)
 8003184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	62bb      	str	r3, [r7, #40]	; 0x28
 800318a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800318c:	2b00      	cmp	r3, #0
 800318e:	d185      	bne.n	800309c <complete_command_line+0x84>
                    }
                }
            }
          if(cm)
 8003190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003192:	2b00      	cmp	r3, #0
 8003194:	d148      	bne.n	8003228 <complete_command_line+0x210>
            continue;
          if(matched_cmd)
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	2b00      	cmp	r3, #0
 800319a:	d041      	beq.n	8003220 <complete_command_line+0x208>
            {
              if(_str_len==common_len)
 800319c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800319e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d125      	bne.n	80031f0 <complete_command_line+0x1d8>
                {
                  puts("\r\n");
 80031a4:	4823      	ldr	r0, [pc, #140]	; (8003234 <complete_command_line+0x21c>)
 80031a6:	f7ff fc39 	bl	8002a1c <tinysh_puts>
                  for(cm=cmd;cm;cm=cm->next)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80031ae:	e01a      	b.n	80031e6 <complete_command_line+0x1ce>
                    {
                      int r=strstart((uchar*)cm->name,__str);
 80031b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	69f9      	ldr	r1, [r7, #28]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7ff fc9e 	bl	8002af8 <strstart>
 80031bc:	6138      	str	r0, [r7, #16]
                      if(r==FULLMATCH || r==PARTMATCH)
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d002      	beq.n	80031ca <complete_command_line+0x1b2>
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d10a      	bne.n	80031e0 <complete_command_line+0x1c8>
                        {
						  puts("  ");
 80031ca:	481b      	ldr	r0, [pc, #108]	; (8003238 <complete_command_line+0x220>)
 80031cc:	f7ff fc26 	bl	8002a1c <tinysh_puts>
						  puts(cm->name);
 80031d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff fc21 	bl	8002a1c <tinysh_puts>
                          puts("\r\n");
 80031da:	4816      	ldr	r0, [pc, #88]	; (8003234 <complete_command_line+0x21c>)
 80031dc:	f7ff fc1e 	bl	8002a1c <tinysh_puts>
                  for(cm=cmd;cm;cm=cm->next)
 80031e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80031e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1e1      	bne.n	80031b0 <complete_command_line+0x198>
                        }
                    }
                  return 1;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e01d      	b.n	800322c <complete_command_line+0x214>
                }
              else
                {
                  for(i=_str_len;i<common_len;i++)
 80031f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031f4:	e00a      	b.n	800320c <complete_command_line+0x1f4>
                    tinysh_char_in(matched_cmd->name[i]);
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031fc:	4413      	add	r3, r2
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	4618      	mov	r0, r3
 8003202:	f000 f9eb 	bl	80035dc <tinysh_char_in>
                  for(i=_str_len;i<common_len;i++)
 8003206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003208:	3301      	adds	r3, #1
 800320a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800320c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800320e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003210:	429a      	cmp	r2, r3
 8003212:	dbf0      	blt.n	80031f6 <complete_command_line+0x1de>
                  if(nb_match==1)
 8003214:	6a3b      	ldr	r3, [r7, #32]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d102      	bne.n	8003220 <complete_command_line+0x208>
                    tinysh_char_in(' ');
 800321a:	2020      	movs	r0, #32
 800321c:	f000 f9de 	bl	80035dc <tinysh_char_in>
                }
            }
          return 0;
 8003220:	2300      	movs	r3, #0
 8003222:	e003      	b.n	800322c <complete_command_line+0x214>
        }
      else /* UNMATCH */
        {
          return 0;
 8003224:	2300      	movs	r3, #0
 8003226:	e001      	b.n	800322c <complete_command_line+0x214>
            continue;
 8003228:	bf00      	nop
  {
 800322a:	e6fc      	b.n	8003026 <complete_command_line+0xe>
        }
    }
}
 800322c:	4618      	mov	r0, r3
 800322e:	3738      	adds	r7, #56	; 0x38
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	0800fcdc 	.word	0x0800fcdc
 8003238:	08010044 	.word	0x08010044

0800323c <start_of_line>:

/* start a new line
 */
static void start_of_line()
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  /* display start of new line */
  puts(prompt);
 8003240:	4808      	ldr	r0, [pc, #32]	; (8003264 <start_of_line+0x28>)
 8003242:	f7ff fbeb 	bl	8002a1c <tinysh_puts>
  if(cur_context)
 8003246:	4b08      	ldr	r3, [pc, #32]	; (8003268 <start_of_line+0x2c>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d005      	beq.n	800325a <start_of_line+0x1e>
  {
     puts((char*)context_buffer);
 800324e:	4807      	ldr	r0, [pc, #28]	; (800326c <start_of_line+0x30>)
 8003250:	f7ff fbe4 	bl	8002a1c <tinysh_puts>
     puts("> ");
 8003254:	4806      	ldr	r0, [pc, #24]	; (8003270 <start_of_line+0x34>)
 8003256:	f7ff fbe1 	bl	8002a1c <tinysh_puts>
  }
  cur_index=0;
 800325a:	4b06      	ldr	r3, [pc, #24]	; (8003274 <start_of_line+0x38>)
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]
}
 8003260:	bf00      	nop
 8003262:	bd80      	pop	{r7, pc}
 8003264:	20000028 	.word	0x20000028
 8003268:	2000165c 	.word	0x2000165c
 800326c:	20001558 	.word	0x20001558
 8003270:	08010048 	.word	0x08010048
 8003274:	20001660 	.word	0x20001660

08003278 <_tinysh_char_in>:

/* character input
 */
static void _tinysh_char_in(uchar c)
{
 8003278:	b590      	push	{r4, r7, lr}
 800327a:	b089      	sub	sp, #36	; 0x24
 800327c:	af00      	add	r7, sp, #0
 800327e:	4603      	mov	r3, r0
 8003280:	71fb      	strb	r3, [r7, #7]
  uchar *line=input_buffers[cur_buf_index];
 8003282:	4ba2      	ldr	r3, [pc, #648]	; (800350c <_tinysh_char_in+0x294>)
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	4613      	mov	r3, r2
 8003288:	021b      	lsls	r3, r3, #8
 800328a:	4413      	add	r3, r2
 800328c:	4aa0      	ldr	r2, [pc, #640]	; (8003510 <_tinysh_char_in+0x298>)
 800328e:	4413      	add	r3, r2
 8003290:	61fb      	str	r3, [r7, #28]

  if(c=='\n' || c=='\r') /* validate command */
 8003292:	79fb      	ldrb	r3, [r7, #7]
 8003294:	2b0a      	cmp	r3, #10
 8003296:	d002      	beq.n	800329e <_tinysh_char_in+0x26>
 8003298:	79fb      	ldrb	r3, [r7, #7]
 800329a:	2b0d      	cmp	r3, #13
 800329c:	d144      	bne.n	8003328 <_tinysh_char_in+0xb0>
  {
      tinysh_cmd_t *cmd;

	  /* first, echo the newline */
      if(echo)
 800329e:	4b9d      	ldr	r3, [pc, #628]	; (8003514 <_tinysh_char_in+0x29c>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d007      	beq.n	80032b6 <_tinysh_char_in+0x3e>
        putchar(c);
 80032a6:	79fb      	ldrb	r3, [r7, #7]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7ff fb8d 	bl	80029c8 <tinysh_char_out>

      while(*line && *line==' ') line++;
 80032ae:	e002      	b.n	80032b6 <_tinysh_char_in+0x3e>
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	3301      	adds	r3, #1
 80032b4:	61fb      	str	r3, [r7, #28]
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d003      	beq.n	80032c6 <_tinysh_char_in+0x4e>
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	2b20      	cmp	r3, #32
 80032c4:	d0f4      	beq.n	80032b0 <_tinysh_char_in+0x38>
      if(*line) /* not empty line */
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d029      	beq.n	8003322 <_tinysh_char_in+0xaa>
        {
          cmd=cur_cmd_ctx?cur_cmd_ctx->child:root_cmd;
 80032ce:	4b92      	ldr	r3, [pc, #584]	; (8003518 <_tinysh_char_in+0x2a0>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d003      	beq.n	80032de <_tinysh_char_in+0x66>
 80032d6:	4b90      	ldr	r3, [pc, #576]	; (8003518 <_tinysh_char_in+0x2a0>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	69db      	ldr	r3, [r3, #28]
 80032dc:	e001      	b.n	80032e2 <_tinysh_char_in+0x6a>
 80032de:	4b8f      	ldr	r3, [pc, #572]	; (800351c <_tinysh_char_in+0x2a4>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	60bb      	str	r3, [r7, #8]
          exec_command_line(cmd,line);
 80032e4:	69f9      	ldr	r1, [r7, #28]
 80032e6:	68b8      	ldr	r0, [r7, #8]
 80032e8:	f7ff fd4c 	bl	8002d84 <exec_command_line>
          cur_buf_index=(cur_buf_index+1)%HISTORY_DEPTH;
 80032ec:	4b87      	ldr	r3, [pc, #540]	; (800350c <_tinysh_char_in+0x294>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	1c59      	adds	r1, r3, #1
 80032f2:	4b8b      	ldr	r3, [pc, #556]	; (8003520 <_tinysh_char_in+0x2a8>)
 80032f4:	fb83 3201 	smull	r3, r2, r3, r1
 80032f8:	17cb      	asrs	r3, r1, #31
 80032fa:	1ad2      	subs	r2, r2, r3
 80032fc:	4613      	mov	r3, r2
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	4413      	add	r3, r2
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	1aca      	subs	r2, r1, r3
 8003306:	4b81      	ldr	r3, [pc, #516]	; (800350c <_tinysh_char_in+0x294>)
 8003308:	601a      	str	r2, [r3, #0]
          cur_index=0;
 800330a:	4b86      	ldr	r3, [pc, #536]	; (8003524 <_tinysh_char_in+0x2ac>)
 800330c:	2200      	movs	r2, #0
 800330e:	601a      	str	r2, [r3, #0]
          input_buffers[cur_buf_index][0]=0;
 8003310:	4b7e      	ldr	r3, [pc, #504]	; (800350c <_tinysh_char_in+0x294>)
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	497e      	ldr	r1, [pc, #504]	; (8003510 <_tinysh_char_in+0x298>)
 8003316:	4613      	mov	r3, r2
 8003318:	021b      	lsls	r3, r3, #8
 800331a:	4413      	add	r3, r2
 800331c:	440b      	add	r3, r1
 800331e:	2200      	movs	r2, #0
 8003320:	701a      	strb	r2, [r3, #0]
        }
      start_of_line();
 8003322:	f7ff ff8b 	bl	800323c <start_of_line>
  {
 8003326:	e14c      	b.n	80035c2 <_tinysh_char_in+0x34a>
  }
  else if(c==TOPCHAR) 			// return to top level //
 8003328:	79fb      	ldrb	r3, [r7, #7]
 800332a:	2b2f      	cmp	r3, #47	; 0x2f
 800332c:	d123      	bne.n	8003376 <_tinysh_char_in+0xfe>
	//if(echo)
	//  putchar(c);
	//cur_context=0;
	//cur_cmd_ctx=0;

	  putchar('\r');
 800332e:	200d      	movs	r0, #13
 8003330:	f7ff fb4a 	bl	80029c8 <tinysh_char_out>
	  puts("VT$");
 8003334:	487c      	ldr	r0, [pc, #496]	; (8003528 <_tinysh_char_in+0x2b0>)
 8003336:	f7ff fb71 	bl	8002a1c <tinysh_puts>

	  while(cur_index > 0){
 800333a:	e007      	b.n	800334c <_tinysh_char_in+0xd4>
		  puts(" ");
 800333c:	487b      	ldr	r0, [pc, #492]	; (800352c <_tinysh_char_in+0x2b4>)
 800333e:	f7ff fb6d 	bl	8002a1c <tinysh_puts>
		  cur_index--;
 8003342:	4b78      	ldr	r3, [pc, #480]	; (8003524 <_tinysh_char_in+0x2ac>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	3b01      	subs	r3, #1
 8003348:	4a76      	ldr	r2, [pc, #472]	; (8003524 <_tinysh_char_in+0x2ac>)
 800334a:	6013      	str	r3, [r2, #0]
	  while(cur_index > 0){
 800334c:	4b75      	ldr	r3, [pc, #468]	; (8003524 <_tinysh_char_in+0x2ac>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	dcf3      	bgt.n	800333c <_tinysh_char_in+0xc4>
	  }
	  putchar('\r');
 8003354:	200d      	movs	r0, #13
 8003356:	f7ff fb37 	bl	80029c8 <tinysh_char_out>
	  puts("VT$");
 800335a:	4873      	ldr	r0, [pc, #460]	; (8003528 <_tinysh_char_in+0x2b0>)
 800335c:	f7ff fb5e 	bl	8002a1c <tinysh_puts>
	  cur_index=0;
 8003360:	4b70      	ldr	r3, [pc, #448]	; (8003524 <_tinysh_char_in+0x2ac>)
 8003362:	2200      	movs	r2, #0
 8003364:	601a      	str	r2, [r3, #0]
	  line[cur_index]=0;
 8003366:	4b6f      	ldr	r3, [pc, #444]	; (8003524 <_tinysh_char_in+0x2ac>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	461a      	mov	r2, r3
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	4413      	add	r3, r2
 8003370:	2200      	movs	r2, #0
 8003372:	701a      	strb	r2, [r3, #0]
         putchar(c);
       line[cur_index++]=c;
       line[cur_index]=0;
    }
  }
}
 8003374:	e125      	b.n	80035c2 <_tinysh_char_in+0x34a>
  else if(c==8 || c==127) 		/* backspace */
 8003376:	79fb      	ldrb	r3, [r7, #7]
 8003378:	2b08      	cmp	r3, #8
 800337a:	d002      	beq.n	8003382 <_tinysh_char_in+0x10a>
 800337c:	79fb      	ldrb	r3, [r7, #7]
 800337e:	2b7f      	cmp	r3, #127	; 0x7f
 8003380:	d11a      	bne.n	80033b8 <_tinysh_char_in+0x140>
    if(cur_index>0)
 8003382:	4b68      	ldr	r3, [pc, #416]	; (8003524 <_tinysh_char_in+0x2ac>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2b00      	cmp	r3, #0
 8003388:	f340 811b 	ble.w	80035c2 <_tinysh_char_in+0x34a>
       puts("\b");
 800338c:	4868      	ldr	r0, [pc, #416]	; (8003530 <_tinysh_char_in+0x2b8>)
 800338e:	f7ff fb45 	bl	8002a1c <tinysh_puts>
       puts("  ");
 8003392:	4868      	ldr	r0, [pc, #416]	; (8003534 <_tinysh_char_in+0x2bc>)
 8003394:	f7ff fb42 	bl	8002a1c <tinysh_puts>
       puts("\b\b");
 8003398:	4867      	ldr	r0, [pc, #412]	; (8003538 <_tinysh_char_in+0x2c0>)
 800339a:	f7ff fb3f 	bl	8002a1c <tinysh_puts>
       cur_index--;
 800339e:	4b61      	ldr	r3, [pc, #388]	; (8003524 <_tinysh_char_in+0x2ac>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	3b01      	subs	r3, #1
 80033a4:	4a5f      	ldr	r2, [pc, #380]	; (8003524 <_tinysh_char_in+0x2ac>)
 80033a6:	6013      	str	r3, [r2, #0]
       line[cur_index]=0;
 80033a8:	4b5e      	ldr	r3, [pc, #376]	; (8003524 <_tinysh_char_in+0x2ac>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	461a      	mov	r2, r3
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	4413      	add	r3, r2
 80033b2:	2200      	movs	r2, #0
 80033b4:	701a      	strb	r2, [r3, #0]
    if(cur_index>0)
 80033b6:	e104      	b.n	80035c2 <_tinysh_char_in+0x34a>
  else if(c==16) /* CTRL-P: back in history */
 80033b8:	79fb      	ldrb	r3, [r7, #7]
 80033ba:	2b10      	cmp	r3, #16
 80033bc:	d140      	bne.n	8003440 <_tinysh_char_in+0x1c8>
      int prevline=(cur_buf_index+HISTORY_DEPTH-1)%HISTORY_DEPTH;
 80033be:	4b53      	ldr	r3, [pc, #332]	; (800350c <_tinysh_char_in+0x294>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	1d5a      	adds	r2, r3, #5
 80033c4:	4b56      	ldr	r3, [pc, #344]	; (8003520 <_tinysh_char_in+0x2a8>)
 80033c6:	fb83 3102 	smull	r3, r1, r3, r2
 80033ca:	17d3      	asrs	r3, r2, #31
 80033cc:	1ac9      	subs	r1, r1, r3
 80033ce:	460b      	mov	r3, r1
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	440b      	add	r3, r1
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	60fb      	str	r3, [r7, #12]
      if(input_buffers[prevline][0])
 80033da:	494d      	ldr	r1, [pc, #308]	; (8003510 <_tinysh_char_in+0x298>)
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	4613      	mov	r3, r2
 80033e0:	021b      	lsls	r3, r3, #8
 80033e2:	4413      	add	r3, r2
 80033e4:	440b      	add	r3, r1
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f000 80ea 	beq.w	80035c2 <_tinysh_char_in+0x34a>
          line=input_buffers[prevline];
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	4613      	mov	r3, r2
 80033f2:	021b      	lsls	r3, r3, #8
 80033f4:	4413      	add	r3, r2
 80033f6:	4a46      	ldr	r2, [pc, #280]	; (8003510 <_tinysh_char_in+0x298>)
 80033f8:	4413      	add	r3, r2
 80033fa:	61fb      	str	r3, [r7, #28]
          while(cur_index-->strlen(line))
 80033fc:	e002      	b.n	8003404 <_tinysh_char_in+0x18c>
            puts("\b \b");
 80033fe:	484f      	ldr	r0, [pc, #316]	; (800353c <_tinysh_char_in+0x2c4>)
 8003400:	f7ff fb0c 	bl	8002a1c <tinysh_puts>
          while(cur_index-->strlen(line))
 8003404:	4b47      	ldr	r3, [pc, #284]	; (8003524 <_tinysh_char_in+0x2ac>)
 8003406:	681c      	ldr	r4, [r3, #0]
 8003408:	1e63      	subs	r3, r4, #1
 800340a:	4a46      	ldr	r2, [pc, #280]	; (8003524 <_tinysh_char_in+0x2ac>)
 800340c:	6013      	str	r3, [r2, #0]
 800340e:	69f8      	ldr	r0, [r7, #28]
 8003410:	f7ff faec 	bl	80029ec <tinysh_strlen>
 8003414:	4603      	mov	r3, r0
 8003416:	429c      	cmp	r4, r3
 8003418:	dcf1      	bgt.n	80033fe <_tinysh_char_in+0x186>
          putchar('\r');
 800341a:	200d      	movs	r0, #13
 800341c:	f7ff fad4 	bl	80029c8 <tinysh_char_out>
          puts("VT$");
 8003420:	4841      	ldr	r0, [pc, #260]	; (8003528 <_tinysh_char_in+0x2b0>)
 8003422:	f7ff fafb 	bl	8002a1c <tinysh_puts>
          puts((char*)line);
 8003426:	69f8      	ldr	r0, [r7, #28]
 8003428:	f7ff faf8 	bl	8002a1c <tinysh_puts>
          cur_index=strlen(line);
 800342c:	69f8      	ldr	r0, [r7, #28]
 800342e:	f7ff fadd 	bl	80029ec <tinysh_strlen>
 8003432:	4603      	mov	r3, r0
 8003434:	4a3b      	ldr	r2, [pc, #236]	; (8003524 <_tinysh_char_in+0x2ac>)
 8003436:	6013      	str	r3, [r2, #0]
          cur_buf_index=prevline;
 8003438:	4a34      	ldr	r2, [pc, #208]	; (800350c <_tinysh_char_in+0x294>)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6013      	str	r3, [r2, #0]
}
 800343e:	e0c0      	b.n	80035c2 <_tinysh_char_in+0x34a>
  else if(c==14) /* CTRL-N: next in history */
 8003440:	79fb      	ldrb	r3, [r7, #7]
 8003442:	2b0e      	cmp	r3, #14
 8003444:	d140      	bne.n	80034c8 <_tinysh_char_in+0x250>
	  int nextline=(cur_buf_index+1)%HISTORY_DEPTH;
 8003446:	4b31      	ldr	r3, [pc, #196]	; (800350c <_tinysh_char_in+0x294>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	1c5a      	adds	r2, r3, #1
 800344c:	4b34      	ldr	r3, [pc, #208]	; (8003520 <_tinysh_char_in+0x2a8>)
 800344e:	fb83 3102 	smull	r3, r1, r3, r2
 8003452:	17d3      	asrs	r3, r2, #31
 8003454:	1ac9      	subs	r1, r1, r3
 8003456:	460b      	mov	r3, r1
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	440b      	add	r3, r1
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	613b      	str	r3, [r7, #16]
	  if(input_buffers[nextline][0])
 8003462:	492b      	ldr	r1, [pc, #172]	; (8003510 <_tinysh_char_in+0x298>)
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	4613      	mov	r3, r2
 8003468:	021b      	lsls	r3, r3, #8
 800346a:	4413      	add	r3, r2
 800346c:	440b      	add	r3, r1
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 80a6 	beq.w	80035c2 <_tinysh_char_in+0x34a>
		  line=input_buffers[nextline];
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	4613      	mov	r3, r2
 800347a:	021b      	lsls	r3, r3, #8
 800347c:	4413      	add	r3, r2
 800347e:	4a24      	ldr	r2, [pc, #144]	; (8003510 <_tinysh_char_in+0x298>)
 8003480:	4413      	add	r3, r2
 8003482:	61fb      	str	r3, [r7, #28]
		  while(cur_index-->strlen(line))
 8003484:	e002      	b.n	800348c <_tinysh_char_in+0x214>
			puts("\b \b");
 8003486:	482d      	ldr	r0, [pc, #180]	; (800353c <_tinysh_char_in+0x2c4>)
 8003488:	f7ff fac8 	bl	8002a1c <tinysh_puts>
		  while(cur_index-->strlen(line))
 800348c:	4b25      	ldr	r3, [pc, #148]	; (8003524 <_tinysh_char_in+0x2ac>)
 800348e:	681c      	ldr	r4, [r3, #0]
 8003490:	1e63      	subs	r3, r4, #1
 8003492:	4a24      	ldr	r2, [pc, #144]	; (8003524 <_tinysh_char_in+0x2ac>)
 8003494:	6013      	str	r3, [r2, #0]
 8003496:	69f8      	ldr	r0, [r7, #28]
 8003498:	f7ff faa8 	bl	80029ec <tinysh_strlen>
 800349c:	4603      	mov	r3, r0
 800349e:	429c      	cmp	r4, r3
 80034a0:	dcf1      	bgt.n	8003486 <_tinysh_char_in+0x20e>
		  putchar('\r');
 80034a2:	200d      	movs	r0, #13
 80034a4:	f7ff fa90 	bl	80029c8 <tinysh_char_out>
		  puts("VT$");
 80034a8:	481f      	ldr	r0, [pc, #124]	; (8003528 <_tinysh_char_in+0x2b0>)
 80034aa:	f7ff fab7 	bl	8002a1c <tinysh_puts>
		  puts((char*)line);
 80034ae:	69f8      	ldr	r0, [r7, #28]
 80034b0:	f7ff fab4 	bl	8002a1c <tinysh_puts>
		  cur_index=strlen(line);
 80034b4:	69f8      	ldr	r0, [r7, #28]
 80034b6:	f7ff fa99 	bl	80029ec <tinysh_strlen>
 80034ba:	4603      	mov	r3, r0
 80034bc:	4a19      	ldr	r2, [pc, #100]	; (8003524 <_tinysh_char_in+0x2ac>)
 80034be:	6013      	str	r3, [r2, #0]
		  cur_buf_index=nextline;
 80034c0:	4a12      	ldr	r2, [pc, #72]	; (800350c <_tinysh_char_in+0x294>)
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	6013      	str	r3, [r2, #0]
}
 80034c6:	e07c      	b.n	80035c2 <_tinysh_char_in+0x34a>
  else if(c=='?') 			// display help //
 80034c8:	79fb      	ldrb	r3, [r7, #7]
 80034ca:	2b3f      	cmp	r3, #63	; 0x3f
 80034cc:	d13a      	bne.n	8003544 <_tinysh_char_in+0x2cc>
	  puts("\r\n\n");
 80034ce:	481c      	ldr	r0, [pc, #112]	; (8003540 <_tinysh_char_in+0x2c8>)
 80034d0:	f7ff faa4 	bl	8002a1c <tinysh_puts>
      cmd=cur_cmd_ctx?cur_cmd_ctx->child:root_cmd;
 80034d4:	4b10      	ldr	r3, [pc, #64]	; (8003518 <_tinysh_char_in+0x2a0>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d003      	beq.n	80034e4 <_tinysh_char_in+0x26c>
 80034dc:	4b0e      	ldr	r3, [pc, #56]	; (8003518 <_tinysh_char_in+0x2a0>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	69db      	ldr	r3, [r3, #28]
 80034e2:	e001      	b.n	80034e8 <_tinysh_char_in+0x270>
 80034e4:	4b0d      	ldr	r3, [pc, #52]	; (800351c <_tinysh_char_in+0x2a4>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	617b      	str	r3, [r7, #20]
      help_command_line(cmd,line);
 80034ea:	69f9      	ldr	r1, [r7, #28]
 80034ec:	6978      	ldr	r0, [r7, #20]
 80034ee:	f7ff fcff 	bl	8002ef0 <help_command_line>
      start_of_line();
 80034f2:	f7ff fea3 	bl	800323c <start_of_line>
      puts((char*)line);
 80034f6:	69f8      	ldr	r0, [r7, #28]
 80034f8:	f7ff fa90 	bl	8002a1c <tinysh_puts>
      cur_index=strlen(line);
 80034fc:	69f8      	ldr	r0, [r7, #28]
 80034fe:	f7ff fa75 	bl	80029ec <tinysh_strlen>
 8003502:	4603      	mov	r3, r0
 8003504:	4a07      	ldr	r2, [pc, #28]	; (8003524 <_tinysh_char_in+0x2ac>)
 8003506:	6013      	str	r3, [r2, #0]
}
 8003508:	e05b      	b.n	80035c2 <_tinysh_char_in+0x34a>
 800350a:	bf00      	nop
 800350c:	20001554 	.word	0x20001554
 8003510:	20000e48 	.word	0x20000e48
 8003514:	20000024 	.word	0x20000024
 8003518:	20001664 	.word	0x20001664
 800351c:	20000034 	.word	0x20000034
 8003520:	2aaaaaab 	.word	0x2aaaaaab
 8003524:	20001660 	.word	0x20001660
 8003528:	0801004c 	.word	0x0801004c
 800352c:	08010050 	.word	0x08010050
 8003530:	08010054 	.word	0x08010054
 8003534:	08010044 	.word	0x08010044
 8003538:	08010058 	.word	0x08010058
 800353c:	0801005c 	.word	0x0801005c
 8003540:	08010060 	.word	0x08010060
  else if(c==9) 			/* TAB: autocompletion */
 8003544:	79fb      	ldrb	r3, [r7, #7]
 8003546:	2b09      	cmp	r3, #9
 8003548:	d11d      	bne.n	8003586 <_tinysh_char_in+0x30e>
      cmd=cur_cmd_ctx?cur_cmd_ctx->child:root_cmd;
 800354a:	4b20      	ldr	r3, [pc, #128]	; (80035cc <_tinysh_char_in+0x354>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d003      	beq.n	800355a <_tinysh_char_in+0x2e2>
 8003552:	4b1e      	ldr	r3, [pc, #120]	; (80035cc <_tinysh_char_in+0x354>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	69db      	ldr	r3, [r3, #28]
 8003558:	e001      	b.n	800355e <_tinysh_char_in+0x2e6>
 800355a:	4b1d      	ldr	r3, [pc, #116]	; (80035d0 <_tinysh_char_in+0x358>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	61bb      	str	r3, [r7, #24]
      if(complete_command_line(cmd,line))
 8003560:	69f9      	ldr	r1, [r7, #28]
 8003562:	69b8      	ldr	r0, [r7, #24]
 8003564:	f7ff fd58 	bl	8003018 <complete_command_line>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d004      	beq.n	8003578 <_tinysh_char_in+0x300>
         start_of_line();
 800356e:	f7ff fe65 	bl	800323c <start_of_line>
         puts((char*)line);
 8003572:	69f8      	ldr	r0, [r7, #28]
 8003574:	f7ff fa52 	bl	8002a1c <tinysh_puts>
      cur_index=strlen(line);
 8003578:	69f8      	ldr	r0, [r7, #28]
 800357a:	f7ff fa37 	bl	80029ec <tinysh_strlen>
 800357e:	4603      	mov	r3, r0
 8003580:	4a14      	ldr	r2, [pc, #80]	; (80035d4 <_tinysh_char_in+0x35c>)
 8003582:	6013      	str	r3, [r2, #0]
}
 8003584:	e01d      	b.n	80035c2 <_tinysh_char_in+0x34a>
    if(cur_index<BUFFER_SIZE)
 8003586:	4b13      	ldr	r3, [pc, #76]	; (80035d4 <_tinysh_char_in+0x35c>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2bff      	cmp	r3, #255	; 0xff
 800358c:	dc19      	bgt.n	80035c2 <_tinysh_char_in+0x34a>
       if(echo)
 800358e:	4b12      	ldr	r3, [pc, #72]	; (80035d8 <_tinysh_char_in+0x360>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <_tinysh_char_in+0x326>
         putchar(c);
 8003596:	79fb      	ldrb	r3, [r7, #7]
 8003598:	4618      	mov	r0, r3
 800359a:	f7ff fa15 	bl	80029c8 <tinysh_char_out>
       line[cur_index++]=c;
 800359e:	4b0d      	ldr	r3, [pc, #52]	; (80035d4 <_tinysh_char_in+0x35c>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	1c5a      	adds	r2, r3, #1
 80035a4:	490b      	ldr	r1, [pc, #44]	; (80035d4 <_tinysh_char_in+0x35c>)
 80035a6:	600a      	str	r2, [r1, #0]
 80035a8:	461a      	mov	r2, r3
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	4413      	add	r3, r2
 80035ae:	79fa      	ldrb	r2, [r7, #7]
 80035b0:	701a      	strb	r2, [r3, #0]
       line[cur_index]=0;
 80035b2:	4b08      	ldr	r3, [pc, #32]	; (80035d4 <_tinysh_char_in+0x35c>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	461a      	mov	r2, r3
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	4413      	add	r3, r2
 80035bc:	2200      	movs	r2, #0
 80035be:	701a      	strb	r2, [r3, #0]
}
 80035c0:	e7ff      	b.n	80035c2 <_tinysh_char_in+0x34a>
 80035c2:	bf00      	nop
 80035c4:	3724      	adds	r7, #36	; 0x24
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd90      	pop	{r4, r7, pc}
 80035ca:	bf00      	nop
 80035cc:	20001664 	.word	0x20001664
 80035d0:	20000034 	.word	0x20000034
 80035d4:	20001660 	.word	0x20001660
 80035d8:	20000024 	.word	0x20000024

080035dc <tinysh_char_in>:

/* new character input */
void tinysh_char_in(uchar c)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	4603      	mov	r3, r0
 80035e4:	71fb      	strb	r3, [r7, #7]
  /*
   * filter characters here
   */
  _tinysh_char_in(c);
 80035e6:	79fb      	ldrb	r3, [r7, #7]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7ff fe45 	bl	8003278 <_tinysh_char_in>
}
 80035ee:	bf00      	nop
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
	...

080035f8 <tinysh_add_command>:

/* add a new command */
void tinysh_add_command(tinysh_cmd_t *cmd)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  tinysh_cmd_t *cm;

  if(cmd->parent)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d016      	beq.n	8003636 <tinysh_add_command+0x3e>
    {
      cm=cmd->parent->child;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	60fb      	str	r3, [r7, #12]
      if(!cm)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d107      	bne.n	8003626 <tinysh_add_command+0x2e>
        {
          cmd->parent->child=cmd;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	61da      	str	r2, [r3, #28]
    {
      cm=root_cmd;
      while(cm->next) cm=cm->next;
      cm->next=cmd;
    }
}
 800361e:	e020      	b.n	8003662 <tinysh_add_command+0x6a>
          while(cm->next) cm=cm->next;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	60fb      	str	r3, [r7, #12]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1f8      	bne.n	8003620 <tinysh_add_command+0x28>
          cm->next=cmd;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	619a      	str	r2, [r3, #24]
}
 8003634:	e015      	b.n	8003662 <tinysh_add_command+0x6a>
  else if(!root_cmd)
 8003636:	4b0e      	ldr	r3, [pc, #56]	; (8003670 <tinysh_add_command+0x78>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d103      	bne.n	8003646 <tinysh_add_command+0x4e>
      root_cmd=cmd;
 800363e:	4a0c      	ldr	r2, [pc, #48]	; (8003670 <tinysh_add_command+0x78>)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6013      	str	r3, [r2, #0]
}
 8003644:	e00d      	b.n	8003662 <tinysh_add_command+0x6a>
      cm=root_cmd;
 8003646:	4b0a      	ldr	r3, [pc, #40]	; (8003670 <tinysh_add_command+0x78>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	60fb      	str	r3, [r7, #12]
      while(cm->next) cm=cm->next;
 800364c:	e002      	b.n	8003654 <tinysh_add_command+0x5c>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	60fb      	str	r3, [r7, #12]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1f8      	bne.n	800364e <tinysh_add_command+0x56>
      cm->next=cmd;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	619a      	str	r2, [r3, #24]
}
 8003662:	bf00      	nop
 8003664:	3714      	adds	r7, #20
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	20000034 	.word	0x20000034

08003674 <tinysh_set_prompt>:

/* modify shell prompt */
void tinysh_set_prompt(char *str)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  int i;
  for(i=0;str[i] && i<PROMPT_SIZE;i++)
 800367c:	2300      	movs	r3, #0
 800367e:	60fb      	str	r3, [r7, #12]
 8003680:	e00b      	b.n	800369a <tinysh_set_prompt+0x26>
    prompt[i]=str[i];
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	4413      	add	r3, r2
 8003688:	7819      	ldrb	r1, [r3, #0]
 800368a:	4a0e      	ldr	r2, [pc, #56]	; (80036c4 <tinysh_set_prompt+0x50>)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	4413      	add	r3, r2
 8003690:	460a      	mov	r2, r1
 8003692:	701a      	strb	r2, [r3, #0]
  for(i=0;str[i] && i<PROMPT_SIZE;i++)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	3301      	adds	r3, #1
 8003698:	60fb      	str	r3, [r7, #12]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	4413      	add	r3, r2
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d002      	beq.n	80036ac <tinysh_set_prompt+0x38>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2b07      	cmp	r3, #7
 80036aa:	ddea      	ble.n	8003682 <tinysh_set_prompt+0xe>

  prompt[i]=0;
 80036ac:	4a05      	ldr	r2, [pc, #20]	; (80036c4 <tinysh_set_prompt+0x50>)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	4413      	add	r3, r2
 80036b2:	2200      	movs	r2, #0
 80036b4:	701a      	strb	r2, [r3, #0]
  /* force prompt display by generating empty command */
  tinysh_char_in('\r');
 80036b6:	200d      	movs	r0, #13
 80036b8:	f7ff ff90 	bl	80035dc <tinysh_char_in>
}
 80036bc:	bf00      	nop
 80036be:	3710      	adds	r7, #16
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	20000028 	.word	0x20000028

080036c8 <tinysh_dec>:
/*********************************************************************
 * @name	: tinysh_dec
 * @brief	: string to decimal conversion (1 bytes only)
 *********************************************************************/
unsigned long tinysh_dec(char *s)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  unsigned long res=0;
 80036d0:	2300      	movs	r3, #0
 80036d2:	60fb      	str	r3, [r7, #12]
  uint8_t index = 0;
 80036d4:	2300      	movs	r3, #0
 80036d6:	72fb      	strb	r3, [r7, #11]

  while(*s)
 80036d8:	e027      	b.n	800372a <tinysh_dec+0x62>
  {
	  //printf("%c\r\n",*s);

	  res*=10;
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	4613      	mov	r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	4413      	add	r3, r2
 80036e2:	005b      	lsls	r3, r3, #1
 80036e4:	60fb      	str	r3, [r7, #12]

	  if((*s == '0')&&(index == 0))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	2b30      	cmp	r3, #48	; 0x30
 80036ec:	d105      	bne.n	80036fa <tinysh_dec+0x32>
 80036ee:	7afb      	ldrb	r3, [r7, #11]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d102      	bne.n	80036fa <tinysh_dec+0x32>
		  res = 0;
 80036f4:	2300      	movs	r3, #0
 80036f6:	60fb      	str	r3, [r7, #12]
 80036f8:	e00e      	b.n	8003718 <tinysh_dec+0x50>
	  else if(*s>='0' && *s<='9')
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	2b2f      	cmp	r3, #47	; 0x2f
 8003700:	d919      	bls.n	8003736 <tinysh_dec+0x6e>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	2b39      	cmp	r3, #57	; 0x39
 8003708:	d815      	bhi.n	8003736 <tinysh_dec+0x6e>
		  res+=*s-'0';
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	461a      	mov	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	4413      	add	r3, r2
 8003714:	3b30      	subs	r3, #48	; 0x30
 8003716:	60fb      	str	r3, [r7, #12]
	  else
		  break;

	  s++;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	3301      	adds	r3, #1
 800371c:	607b      	str	r3, [r7, #4]
	  index++;
 800371e:	7afb      	ldrb	r3, [r7, #11]
 8003720:	3301      	adds	r3, #1
 8003722:	72fb      	strb	r3, [r7, #11]

	  if(index > 10){
 8003724:	7afb      	ldrb	r3, [r7, #11]
 8003726:	2b0a      	cmp	r3, #10
 8003728:	d804      	bhi.n	8003734 <tinysh_dec+0x6c>
  while(*s)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1d3      	bne.n	80036da <tinysh_dec+0x12>
 8003732:	e000      	b.n	8003736 <tinysh_dec+0x6e>
		 break;
 8003734:	bf00      	nop
	  }
  }

  return res;
 8003736:	68fb      	ldr	r3, [r7, #12]
}
 8003738:	4618      	mov	r0, r3
 800373a:	3714      	adds	r7, #20
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <__io_putchar>:
	/******************************************************************
	  * @name   PUTCHAR_PROTOTYPE
	  * @brief  Retargets the C library printf function to the USART.
	  *****************************************************************/
	PUTCHAR_PROTOTYPE
	{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
		HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);				//Use USART3
 800374c:	1d39      	adds	r1, r7, #4
 800374e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003752:	2201      	movs	r2, #1
 8003754:	4803      	ldr	r0, [pc, #12]	; (8003764 <__io_putchar+0x20>)
 8003756:	f004 f890 	bl	800787a <HAL_UART_Transmit>
		return ch;
 800375a:	687b      	ldr	r3, [r7, #4]
	}
 800375c:	4618      	mov	r0, r3
 800375e:	3708      	adds	r7, #8
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	2000166c 	.word	0x2000166c

08003768 <vFunc_uart_init>:
/********************************************
  * @name   vFunc_uart_init
  * @brief 	UART Initialization Function
  *******************************************/
static void vFunc_uart_init(uint32_t baud)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
	huart3.Instance 				= USART3;
 8003770:	4b1a      	ldr	r3, [pc, #104]	; (80037dc <vFunc_uart_init+0x74>)
 8003772:	4a1b      	ldr	r2, [pc, #108]	; (80037e0 <vFunc_uart_init+0x78>)
 8003774:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate 			= baud;
 8003776:	4a19      	ldr	r2, [pc, #100]	; (80037dc <vFunc_uart_init+0x74>)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6053      	str	r3, [r2, #4]
	huart3.Init.WordLength 			= UART_WORDLENGTH_8B;
 800377c:	4b17      	ldr	r3, [pc, #92]	; (80037dc <vFunc_uart_init+0x74>)
 800377e:	2200      	movs	r2, #0
 8003780:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits 			= UART_STOPBITS_1;
 8003782:	4b16      	ldr	r3, [pc, #88]	; (80037dc <vFunc_uart_init+0x74>)
 8003784:	2200      	movs	r2, #0
 8003786:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity 				= UART_PARITY_NONE;
 8003788:	4b14      	ldr	r3, [pc, #80]	; (80037dc <vFunc_uart_init+0x74>)
 800378a:	2200      	movs	r2, #0
 800378c:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode 				= UART_MODE_TX_RX;
 800378e:	4b13      	ldr	r3, [pc, #76]	; (80037dc <vFunc_uart_init+0x74>)
 8003790:	220c      	movs	r2, #12
 8003792:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl 			= UART_HWCONTROL_NONE;
 8003794:	4b11      	ldr	r3, [pc, #68]	; (80037dc <vFunc_uart_init+0x74>)
 8003796:	2200      	movs	r2, #0
 8003798:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling 		= UART_OVERSAMPLING_16;
 800379a:	4b10      	ldr	r3, [pc, #64]	; (80037dc <vFunc_uart_init+0x74>)
 800379c:	2200      	movs	r2, #0
 800379e:	61da      	str	r2, [r3, #28]

	if (HAL_UART_Init(&huart3) != HAL_OK)
 80037a0:	480e      	ldr	r0, [pc, #56]	; (80037dc <vFunc_uart_init+0x74>)
 80037a2:	f004 f81d 	bl	80077e0 <HAL_UART_Init>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d003      	beq.n	80037b4 <vFunc_uart_init+0x4c>
	{
		Error_Handler(__FILE__, __LINE__);
 80037ac:	215b      	movs	r1, #91	; 0x5b
 80037ae:	480d      	ldr	r0, [pc, #52]	; (80037e4 <vFunc_uart_init+0x7c>)
 80037b0:	f7fe f956 	bl	8001a60 <Error_Handler>
	}

	__HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);
 80037b4:	4b09      	ldr	r3, [pc, #36]	; (80037dc <vFunc_uart_init+0x74>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68da      	ldr	r2, [r3, #12]
 80037ba:	4b08      	ldr	r3, [pc, #32]	; (80037dc <vFunc_uart_init+0x74>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f042 0210 	orr.w	r2, r2, #16
 80037c2:	60da      	str	r2, [r3, #12]
	HAL_UART_Receive_DMA(&huart3, (uint8_t*)uart3Rcv_buff, UART3_RX_BUFFER_SIZE);
 80037c4:	22ff      	movs	r2, #255	; 0xff
 80037c6:	4908      	ldr	r1, [pc, #32]	; (80037e8 <vFunc_uart_init+0x80>)
 80037c8:	4804      	ldr	r0, [pc, #16]	; (80037dc <vFunc_uart_init+0x74>)
 80037ca:	f004 f8e8 	bl	800799e <HAL_UART_Receive_DMA>

	tinysh_init();
 80037ce:	f7ff f89d 	bl	800290c <tinysh_init>

}
 80037d2:	bf00      	nop
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	2000166c 	.word	0x2000166c
 80037e0:	40004800 	.word	0x40004800
 80037e4:	08010064 	.word	0x08010064
 80037e8:	200016b0 	.word	0x200016b0

080037ec <u8Func__uart_receive>:
/********************************************
  * @name   uart2_receive
  * @brief 	UART1 Receive Function
  *******************************************/
static uint8_t u8Func__uart_receive(UARTPeriphCallback callback, uint32_t timeout)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
	return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <u8Func__uart_send>:
/********************************************
  * @name   _puart2_send
  * @brief 	LPUART1 Send Function
  *******************************************/
static uint8_t u8Func__uart_send(uint8_t *data, uint16_t length, uint32_t timeout)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	460b      	mov	r3, r1
 800380e:	607a      	str	r2, [r7, #4]
 8003810:	817b      	strh	r3, [r7, #10]
	if (HAL_UART_Transmit(&huart3, data, length, timeout)!= HAL_OK)
 8003812:	897a      	ldrh	r2, [r7, #10]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68f9      	ldr	r1, [r7, #12]
 8003818:	4806      	ldr	r0, [pc, #24]	; (8003834 <u8Func__uart_send+0x30>)
 800381a:	f004 f82e 	bl	800787a <HAL_UART_Transmit>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <u8Func__uart_send+0x24>
	{
		return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e000      	b.n	800382a <u8Func__uart_send+0x26>
	}
	return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	2000166c 	.word	0x2000166c

08003838 <UART_Thread>:
  * @brief  UART thread
  * @param  semaphore
  * @retval None
  ************************************************************/
void UART_Thread(void *argument)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b08c      	sub	sp, #48	; 0x30
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
	struct PrintMessage rcv_msg;
	uint32_t TickDelay = pdMS_TO_TICKS(1);
 8003840:	2301      	movs	r3, #1
 8003842:	62bb      	str	r3, [r7, #40]	; 0x28

	for(;;)
	{
		// check message in the queue
		if (xQueueReceive(msg_queue, (void *)&rcv_msg, portMAX_DELAY) != pdTRUE) {
 8003844:	4b1b      	ldr	r3, [pc, #108]	; (80038b4 <UART_Thread+0x7c>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f107 010c 	add.w	r1, r7, #12
 800384c:	f04f 32ff 	mov.w	r2, #4294967295
 8003850:	4618      	mov	r0, r3
 8003852:	f006 f8e3 	bl	8009a1c <xQueueReceive>
 8003856:	4603      	mov	r3, r0
 8003858:	2b01      	cmp	r3, #1
 800385a:	d003      	beq.n	8003864 <UART_Thread+0x2c>
			printf("UART QUEUE Error\r\n\n");
 800385c:	4816      	ldr	r0, [pc, #88]	; (80038b8 <UART_Thread+0x80>)
 800385e:	f009 fd25 	bl	800d2ac <puts>
 8003862:	e023      	b.n	80038ac <UART_Thread+0x74>
		}else{

#ifdef SHELL_CMD
			for(int i = 0; i<uart3_buff_len; i++){
 8003864:	2300      	movs	r3, #0
 8003866:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003868:	e00d      	b.n	8003886 <UART_Thread+0x4e>
			  uint8_t single_char = uart3Rcv_buff[i];
 800386a:	4a14      	ldr	r2, [pc, #80]	; (80038bc <UART_Thread+0x84>)
 800386c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386e:	4413      	add	r3, r2
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			  tinysh_char_in((unsigned char)single_char);
 8003876:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800387a:	4618      	mov	r0, r3
 800387c:	f7ff feae 	bl	80035dc <tinysh_char_in>
			for(int i = 0; i<uart3_buff_len; i++){
 8003880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003882:	3301      	adds	r3, #1
 8003884:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003886:	4b0e      	ldr	r3, [pc, #56]	; (80038c0 <UART_Thread+0x88>)
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	461a      	mov	r2, r3
 800388c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800388e:	4293      	cmp	r3, r2
 8003890:	dbeb      	blt.n	800386a <UART_Thread+0x32>
			}

			//Zero Receiving Buffer
			memset(uart3Rcv_buff, '\0', sizeof(uart3Rcv_buff));
 8003892:	22ff      	movs	r2, #255	; 0xff
 8003894:	2100      	movs	r1, #0
 8003896:	4809      	ldr	r0, [pc, #36]	; (80038bc <UART_Thread+0x84>)
 8003898:	f009 f810 	bl	800c8bc <memset>
			uart3_buff_len = 0;
 800389c:	4b08      	ldr	r3, [pc, #32]	; (80038c0 <UART_Thread+0x88>)
 800389e:	2200      	movs	r2, #0
 80038a0:	701a      	strb	r2, [r3, #0]

			//Restart to start DMA transmission of 255 bytes of data at a time
			HAL_UART_Receive_DMA(&huart3, (uint8_t*)uart3Rcv_buff, UART3_RX_BUFFER_SIZE);
 80038a2:	22ff      	movs	r2, #255	; 0xff
 80038a4:	4905      	ldr	r1, [pc, #20]	; (80038bc <UART_Thread+0x84>)
 80038a6:	4807      	ldr	r0, [pc, #28]	; (80038c4 <UART_Thread+0x8c>)
 80038a8:	f004 f879 	bl	800799e <HAL_UART_Receive_DMA>
#else
			printf("UART Thread RUN from %s\r\n\n",rcv_msg.body);
#endif
		}

		vTaskDelay(TickDelay);
 80038ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038ae:	f006 fdc9 	bl	800a444 <vTaskDelay>
		if (xQueueReceive(msg_queue, (void *)&rcv_msg, portMAX_DELAY) != pdTRUE) {
 80038b2:	e7c7      	b.n	8003844 <UART_Thread+0xc>
 80038b4:	20000de0 	.word	0x20000de0
 80038b8:	08010080 	.word	0x08010080
 80038bc:	200016b0 	.word	0x200016b0
 80038c0:	200017af 	.word	0x200017af
 80038c4:	2000166c 	.word	0x2000166c

080038c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80038c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003900 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80038cc:	480d      	ldr	r0, [pc, #52]	; (8003904 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80038ce:	490e      	ldr	r1, [pc, #56]	; (8003908 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80038d0:	4a0e      	ldr	r2, [pc, #56]	; (800390c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80038d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038d4:	e002      	b.n	80038dc <LoopCopyDataInit>

080038d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038da:	3304      	adds	r3, #4

080038dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038e0:	d3f9      	bcc.n	80038d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038e2:	4a0b      	ldr	r2, [pc, #44]	; (8003910 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80038e4:	4c0b      	ldr	r4, [pc, #44]	; (8003914 <LoopFillZerobss+0x26>)
  movs r3, #0
 80038e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038e8:	e001      	b.n	80038ee <LoopFillZerobss>

080038ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038ec:	3204      	adds	r2, #4

080038ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038f0:	d3fb      	bcc.n	80038ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80038f2:	f7fe fd8d 	bl	8002410 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80038f6:	f008 ffaf 	bl	800c858 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80038fa:	f7fd fb89 	bl	8001010 <main>
  bx  lr    
 80038fe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003900:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003904:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003908:	200003b4 	.word	0x200003b4
  ldr r2, =_sidata
 800390c:	080104ec 	.word	0x080104ec
  ldr r2, =_sbss
 8003910:	200003b4 	.word	0x200003b4
  ldr r4, =_ebss
 8003914:	20005664 	.word	0x20005664

08003918 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003918:	e7fe      	b.n	8003918 <ADC_IRQHandler>
	...

0800391c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003920:	4b0e      	ldr	r3, [pc, #56]	; (800395c <HAL_Init+0x40>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a0d      	ldr	r2, [pc, #52]	; (800395c <HAL_Init+0x40>)
 8003926:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800392a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800392c:	4b0b      	ldr	r3, [pc, #44]	; (800395c <HAL_Init+0x40>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a0a      	ldr	r2, [pc, #40]	; (800395c <HAL_Init+0x40>)
 8003932:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003936:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003938:	4b08      	ldr	r3, [pc, #32]	; (800395c <HAL_Init+0x40>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a07      	ldr	r2, [pc, #28]	; (800395c <HAL_Init+0x40>)
 800393e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003942:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003944:	2003      	movs	r0, #3
 8003946:	f000 f8fc 	bl	8003b42 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800394a:	200f      	movs	r0, #15
 800394c:	f7fe fb70 	bl	8002030 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003950:	f7fe f898 	bl	8001a84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	40023c00 	.word	0x40023c00

08003960 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003960:	b480      	push	{r7}
 8003962:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003964:	4b06      	ldr	r3, [pc, #24]	; (8003980 <HAL_IncTick+0x20>)
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	461a      	mov	r2, r3
 800396a:	4b06      	ldr	r3, [pc, #24]	; (8003984 <HAL_IncTick+0x24>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4413      	add	r3, r2
 8003970:	4a04      	ldr	r2, [pc, #16]	; (8003984 <HAL_IncTick+0x24>)
 8003972:	6013      	str	r3, [r2, #0]
}
 8003974:	bf00      	nop
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	200001dc 	.word	0x200001dc
 8003984:	200017b0 	.word	0x200017b0

08003988 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0
  return uwTick;
 800398c:	4b03      	ldr	r3, [pc, #12]	; (800399c <HAL_GetTick+0x14>)
 800398e:	681b      	ldr	r3, [r3, #0]
}
 8003990:	4618      	mov	r0, r3
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	200017b0 	.word	0x200017b0

080039a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039a8:	f7ff ffee 	bl	8003988 <HAL_GetTick>
 80039ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b8:	d005      	beq.n	80039c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039ba:	4b0a      	ldr	r3, [pc, #40]	; (80039e4 <HAL_Delay+0x44>)
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	461a      	mov	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	4413      	add	r3, r2
 80039c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80039c6:	bf00      	nop
 80039c8:	f7ff ffde 	bl	8003988 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d8f7      	bhi.n	80039c8 <HAL_Delay+0x28>
  {
  }
}
 80039d8:	bf00      	nop
 80039da:	bf00      	nop
 80039dc:	3710      	adds	r7, #16
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	200001dc 	.word	0x200001dc

080039e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f003 0307 	and.w	r3, r3, #7
 80039f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039f8:	4b0c      	ldr	r3, [pc, #48]	; (8003a2c <__NVIC_SetPriorityGrouping+0x44>)
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039fe:	68ba      	ldr	r2, [r7, #8]
 8003a00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a04:	4013      	ands	r3, r2
 8003a06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a1a:	4a04      	ldr	r2, [pc, #16]	; (8003a2c <__NVIC_SetPriorityGrouping+0x44>)
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	60d3      	str	r3, [r2, #12]
}
 8003a20:	bf00      	nop
 8003a22:	3714      	adds	r7, #20
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr
 8003a2c:	e000ed00 	.word	0xe000ed00

08003a30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a30:	b480      	push	{r7}
 8003a32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a34:	4b04      	ldr	r3, [pc, #16]	; (8003a48 <__NVIC_GetPriorityGrouping+0x18>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	0a1b      	lsrs	r3, r3, #8
 8003a3a:	f003 0307 	and.w	r3, r3, #7
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr
 8003a48:	e000ed00 	.word	0xe000ed00

08003a4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	4603      	mov	r3, r0
 8003a54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	db0b      	blt.n	8003a76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a5e:	79fb      	ldrb	r3, [r7, #7]
 8003a60:	f003 021f 	and.w	r2, r3, #31
 8003a64:	4907      	ldr	r1, [pc, #28]	; (8003a84 <__NVIC_EnableIRQ+0x38>)
 8003a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a6a:	095b      	lsrs	r3, r3, #5
 8003a6c:	2001      	movs	r0, #1
 8003a6e:	fa00 f202 	lsl.w	r2, r0, r2
 8003a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a76:	bf00      	nop
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	e000e100 	.word	0xe000e100

08003a88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	4603      	mov	r3, r0
 8003a90:	6039      	str	r1, [r7, #0]
 8003a92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	db0a      	blt.n	8003ab2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	b2da      	uxtb	r2, r3
 8003aa0:	490c      	ldr	r1, [pc, #48]	; (8003ad4 <__NVIC_SetPriority+0x4c>)
 8003aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aa6:	0112      	lsls	r2, r2, #4
 8003aa8:	b2d2      	uxtb	r2, r2
 8003aaa:	440b      	add	r3, r1
 8003aac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ab0:	e00a      	b.n	8003ac8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	b2da      	uxtb	r2, r3
 8003ab6:	4908      	ldr	r1, [pc, #32]	; (8003ad8 <__NVIC_SetPriority+0x50>)
 8003ab8:	79fb      	ldrb	r3, [r7, #7]
 8003aba:	f003 030f 	and.w	r3, r3, #15
 8003abe:	3b04      	subs	r3, #4
 8003ac0:	0112      	lsls	r2, r2, #4
 8003ac2:	b2d2      	uxtb	r2, r2
 8003ac4:	440b      	add	r3, r1
 8003ac6:	761a      	strb	r2, [r3, #24]
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr
 8003ad4:	e000e100 	.word	0xe000e100
 8003ad8:	e000ed00 	.word	0xe000ed00

08003adc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b089      	sub	sp, #36	; 0x24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f003 0307 	and.w	r3, r3, #7
 8003aee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	f1c3 0307 	rsb	r3, r3, #7
 8003af6:	2b04      	cmp	r3, #4
 8003af8:	bf28      	it	cs
 8003afa:	2304      	movcs	r3, #4
 8003afc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	3304      	adds	r3, #4
 8003b02:	2b06      	cmp	r3, #6
 8003b04:	d902      	bls.n	8003b0c <NVIC_EncodePriority+0x30>
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	3b03      	subs	r3, #3
 8003b0a:	e000      	b.n	8003b0e <NVIC_EncodePriority+0x32>
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b10:	f04f 32ff 	mov.w	r2, #4294967295
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1a:	43da      	mvns	r2, r3
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	401a      	ands	r2, r3
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b24:	f04f 31ff 	mov.w	r1, #4294967295
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b2e:	43d9      	mvns	r1, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b34:	4313      	orrs	r3, r2
         );
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3724      	adds	r7, #36	; 0x24
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr

08003b42 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b082      	sub	sp, #8
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f7ff ff4c 	bl	80039e8 <__NVIC_SetPriorityGrouping>
}
 8003b50:	bf00      	nop
 8003b52:	3708      	adds	r7, #8
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	4603      	mov	r3, r0
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
 8003b64:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b66:	2300      	movs	r3, #0
 8003b68:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b6a:	f7ff ff61 	bl	8003a30 <__NVIC_GetPriorityGrouping>
 8003b6e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	68b9      	ldr	r1, [r7, #8]
 8003b74:	6978      	ldr	r0, [r7, #20]
 8003b76:	f7ff ffb1 	bl	8003adc <NVIC_EncodePriority>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b80:	4611      	mov	r1, r2
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7ff ff80 	bl	8003a88 <__NVIC_SetPriority>
}
 8003b88:	bf00      	nop
 8003b8a:	3718      	adds	r7, #24
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	4603      	mov	r3, r0
 8003b98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7ff ff54 	bl	8003a4c <__NVIC_EnableIRQ>
}
 8003ba4:	bf00      	nop
 8003ba6:	3708      	adds	r7, #8
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d101      	bne.n	8003bbe <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e00e      	b.n	8003bdc <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	795b      	ldrb	r3, [r3, #5]
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d105      	bne.n	8003bd4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f7fd ff84 	bl	8001adc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3708      	adds	r7, #8
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b086      	sub	sp, #24
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003bec:	2300      	movs	r3, #0
 8003bee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003bf0:	f7ff feca 	bl	8003988 <HAL_GetTick>
 8003bf4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d101      	bne.n	8003c00 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e099      	b.n	8003d34 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2202      	movs	r2, #2
 8003c04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f022 0201 	bic.w	r2, r2, #1
 8003c1e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c20:	e00f      	b.n	8003c42 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c22:	f7ff feb1 	bl	8003988 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b05      	cmp	r3, #5
 8003c2e:	d908      	bls.n	8003c42 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2220      	movs	r2, #32
 8003c34:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2203      	movs	r2, #3
 8003c3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e078      	b.n	8003d34 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1e8      	bne.n	8003c22 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	4b38      	ldr	r3, [pc, #224]	; (8003d3c <HAL_DMA_Init+0x158>)
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685a      	ldr	r2, [r3, #4]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c8e:	697a      	ldr	r2, [r7, #20]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c98:	2b04      	cmp	r3, #4
 8003c9a:	d107      	bne.n	8003cac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	697a      	ldr	r2, [r7, #20]
 8003cb2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	f023 0307 	bic.w	r3, r3, #7
 8003cc2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd2:	2b04      	cmp	r3, #4
 8003cd4:	d117      	bne.n	8003d06 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00e      	beq.n	8003d06 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 fb0f 	bl	800430c <DMA_CheckFifoParam>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d008      	beq.n	8003d06 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2240      	movs	r2, #64	; 0x40
 8003cf8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003d02:	2301      	movs	r3, #1
 8003d04:	e016      	b.n	8003d34 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 fac6 	bl	80042a0 <DMA_CalcBaseAndBitshift>
 8003d14:	4603      	mov	r3, r0
 8003d16:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d1c:	223f      	movs	r2, #63	; 0x3f
 8003d1e:	409a      	lsls	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3718      	adds	r7, #24
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	f010803f 	.word	0xf010803f

08003d40 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	607a      	str	r2, [r7, #4]
 8003d4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d56:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d101      	bne.n	8003d66 <HAL_DMA_Start_IT+0x26>
 8003d62:	2302      	movs	r3, #2
 8003d64:	e040      	b.n	8003de8 <HAL_DMA_Start_IT+0xa8>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d12f      	bne.n	8003dda <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2202      	movs	r2, #2
 8003d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	68b9      	ldr	r1, [r7, #8]
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f000 fa58 	bl	8004244 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d98:	223f      	movs	r2, #63	; 0x3f
 8003d9a:	409a      	lsls	r2, r3
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f042 0216 	orr.w	r2, r2, #22
 8003dae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d007      	beq.n	8003dc8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f042 0208 	orr.w	r2, r2, #8
 8003dc6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f042 0201 	orr.w	r2, r2, #1
 8003dd6:	601a      	str	r2, [r3, #0]
 8003dd8:	e005      	b.n	8003de6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003de2:	2302      	movs	r3, #2
 8003de4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003de6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3718      	adds	r7, #24
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dfc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003dfe:	f7ff fdc3 	bl	8003988 <HAL_GetTick>
 8003e02:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d008      	beq.n	8003e22 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2280      	movs	r2, #128	; 0x80
 8003e14:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e052      	b.n	8003ec8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 0216 	bic.w	r2, r2, #22
 8003e30:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	695a      	ldr	r2, [r3, #20]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e40:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d103      	bne.n	8003e52 <HAL_DMA_Abort+0x62>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d007      	beq.n	8003e62 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 0208 	bic.w	r2, r2, #8
 8003e60:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f022 0201 	bic.w	r2, r2, #1
 8003e70:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e72:	e013      	b.n	8003e9c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e74:	f7ff fd88 	bl	8003988 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b05      	cmp	r3, #5
 8003e80:	d90c      	bls.n	8003e9c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2220      	movs	r2, #32
 8003e86:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2203      	movs	r2, #3
 8003e8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e015      	b.n	8003ec8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1e4      	bne.n	8003e74 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eae:	223f      	movs	r2, #63	; 0x3f
 8003eb0:	409a      	lsls	r2, r3
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d004      	beq.n	8003eee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2280      	movs	r2, #128	; 0x80
 8003ee8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e00c      	b.n	8003f08 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2205      	movs	r2, #5
 8003ef2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 0201 	bic.w	r2, r2, #1
 8003f04:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003f20:	4b8e      	ldr	r3, [pc, #568]	; (800415c <HAL_DMA_IRQHandler+0x248>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a8e      	ldr	r2, [pc, #568]	; (8004160 <HAL_DMA_IRQHandler+0x24c>)
 8003f26:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2a:	0a9b      	lsrs	r3, r3, #10
 8003f2c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f32:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f3e:	2208      	movs	r2, #8
 8003f40:	409a      	lsls	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	4013      	ands	r3, r2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d01a      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0304 	and.w	r3, r3, #4
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d013      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f022 0204 	bic.w	r2, r2, #4
 8003f66:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f6c:	2208      	movs	r2, #8
 8003f6e:	409a      	lsls	r2, r3
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f78:	f043 0201 	orr.w	r2, r3, #1
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f84:	2201      	movs	r2, #1
 8003f86:	409a      	lsls	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d012      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00b      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	409a      	lsls	r2, r3
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fae:	f043 0202 	orr.w	r2, r3, #2
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fba:	2204      	movs	r2, #4
 8003fbc:	409a      	lsls	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d012      	beq.n	8003fec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00b      	beq.n	8003fec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd8:	2204      	movs	r2, #4
 8003fda:	409a      	lsls	r2, r3
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe4:	f043 0204 	orr.w	r2, r3, #4
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff0:	2210      	movs	r2, #16
 8003ff2:	409a      	lsls	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d043      	beq.n	8004084 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0308 	and.w	r3, r3, #8
 8004006:	2b00      	cmp	r3, #0
 8004008:	d03c      	beq.n	8004084 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800400e:	2210      	movs	r2, #16
 8004010:	409a      	lsls	r2, r3
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d018      	beq.n	8004056 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d108      	bne.n	8004044 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004036:	2b00      	cmp	r3, #0
 8004038:	d024      	beq.n	8004084 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	4798      	blx	r3
 8004042:	e01f      	b.n	8004084 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004048:	2b00      	cmp	r3, #0
 800404a:	d01b      	beq.n	8004084 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	4798      	blx	r3
 8004054:	e016      	b.n	8004084 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004060:	2b00      	cmp	r3, #0
 8004062:	d107      	bne.n	8004074 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f022 0208 	bic.w	r2, r2, #8
 8004072:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004078:	2b00      	cmp	r3, #0
 800407a:	d003      	beq.n	8004084 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004088:	2220      	movs	r2, #32
 800408a:	409a      	lsls	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	4013      	ands	r3, r2
 8004090:	2b00      	cmp	r3, #0
 8004092:	f000 808f 	beq.w	80041b4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0310 	and.w	r3, r3, #16
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f000 8087 	beq.w	80041b4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040aa:	2220      	movs	r2, #32
 80040ac:	409a      	lsls	r2, r3
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b05      	cmp	r3, #5
 80040bc:	d136      	bne.n	800412c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f022 0216 	bic.w	r2, r2, #22
 80040cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	695a      	ldr	r2, [r3, #20]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d103      	bne.n	80040ee <HAL_DMA_IRQHandler+0x1da>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d007      	beq.n	80040fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f022 0208 	bic.w	r2, r2, #8
 80040fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004102:	223f      	movs	r2, #63	; 0x3f
 8004104:	409a      	lsls	r2, r3
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2201      	movs	r2, #1
 800410e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800411e:	2b00      	cmp	r3, #0
 8004120:	d07e      	beq.n	8004220 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	4798      	blx	r3
        }
        return;
 800412a:	e079      	b.n	8004220 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d01d      	beq.n	8004176 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d10d      	bne.n	8004164 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414c:	2b00      	cmp	r3, #0
 800414e:	d031      	beq.n	80041b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	4798      	blx	r3
 8004158:	e02c      	b.n	80041b4 <HAL_DMA_IRQHandler+0x2a0>
 800415a:	bf00      	nop
 800415c:	20000000 	.word	0x20000000
 8004160:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004168:	2b00      	cmp	r3, #0
 800416a:	d023      	beq.n	80041b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	4798      	blx	r3
 8004174:	e01e      	b.n	80041b4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004180:	2b00      	cmp	r3, #0
 8004182:	d10f      	bne.n	80041a4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f022 0210 	bic.w	r2, r2, #16
 8004192:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d003      	beq.n	80041b4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d032      	beq.n	8004222 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c0:	f003 0301 	and.w	r3, r3, #1
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d022      	beq.n	800420e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2205      	movs	r2, #5
 80041cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 0201 	bic.w	r2, r2, #1
 80041de:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	3301      	adds	r3, #1
 80041e4:	60bb      	str	r3, [r7, #8]
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d307      	bcc.n	80041fc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1f2      	bne.n	80041e0 <HAL_DMA_IRQHandler+0x2cc>
 80041fa:	e000      	b.n	80041fe <HAL_DMA_IRQHandler+0x2ea>
          break;
 80041fc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2201      	movs	r2, #1
 8004202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004212:	2b00      	cmp	r3, #0
 8004214:	d005      	beq.n	8004222 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	4798      	blx	r3
 800421e:	e000      	b.n	8004222 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004220:	bf00      	nop
    }
  }
}
 8004222:	3718      	adds	r7, #24
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004236:	b2db      	uxtb	r3, r3
}
 8004238:	4618      	mov	r0, r3
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
 8004250:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004260:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	2b40      	cmp	r3, #64	; 0x40
 8004270:	d108      	bne.n	8004284 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68ba      	ldr	r2, [r7, #8]
 8004280:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004282:	e007      	b.n	8004294 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68ba      	ldr	r2, [r7, #8]
 800428a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	60da      	str	r2, [r3, #12]
}
 8004294:	bf00      	nop
 8004296:	3714      	adds	r7, #20
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	3b10      	subs	r3, #16
 80042b0:	4a14      	ldr	r2, [pc, #80]	; (8004304 <DMA_CalcBaseAndBitshift+0x64>)
 80042b2:	fba2 2303 	umull	r2, r3, r2, r3
 80042b6:	091b      	lsrs	r3, r3, #4
 80042b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80042ba:	4a13      	ldr	r2, [pc, #76]	; (8004308 <DMA_CalcBaseAndBitshift+0x68>)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	4413      	add	r3, r2
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	461a      	mov	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2b03      	cmp	r3, #3
 80042cc:	d909      	bls.n	80042e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80042d6:	f023 0303 	bic.w	r3, r3, #3
 80042da:	1d1a      	adds	r2, r3, #4
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	659a      	str	r2, [r3, #88]	; 0x58
 80042e0:	e007      	b.n	80042f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80042ea:	f023 0303 	bic.w	r3, r3, #3
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3714      	adds	r7, #20
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	aaaaaaab 	.word	0xaaaaaaab
 8004308:	080100f8 	.word	0x080100f8

0800430c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800430c:	b480      	push	{r7}
 800430e:	b085      	sub	sp, #20
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004314:	2300      	movs	r3, #0
 8004316:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800431c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d11f      	bne.n	8004366 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	2b03      	cmp	r3, #3
 800432a:	d856      	bhi.n	80043da <DMA_CheckFifoParam+0xce>
 800432c:	a201      	add	r2, pc, #4	; (adr r2, 8004334 <DMA_CheckFifoParam+0x28>)
 800432e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004332:	bf00      	nop
 8004334:	08004345 	.word	0x08004345
 8004338:	08004357 	.word	0x08004357
 800433c:	08004345 	.word	0x08004345
 8004340:	080043db 	.word	0x080043db
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004348:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d046      	beq.n	80043de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004354:	e043      	b.n	80043de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800435e:	d140      	bne.n	80043e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004364:	e03d      	b.n	80043e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800436e:	d121      	bne.n	80043b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	2b03      	cmp	r3, #3
 8004374:	d837      	bhi.n	80043e6 <DMA_CheckFifoParam+0xda>
 8004376:	a201      	add	r2, pc, #4	; (adr r2, 800437c <DMA_CheckFifoParam+0x70>)
 8004378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800437c:	0800438d 	.word	0x0800438d
 8004380:	08004393 	.word	0x08004393
 8004384:	0800438d 	.word	0x0800438d
 8004388:	080043a5 	.word	0x080043a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	73fb      	strb	r3, [r7, #15]
      break;
 8004390:	e030      	b.n	80043f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004396:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d025      	beq.n	80043ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043a2:	e022      	b.n	80043ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80043ac:	d11f      	bne.n	80043ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80043b2:	e01c      	b.n	80043ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d903      	bls.n	80043c2 <DMA_CheckFifoParam+0xb6>
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	2b03      	cmp	r3, #3
 80043be:	d003      	beq.n	80043c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80043c0:	e018      	b.n	80043f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	73fb      	strb	r3, [r7, #15]
      break;
 80043c6:	e015      	b.n	80043f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00e      	beq.n	80043f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	73fb      	strb	r3, [r7, #15]
      break;
 80043d8:	e00b      	b.n	80043f2 <DMA_CheckFifoParam+0xe6>
      break;
 80043da:	bf00      	nop
 80043dc:	e00a      	b.n	80043f4 <DMA_CheckFifoParam+0xe8>
      break;
 80043de:	bf00      	nop
 80043e0:	e008      	b.n	80043f4 <DMA_CheckFifoParam+0xe8>
      break;
 80043e2:	bf00      	nop
 80043e4:	e006      	b.n	80043f4 <DMA_CheckFifoParam+0xe8>
      break;
 80043e6:	bf00      	nop
 80043e8:	e004      	b.n	80043f4 <DMA_CheckFifoParam+0xe8>
      break;
 80043ea:	bf00      	nop
 80043ec:	e002      	b.n	80043f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80043ee:	bf00      	nop
 80043f0:	e000      	b.n	80043f4 <DMA_CheckFifoParam+0xe8>
      break;
 80043f2:	bf00      	nop
    }
  } 
  
  return status; 
 80043f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3714      	adds	r7, #20
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop

08004404 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004404:	b480      	push	{r7}
 8004406:	b089      	sub	sp, #36	; 0x24
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800440e:	2300      	movs	r3, #0
 8004410:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004412:	2300      	movs	r3, #0
 8004414:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004416:	2300      	movs	r3, #0
 8004418:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800441a:	2300      	movs	r3, #0
 800441c:	61fb      	str	r3, [r7, #28]
 800441e:	e177      	b.n	8004710 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004420:	2201      	movs	r2, #1
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	fa02 f303 	lsl.w	r3, r2, r3
 8004428:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	697a      	ldr	r2, [r7, #20]
 8004430:	4013      	ands	r3, r2
 8004432:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	429a      	cmp	r2, r3
 800443a:	f040 8166 	bne.w	800470a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f003 0303 	and.w	r3, r3, #3
 8004446:	2b01      	cmp	r3, #1
 8004448:	d005      	beq.n	8004456 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004452:	2b02      	cmp	r3, #2
 8004454:	d130      	bne.n	80044b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	005b      	lsls	r3, r3, #1
 8004460:	2203      	movs	r2, #3
 8004462:	fa02 f303 	lsl.w	r3, r2, r3
 8004466:	43db      	mvns	r3, r3
 8004468:	69ba      	ldr	r2, [r7, #24]
 800446a:	4013      	ands	r3, r2
 800446c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	68da      	ldr	r2, [r3, #12]
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	005b      	lsls	r3, r3, #1
 8004476:	fa02 f303 	lsl.w	r3, r2, r3
 800447a:	69ba      	ldr	r2, [r7, #24]
 800447c:	4313      	orrs	r3, r2
 800447e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	69ba      	ldr	r2, [r7, #24]
 8004484:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800448c:	2201      	movs	r2, #1
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	fa02 f303 	lsl.w	r3, r2, r3
 8004494:	43db      	mvns	r3, r3
 8004496:	69ba      	ldr	r2, [r7, #24]
 8004498:	4013      	ands	r3, r2
 800449a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	091b      	lsrs	r3, r3, #4
 80044a2:	f003 0201 	and.w	r2, r3, #1
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	69ba      	ldr	r2, [r7, #24]
 80044b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f003 0303 	and.w	r3, r3, #3
 80044c0:	2b03      	cmp	r3, #3
 80044c2:	d017      	beq.n	80044f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	005b      	lsls	r3, r3, #1
 80044ce:	2203      	movs	r2, #3
 80044d0:	fa02 f303 	lsl.w	r3, r2, r3
 80044d4:	43db      	mvns	r3, r3
 80044d6:	69ba      	ldr	r2, [r7, #24]
 80044d8:	4013      	ands	r3, r2
 80044da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	689a      	ldr	r2, [r3, #8]
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	005b      	lsls	r3, r3, #1
 80044e4:	fa02 f303 	lsl.w	r3, r2, r3
 80044e8:	69ba      	ldr	r2, [r7, #24]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	69ba      	ldr	r2, [r7, #24]
 80044f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f003 0303 	and.w	r3, r3, #3
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d123      	bne.n	8004548 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	08da      	lsrs	r2, r3, #3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	3208      	adds	r2, #8
 8004508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800450c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	f003 0307 	and.w	r3, r3, #7
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	220f      	movs	r2, #15
 8004518:	fa02 f303 	lsl.w	r3, r2, r3
 800451c:	43db      	mvns	r3, r3
 800451e:	69ba      	ldr	r2, [r7, #24]
 8004520:	4013      	ands	r3, r2
 8004522:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	691a      	ldr	r2, [r3, #16]
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	f003 0307 	and.w	r3, r3, #7
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	fa02 f303 	lsl.w	r3, r2, r3
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	4313      	orrs	r3, r2
 8004538:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	08da      	lsrs	r2, r3, #3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	3208      	adds	r2, #8
 8004542:	69b9      	ldr	r1, [r7, #24]
 8004544:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	005b      	lsls	r3, r3, #1
 8004552:	2203      	movs	r2, #3
 8004554:	fa02 f303 	lsl.w	r3, r2, r3
 8004558:	43db      	mvns	r3, r3
 800455a:	69ba      	ldr	r2, [r7, #24]
 800455c:	4013      	ands	r3, r2
 800455e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f003 0203 	and.w	r2, r3, #3
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	005b      	lsls	r3, r3, #1
 800456c:	fa02 f303 	lsl.w	r3, r2, r3
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	4313      	orrs	r3, r2
 8004574:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004584:	2b00      	cmp	r3, #0
 8004586:	f000 80c0 	beq.w	800470a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800458a:	2300      	movs	r3, #0
 800458c:	60fb      	str	r3, [r7, #12]
 800458e:	4b66      	ldr	r3, [pc, #408]	; (8004728 <HAL_GPIO_Init+0x324>)
 8004590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004592:	4a65      	ldr	r2, [pc, #404]	; (8004728 <HAL_GPIO_Init+0x324>)
 8004594:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004598:	6453      	str	r3, [r2, #68]	; 0x44
 800459a:	4b63      	ldr	r3, [pc, #396]	; (8004728 <HAL_GPIO_Init+0x324>)
 800459c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800459e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045a2:	60fb      	str	r3, [r7, #12]
 80045a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80045a6:	4a61      	ldr	r2, [pc, #388]	; (800472c <HAL_GPIO_Init+0x328>)
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	089b      	lsrs	r3, r3, #2
 80045ac:	3302      	adds	r3, #2
 80045ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	f003 0303 	and.w	r3, r3, #3
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	220f      	movs	r2, #15
 80045be:	fa02 f303 	lsl.w	r3, r2, r3
 80045c2:	43db      	mvns	r3, r3
 80045c4:	69ba      	ldr	r2, [r7, #24]
 80045c6:	4013      	ands	r3, r2
 80045c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a58      	ldr	r2, [pc, #352]	; (8004730 <HAL_GPIO_Init+0x32c>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d037      	beq.n	8004642 <HAL_GPIO_Init+0x23e>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a57      	ldr	r2, [pc, #348]	; (8004734 <HAL_GPIO_Init+0x330>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d031      	beq.n	800463e <HAL_GPIO_Init+0x23a>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a56      	ldr	r2, [pc, #344]	; (8004738 <HAL_GPIO_Init+0x334>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d02b      	beq.n	800463a <HAL_GPIO_Init+0x236>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a55      	ldr	r2, [pc, #340]	; (800473c <HAL_GPIO_Init+0x338>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d025      	beq.n	8004636 <HAL_GPIO_Init+0x232>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a54      	ldr	r2, [pc, #336]	; (8004740 <HAL_GPIO_Init+0x33c>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d01f      	beq.n	8004632 <HAL_GPIO_Init+0x22e>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a53      	ldr	r2, [pc, #332]	; (8004744 <HAL_GPIO_Init+0x340>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d019      	beq.n	800462e <HAL_GPIO_Init+0x22a>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a52      	ldr	r2, [pc, #328]	; (8004748 <HAL_GPIO_Init+0x344>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d013      	beq.n	800462a <HAL_GPIO_Init+0x226>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a51      	ldr	r2, [pc, #324]	; (800474c <HAL_GPIO_Init+0x348>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d00d      	beq.n	8004626 <HAL_GPIO_Init+0x222>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a50      	ldr	r2, [pc, #320]	; (8004750 <HAL_GPIO_Init+0x34c>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d007      	beq.n	8004622 <HAL_GPIO_Init+0x21e>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a4f      	ldr	r2, [pc, #316]	; (8004754 <HAL_GPIO_Init+0x350>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d101      	bne.n	800461e <HAL_GPIO_Init+0x21a>
 800461a:	2309      	movs	r3, #9
 800461c:	e012      	b.n	8004644 <HAL_GPIO_Init+0x240>
 800461e:	230a      	movs	r3, #10
 8004620:	e010      	b.n	8004644 <HAL_GPIO_Init+0x240>
 8004622:	2308      	movs	r3, #8
 8004624:	e00e      	b.n	8004644 <HAL_GPIO_Init+0x240>
 8004626:	2307      	movs	r3, #7
 8004628:	e00c      	b.n	8004644 <HAL_GPIO_Init+0x240>
 800462a:	2306      	movs	r3, #6
 800462c:	e00a      	b.n	8004644 <HAL_GPIO_Init+0x240>
 800462e:	2305      	movs	r3, #5
 8004630:	e008      	b.n	8004644 <HAL_GPIO_Init+0x240>
 8004632:	2304      	movs	r3, #4
 8004634:	e006      	b.n	8004644 <HAL_GPIO_Init+0x240>
 8004636:	2303      	movs	r3, #3
 8004638:	e004      	b.n	8004644 <HAL_GPIO_Init+0x240>
 800463a:	2302      	movs	r3, #2
 800463c:	e002      	b.n	8004644 <HAL_GPIO_Init+0x240>
 800463e:	2301      	movs	r3, #1
 8004640:	e000      	b.n	8004644 <HAL_GPIO_Init+0x240>
 8004642:	2300      	movs	r3, #0
 8004644:	69fa      	ldr	r2, [r7, #28]
 8004646:	f002 0203 	and.w	r2, r2, #3
 800464a:	0092      	lsls	r2, r2, #2
 800464c:	4093      	lsls	r3, r2
 800464e:	69ba      	ldr	r2, [r7, #24]
 8004650:	4313      	orrs	r3, r2
 8004652:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004654:	4935      	ldr	r1, [pc, #212]	; (800472c <HAL_GPIO_Init+0x328>)
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	089b      	lsrs	r3, r3, #2
 800465a:	3302      	adds	r3, #2
 800465c:	69ba      	ldr	r2, [r7, #24]
 800465e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004662:	4b3d      	ldr	r3, [pc, #244]	; (8004758 <HAL_GPIO_Init+0x354>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	43db      	mvns	r3, r3
 800466c:	69ba      	ldr	r2, [r7, #24]
 800466e:	4013      	ands	r3, r2
 8004670:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d003      	beq.n	8004686 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800467e:	69ba      	ldr	r2, [r7, #24]
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	4313      	orrs	r3, r2
 8004684:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004686:	4a34      	ldr	r2, [pc, #208]	; (8004758 <HAL_GPIO_Init+0x354>)
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800468c:	4b32      	ldr	r3, [pc, #200]	; (8004758 <HAL_GPIO_Init+0x354>)
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	43db      	mvns	r3, r3
 8004696:	69ba      	ldr	r2, [r7, #24]
 8004698:	4013      	ands	r3, r2
 800469a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d003      	beq.n	80046b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80046b0:	4a29      	ldr	r2, [pc, #164]	; (8004758 <HAL_GPIO_Init+0x354>)
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80046b6:	4b28      	ldr	r3, [pc, #160]	; (8004758 <HAL_GPIO_Init+0x354>)
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	43db      	mvns	r3, r3
 80046c0:	69ba      	ldr	r2, [r7, #24]
 80046c2:	4013      	ands	r3, r2
 80046c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d003      	beq.n	80046da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80046d2:	69ba      	ldr	r2, [r7, #24]
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80046da:	4a1f      	ldr	r2, [pc, #124]	; (8004758 <HAL_GPIO_Init+0x354>)
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80046e0:	4b1d      	ldr	r3, [pc, #116]	; (8004758 <HAL_GPIO_Init+0x354>)
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	43db      	mvns	r3, r3
 80046ea:	69ba      	ldr	r2, [r7, #24]
 80046ec:	4013      	ands	r3, r2
 80046ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d003      	beq.n	8004704 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80046fc:	69ba      	ldr	r2, [r7, #24]
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	4313      	orrs	r3, r2
 8004702:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004704:	4a14      	ldr	r2, [pc, #80]	; (8004758 <HAL_GPIO_Init+0x354>)
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	3301      	adds	r3, #1
 800470e:	61fb      	str	r3, [r7, #28]
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	2b0f      	cmp	r3, #15
 8004714:	f67f ae84 	bls.w	8004420 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004718:	bf00      	nop
 800471a:	bf00      	nop
 800471c:	3724      	adds	r7, #36	; 0x24
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	40023800 	.word	0x40023800
 800472c:	40013800 	.word	0x40013800
 8004730:	40020000 	.word	0x40020000
 8004734:	40020400 	.word	0x40020400
 8004738:	40020800 	.word	0x40020800
 800473c:	40020c00 	.word	0x40020c00
 8004740:	40021000 	.word	0x40021000
 8004744:	40021400 	.word	0x40021400
 8004748:	40021800 	.word	0x40021800
 800474c:	40021c00 	.word	0x40021c00
 8004750:	40022000 	.word	0x40022000
 8004754:	40022400 	.word	0x40022400
 8004758:	40013c00 	.word	0x40013c00

0800475c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	460b      	mov	r3, r1
 8004766:	807b      	strh	r3, [r7, #2]
 8004768:	4613      	mov	r3, r2
 800476a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800476c:	787b      	ldrb	r3, [r7, #1]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d003      	beq.n	800477a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004772:	887a      	ldrh	r2, [r7, #2]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004778:	e003      	b.n	8004782 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800477a:	887b      	ldrh	r3, [r7, #2]
 800477c:	041a      	lsls	r2, r3, #16
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	619a      	str	r2, [r3, #24]
}
 8004782:	bf00      	nop
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr

0800478e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800478e:	b480      	push	{r7}
 8004790:	b085      	sub	sp, #20
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
 8004796:	460b      	mov	r3, r1
 8004798:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80047a0:	887a      	ldrh	r2, [r7, #2]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	4013      	ands	r3, r2
 80047a6:	041a      	lsls	r2, r3, #16
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	43d9      	mvns	r1, r3
 80047ac:	887b      	ldrh	r3, [r7, #2]
 80047ae:	400b      	ands	r3, r1
 80047b0:	431a      	orrs	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	619a      	str	r2, [r3, #24]
}
 80047b6:	bf00      	nop
 80047b8:	3714      	adds	r7, #20
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
	...

080047c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	4603      	mov	r3, r0
 80047cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80047ce:	4b08      	ldr	r3, [pc, #32]	; (80047f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047d0:	695a      	ldr	r2, [r3, #20]
 80047d2:	88fb      	ldrh	r3, [r7, #6]
 80047d4:	4013      	ands	r3, r2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d006      	beq.n	80047e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80047da:	4a05      	ldr	r2, [pc, #20]	; (80047f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047dc:	88fb      	ldrh	r3, [r7, #6]
 80047de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80047e0:	88fb      	ldrh	r3, [r7, #6]
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7fd f8f6 	bl	80019d4 <HAL_GPIO_EXTI_Callback>
  }
}
 80047e8:	bf00      	nop
 80047ea:	3708      	adds	r7, #8
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	40013c00 	.word	0x40013c00

080047f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d101      	bne.n	8004806 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e12b      	b.n	8004a5e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d106      	bne.n	8004820 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7fd f9a8 	bl	8001b70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2224      	movs	r2, #36	; 0x24
 8004824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f022 0201 	bic.w	r2, r2, #1
 8004836:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004846:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004856:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004858:	f002 fb1c 	bl	8006e94 <HAL_RCC_GetPCLK1Freq>
 800485c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	4a81      	ldr	r2, [pc, #516]	; (8004a68 <HAL_I2C_Init+0x274>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d807      	bhi.n	8004878 <HAL_I2C_Init+0x84>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	4a80      	ldr	r2, [pc, #512]	; (8004a6c <HAL_I2C_Init+0x278>)
 800486c:	4293      	cmp	r3, r2
 800486e:	bf94      	ite	ls
 8004870:	2301      	movls	r3, #1
 8004872:	2300      	movhi	r3, #0
 8004874:	b2db      	uxtb	r3, r3
 8004876:	e006      	b.n	8004886 <HAL_I2C_Init+0x92>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	4a7d      	ldr	r2, [pc, #500]	; (8004a70 <HAL_I2C_Init+0x27c>)
 800487c:	4293      	cmp	r3, r2
 800487e:	bf94      	ite	ls
 8004880:	2301      	movls	r3, #1
 8004882:	2300      	movhi	r3, #0
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d001      	beq.n	800488e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e0e7      	b.n	8004a5e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	4a78      	ldr	r2, [pc, #480]	; (8004a74 <HAL_I2C_Init+0x280>)
 8004892:	fba2 2303 	umull	r2, r3, r2, r3
 8004896:	0c9b      	lsrs	r3, r3, #18
 8004898:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68ba      	ldr	r2, [r7, #8]
 80048aa:	430a      	orrs	r2, r1
 80048ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	6a1b      	ldr	r3, [r3, #32]
 80048b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	4a6a      	ldr	r2, [pc, #424]	; (8004a68 <HAL_I2C_Init+0x274>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d802      	bhi.n	80048c8 <HAL_I2C_Init+0xd4>
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	3301      	adds	r3, #1
 80048c6:	e009      	b.n	80048dc <HAL_I2C_Init+0xe8>
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80048ce:	fb02 f303 	mul.w	r3, r2, r3
 80048d2:	4a69      	ldr	r2, [pc, #420]	; (8004a78 <HAL_I2C_Init+0x284>)
 80048d4:	fba2 2303 	umull	r2, r3, r2, r3
 80048d8:	099b      	lsrs	r3, r3, #6
 80048da:	3301      	adds	r3, #1
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	6812      	ldr	r2, [r2, #0]
 80048e0:	430b      	orrs	r3, r1
 80048e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	69db      	ldr	r3, [r3, #28]
 80048ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80048ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	495c      	ldr	r1, [pc, #368]	; (8004a68 <HAL_I2C_Init+0x274>)
 80048f8:	428b      	cmp	r3, r1
 80048fa:	d819      	bhi.n	8004930 <HAL_I2C_Init+0x13c>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	1e59      	subs	r1, r3, #1
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	005b      	lsls	r3, r3, #1
 8004906:	fbb1 f3f3 	udiv	r3, r1, r3
 800490a:	1c59      	adds	r1, r3, #1
 800490c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004910:	400b      	ands	r3, r1
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00a      	beq.n	800492c <HAL_I2C_Init+0x138>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	1e59      	subs	r1, r3, #1
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	005b      	lsls	r3, r3, #1
 8004920:	fbb1 f3f3 	udiv	r3, r1, r3
 8004924:	3301      	adds	r3, #1
 8004926:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800492a:	e051      	b.n	80049d0 <HAL_I2C_Init+0x1dc>
 800492c:	2304      	movs	r3, #4
 800492e:	e04f      	b.n	80049d0 <HAL_I2C_Init+0x1dc>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d111      	bne.n	800495c <HAL_I2C_Init+0x168>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	1e58      	subs	r0, r3, #1
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6859      	ldr	r1, [r3, #4]
 8004940:	460b      	mov	r3, r1
 8004942:	005b      	lsls	r3, r3, #1
 8004944:	440b      	add	r3, r1
 8004946:	fbb0 f3f3 	udiv	r3, r0, r3
 800494a:	3301      	adds	r3, #1
 800494c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004950:	2b00      	cmp	r3, #0
 8004952:	bf0c      	ite	eq
 8004954:	2301      	moveq	r3, #1
 8004956:	2300      	movne	r3, #0
 8004958:	b2db      	uxtb	r3, r3
 800495a:	e012      	b.n	8004982 <HAL_I2C_Init+0x18e>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	1e58      	subs	r0, r3, #1
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6859      	ldr	r1, [r3, #4]
 8004964:	460b      	mov	r3, r1
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	440b      	add	r3, r1
 800496a:	0099      	lsls	r1, r3, #2
 800496c:	440b      	add	r3, r1
 800496e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004972:	3301      	adds	r3, #1
 8004974:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004978:	2b00      	cmp	r3, #0
 800497a:	bf0c      	ite	eq
 800497c:	2301      	moveq	r3, #1
 800497e:	2300      	movne	r3, #0
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b00      	cmp	r3, #0
 8004984:	d001      	beq.n	800498a <HAL_I2C_Init+0x196>
 8004986:	2301      	movs	r3, #1
 8004988:	e022      	b.n	80049d0 <HAL_I2C_Init+0x1dc>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d10e      	bne.n	80049b0 <HAL_I2C_Init+0x1bc>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	1e58      	subs	r0, r3, #1
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6859      	ldr	r1, [r3, #4]
 800499a:	460b      	mov	r3, r1
 800499c:	005b      	lsls	r3, r3, #1
 800499e:	440b      	add	r3, r1
 80049a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80049a4:	3301      	adds	r3, #1
 80049a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049ae:	e00f      	b.n	80049d0 <HAL_I2C_Init+0x1dc>
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	1e58      	subs	r0, r3, #1
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6859      	ldr	r1, [r3, #4]
 80049b8:	460b      	mov	r3, r1
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	440b      	add	r3, r1
 80049be:	0099      	lsls	r1, r3, #2
 80049c0:	440b      	add	r3, r1
 80049c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80049c6:	3301      	adds	r3, #1
 80049c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049d0:	6879      	ldr	r1, [r7, #4]
 80049d2:	6809      	ldr	r1, [r1, #0]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	69da      	ldr	r2, [r3, #28]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a1b      	ldr	r3, [r3, #32]
 80049ea:	431a      	orrs	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	430a      	orrs	r2, r1
 80049f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80049fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	6911      	ldr	r1, [r2, #16]
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	68d2      	ldr	r2, [r2, #12]
 8004a0a:	4311      	orrs	r1, r2
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	6812      	ldr	r2, [r2, #0]
 8004a10:	430b      	orrs	r3, r1
 8004a12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	695a      	ldr	r2, [r3, #20]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	431a      	orrs	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f042 0201 	orr.w	r2, r2, #1
 8004a3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2220      	movs	r2, #32
 8004a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3710      	adds	r7, #16
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	000186a0 	.word	0x000186a0
 8004a6c:	001e847f 	.word	0x001e847f
 8004a70:	003d08ff 	.word	0x003d08ff
 8004a74:	431bde83 	.word	0x431bde83
 8004a78:	10624dd3 	.word	0x10624dd3

08004a7c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b088      	sub	sp, #32
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004a84:	2300      	movs	r3, #0
 8004a86:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a94:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a9c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aa4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004aa6:	7bfb      	ldrb	r3, [r7, #15]
 8004aa8:	2b10      	cmp	r3, #16
 8004aaa:	d003      	beq.n	8004ab4 <HAL_I2C_EV_IRQHandler+0x38>
 8004aac:	7bfb      	ldrb	r3, [r7, #15]
 8004aae:	2b40      	cmp	r3, #64	; 0x40
 8004ab0:	f040 80c1 	bne.w	8004c36 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d10d      	bne.n	8004aea <HAL_I2C_EV_IRQHandler+0x6e>
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004ad4:	d003      	beq.n	8004ade <HAL_I2C_EV_IRQHandler+0x62>
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004adc:	d101      	bne.n	8004ae2 <HAL_I2C_EV_IRQHandler+0x66>
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e000      	b.n	8004ae4 <HAL_I2C_EV_IRQHandler+0x68>
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	f000 8132 	beq.w	8004d4e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	f003 0301 	and.w	r3, r3, #1
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00c      	beq.n	8004b0e <HAL_I2C_EV_IRQHandler+0x92>
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	0a5b      	lsrs	r3, r3, #9
 8004af8:	f003 0301 	and.w	r3, r3, #1
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d006      	beq.n	8004b0e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f001 fc71 	bl	80063e8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 fd79 	bl	80055fe <I2C_Master_SB>
 8004b0c:	e092      	b.n	8004c34 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	08db      	lsrs	r3, r3, #3
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d009      	beq.n	8004b2e <HAL_I2C_EV_IRQHandler+0xb2>
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	0a5b      	lsrs	r3, r3, #9
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d003      	beq.n	8004b2e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 fdef 	bl	800570a <I2C_Master_ADD10>
 8004b2c:	e082      	b.n	8004c34 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	085b      	lsrs	r3, r3, #1
 8004b32:	f003 0301 	and.w	r3, r3, #1
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d009      	beq.n	8004b4e <HAL_I2C_EV_IRQHandler+0xd2>
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	0a5b      	lsrs	r3, r3, #9
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d003      	beq.n	8004b4e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 fe09 	bl	800575e <I2C_Master_ADDR>
 8004b4c:	e072      	b.n	8004c34 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	089b      	lsrs	r3, r3, #2
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d03b      	beq.n	8004bd2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b68:	f000 80f3 	beq.w	8004d52 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	09db      	lsrs	r3, r3, #7
 8004b70:	f003 0301 	and.w	r3, r3, #1
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00f      	beq.n	8004b98 <HAL_I2C_EV_IRQHandler+0x11c>
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	0a9b      	lsrs	r3, r3, #10
 8004b7c:	f003 0301 	and.w	r3, r3, #1
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d009      	beq.n	8004b98 <HAL_I2C_EV_IRQHandler+0x11c>
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	089b      	lsrs	r3, r3, #2
 8004b88:	f003 0301 	and.w	r3, r3, #1
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d103      	bne.n	8004b98 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 f9f3 	bl	8004f7c <I2C_MasterTransmit_TXE>
 8004b96:	e04d      	b.n	8004c34 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	089b      	lsrs	r3, r3, #2
 8004b9c:	f003 0301 	and.w	r3, r3, #1
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f000 80d6 	beq.w	8004d52 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	0a5b      	lsrs	r3, r3, #9
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	f000 80cf 	beq.w	8004d52 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004bb4:	7bbb      	ldrb	r3, [r7, #14]
 8004bb6:	2b21      	cmp	r3, #33	; 0x21
 8004bb8:	d103      	bne.n	8004bc2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 fa7a 	bl	80050b4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004bc0:	e0c7      	b.n	8004d52 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004bc2:	7bfb      	ldrb	r3, [r7, #15]
 8004bc4:	2b40      	cmp	r3, #64	; 0x40
 8004bc6:	f040 80c4 	bne.w	8004d52 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 fae8 	bl	80051a0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004bd0:	e0bf      	b.n	8004d52 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004be0:	f000 80b7 	beq.w	8004d52 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	099b      	lsrs	r3, r3, #6
 8004be8:	f003 0301 	and.w	r3, r3, #1
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00f      	beq.n	8004c10 <HAL_I2C_EV_IRQHandler+0x194>
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	0a9b      	lsrs	r3, r3, #10
 8004bf4:	f003 0301 	and.w	r3, r3, #1
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d009      	beq.n	8004c10 <HAL_I2C_EV_IRQHandler+0x194>
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	089b      	lsrs	r3, r3, #2
 8004c00:	f003 0301 	and.w	r3, r3, #1
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d103      	bne.n	8004c10 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 fb5d 	bl	80052c8 <I2C_MasterReceive_RXNE>
 8004c0e:	e011      	b.n	8004c34 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	089b      	lsrs	r3, r3, #2
 8004c14:	f003 0301 	and.w	r3, r3, #1
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f000 809a 	beq.w	8004d52 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	0a5b      	lsrs	r3, r3, #9
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	f000 8093 	beq.w	8004d52 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 fbfc 	bl	800542a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c32:	e08e      	b.n	8004d52 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004c34:	e08d      	b.n	8004d52 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d004      	beq.n	8004c48 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	695b      	ldr	r3, [r3, #20]
 8004c44:	61fb      	str	r3, [r7, #28]
 8004c46:	e007      	b.n	8004c58 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	085b      	lsrs	r3, r3, #1
 8004c5c:	f003 0301 	and.w	r3, r3, #1
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d012      	beq.n	8004c8a <HAL_I2C_EV_IRQHandler+0x20e>
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	0a5b      	lsrs	r3, r3, #9
 8004c68:	f003 0301 	and.w	r3, r3, #1
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00c      	beq.n	8004c8a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d003      	beq.n	8004c80 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004c80:	69b9      	ldr	r1, [r7, #24]
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 ffba 	bl	8005bfc <I2C_Slave_ADDR>
 8004c88:	e066      	b.n	8004d58 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	091b      	lsrs	r3, r3, #4
 8004c8e:	f003 0301 	and.w	r3, r3, #1
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d009      	beq.n	8004caa <HAL_I2C_EV_IRQHandler+0x22e>
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	0a5b      	lsrs	r3, r3, #9
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d003      	beq.n	8004caa <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 fff4 	bl	8005c90 <I2C_Slave_STOPF>
 8004ca8:	e056      	b.n	8004d58 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004caa:	7bbb      	ldrb	r3, [r7, #14]
 8004cac:	2b21      	cmp	r3, #33	; 0x21
 8004cae:	d002      	beq.n	8004cb6 <HAL_I2C_EV_IRQHandler+0x23a>
 8004cb0:	7bbb      	ldrb	r3, [r7, #14]
 8004cb2:	2b29      	cmp	r3, #41	; 0x29
 8004cb4:	d125      	bne.n	8004d02 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	09db      	lsrs	r3, r3, #7
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00f      	beq.n	8004ce2 <HAL_I2C_EV_IRQHandler+0x266>
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	0a9b      	lsrs	r3, r3, #10
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d009      	beq.n	8004ce2 <HAL_I2C_EV_IRQHandler+0x266>
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	089b      	lsrs	r3, r3, #2
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d103      	bne.n	8004ce2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 fed0 	bl	8005a80 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004ce0:	e039      	b.n	8004d56 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	089b      	lsrs	r3, r3, #2
 8004ce6:	f003 0301 	and.w	r3, r3, #1
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d033      	beq.n	8004d56 <HAL_I2C_EV_IRQHandler+0x2da>
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	0a5b      	lsrs	r3, r3, #9
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d02d      	beq.n	8004d56 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 fefd 	bl	8005afa <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004d00:	e029      	b.n	8004d56 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	099b      	lsrs	r3, r3, #6
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00f      	beq.n	8004d2e <HAL_I2C_EV_IRQHandler+0x2b2>
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	0a9b      	lsrs	r3, r3, #10
 8004d12:	f003 0301 	and.w	r3, r3, #1
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d009      	beq.n	8004d2e <HAL_I2C_EV_IRQHandler+0x2b2>
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	089b      	lsrs	r3, r3, #2
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d103      	bne.n	8004d2e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 ff08 	bl	8005b3c <I2C_SlaveReceive_RXNE>
 8004d2c:	e014      	b.n	8004d58 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	089b      	lsrs	r3, r3, #2
 8004d32:	f003 0301 	and.w	r3, r3, #1
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00e      	beq.n	8004d58 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	0a5b      	lsrs	r3, r3, #9
 8004d3e:	f003 0301 	and.w	r3, r3, #1
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d008      	beq.n	8004d58 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 ff36 	bl	8005bb8 <I2C_SlaveReceive_BTF>
 8004d4c:	e004      	b.n	8004d58 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004d4e:	bf00      	nop
 8004d50:	e002      	b.n	8004d58 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d52:	bf00      	nop
 8004d54:	e000      	b.n	8004d58 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004d56:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004d58:	3720      	adds	r7, #32
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b08a      	sub	sp, #40	; 0x28
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	695b      	ldr	r3, [r3, #20]
 8004d6c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004d76:	2300      	movs	r3, #0
 8004d78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d80:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004d82:	6a3b      	ldr	r3, [r7, #32]
 8004d84:	0a1b      	lsrs	r3, r3, #8
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00e      	beq.n	8004dac <HAL_I2C_ER_IRQHandler+0x4e>
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	0a1b      	lsrs	r3, r3, #8
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d008      	beq.n	8004dac <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9c:	f043 0301 	orr.w	r3, r3, #1
 8004da0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004daa:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004dac:	6a3b      	ldr	r3, [r7, #32]
 8004dae:	0a5b      	lsrs	r3, r3, #9
 8004db0:	f003 0301 	and.w	r3, r3, #1
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d00e      	beq.n	8004dd6 <HAL_I2C_ER_IRQHandler+0x78>
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	0a1b      	lsrs	r3, r3, #8
 8004dbc:	f003 0301 	and.w	r3, r3, #1
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d008      	beq.n	8004dd6 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc6:	f043 0302 	orr.w	r3, r3, #2
 8004dca:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004dd4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004dd6:	6a3b      	ldr	r3, [r7, #32]
 8004dd8:	0a9b      	lsrs	r3, r3, #10
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d03f      	beq.n	8004e62 <HAL_I2C_ER_IRQHandler+0x104>
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	0a1b      	lsrs	r3, r3, #8
 8004de6:	f003 0301 	and.w	r3, r3, #1
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d039      	beq.n	8004e62 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004dee:	7efb      	ldrb	r3, [r7, #27]
 8004df0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e00:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e06:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004e08:	7ebb      	ldrb	r3, [r7, #26]
 8004e0a:	2b20      	cmp	r3, #32
 8004e0c:	d112      	bne.n	8004e34 <HAL_I2C_ER_IRQHandler+0xd6>
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d10f      	bne.n	8004e34 <HAL_I2C_ER_IRQHandler+0xd6>
 8004e14:	7cfb      	ldrb	r3, [r7, #19]
 8004e16:	2b21      	cmp	r3, #33	; 0x21
 8004e18:	d008      	beq.n	8004e2c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004e1a:	7cfb      	ldrb	r3, [r7, #19]
 8004e1c:	2b29      	cmp	r3, #41	; 0x29
 8004e1e:	d005      	beq.n	8004e2c <HAL_I2C_ER_IRQHandler+0xce>
 8004e20:	7cfb      	ldrb	r3, [r7, #19]
 8004e22:	2b28      	cmp	r3, #40	; 0x28
 8004e24:	d106      	bne.n	8004e34 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2b21      	cmp	r3, #33	; 0x21
 8004e2a:	d103      	bne.n	8004e34 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f001 f85f 	bl	8005ef0 <I2C_Slave_AF>
 8004e32:	e016      	b.n	8004e62 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e3c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e40:	f043 0304 	orr.w	r3, r3, #4
 8004e44:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004e46:	7efb      	ldrb	r3, [r7, #27]
 8004e48:	2b10      	cmp	r3, #16
 8004e4a:	d002      	beq.n	8004e52 <HAL_I2C_ER_IRQHandler+0xf4>
 8004e4c:	7efb      	ldrb	r3, [r7, #27]
 8004e4e:	2b40      	cmp	r3, #64	; 0x40
 8004e50:	d107      	bne.n	8004e62 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e60:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004e62:	6a3b      	ldr	r3, [r7, #32]
 8004e64:	0adb      	lsrs	r3, r3, #11
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00e      	beq.n	8004e8c <HAL_I2C_ER_IRQHandler+0x12e>
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	0a1b      	lsrs	r3, r3, #8
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d008      	beq.n	8004e8c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7c:	f043 0308 	orr.w	r3, r3, #8
 8004e80:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004e8a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d008      	beq.n	8004ea4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e98:	431a      	orrs	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f001 f896 	bl	8005fd0 <I2C_ITError>
  }
}
 8004ea4:	bf00      	nop
 8004ea6:	3728      	adds	r7, #40	; 0x28
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004eb4:	bf00      	nop
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004ec8:	bf00      	nop
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004edc:	bf00      	nop
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004ef0:	bf00      	nop
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	460b      	mov	r3, r1
 8004f06:	70fb      	strb	r3, [r7, #3]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004f0c:	bf00      	nop
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f8a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f92:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f98:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d150      	bne.n	8005044 <I2C_MasterTransmit_TXE+0xc8>
 8004fa2:	7bfb      	ldrb	r3, [r7, #15]
 8004fa4:	2b21      	cmp	r3, #33	; 0x21
 8004fa6:	d14d      	bne.n	8005044 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	2b08      	cmp	r3, #8
 8004fac:	d01d      	beq.n	8004fea <I2C_MasterTransmit_TXE+0x6e>
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	2b20      	cmp	r3, #32
 8004fb2:	d01a      	beq.n	8004fea <I2C_MasterTransmit_TXE+0x6e>
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004fba:	d016      	beq.n	8004fea <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	685a      	ldr	r2, [r3, #4]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004fca:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2211      	movs	r2, #17
 8004fd0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2220      	movs	r2, #32
 8004fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f7ff ff62 	bl	8004eac <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004fe8:	e060      	b.n	80050ac <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	685a      	ldr	r2, [r3, #4]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ff8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005008:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2220      	movs	r2, #32
 8005014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800501e:	b2db      	uxtb	r3, r3
 8005020:	2b40      	cmp	r3, #64	; 0x40
 8005022:	d107      	bne.n	8005034 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f7ff ff7d 	bl	8004f2c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005032:	e03b      	b.n	80050ac <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f7ff ff35 	bl	8004eac <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005042:	e033      	b.n	80050ac <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005044:	7bfb      	ldrb	r3, [r7, #15]
 8005046:	2b21      	cmp	r3, #33	; 0x21
 8005048:	d005      	beq.n	8005056 <I2C_MasterTransmit_TXE+0xda>
 800504a:	7bbb      	ldrb	r3, [r7, #14]
 800504c:	2b40      	cmp	r3, #64	; 0x40
 800504e:	d12d      	bne.n	80050ac <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005050:	7bfb      	ldrb	r3, [r7, #15]
 8005052:	2b22      	cmp	r3, #34	; 0x22
 8005054:	d12a      	bne.n	80050ac <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800505a:	b29b      	uxth	r3, r3
 800505c:	2b00      	cmp	r3, #0
 800505e:	d108      	bne.n	8005072 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	685a      	ldr	r2, [r3, #4]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800506e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005070:	e01c      	b.n	80050ac <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005078:	b2db      	uxtb	r3, r3
 800507a:	2b40      	cmp	r3, #64	; 0x40
 800507c:	d103      	bne.n	8005086 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 f88e 	bl	80051a0 <I2C_MemoryTransmit_TXE_BTF>
}
 8005084:	e012      	b.n	80050ac <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508a:	781a      	ldrb	r2, [r3, #0]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005096:	1c5a      	adds	r2, r3, #1
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	3b01      	subs	r3, #1
 80050a4:	b29a      	uxth	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80050aa:	e7ff      	b.n	80050ac <I2C_MasterTransmit_TXE+0x130>
 80050ac:	bf00      	nop
 80050ae:	3710      	adds	r7, #16
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	2b21      	cmp	r3, #33	; 0x21
 80050cc:	d164      	bne.n	8005198 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d012      	beq.n	80050fe <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050dc:	781a      	ldrb	r2, [r3, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e8:	1c5a      	adds	r2, r3, #1
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	3b01      	subs	r3, #1
 80050f6:	b29a      	uxth	r2, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80050fc:	e04c      	b.n	8005198 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2b08      	cmp	r3, #8
 8005102:	d01d      	beq.n	8005140 <I2C_MasterTransmit_BTF+0x8c>
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2b20      	cmp	r3, #32
 8005108:	d01a      	beq.n	8005140 <I2C_MasterTransmit_BTF+0x8c>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005110:	d016      	beq.n	8005140 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	685a      	ldr	r2, [r3, #4]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005120:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2211      	movs	r2, #17
 8005126:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2220      	movs	r2, #32
 8005134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f7ff feb7 	bl	8004eac <HAL_I2C_MasterTxCpltCallback>
}
 800513e:	e02b      	b.n	8005198 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	685a      	ldr	r2, [r3, #4]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800514e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800515e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2220      	movs	r2, #32
 800516a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005174:	b2db      	uxtb	r3, r3
 8005176:	2b40      	cmp	r3, #64	; 0x40
 8005178:	d107      	bne.n	800518a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f7ff fed2 	bl	8004f2c <HAL_I2C_MemTxCpltCallback>
}
 8005188:	e006      	b.n	8005198 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f7ff fe8a 	bl	8004eac <HAL_I2C_MasterTxCpltCallback>
}
 8005198:	bf00      	nop
 800519a:	3710      	adds	r7, #16
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051ae:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d11d      	bne.n	80051f4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d10b      	bne.n	80051d8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051c4:	b2da      	uxtb	r2, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051d0:	1c9a      	adds	r2, r3, #2
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80051d6:	e073      	b.n	80052c0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051dc:	b29b      	uxth	r3, r3
 80051de:	121b      	asrs	r3, r3, #8
 80051e0:	b2da      	uxtb	r2, r3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051ec:	1c5a      	adds	r2, r3, #1
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80051f2:	e065      	b.n	80052c0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d10b      	bne.n	8005214 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005200:	b2da      	uxtb	r2, r3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800520c:	1c5a      	adds	r2, r3, #1
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005212:	e055      	b.n	80052c0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005218:	2b02      	cmp	r3, #2
 800521a:	d151      	bne.n	80052c0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800521c:	7bfb      	ldrb	r3, [r7, #15]
 800521e:	2b22      	cmp	r3, #34	; 0x22
 8005220:	d10d      	bne.n	800523e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005230:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005236:	1c5a      	adds	r2, r3, #1
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800523c:	e040      	b.n	80052c0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005242:	b29b      	uxth	r3, r3
 8005244:	2b00      	cmp	r3, #0
 8005246:	d015      	beq.n	8005274 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005248:	7bfb      	ldrb	r3, [r7, #15]
 800524a:	2b21      	cmp	r3, #33	; 0x21
 800524c:	d112      	bne.n	8005274 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005252:	781a      	ldrb	r2, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525e:	1c5a      	adds	r2, r3, #1
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005268:	b29b      	uxth	r3, r3
 800526a:	3b01      	subs	r3, #1
 800526c:	b29a      	uxth	r2, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005272:	e025      	b.n	80052c0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005278:	b29b      	uxth	r3, r3
 800527a:	2b00      	cmp	r3, #0
 800527c:	d120      	bne.n	80052c0 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800527e:	7bfb      	ldrb	r3, [r7, #15]
 8005280:	2b21      	cmp	r3, #33	; 0x21
 8005282:	d11d      	bne.n	80052c0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	685a      	ldr	r2, [r3, #4]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005292:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052a2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2220      	movs	r2, #32
 80052ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f7ff fe36 	bl	8004f2c <HAL_I2C_MemTxCpltCallback>
}
 80052c0:	bf00      	nop
 80052c2:	3710      	adds	r7, #16
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	2b22      	cmp	r3, #34	; 0x22
 80052da:	f040 80a2 	bne.w	8005422 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2b03      	cmp	r3, #3
 80052ea:	d921      	bls.n	8005330 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	691a      	ldr	r2, [r3, #16]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f6:	b2d2      	uxtb	r2, r2
 80052f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fe:	1c5a      	adds	r2, r3, #1
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005308:	b29b      	uxth	r3, r3
 800530a:	3b01      	subs	r3, #1
 800530c:	b29a      	uxth	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005316:	b29b      	uxth	r3, r3
 8005318:	2b03      	cmp	r3, #3
 800531a:	f040 8082 	bne.w	8005422 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	685a      	ldr	r2, [r3, #4]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800532c:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800532e:	e078      	b.n	8005422 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005334:	2b02      	cmp	r3, #2
 8005336:	d074      	beq.n	8005422 <I2C_MasterReceive_RXNE+0x15a>
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2b01      	cmp	r3, #1
 800533c:	d002      	beq.n	8005344 <I2C_MasterReceive_RXNE+0x7c>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d16e      	bne.n	8005422 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f001 f81d 	bl	8006384 <I2C_WaitOnSTOPRequestThroughIT>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d142      	bne.n	80053d6 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800535e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	685a      	ldr	r2, [r3, #4]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800536e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	691a      	ldr	r2, [r3, #16]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537a:	b2d2      	uxtb	r2, r2
 800537c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005382:	1c5a      	adds	r2, r3, #1
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800538c:	b29b      	uxth	r3, r3
 800538e:	3b01      	subs	r3, #1
 8005390:	b29a      	uxth	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2220      	movs	r2, #32
 800539a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	2b40      	cmp	r3, #64	; 0x40
 80053a8:	d10a      	bne.n	80053c0 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f7ff fdc1 	bl	8004f40 <HAL_I2C_MemRxCpltCallback>
}
 80053be:	e030      	b.n	8005422 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2212      	movs	r2, #18
 80053cc:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f7ff fd76 	bl	8004ec0 <HAL_I2C_MasterRxCpltCallback>
}
 80053d4:	e025      	b.n	8005422 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	685a      	ldr	r2, [r3, #4]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80053e4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	691a      	ldr	r2, [r3, #16]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f0:	b2d2      	uxtb	r2, r2
 80053f2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f8:	1c5a      	adds	r2, r3, #1
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005402:	b29b      	uxth	r3, r3
 8005404:	3b01      	subs	r3, #1
 8005406:	b29a      	uxth	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2220      	movs	r2, #32
 8005410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f7ff fd99 	bl	8004f54 <HAL_I2C_ErrorCallback>
}
 8005422:	bf00      	nop
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}

0800542a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800542a:	b580      	push	{r7, lr}
 800542c:	b084      	sub	sp, #16
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005436:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800543c:	b29b      	uxth	r3, r3
 800543e:	2b04      	cmp	r3, #4
 8005440:	d11b      	bne.n	800547a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	685a      	ldr	r2, [r3, #4]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005450:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	691a      	ldr	r2, [r3, #16]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545c:	b2d2      	uxtb	r2, r2
 800545e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005464:	1c5a      	adds	r2, r3, #1
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800546e:	b29b      	uxth	r3, r3
 8005470:	3b01      	subs	r3, #1
 8005472:	b29a      	uxth	r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005478:	e0bd      	b.n	80055f6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800547e:	b29b      	uxth	r3, r3
 8005480:	2b03      	cmp	r3, #3
 8005482:	d129      	bne.n	80054d8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	685a      	ldr	r2, [r3, #4]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005492:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2b04      	cmp	r3, #4
 8005498:	d00a      	beq.n	80054b0 <I2C_MasterReceive_BTF+0x86>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2b02      	cmp	r3, #2
 800549e:	d007      	beq.n	80054b0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054ae:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	691a      	ldr	r2, [r3, #16]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ba:	b2d2      	uxtb	r2, r2
 80054bc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c2:	1c5a      	adds	r2, r3, #1
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	3b01      	subs	r3, #1
 80054d0:	b29a      	uxth	r2, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80054d6:	e08e      	b.n	80055f6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054dc:	b29b      	uxth	r3, r3
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d176      	bne.n	80055d0 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d002      	beq.n	80054ee <I2C_MasterReceive_BTF+0xc4>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2b10      	cmp	r3, #16
 80054ec:	d108      	bne.n	8005500 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054fc:	601a      	str	r2, [r3, #0]
 80054fe:	e019      	b.n	8005534 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2b04      	cmp	r3, #4
 8005504:	d002      	beq.n	800550c <I2C_MasterReceive_BTF+0xe2>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2b02      	cmp	r3, #2
 800550a:	d108      	bne.n	800551e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800551a:	601a      	str	r2, [r3, #0]
 800551c:	e00a      	b.n	8005534 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2b10      	cmp	r3, #16
 8005522:	d007      	beq.n	8005534 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005532:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	691a      	ldr	r2, [r3, #16]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553e:	b2d2      	uxtb	r2, r2
 8005540:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005546:	1c5a      	adds	r2, r3, #1
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005550:	b29b      	uxth	r3, r3
 8005552:	3b01      	subs	r3, #1
 8005554:	b29a      	uxth	r2, r3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	691a      	ldr	r2, [r3, #16]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005564:	b2d2      	uxtb	r2, r2
 8005566:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556c:	1c5a      	adds	r2, r3, #1
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005576:	b29b      	uxth	r3, r3
 8005578:	3b01      	subs	r3, #1
 800557a:	b29a      	uxth	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	685a      	ldr	r2, [r3, #4]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800558e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2220      	movs	r2, #32
 8005594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	2b40      	cmp	r3, #64	; 0x40
 80055a2:	d10a      	bne.n	80055ba <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f7ff fcc4 	bl	8004f40 <HAL_I2C_MemRxCpltCallback>
}
 80055b8:	e01d      	b.n	80055f6 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2212      	movs	r2, #18
 80055c6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f7ff fc79 	bl	8004ec0 <HAL_I2C_MasterRxCpltCallback>
}
 80055ce:	e012      	b.n	80055f6 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	691a      	ldr	r2, [r3, #16]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055da:	b2d2      	uxtb	r2, r2
 80055dc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e2:	1c5a      	adds	r2, r3, #1
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	3b01      	subs	r3, #1
 80055f0:	b29a      	uxth	r2, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80055f6:	bf00      	nop
 80055f8:	3710      	adds	r7, #16
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}

080055fe <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80055fe:	b480      	push	{r7}
 8005600:	b083      	sub	sp, #12
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800560c:	b2db      	uxtb	r3, r3
 800560e:	2b40      	cmp	r3, #64	; 0x40
 8005610:	d117      	bne.n	8005642 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005616:	2b00      	cmp	r3, #0
 8005618:	d109      	bne.n	800562e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800561e:	b2db      	uxtb	r3, r3
 8005620:	461a      	mov	r2, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800562a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800562c:	e067      	b.n	80056fe <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005632:	b2db      	uxtb	r3, r3
 8005634:	f043 0301 	orr.w	r3, r3, #1
 8005638:	b2da      	uxtb	r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	611a      	str	r2, [r3, #16]
}
 8005640:	e05d      	b.n	80056fe <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800564a:	d133      	bne.n	80056b4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005652:	b2db      	uxtb	r3, r3
 8005654:	2b21      	cmp	r3, #33	; 0x21
 8005656:	d109      	bne.n	800566c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800565c:	b2db      	uxtb	r3, r3
 800565e:	461a      	mov	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005668:	611a      	str	r2, [r3, #16]
 800566a:	e008      	b.n	800567e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005670:	b2db      	uxtb	r3, r3
 8005672:	f043 0301 	orr.w	r3, r3, #1
 8005676:	b2da      	uxtb	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005682:	2b00      	cmp	r3, #0
 8005684:	d004      	beq.n	8005690 <I2C_Master_SB+0x92>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800568a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800568c:	2b00      	cmp	r3, #0
 800568e:	d108      	bne.n	80056a2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005694:	2b00      	cmp	r3, #0
 8005696:	d032      	beq.n	80056fe <I2C_Master_SB+0x100>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800569c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d02d      	beq.n	80056fe <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	685a      	ldr	r2, [r3, #4]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056b0:	605a      	str	r2, [r3, #4]
}
 80056b2:	e024      	b.n	80056fe <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d10e      	bne.n	80056da <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	11db      	asrs	r3, r3, #7
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	f003 0306 	and.w	r3, r3, #6
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	f063 030f 	orn	r3, r3, #15
 80056d0:	b2da      	uxtb	r2, r3
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	611a      	str	r2, [r3, #16]
}
 80056d8:	e011      	b.n	80056fe <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d10d      	bne.n	80056fe <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	11db      	asrs	r3, r3, #7
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	f003 0306 	and.w	r3, r3, #6
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	f063 030e 	orn	r3, r3, #14
 80056f6:	b2da      	uxtb	r2, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	611a      	str	r2, [r3, #16]
}
 80056fe:	bf00      	nop
 8005700:	370c      	adds	r7, #12
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr

0800570a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800570a:	b480      	push	{r7}
 800570c:	b083      	sub	sp, #12
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005716:	b2da      	uxtb	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005722:	2b00      	cmp	r3, #0
 8005724:	d004      	beq.n	8005730 <I2C_Master_ADD10+0x26>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800572a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800572c:	2b00      	cmp	r3, #0
 800572e:	d108      	bne.n	8005742 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005734:	2b00      	cmp	r3, #0
 8005736:	d00c      	beq.n	8005752 <I2C_Master_ADD10+0x48>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800573e:	2b00      	cmp	r3, #0
 8005740:	d007      	beq.n	8005752 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	685a      	ldr	r2, [r3, #4]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005750:	605a      	str	r2, [r3, #4]
  }
}
 8005752:	bf00      	nop
 8005754:	370c      	adds	r7, #12
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr

0800575e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800575e:	b480      	push	{r7}
 8005760:	b091      	sub	sp, #68	; 0x44
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800576c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005774:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800577a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005782:	b2db      	uxtb	r3, r3
 8005784:	2b22      	cmp	r3, #34	; 0x22
 8005786:	f040 8169 	bne.w	8005a5c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800578e:	2b00      	cmp	r3, #0
 8005790:	d10f      	bne.n	80057b2 <I2C_Master_ADDR+0x54>
 8005792:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005796:	2b40      	cmp	r3, #64	; 0x40
 8005798:	d10b      	bne.n	80057b2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800579a:	2300      	movs	r3, #0
 800579c:	633b      	str	r3, [r7, #48]	; 0x30
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	695b      	ldr	r3, [r3, #20]
 80057a4:	633b      	str	r3, [r7, #48]	; 0x30
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	699b      	ldr	r3, [r3, #24]
 80057ac:	633b      	str	r3, [r7, #48]	; 0x30
 80057ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b0:	e160      	b.n	8005a74 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d11d      	bne.n	80057f6 <I2C_Master_ADDR+0x98>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80057c2:	d118      	bne.n	80057f6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057c4:	2300      	movs	r3, #0
 80057c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	695b      	ldr	r3, [r3, #20]
 80057ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057e8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ee:	1c5a      	adds	r2, r3, #1
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	651a      	str	r2, [r3, #80]	; 0x50
 80057f4:	e13e      	b.n	8005a74 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d113      	bne.n	8005828 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005800:	2300      	movs	r3, #0
 8005802:	62bb      	str	r3, [r7, #40]	; 0x28
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	695b      	ldr	r3, [r3, #20]
 800580a:	62bb      	str	r3, [r7, #40]	; 0x28
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	699b      	ldr	r3, [r3, #24]
 8005812:	62bb      	str	r3, [r7, #40]	; 0x28
 8005814:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005824:	601a      	str	r2, [r3, #0]
 8005826:	e115      	b.n	8005a54 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800582c:	b29b      	uxth	r3, r3
 800582e:	2b01      	cmp	r3, #1
 8005830:	f040 808a 	bne.w	8005948 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005836:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800583a:	d137      	bne.n	80058ac <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800584a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005856:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800585a:	d113      	bne.n	8005884 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800586a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800586c:	2300      	movs	r3, #0
 800586e:	627b      	str	r3, [r7, #36]	; 0x24
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	627b      	str	r3, [r7, #36]	; 0x24
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	699b      	ldr	r3, [r3, #24]
 800587e:	627b      	str	r3, [r7, #36]	; 0x24
 8005880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005882:	e0e7      	b.n	8005a54 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005884:	2300      	movs	r3, #0
 8005886:	623b      	str	r3, [r7, #32]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	623b      	str	r3, [r7, #32]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	623b      	str	r3, [r7, #32]
 8005898:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058a8:	601a      	str	r2, [r3, #0]
 80058aa:	e0d3      	b.n	8005a54 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80058ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ae:	2b08      	cmp	r3, #8
 80058b0:	d02e      	beq.n	8005910 <I2C_Master_ADDR+0x1b2>
 80058b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b4:	2b20      	cmp	r3, #32
 80058b6:	d02b      	beq.n	8005910 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80058b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ba:	2b12      	cmp	r3, #18
 80058bc:	d102      	bne.n	80058c4 <I2C_Master_ADDR+0x166>
 80058be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d125      	bne.n	8005910 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80058c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c6:	2b04      	cmp	r3, #4
 80058c8:	d00e      	beq.n	80058e8 <I2C_Master_ADDR+0x18a>
 80058ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d00b      	beq.n	80058e8 <I2C_Master_ADDR+0x18a>
 80058d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d2:	2b10      	cmp	r3, #16
 80058d4:	d008      	beq.n	80058e8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058e4:	601a      	str	r2, [r3, #0]
 80058e6:	e007      	b.n	80058f8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80058f6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058f8:	2300      	movs	r3, #0
 80058fa:	61fb      	str	r3, [r7, #28]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	61fb      	str	r3, [r7, #28]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	699b      	ldr	r3, [r3, #24]
 800590a:	61fb      	str	r3, [r7, #28]
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	e0a1      	b.n	8005a54 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800591e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005920:	2300      	movs	r3, #0
 8005922:	61bb      	str	r3, [r7, #24]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	61bb      	str	r3, [r7, #24]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	61bb      	str	r3, [r7, #24]
 8005934:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005944:	601a      	str	r2, [r3, #0]
 8005946:	e085      	b.n	8005a54 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800594c:	b29b      	uxth	r3, r3
 800594e:	2b02      	cmp	r3, #2
 8005950:	d14d      	bne.n	80059ee <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005954:	2b04      	cmp	r3, #4
 8005956:	d016      	beq.n	8005986 <I2C_Master_ADDR+0x228>
 8005958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800595a:	2b02      	cmp	r3, #2
 800595c:	d013      	beq.n	8005986 <I2C_Master_ADDR+0x228>
 800595e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005960:	2b10      	cmp	r3, #16
 8005962:	d010      	beq.n	8005986 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005972:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005982:	601a      	str	r2, [r3, #0]
 8005984:	e007      	b.n	8005996 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005994:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059a4:	d117      	bne.n	80059d6 <I2C_Master_ADDR+0x278>
 80059a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80059ac:	d00b      	beq.n	80059c6 <I2C_Master_ADDR+0x268>
 80059ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d008      	beq.n	80059c6 <I2C_Master_ADDR+0x268>
 80059b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b6:	2b08      	cmp	r3, #8
 80059b8:	d005      	beq.n	80059c6 <I2C_Master_ADDR+0x268>
 80059ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059bc:	2b10      	cmp	r3, #16
 80059be:	d002      	beq.n	80059c6 <I2C_Master_ADDR+0x268>
 80059c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c2:	2b20      	cmp	r3, #32
 80059c4:	d107      	bne.n	80059d6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	685a      	ldr	r2, [r3, #4]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80059d4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059d6:	2300      	movs	r3, #0
 80059d8:	617b      	str	r3, [r7, #20]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	695b      	ldr	r3, [r3, #20]
 80059e0:	617b      	str	r3, [r7, #20]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	617b      	str	r3, [r7, #20]
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	e032      	b.n	8005a54 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80059fc:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a0c:	d117      	bne.n	8005a3e <I2C_Master_ADDR+0x2e0>
 8005a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a10:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a14:	d00b      	beq.n	8005a2e <I2C_Master_ADDR+0x2d0>
 8005a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d008      	beq.n	8005a2e <I2C_Master_ADDR+0x2d0>
 8005a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a1e:	2b08      	cmp	r3, #8
 8005a20:	d005      	beq.n	8005a2e <I2C_Master_ADDR+0x2d0>
 8005a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a24:	2b10      	cmp	r3, #16
 8005a26:	d002      	beq.n	8005a2e <I2C_Master_ADDR+0x2d0>
 8005a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a2a:	2b20      	cmp	r3, #32
 8005a2c:	d107      	bne.n	8005a3e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	685a      	ldr	r2, [r3, #4]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005a3c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a3e:	2300      	movs	r3, #0
 8005a40:	613b      	str	r3, [r7, #16]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	695b      	ldr	r3, [r3, #20]
 8005a48:	613b      	str	r3, [r7, #16]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	699b      	ldr	r3, [r3, #24]
 8005a50:	613b      	str	r3, [r7, #16]
 8005a52:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005a5a:	e00b      	b.n	8005a74 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	60fb      	str	r3, [r7, #12]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	60fb      	str	r3, [r7, #12]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	60fb      	str	r3, [r7, #12]
 8005a70:	68fb      	ldr	r3, [r7, #12]
}
 8005a72:	e7ff      	b.n	8005a74 <I2C_Master_ADDR+0x316>
 8005a74:	bf00      	nop
 8005a76:	3744      	adds	r7, #68	; 0x44
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a8e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d02b      	beq.n	8005af2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9e:	781a      	ldrb	r2, [r3, #0]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aaa:	1c5a      	adds	r2, r3, #1
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	3b01      	subs	r3, #1
 8005ab8:	b29a      	uxth	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d114      	bne.n	8005af2 <I2C_SlaveTransmit_TXE+0x72>
 8005ac8:	7bfb      	ldrb	r3, [r7, #15]
 8005aca:	2b29      	cmp	r3, #41	; 0x29
 8005acc:	d111      	bne.n	8005af2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	685a      	ldr	r2, [r3, #4]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005adc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2221      	movs	r2, #33	; 0x21
 8005ae2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2228      	movs	r2, #40	; 0x28
 8005ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f7ff f9f1 	bl	8004ed4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005af2:	bf00      	nop
 8005af4:	3710      	adds	r7, #16
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}

08005afa <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005afa:	b480      	push	{r7}
 8005afc:	b083      	sub	sp, #12
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d011      	beq.n	8005b30 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b10:	781a      	ldrb	r2, [r3, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1c:	1c5a      	adds	r2, r3, #1
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	3b01      	subs	r3, #1
 8005b2a:	b29a      	uxth	r2, r3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005b30:	bf00      	nop
 8005b32:	370c      	adds	r7, #12
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b4a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d02c      	beq.n	8005bb0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	691a      	ldr	r2, [r3, #16]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b60:	b2d2      	uxtb	r2, r2
 8005b62:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b68:	1c5a      	adds	r2, r3, #1
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	3b01      	subs	r3, #1
 8005b76:	b29a      	uxth	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d114      	bne.n	8005bb0 <I2C_SlaveReceive_RXNE+0x74>
 8005b86:	7bfb      	ldrb	r3, [r7, #15]
 8005b88:	2b2a      	cmp	r3, #42	; 0x2a
 8005b8a:	d111      	bne.n	8005bb0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	685a      	ldr	r2, [r3, #4]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b9a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2222      	movs	r2, #34	; 0x22
 8005ba0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2228      	movs	r2, #40	; 0x28
 8005ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f7ff f99c 	bl	8004ee8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005bb0:	bf00      	nop
 8005bb2:	3710      	adds	r7, #16
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d012      	beq.n	8005bf0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	691a      	ldr	r2, [r3, #16]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd4:	b2d2      	uxtb	r2, r2
 8005bd6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bdc:	1c5a      	adds	r2, r3, #1
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	3b01      	subs	r3, #1
 8005bea:	b29a      	uxth	r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005bf0:	bf00      	nop
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005c06:	2300      	movs	r3, #0
 8005c08:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005c16:	2b28      	cmp	r3, #40	; 0x28
 8005c18:	d127      	bne.n	8005c6a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	685a      	ldr	r2, [r3, #4]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c28:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	089b      	lsrs	r3, r3, #2
 8005c2e:	f003 0301 	and.w	r3, r3, #1
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d101      	bne.n	8005c3a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005c36:	2301      	movs	r3, #1
 8005c38:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	09db      	lsrs	r3, r3, #7
 8005c3e:	f003 0301 	and.w	r3, r3, #1
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d103      	bne.n	8005c4e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	81bb      	strh	r3, [r7, #12]
 8005c4c:	e002      	b.n	8005c54 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	699b      	ldr	r3, [r3, #24]
 8005c52:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005c5c:	89ba      	ldrh	r2, [r7, #12]
 8005c5e:	7bfb      	ldrb	r3, [r7, #15]
 8005c60:	4619      	mov	r1, r3
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f7ff f94a 	bl	8004efc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005c68:	e00e      	b.n	8005c88 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	60bb      	str	r3, [r7, #8]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	695b      	ldr	r3, [r3, #20]
 8005c74:	60bb      	str	r3, [r7, #8]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	699b      	ldr	r3, [r3, #24]
 8005c7c:	60bb      	str	r3, [r7, #8]
 8005c7e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005c88:	bf00      	nop
 8005c8a:	3710      	adds	r7, #16
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c9e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	685a      	ldr	r2, [r3, #4]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005cae:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	60bb      	str	r3, [r7, #8]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	60bb      	str	r3, [r7, #8]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f042 0201 	orr.w	r2, r2, #1
 8005cca:	601a      	str	r2, [r3, #0]
 8005ccc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cdc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ce8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cec:	d172      	bne.n	8005dd4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005cee:	7bfb      	ldrb	r3, [r7, #15]
 8005cf0:	2b22      	cmp	r3, #34	; 0x22
 8005cf2:	d002      	beq.n	8005cfa <I2C_Slave_STOPF+0x6a>
 8005cf4:	7bfb      	ldrb	r3, [r7, #15]
 8005cf6:	2b2a      	cmp	r3, #42	; 0x2a
 8005cf8:	d135      	bne.n	8005d66 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	b29a      	uxth	r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d005      	beq.n	8005d1e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d16:	f043 0204 	orr.w	r2, r3, #4
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	685a      	ldr	r2, [r3, #4]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d2c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d32:	4618      	mov	r0, r3
 8005d34:	f7fe fa78 	bl	8004228 <HAL_DMA_GetState>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d049      	beq.n	8005dd2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d42:	4a69      	ldr	r2, [pc, #420]	; (8005ee8 <I2C_Slave_STOPF+0x258>)
 8005d44:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f7fe f8c0 	bl	8003ed0 <HAL_DMA_Abort_IT>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d03d      	beq.n	8005dd2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d60:	4610      	mov	r0, r2
 8005d62:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005d64:	e035      	b.n	8005dd2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	b29a      	uxth	r2, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d005      	beq.n	8005d8a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d82:	f043 0204 	orr.w	r2, r3, #4
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	685a      	ldr	r2, [r3, #4]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d98:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7fe fa42 	bl	8004228 <HAL_DMA_GetState>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d014      	beq.n	8005dd4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dae:	4a4e      	ldr	r2, [pc, #312]	; (8005ee8 <I2C_Slave_STOPF+0x258>)
 8005db0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7fe f88a 	bl	8003ed0 <HAL_DMA_Abort_IT>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d008      	beq.n	8005dd4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005dcc:	4610      	mov	r0, r2
 8005dce:	4798      	blx	r3
 8005dd0:	e000      	b.n	8005dd4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005dd2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d03e      	beq.n	8005e5c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	695b      	ldr	r3, [r3, #20]
 8005de4:	f003 0304 	and.w	r3, r3, #4
 8005de8:	2b04      	cmp	r3, #4
 8005dea:	d112      	bne.n	8005e12 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	691a      	ldr	r2, [r3, #16]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df6:	b2d2      	uxtb	r2, r2
 8005df8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfe:	1c5a      	adds	r2, r3, #1
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	b29a      	uxth	r2, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	695b      	ldr	r3, [r3, #20]
 8005e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e1c:	2b40      	cmp	r3, #64	; 0x40
 8005e1e:	d112      	bne.n	8005e46 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	691a      	ldr	r2, [r3, #16]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2a:	b2d2      	uxtb	r2, r2
 8005e2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e32:	1c5a      	adds	r2, r3, #1
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	b29a      	uxth	r2, r3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d005      	beq.n	8005e5c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e54:	f043 0204 	orr.w	r2, r3, #4
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d003      	beq.n	8005e6c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 f8b3 	bl	8005fd0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005e6a:	e039      	b.n	8005ee0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005e6c:	7bfb      	ldrb	r3, [r7, #15]
 8005e6e:	2b2a      	cmp	r3, #42	; 0x2a
 8005e70:	d109      	bne.n	8005e86 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2228      	movs	r2, #40	; 0x28
 8005e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f7ff f831 	bl	8004ee8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	2b28      	cmp	r3, #40	; 0x28
 8005e90:	d111      	bne.n	8005eb6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a15      	ldr	r2, [pc, #84]	; (8005eec <I2C_Slave_STOPF+0x25c>)
 8005e96:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2220      	movs	r2, #32
 8005ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f7ff f832 	bl	8004f18 <HAL_I2C_ListenCpltCallback>
}
 8005eb4:	e014      	b.n	8005ee0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eba:	2b22      	cmp	r3, #34	; 0x22
 8005ebc:	d002      	beq.n	8005ec4 <I2C_Slave_STOPF+0x234>
 8005ebe:	7bfb      	ldrb	r3, [r7, #15]
 8005ec0:	2b22      	cmp	r3, #34	; 0x22
 8005ec2:	d10d      	bne.n	8005ee0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2220      	movs	r2, #32
 8005ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f7ff f804 	bl	8004ee8 <HAL_I2C_SlaveRxCpltCallback>
}
 8005ee0:	bf00      	nop
 8005ee2:	3710      	adds	r7, #16
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	08006235 	.word	0x08006235
 8005eec:	ffff0000 	.word	0xffff0000

08005ef0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005efe:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f04:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	2b08      	cmp	r3, #8
 8005f0a:	d002      	beq.n	8005f12 <I2C_Slave_AF+0x22>
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	2b20      	cmp	r3, #32
 8005f10:	d129      	bne.n	8005f66 <I2C_Slave_AF+0x76>
 8005f12:	7bfb      	ldrb	r3, [r7, #15]
 8005f14:	2b28      	cmp	r3, #40	; 0x28
 8005f16:	d126      	bne.n	8005f66 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a2c      	ldr	r2, [pc, #176]	; (8005fcc <I2C_Slave_AF+0xdc>)
 8005f1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	685a      	ldr	r2, [r3, #4]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f2c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f36:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f46:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2220      	movs	r2, #32
 8005f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f7fe ffda 	bl	8004f18 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005f64:	e02e      	b.n	8005fc4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005f66:	7bfb      	ldrb	r3, [r7, #15]
 8005f68:	2b21      	cmp	r3, #33	; 0x21
 8005f6a:	d126      	bne.n	8005fba <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	4a17      	ldr	r2, [pc, #92]	; (8005fcc <I2C_Slave_AF+0xdc>)
 8005f70:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2221      	movs	r2, #33	; 0x21
 8005f76:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2220      	movs	r2, #32
 8005f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	685a      	ldr	r2, [r3, #4]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f96:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005fa0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fb0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f7fe ff8e 	bl	8004ed4 <HAL_I2C_SlaveTxCpltCallback>
}
 8005fb8:	e004      	b.n	8005fc4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005fc2:	615a      	str	r2, [r3, #20]
}
 8005fc4:	bf00      	nop
 8005fc6:	3710      	adds	r7, #16
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	ffff0000 	.word	0xffff0000

08005fd0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fde:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fe6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005fe8:	7bbb      	ldrb	r3, [r7, #14]
 8005fea:	2b10      	cmp	r3, #16
 8005fec:	d002      	beq.n	8005ff4 <I2C_ITError+0x24>
 8005fee:	7bbb      	ldrb	r3, [r7, #14]
 8005ff0:	2b40      	cmp	r3, #64	; 0x40
 8005ff2:	d10a      	bne.n	800600a <I2C_ITError+0x3a>
 8005ff4:	7bfb      	ldrb	r3, [r7, #15]
 8005ff6:	2b22      	cmp	r3, #34	; 0x22
 8005ff8:	d107      	bne.n	800600a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006008:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800600a:	7bfb      	ldrb	r3, [r7, #15]
 800600c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006010:	2b28      	cmp	r3, #40	; 0x28
 8006012:	d107      	bne.n	8006024 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2228      	movs	r2, #40	; 0x28
 800601e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006022:	e015      	b.n	8006050 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800602e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006032:	d00a      	beq.n	800604a <I2C_ITError+0x7a>
 8006034:	7bfb      	ldrb	r3, [r7, #15]
 8006036:	2b60      	cmp	r3, #96	; 0x60
 8006038:	d007      	beq.n	800604a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2220      	movs	r2, #32
 800603e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800605a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800605e:	d162      	bne.n	8006126 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	685a      	ldr	r2, [r3, #4]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800606e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006074:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006078:	b2db      	uxtb	r3, r3
 800607a:	2b01      	cmp	r3, #1
 800607c:	d020      	beq.n	80060c0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006082:	4a6a      	ldr	r2, [pc, #424]	; (800622c <I2C_ITError+0x25c>)
 8006084:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800608a:	4618      	mov	r0, r3
 800608c:	f7fd ff20 	bl	8003ed0 <HAL_DMA_Abort_IT>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	f000 8089 	beq.w	80061aa <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f022 0201 	bic.w	r2, r2, #1
 80060a6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2220      	movs	r2, #32
 80060ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80060ba:	4610      	mov	r0, r2
 80060bc:	4798      	blx	r3
 80060be:	e074      	b.n	80061aa <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c4:	4a59      	ldr	r2, [pc, #356]	; (800622c <I2C_ITError+0x25c>)
 80060c6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060cc:	4618      	mov	r0, r3
 80060ce:	f7fd feff 	bl	8003ed0 <HAL_DMA_Abort_IT>
 80060d2:	4603      	mov	r3, r0
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d068      	beq.n	80061aa <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	695b      	ldr	r3, [r3, #20]
 80060de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e2:	2b40      	cmp	r3, #64	; 0x40
 80060e4:	d10b      	bne.n	80060fe <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	691a      	ldr	r2, [r3, #16]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f0:	b2d2      	uxtb	r2, r2
 80060f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f8:	1c5a      	adds	r2, r3, #1
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f022 0201 	bic.w	r2, r2, #1
 800610c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2220      	movs	r2, #32
 8006112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800611a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006120:	4610      	mov	r0, r2
 8006122:	4798      	blx	r3
 8006124:	e041      	b.n	80061aa <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800612c:	b2db      	uxtb	r3, r3
 800612e:	2b60      	cmp	r3, #96	; 0x60
 8006130:	d125      	bne.n	800617e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2220      	movs	r2, #32
 8006136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	695b      	ldr	r3, [r3, #20]
 8006146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800614a:	2b40      	cmp	r3, #64	; 0x40
 800614c:	d10b      	bne.n	8006166 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	691a      	ldr	r2, [r3, #16]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006158:	b2d2      	uxtb	r2, r2
 800615a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006160:	1c5a      	adds	r2, r3, #1
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f022 0201 	bic.w	r2, r2, #1
 8006174:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f7fe fef6 	bl	8004f68 <HAL_I2C_AbortCpltCallback>
 800617c:	e015      	b.n	80061aa <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	695b      	ldr	r3, [r3, #20]
 8006184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006188:	2b40      	cmp	r3, #64	; 0x40
 800618a:	d10b      	bne.n	80061a4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	691a      	ldr	r2, [r3, #16]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006196:	b2d2      	uxtb	r2, r2
 8006198:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619e:	1c5a      	adds	r2, r3, #1
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f7fe fed5 	bl	8004f54 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ae:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	f003 0301 	and.w	r3, r3, #1
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d10e      	bne.n	80061d8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d109      	bne.n	80061d8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d104      	bne.n	80061d8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d007      	beq.n	80061e8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	685a      	ldr	r2, [r3, #4]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80061e6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061ee:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f4:	f003 0304 	and.w	r3, r3, #4
 80061f8:	2b04      	cmp	r3, #4
 80061fa:	d113      	bne.n	8006224 <I2C_ITError+0x254>
 80061fc:	7bfb      	ldrb	r3, [r7, #15]
 80061fe:	2b28      	cmp	r3, #40	; 0x28
 8006200:	d110      	bne.n	8006224 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a0a      	ldr	r2, [pc, #40]	; (8006230 <I2C_ITError+0x260>)
 8006206:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2220      	movs	r2, #32
 8006212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f7fe fe7a 	bl	8004f18 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006224:	bf00      	nop
 8006226:	3710      	adds	r7, #16
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}
 800622c:	08006235 	.word	0x08006235
 8006230:	ffff0000 	.word	0xffff0000

08006234 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b086      	sub	sp, #24
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800623c:	2300      	movs	r3, #0
 800623e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006244:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800624c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800624e:	4b4b      	ldr	r3, [pc, #300]	; (800637c <I2C_DMAAbort+0x148>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	08db      	lsrs	r3, r3, #3
 8006254:	4a4a      	ldr	r2, [pc, #296]	; (8006380 <I2C_DMAAbort+0x14c>)
 8006256:	fba2 2303 	umull	r2, r3, r2, r3
 800625a:	0a1a      	lsrs	r2, r3, #8
 800625c:	4613      	mov	r3, r2
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	4413      	add	r3, r2
 8006262:	00da      	lsls	r2, r3, #3
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d106      	bne.n	800627c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006272:	f043 0220 	orr.w	r2, r3, #32
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800627a:	e00a      	b.n	8006292 <I2C_DMAAbort+0x5e>
    }
    count--;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	3b01      	subs	r3, #1
 8006280:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800628c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006290:	d0ea      	beq.n	8006268 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006296:	2b00      	cmp	r3, #0
 8006298:	d003      	beq.n	80062a2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800629e:	2200      	movs	r2, #0
 80062a0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d003      	beq.n	80062b2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ae:	2200      	movs	r2, #0
 80062b0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062c0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	2200      	movs	r2, #0
 80062c6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d003      	beq.n	80062d8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062d4:	2200      	movs	r2, #0
 80062d6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d003      	beq.n	80062e8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e4:	2200      	movs	r2, #0
 80062e6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f022 0201 	bic.w	r2, r2, #1
 80062f6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	2b60      	cmp	r3, #96	; 0x60
 8006302:	d10e      	bne.n	8006322 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	2220      	movs	r2, #32
 8006308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	2200      	movs	r2, #0
 8006310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	2200      	movs	r2, #0
 8006318:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800631a:	6978      	ldr	r0, [r7, #20]
 800631c:	f7fe fe24 	bl	8004f68 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006320:	e027      	b.n	8006372 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006322:	7cfb      	ldrb	r3, [r7, #19]
 8006324:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006328:	2b28      	cmp	r3, #40	; 0x28
 800632a:	d117      	bne.n	800635c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f042 0201 	orr.w	r2, r2, #1
 800633a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800634a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	2200      	movs	r2, #0
 8006350:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	2228      	movs	r2, #40	; 0x28
 8006356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800635a:	e007      	b.n	800636c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	2220      	movs	r2, #32
 8006360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800636c:	6978      	ldr	r0, [r7, #20]
 800636e:	f7fe fdf1 	bl	8004f54 <HAL_I2C_ErrorCallback>
}
 8006372:	bf00      	nop
 8006374:	3718      	adds	r7, #24
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	20000000 	.word	0x20000000
 8006380:	14f8b589 	.word	0x14f8b589

08006384 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800638c:	2300      	movs	r3, #0
 800638e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006390:	4b13      	ldr	r3, [pc, #76]	; (80063e0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	08db      	lsrs	r3, r3, #3
 8006396:	4a13      	ldr	r2, [pc, #76]	; (80063e4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006398:	fba2 2303 	umull	r2, r3, r2, r3
 800639c:	0a1a      	lsrs	r2, r3, #8
 800639e:	4613      	mov	r3, r2
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	4413      	add	r3, r2
 80063a4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	3b01      	subs	r3, #1
 80063aa:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d107      	bne.n	80063c2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b6:	f043 0220 	orr.w	r2, r3, #32
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	e008      	b.n	80063d4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063d0:	d0e9      	beq.n	80063a6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3714      	adds	r7, #20
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr
 80063e0:	20000000 	.word	0x20000000
 80063e4:	14f8b589 	.word	0x14f8b589

080063e8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80063f8:	d103      	bne.n	8006402 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2201      	movs	r2, #1
 80063fe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006400:	e007      	b.n	8006412 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006406:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800640a:	d102      	bne.n	8006412 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2208      	movs	r2, #8
 8006410:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006412:	bf00      	nop
 8006414:	370c      	adds	r7, #12
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr

0800641e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800641e:	b480      	push	{r7}
 8006420:	b083      	sub	sp, #12
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
 8006426:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800642e:	b2db      	uxtb	r3, r3
 8006430:	2b20      	cmp	r3, #32
 8006432:	d129      	bne.n	8006488 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2224      	movs	r2, #36	; 0x24
 8006438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f022 0201 	bic.w	r2, r2, #1
 800644a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f022 0210 	bic.w	r2, r2, #16
 800645a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	683a      	ldr	r2, [r7, #0]
 8006468:	430a      	orrs	r2, r1
 800646a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f042 0201 	orr.w	r2, r2, #1
 800647a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2220      	movs	r2, #32
 8006480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006484:	2300      	movs	r3, #0
 8006486:	e000      	b.n	800648a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8006488:	2302      	movs	r3, #2
  }
}
 800648a:	4618      	mov	r0, r3
 800648c:	370c      	adds	r7, #12
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr

08006496 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006496:	b480      	push	{r7}
 8006498:	b085      	sub	sp, #20
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
 800649e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80064a0:	2300      	movs	r3, #0
 80064a2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	2b20      	cmp	r3, #32
 80064ae:	d12a      	bne.n	8006506 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2224      	movs	r2, #36	; 0x24
 80064b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f022 0201 	bic.w	r2, r2, #1
 80064c6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ce:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80064d0:	89fb      	ldrh	r3, [r7, #14]
 80064d2:	f023 030f 	bic.w	r3, r3, #15
 80064d6:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	b29a      	uxth	r2, r3
 80064dc:	89fb      	ldrh	r3, [r7, #14]
 80064de:	4313      	orrs	r3, r2
 80064e0:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	89fa      	ldrh	r2, [r7, #14]
 80064e8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f042 0201 	orr.w	r2, r2, #1
 80064f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2220      	movs	r2, #32
 80064fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006502:	2300      	movs	r3, #0
 8006504:	e000      	b.n	8006508 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006506:	2302      	movs	r3, #2
  }
}
 8006508:	4618      	mov	r0, r3
 800650a:	3714      	adds	r7, #20
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b082      	sub	sp, #8
 8006518:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800651a:	2300      	movs	r3, #0
 800651c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800651e:	2300      	movs	r3, #0
 8006520:	603b      	str	r3, [r7, #0]
 8006522:	4b20      	ldr	r3, [pc, #128]	; (80065a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8006524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006526:	4a1f      	ldr	r2, [pc, #124]	; (80065a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8006528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800652c:	6413      	str	r3, [r2, #64]	; 0x40
 800652e:	4b1d      	ldr	r3, [pc, #116]	; (80065a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8006530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006536:	603b      	str	r3, [r7, #0]
 8006538:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800653a:	4b1b      	ldr	r3, [pc, #108]	; (80065a8 <HAL_PWREx_EnableOverDrive+0x94>)
 800653c:	2201      	movs	r2, #1
 800653e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006540:	f7fd fa22 	bl	8003988 <HAL_GetTick>
 8006544:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006546:	e009      	b.n	800655c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006548:	f7fd fa1e 	bl	8003988 <HAL_GetTick>
 800654c:	4602      	mov	r2, r0
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	1ad3      	subs	r3, r2, r3
 8006552:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006556:	d901      	bls.n	800655c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006558:	2303      	movs	r3, #3
 800655a:	e01f      	b.n	800659c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800655c:	4b13      	ldr	r3, [pc, #76]	; (80065ac <HAL_PWREx_EnableOverDrive+0x98>)
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006568:	d1ee      	bne.n	8006548 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800656a:	4b11      	ldr	r3, [pc, #68]	; (80065b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800656c:	2201      	movs	r2, #1
 800656e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006570:	f7fd fa0a 	bl	8003988 <HAL_GetTick>
 8006574:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006576:	e009      	b.n	800658c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006578:	f7fd fa06 	bl	8003988 <HAL_GetTick>
 800657c:	4602      	mov	r2, r0
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006586:	d901      	bls.n	800658c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006588:	2303      	movs	r3, #3
 800658a:	e007      	b.n	800659c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800658c:	4b07      	ldr	r3, [pc, #28]	; (80065ac <HAL_PWREx_EnableOverDrive+0x98>)
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006594:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006598:	d1ee      	bne.n	8006578 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800659a:	2300      	movs	r3, #0
}
 800659c:	4618      	mov	r0, r3
 800659e:	3708      	adds	r7, #8
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	40023800 	.word	0x40023800
 80065a8:	420e0040 	.word	0x420e0040
 80065ac:	40007000 	.word	0x40007000
 80065b0:	420e0044 	.word	0x420e0044

080065b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b086      	sub	sp, #24
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d101      	bne.n	80065c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e267      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 0301 	and.w	r3, r3, #1
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d075      	beq.n	80066be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80065d2:	4b88      	ldr	r3, [pc, #544]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	f003 030c 	and.w	r3, r3, #12
 80065da:	2b04      	cmp	r3, #4
 80065dc:	d00c      	beq.n	80065f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065de:	4b85      	ldr	r3, [pc, #532]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80065e6:	2b08      	cmp	r3, #8
 80065e8:	d112      	bne.n	8006610 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065ea:	4b82      	ldr	r3, [pc, #520]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065f6:	d10b      	bne.n	8006610 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065f8:	4b7e      	ldr	r3, [pc, #504]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006600:	2b00      	cmp	r3, #0
 8006602:	d05b      	beq.n	80066bc <HAL_RCC_OscConfig+0x108>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d157      	bne.n	80066bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e242      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006618:	d106      	bne.n	8006628 <HAL_RCC_OscConfig+0x74>
 800661a:	4b76      	ldr	r3, [pc, #472]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a75      	ldr	r2, [pc, #468]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 8006620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006624:	6013      	str	r3, [r2, #0]
 8006626:	e01d      	b.n	8006664 <HAL_RCC_OscConfig+0xb0>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006630:	d10c      	bne.n	800664c <HAL_RCC_OscConfig+0x98>
 8006632:	4b70      	ldr	r3, [pc, #448]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a6f      	ldr	r2, [pc, #444]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 8006638:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800663c:	6013      	str	r3, [r2, #0]
 800663e:	4b6d      	ldr	r3, [pc, #436]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a6c      	ldr	r2, [pc, #432]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 8006644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006648:	6013      	str	r3, [r2, #0]
 800664a:	e00b      	b.n	8006664 <HAL_RCC_OscConfig+0xb0>
 800664c:	4b69      	ldr	r3, [pc, #420]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a68      	ldr	r2, [pc, #416]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 8006652:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006656:	6013      	str	r3, [r2, #0]
 8006658:	4b66      	ldr	r3, [pc, #408]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a65      	ldr	r2, [pc, #404]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 800665e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006662:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d013      	beq.n	8006694 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800666c:	f7fd f98c 	bl	8003988 <HAL_GetTick>
 8006670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006672:	e008      	b.n	8006686 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006674:	f7fd f988 	bl	8003988 <HAL_GetTick>
 8006678:	4602      	mov	r2, r0
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	2b64      	cmp	r3, #100	; 0x64
 8006680:	d901      	bls.n	8006686 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	e207      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006686:	4b5b      	ldr	r3, [pc, #364]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800668e:	2b00      	cmp	r3, #0
 8006690:	d0f0      	beq.n	8006674 <HAL_RCC_OscConfig+0xc0>
 8006692:	e014      	b.n	80066be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006694:	f7fd f978 	bl	8003988 <HAL_GetTick>
 8006698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800669a:	e008      	b.n	80066ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800669c:	f7fd f974 	bl	8003988 <HAL_GetTick>
 80066a0:	4602      	mov	r2, r0
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	2b64      	cmp	r3, #100	; 0x64
 80066a8:	d901      	bls.n	80066ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	e1f3      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066ae:	4b51      	ldr	r3, [pc, #324]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d1f0      	bne.n	800669c <HAL_RCC_OscConfig+0xe8>
 80066ba:	e000      	b.n	80066be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 0302 	and.w	r3, r3, #2
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d063      	beq.n	8006792 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80066ca:	4b4a      	ldr	r3, [pc, #296]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	f003 030c 	and.w	r3, r3, #12
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d00b      	beq.n	80066ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066d6:	4b47      	ldr	r3, [pc, #284]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80066de:	2b08      	cmp	r3, #8
 80066e0:	d11c      	bne.n	800671c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066e2:	4b44      	ldr	r3, [pc, #272]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d116      	bne.n	800671c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066ee:	4b41      	ldr	r3, [pc, #260]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 0302 	and.w	r3, r3, #2
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d005      	beq.n	8006706 <HAL_RCC_OscConfig+0x152>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d001      	beq.n	8006706 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	e1c7      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006706:	4b3b      	ldr	r3, [pc, #236]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	00db      	lsls	r3, r3, #3
 8006714:	4937      	ldr	r1, [pc, #220]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 8006716:	4313      	orrs	r3, r2
 8006718:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800671a:	e03a      	b.n	8006792 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d020      	beq.n	8006766 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006724:	4b34      	ldr	r3, [pc, #208]	; (80067f8 <HAL_RCC_OscConfig+0x244>)
 8006726:	2201      	movs	r2, #1
 8006728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800672a:	f7fd f92d 	bl	8003988 <HAL_GetTick>
 800672e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006730:	e008      	b.n	8006744 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006732:	f7fd f929 	bl	8003988 <HAL_GetTick>
 8006736:	4602      	mov	r2, r0
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	1ad3      	subs	r3, r2, r3
 800673c:	2b02      	cmp	r3, #2
 800673e:	d901      	bls.n	8006744 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006740:	2303      	movs	r3, #3
 8006742:	e1a8      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006744:	4b2b      	ldr	r3, [pc, #172]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 0302 	and.w	r3, r3, #2
 800674c:	2b00      	cmp	r3, #0
 800674e:	d0f0      	beq.n	8006732 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006750:	4b28      	ldr	r3, [pc, #160]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	00db      	lsls	r3, r3, #3
 800675e:	4925      	ldr	r1, [pc, #148]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 8006760:	4313      	orrs	r3, r2
 8006762:	600b      	str	r3, [r1, #0]
 8006764:	e015      	b.n	8006792 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006766:	4b24      	ldr	r3, [pc, #144]	; (80067f8 <HAL_RCC_OscConfig+0x244>)
 8006768:	2200      	movs	r2, #0
 800676a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800676c:	f7fd f90c 	bl	8003988 <HAL_GetTick>
 8006770:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006772:	e008      	b.n	8006786 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006774:	f7fd f908 	bl	8003988 <HAL_GetTick>
 8006778:	4602      	mov	r2, r0
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	1ad3      	subs	r3, r2, r3
 800677e:	2b02      	cmp	r3, #2
 8006780:	d901      	bls.n	8006786 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006782:	2303      	movs	r3, #3
 8006784:	e187      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006786:	4b1b      	ldr	r3, [pc, #108]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f003 0302 	and.w	r3, r3, #2
 800678e:	2b00      	cmp	r3, #0
 8006790:	d1f0      	bne.n	8006774 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 0308 	and.w	r3, r3, #8
 800679a:	2b00      	cmp	r3, #0
 800679c:	d036      	beq.n	800680c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	695b      	ldr	r3, [r3, #20]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d016      	beq.n	80067d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067a6:	4b15      	ldr	r3, [pc, #84]	; (80067fc <HAL_RCC_OscConfig+0x248>)
 80067a8:	2201      	movs	r2, #1
 80067aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067ac:	f7fd f8ec 	bl	8003988 <HAL_GetTick>
 80067b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067b2:	e008      	b.n	80067c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80067b4:	f7fd f8e8 	bl	8003988 <HAL_GetTick>
 80067b8:	4602      	mov	r2, r0
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d901      	bls.n	80067c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80067c2:	2303      	movs	r3, #3
 80067c4:	e167      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067c6:	4b0b      	ldr	r3, [pc, #44]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 80067c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067ca:	f003 0302 	and.w	r3, r3, #2
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d0f0      	beq.n	80067b4 <HAL_RCC_OscConfig+0x200>
 80067d2:	e01b      	b.n	800680c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067d4:	4b09      	ldr	r3, [pc, #36]	; (80067fc <HAL_RCC_OscConfig+0x248>)
 80067d6:	2200      	movs	r2, #0
 80067d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067da:	f7fd f8d5 	bl	8003988 <HAL_GetTick>
 80067de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067e0:	e00e      	b.n	8006800 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80067e2:	f7fd f8d1 	bl	8003988 <HAL_GetTick>
 80067e6:	4602      	mov	r2, r0
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	1ad3      	subs	r3, r2, r3
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d907      	bls.n	8006800 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80067f0:	2303      	movs	r3, #3
 80067f2:	e150      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
 80067f4:	40023800 	.word	0x40023800
 80067f8:	42470000 	.word	0x42470000
 80067fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006800:	4b88      	ldr	r3, [pc, #544]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 8006802:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006804:	f003 0302 	and.w	r3, r3, #2
 8006808:	2b00      	cmp	r3, #0
 800680a:	d1ea      	bne.n	80067e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 0304 	and.w	r3, r3, #4
 8006814:	2b00      	cmp	r3, #0
 8006816:	f000 8097 	beq.w	8006948 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800681a:	2300      	movs	r3, #0
 800681c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800681e:	4b81      	ldr	r3, [pc, #516]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 8006820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006826:	2b00      	cmp	r3, #0
 8006828:	d10f      	bne.n	800684a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800682a:	2300      	movs	r3, #0
 800682c:	60bb      	str	r3, [r7, #8]
 800682e:	4b7d      	ldr	r3, [pc, #500]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 8006830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006832:	4a7c      	ldr	r2, [pc, #496]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 8006834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006838:	6413      	str	r3, [r2, #64]	; 0x40
 800683a:	4b7a      	ldr	r3, [pc, #488]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 800683c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800683e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006842:	60bb      	str	r3, [r7, #8]
 8006844:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006846:	2301      	movs	r3, #1
 8006848:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800684a:	4b77      	ldr	r3, [pc, #476]	; (8006a28 <HAL_RCC_OscConfig+0x474>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006852:	2b00      	cmp	r3, #0
 8006854:	d118      	bne.n	8006888 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006856:	4b74      	ldr	r3, [pc, #464]	; (8006a28 <HAL_RCC_OscConfig+0x474>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a73      	ldr	r2, [pc, #460]	; (8006a28 <HAL_RCC_OscConfig+0x474>)
 800685c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006860:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006862:	f7fd f891 	bl	8003988 <HAL_GetTick>
 8006866:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006868:	e008      	b.n	800687c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800686a:	f7fd f88d 	bl	8003988 <HAL_GetTick>
 800686e:	4602      	mov	r2, r0
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	1ad3      	subs	r3, r2, r3
 8006874:	2b02      	cmp	r3, #2
 8006876:	d901      	bls.n	800687c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006878:	2303      	movs	r3, #3
 800687a:	e10c      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800687c:	4b6a      	ldr	r3, [pc, #424]	; (8006a28 <HAL_RCC_OscConfig+0x474>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006884:	2b00      	cmp	r3, #0
 8006886:	d0f0      	beq.n	800686a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	2b01      	cmp	r3, #1
 800688e:	d106      	bne.n	800689e <HAL_RCC_OscConfig+0x2ea>
 8006890:	4b64      	ldr	r3, [pc, #400]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 8006892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006894:	4a63      	ldr	r2, [pc, #396]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 8006896:	f043 0301 	orr.w	r3, r3, #1
 800689a:	6713      	str	r3, [r2, #112]	; 0x70
 800689c:	e01c      	b.n	80068d8 <HAL_RCC_OscConfig+0x324>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	2b05      	cmp	r3, #5
 80068a4:	d10c      	bne.n	80068c0 <HAL_RCC_OscConfig+0x30c>
 80068a6:	4b5f      	ldr	r3, [pc, #380]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 80068a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068aa:	4a5e      	ldr	r2, [pc, #376]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 80068ac:	f043 0304 	orr.w	r3, r3, #4
 80068b0:	6713      	str	r3, [r2, #112]	; 0x70
 80068b2:	4b5c      	ldr	r3, [pc, #368]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 80068b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068b6:	4a5b      	ldr	r2, [pc, #364]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 80068b8:	f043 0301 	orr.w	r3, r3, #1
 80068bc:	6713      	str	r3, [r2, #112]	; 0x70
 80068be:	e00b      	b.n	80068d8 <HAL_RCC_OscConfig+0x324>
 80068c0:	4b58      	ldr	r3, [pc, #352]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 80068c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068c4:	4a57      	ldr	r2, [pc, #348]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 80068c6:	f023 0301 	bic.w	r3, r3, #1
 80068ca:	6713      	str	r3, [r2, #112]	; 0x70
 80068cc:	4b55      	ldr	r3, [pc, #340]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 80068ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068d0:	4a54      	ldr	r2, [pc, #336]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 80068d2:	f023 0304 	bic.w	r3, r3, #4
 80068d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d015      	beq.n	800690c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068e0:	f7fd f852 	bl	8003988 <HAL_GetTick>
 80068e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068e6:	e00a      	b.n	80068fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068e8:	f7fd f84e 	bl	8003988 <HAL_GetTick>
 80068ec:	4602      	mov	r2, r0
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d901      	bls.n	80068fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80068fa:	2303      	movs	r3, #3
 80068fc:	e0cb      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068fe:	4b49      	ldr	r3, [pc, #292]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 8006900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006902:	f003 0302 	and.w	r3, r3, #2
 8006906:	2b00      	cmp	r3, #0
 8006908:	d0ee      	beq.n	80068e8 <HAL_RCC_OscConfig+0x334>
 800690a:	e014      	b.n	8006936 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800690c:	f7fd f83c 	bl	8003988 <HAL_GetTick>
 8006910:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006912:	e00a      	b.n	800692a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006914:	f7fd f838 	bl	8003988 <HAL_GetTick>
 8006918:	4602      	mov	r2, r0
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	1ad3      	subs	r3, r2, r3
 800691e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006922:	4293      	cmp	r3, r2
 8006924:	d901      	bls.n	800692a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006926:	2303      	movs	r3, #3
 8006928:	e0b5      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800692a:	4b3e      	ldr	r3, [pc, #248]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 800692c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800692e:	f003 0302 	and.w	r3, r3, #2
 8006932:	2b00      	cmp	r3, #0
 8006934:	d1ee      	bne.n	8006914 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006936:	7dfb      	ldrb	r3, [r7, #23]
 8006938:	2b01      	cmp	r3, #1
 800693a:	d105      	bne.n	8006948 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800693c:	4b39      	ldr	r3, [pc, #228]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 800693e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006940:	4a38      	ldr	r2, [pc, #224]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 8006942:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006946:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	699b      	ldr	r3, [r3, #24]
 800694c:	2b00      	cmp	r3, #0
 800694e:	f000 80a1 	beq.w	8006a94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006952:	4b34      	ldr	r3, [pc, #208]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	f003 030c 	and.w	r3, r3, #12
 800695a:	2b08      	cmp	r3, #8
 800695c:	d05c      	beq.n	8006a18 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	699b      	ldr	r3, [r3, #24]
 8006962:	2b02      	cmp	r3, #2
 8006964:	d141      	bne.n	80069ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006966:	4b31      	ldr	r3, [pc, #196]	; (8006a2c <HAL_RCC_OscConfig+0x478>)
 8006968:	2200      	movs	r2, #0
 800696a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800696c:	f7fd f80c 	bl	8003988 <HAL_GetTick>
 8006970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006972:	e008      	b.n	8006986 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006974:	f7fd f808 	bl	8003988 <HAL_GetTick>
 8006978:	4602      	mov	r2, r0
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	2b02      	cmp	r3, #2
 8006980:	d901      	bls.n	8006986 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006982:	2303      	movs	r3, #3
 8006984:	e087      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006986:	4b27      	ldr	r3, [pc, #156]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800698e:	2b00      	cmp	r3, #0
 8006990:	d1f0      	bne.n	8006974 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	69da      	ldr	r2, [r3, #28]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6a1b      	ldr	r3, [r3, #32]
 800699a:	431a      	orrs	r2, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a0:	019b      	lsls	r3, r3, #6
 80069a2:	431a      	orrs	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a8:	085b      	lsrs	r3, r3, #1
 80069aa:	3b01      	subs	r3, #1
 80069ac:	041b      	lsls	r3, r3, #16
 80069ae:	431a      	orrs	r2, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b4:	061b      	lsls	r3, r3, #24
 80069b6:	491b      	ldr	r1, [pc, #108]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 80069b8:	4313      	orrs	r3, r2
 80069ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069bc:	4b1b      	ldr	r3, [pc, #108]	; (8006a2c <HAL_RCC_OscConfig+0x478>)
 80069be:	2201      	movs	r2, #1
 80069c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069c2:	f7fc ffe1 	bl	8003988 <HAL_GetTick>
 80069c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069c8:	e008      	b.n	80069dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069ca:	f7fc ffdd 	bl	8003988 <HAL_GetTick>
 80069ce:	4602      	mov	r2, r0
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	1ad3      	subs	r3, r2, r3
 80069d4:	2b02      	cmp	r3, #2
 80069d6:	d901      	bls.n	80069dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80069d8:	2303      	movs	r3, #3
 80069da:	e05c      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069dc:	4b11      	ldr	r3, [pc, #68]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d0f0      	beq.n	80069ca <HAL_RCC_OscConfig+0x416>
 80069e8:	e054      	b.n	8006a94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069ea:	4b10      	ldr	r3, [pc, #64]	; (8006a2c <HAL_RCC_OscConfig+0x478>)
 80069ec:	2200      	movs	r2, #0
 80069ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069f0:	f7fc ffca 	bl	8003988 <HAL_GetTick>
 80069f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069f6:	e008      	b.n	8006a0a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069f8:	f7fc ffc6 	bl	8003988 <HAL_GetTick>
 80069fc:	4602      	mov	r2, r0
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	1ad3      	subs	r3, r2, r3
 8006a02:	2b02      	cmp	r3, #2
 8006a04:	d901      	bls.n	8006a0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006a06:	2303      	movs	r3, #3
 8006a08:	e045      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a0a:	4b06      	ldr	r3, [pc, #24]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d1f0      	bne.n	80069f8 <HAL_RCC_OscConfig+0x444>
 8006a16:	e03d      	b.n	8006a94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	699b      	ldr	r3, [r3, #24]
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d107      	bne.n	8006a30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	e038      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
 8006a24:	40023800 	.word	0x40023800
 8006a28:	40007000 	.word	0x40007000
 8006a2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006a30:	4b1b      	ldr	r3, [pc, #108]	; (8006aa0 <HAL_RCC_OscConfig+0x4ec>)
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	699b      	ldr	r3, [r3, #24]
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d028      	beq.n	8006a90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d121      	bne.n	8006a90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d11a      	bne.n	8006a90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006a60:	4013      	ands	r3, r2
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006a66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d111      	bne.n	8006a90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a76:	085b      	lsrs	r3, r3, #1
 8006a78:	3b01      	subs	r3, #1
 8006a7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d107      	bne.n	8006a90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d001      	beq.n	8006a94 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	e000      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3718      	adds	r7, #24
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	40023800 	.word	0x40023800

08006aa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d101      	bne.n	8006ab8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e0cc      	b.n	8006c52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ab8:	4b68      	ldr	r3, [pc, #416]	; (8006c5c <HAL_RCC_ClockConfig+0x1b8>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 030f 	and.w	r3, r3, #15
 8006ac0:	683a      	ldr	r2, [r7, #0]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d90c      	bls.n	8006ae0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ac6:	4b65      	ldr	r3, [pc, #404]	; (8006c5c <HAL_RCC_ClockConfig+0x1b8>)
 8006ac8:	683a      	ldr	r2, [r7, #0]
 8006aca:	b2d2      	uxtb	r2, r2
 8006acc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ace:	4b63      	ldr	r3, [pc, #396]	; (8006c5c <HAL_RCC_ClockConfig+0x1b8>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 030f 	and.w	r3, r3, #15
 8006ad6:	683a      	ldr	r2, [r7, #0]
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d001      	beq.n	8006ae0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	e0b8      	b.n	8006c52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 0302 	and.w	r3, r3, #2
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d020      	beq.n	8006b2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 0304 	and.w	r3, r3, #4
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d005      	beq.n	8006b04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006af8:	4b59      	ldr	r3, [pc, #356]	; (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	4a58      	ldr	r2, [pc, #352]	; (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006afe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006b02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 0308 	and.w	r3, r3, #8
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d005      	beq.n	8006b1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b10:	4b53      	ldr	r3, [pc, #332]	; (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	4a52      	ldr	r2, [pc, #328]	; (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006b16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006b1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b1c:	4b50      	ldr	r3, [pc, #320]	; (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	494d      	ldr	r1, [pc, #308]	; (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f003 0301 	and.w	r3, r3, #1
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d044      	beq.n	8006bc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d107      	bne.n	8006b52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b42:	4b47      	ldr	r3, [pc, #284]	; (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d119      	bne.n	8006b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e07f      	b.n	8006c52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	2b02      	cmp	r3, #2
 8006b58:	d003      	beq.n	8006b62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b5e:	2b03      	cmp	r3, #3
 8006b60:	d107      	bne.n	8006b72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b62:	4b3f      	ldr	r3, [pc, #252]	; (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d109      	bne.n	8006b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e06f      	b.n	8006c52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b72:	4b3b      	ldr	r3, [pc, #236]	; (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f003 0302 	and.w	r3, r3, #2
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d101      	bne.n	8006b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e067      	b.n	8006c52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b82:	4b37      	ldr	r3, [pc, #220]	; (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	f023 0203 	bic.w	r2, r3, #3
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	4934      	ldr	r1, [pc, #208]	; (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006b90:	4313      	orrs	r3, r2
 8006b92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b94:	f7fc fef8 	bl	8003988 <HAL_GetTick>
 8006b98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b9a:	e00a      	b.n	8006bb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b9c:	f7fc fef4 	bl	8003988 <HAL_GetTick>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	1ad3      	subs	r3, r2, r3
 8006ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d901      	bls.n	8006bb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006bae:	2303      	movs	r3, #3
 8006bb0:	e04f      	b.n	8006c52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bb2:	4b2b      	ldr	r3, [pc, #172]	; (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	f003 020c 	and.w	r2, r3, #12
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d1eb      	bne.n	8006b9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006bc4:	4b25      	ldr	r3, [pc, #148]	; (8006c5c <HAL_RCC_ClockConfig+0x1b8>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 030f 	and.w	r3, r3, #15
 8006bcc:	683a      	ldr	r2, [r7, #0]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d20c      	bcs.n	8006bec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bd2:	4b22      	ldr	r3, [pc, #136]	; (8006c5c <HAL_RCC_ClockConfig+0x1b8>)
 8006bd4:	683a      	ldr	r2, [r7, #0]
 8006bd6:	b2d2      	uxtb	r2, r2
 8006bd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bda:	4b20      	ldr	r3, [pc, #128]	; (8006c5c <HAL_RCC_ClockConfig+0x1b8>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f003 030f 	and.w	r3, r3, #15
 8006be2:	683a      	ldr	r2, [r7, #0]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d001      	beq.n	8006bec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	e032      	b.n	8006c52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f003 0304 	and.w	r3, r3, #4
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d008      	beq.n	8006c0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006bf8:	4b19      	ldr	r3, [pc, #100]	; (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	4916      	ldr	r1, [pc, #88]	; (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006c06:	4313      	orrs	r3, r2
 8006c08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 0308 	and.w	r3, r3, #8
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d009      	beq.n	8006c2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c16:	4b12      	ldr	r3, [pc, #72]	; (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	691b      	ldr	r3, [r3, #16]
 8006c22:	00db      	lsls	r3, r3, #3
 8006c24:	490e      	ldr	r1, [pc, #56]	; (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006c26:	4313      	orrs	r3, r2
 8006c28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006c2a:	f000 f821 	bl	8006c70 <HAL_RCC_GetSysClockFreq>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	4b0b      	ldr	r3, [pc, #44]	; (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	091b      	lsrs	r3, r3, #4
 8006c36:	f003 030f 	and.w	r3, r3, #15
 8006c3a:	490a      	ldr	r1, [pc, #40]	; (8006c64 <HAL_RCC_ClockConfig+0x1c0>)
 8006c3c:	5ccb      	ldrb	r3, [r1, r3]
 8006c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8006c42:	4a09      	ldr	r2, [pc, #36]	; (8006c68 <HAL_RCC_ClockConfig+0x1c4>)
 8006c44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006c46:	4b09      	ldr	r3, [pc, #36]	; (8006c6c <HAL_RCC_ClockConfig+0x1c8>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f7fb f9f0 	bl	8002030 <HAL_InitTick>

  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3710      	adds	r7, #16
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	40023c00 	.word	0x40023c00
 8006c60:	40023800 	.word	0x40023800
 8006c64:	080100d4 	.word	0x080100d4
 8006c68:	20000000 	.word	0x20000000
 8006c6c:	200001d8 	.word	0x200001d8

08006c70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c74:	b094      	sub	sp, #80	; 0x50
 8006c76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	647b      	str	r3, [r7, #68]	; 0x44
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c80:	2300      	movs	r3, #0
 8006c82:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006c84:	2300      	movs	r3, #0
 8006c86:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c88:	4b79      	ldr	r3, [pc, #484]	; (8006e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	f003 030c 	and.w	r3, r3, #12
 8006c90:	2b08      	cmp	r3, #8
 8006c92:	d00d      	beq.n	8006cb0 <HAL_RCC_GetSysClockFreq+0x40>
 8006c94:	2b08      	cmp	r3, #8
 8006c96:	f200 80e1 	bhi.w	8006e5c <HAL_RCC_GetSysClockFreq+0x1ec>
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d002      	beq.n	8006ca4 <HAL_RCC_GetSysClockFreq+0x34>
 8006c9e:	2b04      	cmp	r3, #4
 8006ca0:	d003      	beq.n	8006caa <HAL_RCC_GetSysClockFreq+0x3a>
 8006ca2:	e0db      	b.n	8006e5c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ca4:	4b73      	ldr	r3, [pc, #460]	; (8006e74 <HAL_RCC_GetSysClockFreq+0x204>)
 8006ca6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006ca8:	e0db      	b.n	8006e62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006caa:	4b73      	ldr	r3, [pc, #460]	; (8006e78 <HAL_RCC_GetSysClockFreq+0x208>)
 8006cac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006cae:	e0d8      	b.n	8006e62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006cb0:	4b6f      	ldr	r3, [pc, #444]	; (8006e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cb8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006cba:	4b6d      	ldr	r3, [pc, #436]	; (8006e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d063      	beq.n	8006d8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006cc6:	4b6a      	ldr	r3, [pc, #424]	; (8006e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	099b      	lsrs	r3, r3, #6
 8006ccc:	2200      	movs	r2, #0
 8006cce:	63bb      	str	r3, [r7, #56]	; 0x38
 8006cd0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cd8:	633b      	str	r3, [r7, #48]	; 0x30
 8006cda:	2300      	movs	r3, #0
 8006cdc:	637b      	str	r3, [r7, #52]	; 0x34
 8006cde:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006ce2:	4622      	mov	r2, r4
 8006ce4:	462b      	mov	r3, r5
 8006ce6:	f04f 0000 	mov.w	r0, #0
 8006cea:	f04f 0100 	mov.w	r1, #0
 8006cee:	0159      	lsls	r1, r3, #5
 8006cf0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006cf4:	0150      	lsls	r0, r2, #5
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	460b      	mov	r3, r1
 8006cfa:	4621      	mov	r1, r4
 8006cfc:	1a51      	subs	r1, r2, r1
 8006cfe:	6139      	str	r1, [r7, #16]
 8006d00:	4629      	mov	r1, r5
 8006d02:	eb63 0301 	sbc.w	r3, r3, r1
 8006d06:	617b      	str	r3, [r7, #20]
 8006d08:	f04f 0200 	mov.w	r2, #0
 8006d0c:	f04f 0300 	mov.w	r3, #0
 8006d10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d14:	4659      	mov	r1, fp
 8006d16:	018b      	lsls	r3, r1, #6
 8006d18:	4651      	mov	r1, sl
 8006d1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006d1e:	4651      	mov	r1, sl
 8006d20:	018a      	lsls	r2, r1, #6
 8006d22:	4651      	mov	r1, sl
 8006d24:	ebb2 0801 	subs.w	r8, r2, r1
 8006d28:	4659      	mov	r1, fp
 8006d2a:	eb63 0901 	sbc.w	r9, r3, r1
 8006d2e:	f04f 0200 	mov.w	r2, #0
 8006d32:	f04f 0300 	mov.w	r3, #0
 8006d36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d42:	4690      	mov	r8, r2
 8006d44:	4699      	mov	r9, r3
 8006d46:	4623      	mov	r3, r4
 8006d48:	eb18 0303 	adds.w	r3, r8, r3
 8006d4c:	60bb      	str	r3, [r7, #8]
 8006d4e:	462b      	mov	r3, r5
 8006d50:	eb49 0303 	adc.w	r3, r9, r3
 8006d54:	60fb      	str	r3, [r7, #12]
 8006d56:	f04f 0200 	mov.w	r2, #0
 8006d5a:	f04f 0300 	mov.w	r3, #0
 8006d5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006d62:	4629      	mov	r1, r5
 8006d64:	024b      	lsls	r3, r1, #9
 8006d66:	4621      	mov	r1, r4
 8006d68:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006d6c:	4621      	mov	r1, r4
 8006d6e:	024a      	lsls	r2, r1, #9
 8006d70:	4610      	mov	r0, r2
 8006d72:	4619      	mov	r1, r3
 8006d74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d76:	2200      	movs	r2, #0
 8006d78:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d80:	f7f9 ff22 	bl	8000bc8 <__aeabi_uldivmod>
 8006d84:	4602      	mov	r2, r0
 8006d86:	460b      	mov	r3, r1
 8006d88:	4613      	mov	r3, r2
 8006d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d8c:	e058      	b.n	8006e40 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d8e:	4b38      	ldr	r3, [pc, #224]	; (8006e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	099b      	lsrs	r3, r3, #6
 8006d94:	2200      	movs	r2, #0
 8006d96:	4618      	mov	r0, r3
 8006d98:	4611      	mov	r1, r2
 8006d9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006d9e:	623b      	str	r3, [r7, #32]
 8006da0:	2300      	movs	r3, #0
 8006da2:	627b      	str	r3, [r7, #36]	; 0x24
 8006da4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006da8:	4642      	mov	r2, r8
 8006daa:	464b      	mov	r3, r9
 8006dac:	f04f 0000 	mov.w	r0, #0
 8006db0:	f04f 0100 	mov.w	r1, #0
 8006db4:	0159      	lsls	r1, r3, #5
 8006db6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006dba:	0150      	lsls	r0, r2, #5
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	460b      	mov	r3, r1
 8006dc0:	4641      	mov	r1, r8
 8006dc2:	ebb2 0a01 	subs.w	sl, r2, r1
 8006dc6:	4649      	mov	r1, r9
 8006dc8:	eb63 0b01 	sbc.w	fp, r3, r1
 8006dcc:	f04f 0200 	mov.w	r2, #0
 8006dd0:	f04f 0300 	mov.w	r3, #0
 8006dd4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006dd8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006ddc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006de0:	ebb2 040a 	subs.w	r4, r2, sl
 8006de4:	eb63 050b 	sbc.w	r5, r3, fp
 8006de8:	f04f 0200 	mov.w	r2, #0
 8006dec:	f04f 0300 	mov.w	r3, #0
 8006df0:	00eb      	lsls	r3, r5, #3
 8006df2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006df6:	00e2      	lsls	r2, r4, #3
 8006df8:	4614      	mov	r4, r2
 8006dfa:	461d      	mov	r5, r3
 8006dfc:	4643      	mov	r3, r8
 8006dfe:	18e3      	adds	r3, r4, r3
 8006e00:	603b      	str	r3, [r7, #0]
 8006e02:	464b      	mov	r3, r9
 8006e04:	eb45 0303 	adc.w	r3, r5, r3
 8006e08:	607b      	str	r3, [r7, #4]
 8006e0a:	f04f 0200 	mov.w	r2, #0
 8006e0e:	f04f 0300 	mov.w	r3, #0
 8006e12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006e16:	4629      	mov	r1, r5
 8006e18:	028b      	lsls	r3, r1, #10
 8006e1a:	4621      	mov	r1, r4
 8006e1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006e20:	4621      	mov	r1, r4
 8006e22:	028a      	lsls	r2, r1, #10
 8006e24:	4610      	mov	r0, r2
 8006e26:	4619      	mov	r1, r3
 8006e28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	61bb      	str	r3, [r7, #24]
 8006e2e:	61fa      	str	r2, [r7, #28]
 8006e30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e34:	f7f9 fec8 	bl	8000bc8 <__aeabi_uldivmod>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	460b      	mov	r3, r1
 8006e3c:	4613      	mov	r3, r2
 8006e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006e40:	4b0b      	ldr	r3, [pc, #44]	; (8006e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	0c1b      	lsrs	r3, r3, #16
 8006e46:	f003 0303 	and.w	r3, r3, #3
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	005b      	lsls	r3, r3, #1
 8006e4e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006e50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006e5a:	e002      	b.n	8006e62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e5c:	4b05      	ldr	r3, [pc, #20]	; (8006e74 <HAL_RCC_GetSysClockFreq+0x204>)
 8006e5e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006e60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3750      	adds	r7, #80	; 0x50
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e6e:	bf00      	nop
 8006e70:	40023800 	.word	0x40023800
 8006e74:	00f42400 	.word	0x00f42400
 8006e78:	007a1200 	.word	0x007a1200

08006e7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e80:	4b03      	ldr	r3, [pc, #12]	; (8006e90 <HAL_RCC_GetHCLKFreq+0x14>)
 8006e82:	681b      	ldr	r3, [r3, #0]
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr
 8006e8e:	bf00      	nop
 8006e90:	20000000 	.word	0x20000000

08006e94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006e98:	f7ff fff0 	bl	8006e7c <HAL_RCC_GetHCLKFreq>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	4b05      	ldr	r3, [pc, #20]	; (8006eb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	0a9b      	lsrs	r3, r3, #10
 8006ea4:	f003 0307 	and.w	r3, r3, #7
 8006ea8:	4903      	ldr	r1, [pc, #12]	; (8006eb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006eaa:	5ccb      	ldrb	r3, [r1, r3]
 8006eac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	bd80      	pop	{r7, pc}
 8006eb4:	40023800 	.word	0x40023800
 8006eb8:	080100e4 	.word	0x080100e4

08006ebc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006ec0:	f7ff ffdc 	bl	8006e7c <HAL_RCC_GetHCLKFreq>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	4b05      	ldr	r3, [pc, #20]	; (8006edc <HAL_RCC_GetPCLK2Freq+0x20>)
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	0b5b      	lsrs	r3, r3, #13
 8006ecc:	f003 0307 	and.w	r3, r3, #7
 8006ed0:	4903      	ldr	r1, [pc, #12]	; (8006ee0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ed2:	5ccb      	ldrb	r3, [r1, r3]
 8006ed4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	bd80      	pop	{r7, pc}
 8006edc:	40023800 	.word	0x40023800
 8006ee0:	080100e4 	.word	0x080100e4

08006ee4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b083      	sub	sp, #12
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	220f      	movs	r2, #15
 8006ef2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006ef4:	4b12      	ldr	r3, [pc, #72]	; (8006f40 <HAL_RCC_GetClockConfig+0x5c>)
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	f003 0203 	and.w	r2, r3, #3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006f00:	4b0f      	ldr	r3, [pc, #60]	; (8006f40 <HAL_RCC_GetClockConfig+0x5c>)
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006f0c:	4b0c      	ldr	r3, [pc, #48]	; (8006f40 <HAL_RCC_GetClockConfig+0x5c>)
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006f18:	4b09      	ldr	r3, [pc, #36]	; (8006f40 <HAL_RCC_GetClockConfig+0x5c>)
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	08db      	lsrs	r3, r3, #3
 8006f1e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006f26:	4b07      	ldr	r3, [pc, #28]	; (8006f44 <HAL_RCC_GetClockConfig+0x60>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f003 020f 	and.w	r2, r3, #15
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	601a      	str	r2, [r3, #0]
}
 8006f32:	bf00      	nop
 8006f34:	370c      	adds	r7, #12
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr
 8006f3e:	bf00      	nop
 8006f40:	40023800 	.word	0x40023800
 8006f44:	40023c00 	.word	0x40023c00

08006f48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d101      	bne.n	8006f5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	e07b      	b.n	8007052 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d108      	bne.n	8006f74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f6a:	d009      	beq.n	8006f80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	61da      	str	r2, [r3, #28]
 8006f72:	e005      	b.n	8006f80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d106      	bne.n	8006fa0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f7fa feac 	bl	8001cf8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2202      	movs	r2, #2
 8006fa4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fb6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006fc8:	431a      	orrs	r2, r3
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fd2:	431a      	orrs	r2, r3
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	691b      	ldr	r3, [r3, #16]
 8006fd8:	f003 0302 	and.w	r3, r3, #2
 8006fdc:	431a      	orrs	r2, r3
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	695b      	ldr	r3, [r3, #20]
 8006fe2:	f003 0301 	and.w	r3, r3, #1
 8006fe6:	431a      	orrs	r2, r3
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	699b      	ldr	r3, [r3, #24]
 8006fec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ff0:	431a      	orrs	r2, r3
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	69db      	ldr	r3, [r3, #28]
 8006ff6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ffa:	431a      	orrs	r2, r3
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6a1b      	ldr	r3, [r3, #32]
 8007000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007004:	ea42 0103 	orr.w	r1, r2, r3
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800700c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	430a      	orrs	r2, r1
 8007016:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	699b      	ldr	r3, [r3, #24]
 800701c:	0c1b      	lsrs	r3, r3, #16
 800701e:	f003 0104 	and.w	r1, r3, #4
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007026:	f003 0210 	and.w	r2, r3, #16
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	430a      	orrs	r2, r1
 8007030:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	69da      	ldr	r2, [r3, #28]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007040:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007050:	2300      	movs	r3, #0
}
 8007052:	4618      	mov	r0, r3
 8007054:	3708      	adds	r7, #8
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
	...

0800705c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b088      	sub	sp, #32
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007074:	69bb      	ldr	r3, [r7, #24]
 8007076:	099b      	lsrs	r3, r3, #6
 8007078:	f003 0301 	and.w	r3, r3, #1
 800707c:	2b00      	cmp	r3, #0
 800707e:	d10f      	bne.n	80070a0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007080:	69bb      	ldr	r3, [r7, #24]
 8007082:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007086:	2b00      	cmp	r3, #0
 8007088:	d00a      	beq.n	80070a0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800708a:	69fb      	ldr	r3, [r7, #28]
 800708c:	099b      	lsrs	r3, r3, #6
 800708e:	f003 0301 	and.w	r3, r3, #1
 8007092:	2b00      	cmp	r3, #0
 8007094:	d004      	beq.n	80070a0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	4798      	blx	r3
    return;
 800709e:	e0d7      	b.n	8007250 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80070a0:	69bb      	ldr	r3, [r7, #24]
 80070a2:	085b      	lsrs	r3, r3, #1
 80070a4:	f003 0301 	and.w	r3, r3, #1
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d00a      	beq.n	80070c2 <HAL_SPI_IRQHandler+0x66>
 80070ac:	69fb      	ldr	r3, [r7, #28]
 80070ae:	09db      	lsrs	r3, r3, #7
 80070b0:	f003 0301 	and.w	r3, r3, #1
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d004      	beq.n	80070c2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	4798      	blx	r3
    return;
 80070c0:	e0c6      	b.n	8007250 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	095b      	lsrs	r3, r3, #5
 80070c6:	f003 0301 	and.w	r3, r3, #1
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d10c      	bne.n	80070e8 <HAL_SPI_IRQHandler+0x8c>
 80070ce:	69bb      	ldr	r3, [r7, #24]
 80070d0:	099b      	lsrs	r3, r3, #6
 80070d2:	f003 0301 	and.w	r3, r3, #1
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d106      	bne.n	80070e8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80070da:	69bb      	ldr	r3, [r7, #24]
 80070dc:	0a1b      	lsrs	r3, r3, #8
 80070de:	f003 0301 	and.w	r3, r3, #1
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	f000 80b4 	beq.w	8007250 <HAL_SPI_IRQHandler+0x1f4>
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	095b      	lsrs	r3, r3, #5
 80070ec:	f003 0301 	and.w	r3, r3, #1
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	f000 80ad 	beq.w	8007250 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	099b      	lsrs	r3, r3, #6
 80070fa:	f003 0301 	and.w	r3, r3, #1
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d023      	beq.n	800714a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007108:	b2db      	uxtb	r3, r3
 800710a:	2b03      	cmp	r3, #3
 800710c:	d011      	beq.n	8007132 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007112:	f043 0204 	orr.w	r2, r3, #4
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800711a:	2300      	movs	r3, #0
 800711c:	617b      	str	r3, [r7, #20]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	617b      	str	r3, [r7, #20]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	617b      	str	r3, [r7, #20]
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	e00b      	b.n	800714a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007132:	2300      	movs	r3, #0
 8007134:	613b      	str	r3, [r7, #16]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	68db      	ldr	r3, [r3, #12]
 800713c:	613b      	str	r3, [r7, #16]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	613b      	str	r3, [r7, #16]
 8007146:	693b      	ldr	r3, [r7, #16]
        return;
 8007148:	e082      	b.n	8007250 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800714a:	69bb      	ldr	r3, [r7, #24]
 800714c:	095b      	lsrs	r3, r3, #5
 800714e:	f003 0301 	and.w	r3, r3, #1
 8007152:	2b00      	cmp	r3, #0
 8007154:	d014      	beq.n	8007180 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800715a:	f043 0201 	orr.w	r2, r3, #1
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007162:	2300      	movs	r3, #0
 8007164:	60fb      	str	r3, [r7, #12]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	60fb      	str	r3, [r7, #12]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800717c:	601a      	str	r2, [r3, #0]
 800717e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007180:	69bb      	ldr	r3, [r7, #24]
 8007182:	0a1b      	lsrs	r3, r3, #8
 8007184:	f003 0301 	and.w	r3, r3, #1
 8007188:	2b00      	cmp	r3, #0
 800718a:	d00c      	beq.n	80071a6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007190:	f043 0208 	orr.w	r2, r3, #8
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007198:	2300      	movs	r3, #0
 800719a:	60bb      	str	r3, [r7, #8]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	60bb      	str	r3, [r7, #8]
 80071a4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d04f      	beq.n	800724e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	685a      	ldr	r2, [r3, #4]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80071bc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2201      	movs	r2, #1
 80071c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80071c6:	69fb      	ldr	r3, [r7, #28]
 80071c8:	f003 0302 	and.w	r3, r3, #2
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d104      	bne.n	80071da <HAL_SPI_IRQHandler+0x17e>
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	f003 0301 	and.w	r3, r3, #1
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d034      	beq.n	8007244 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	685a      	ldr	r2, [r3, #4]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f022 0203 	bic.w	r2, r2, #3
 80071e8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d011      	beq.n	8007216 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071f6:	4a18      	ldr	r2, [pc, #96]	; (8007258 <HAL_SPI_IRQHandler+0x1fc>)
 80071f8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071fe:	4618      	mov	r0, r3
 8007200:	f7fc fe66 	bl	8003ed0 <HAL_DMA_Abort_IT>
 8007204:	4603      	mov	r3, r0
 8007206:	2b00      	cmp	r3, #0
 8007208:	d005      	beq.n	8007216 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800720e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800721a:	2b00      	cmp	r3, #0
 800721c:	d016      	beq.n	800724c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007222:	4a0d      	ldr	r2, [pc, #52]	; (8007258 <HAL_SPI_IRQHandler+0x1fc>)
 8007224:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800722a:	4618      	mov	r0, r3
 800722c:	f7fc fe50 	bl	8003ed0 <HAL_DMA_Abort_IT>
 8007230:	4603      	mov	r3, r0
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00a      	beq.n	800724c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800723a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8007242:	e003      	b.n	800724c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 f809 	bl	800725c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800724a:	e000      	b.n	800724e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800724c:	bf00      	nop
    return;
 800724e:	bf00      	nop
  }
}
 8007250:	3720      	adds	r7, #32
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	08007271 	.word	0x08007271

0800725c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007264:	bf00      	nop
 8007266:	370c      	adds	r7, #12
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800727c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2200      	movs	r2, #0
 8007282:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2200      	movs	r2, #0
 8007288:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800728a:	68f8      	ldr	r0, [r7, #12]
 800728c:	f7ff ffe6 	bl	800725c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007290:	bf00      	nop
 8007292:	3710      	adds	r7, #16
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b082      	sub	sp, #8
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d101      	bne.n	80072aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	e041      	b.n	800732e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d106      	bne.n	80072c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f7fa fc2e 	bl	8001b20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2202      	movs	r2, #2
 80072c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	3304      	adds	r3, #4
 80072d4:	4619      	mov	r1, r3
 80072d6:	4610      	mov	r0, r2
 80072d8:	f000 f9ce 	bl	8007678 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2201      	movs	r2, #1
 80072e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2201      	movs	r2, #1
 80072f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2201      	movs	r2, #1
 80072f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2201      	movs	r2, #1
 8007300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2201      	movs	r2, #1
 8007308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2201      	movs	r2, #1
 8007320:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2201      	movs	r2, #1
 8007328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800732c:	2300      	movs	r3, #0
}
 800732e:	4618      	mov	r0, r3
 8007330:	3708      	adds	r7, #8
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}
	...

08007338 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007338:	b480      	push	{r7}
 800733a:	b085      	sub	sp, #20
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007346:	b2db      	uxtb	r3, r3
 8007348:	2b01      	cmp	r3, #1
 800734a:	d001      	beq.n	8007350 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800734c:	2301      	movs	r3, #1
 800734e:	e04e      	b.n	80073ee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2202      	movs	r2, #2
 8007354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	68da      	ldr	r2, [r3, #12]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f042 0201 	orr.w	r2, r2, #1
 8007366:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a23      	ldr	r2, [pc, #140]	; (80073fc <HAL_TIM_Base_Start_IT+0xc4>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d022      	beq.n	80073b8 <HAL_TIM_Base_Start_IT+0x80>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800737a:	d01d      	beq.n	80073b8 <HAL_TIM_Base_Start_IT+0x80>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a1f      	ldr	r2, [pc, #124]	; (8007400 <HAL_TIM_Base_Start_IT+0xc8>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d018      	beq.n	80073b8 <HAL_TIM_Base_Start_IT+0x80>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a1e      	ldr	r2, [pc, #120]	; (8007404 <HAL_TIM_Base_Start_IT+0xcc>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d013      	beq.n	80073b8 <HAL_TIM_Base_Start_IT+0x80>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a1c      	ldr	r2, [pc, #112]	; (8007408 <HAL_TIM_Base_Start_IT+0xd0>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d00e      	beq.n	80073b8 <HAL_TIM_Base_Start_IT+0x80>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a1b      	ldr	r2, [pc, #108]	; (800740c <HAL_TIM_Base_Start_IT+0xd4>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d009      	beq.n	80073b8 <HAL_TIM_Base_Start_IT+0x80>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a19      	ldr	r2, [pc, #100]	; (8007410 <HAL_TIM_Base_Start_IT+0xd8>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d004      	beq.n	80073b8 <HAL_TIM_Base_Start_IT+0x80>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a18      	ldr	r2, [pc, #96]	; (8007414 <HAL_TIM_Base_Start_IT+0xdc>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d111      	bne.n	80073dc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	f003 0307 	and.w	r3, r3, #7
 80073c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2b06      	cmp	r3, #6
 80073c8:	d010      	beq.n	80073ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f042 0201 	orr.w	r2, r2, #1
 80073d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073da:	e007      	b.n	80073ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f042 0201 	orr.w	r2, r2, #1
 80073ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80073ec:	2300      	movs	r3, #0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3714      	adds	r7, #20
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr
 80073fa:	bf00      	nop
 80073fc:	40010000 	.word	0x40010000
 8007400:	40000400 	.word	0x40000400
 8007404:	40000800 	.word	0x40000800
 8007408:	40000c00 	.word	0x40000c00
 800740c:	40010400 	.word	0x40010400
 8007410:	40014000 	.word	0x40014000
 8007414:	40001800 	.word	0x40001800

08007418 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	f003 0302 	and.w	r3, r3, #2
 800742a:	2b02      	cmp	r3, #2
 800742c:	d122      	bne.n	8007474 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	f003 0302 	and.w	r3, r3, #2
 8007438:	2b02      	cmp	r3, #2
 800743a:	d11b      	bne.n	8007474 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f06f 0202 	mvn.w	r2, #2
 8007444:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2201      	movs	r2, #1
 800744a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	699b      	ldr	r3, [r3, #24]
 8007452:	f003 0303 	and.w	r3, r3, #3
 8007456:	2b00      	cmp	r3, #0
 8007458:	d003      	beq.n	8007462 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 f8ee 	bl	800763c <HAL_TIM_IC_CaptureCallback>
 8007460:	e005      	b.n	800746e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 f8e0 	bl	8007628 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 f8f1 	bl	8007650 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	691b      	ldr	r3, [r3, #16]
 800747a:	f003 0304 	and.w	r3, r3, #4
 800747e:	2b04      	cmp	r3, #4
 8007480:	d122      	bne.n	80074c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	f003 0304 	and.w	r3, r3, #4
 800748c:	2b04      	cmp	r3, #4
 800748e:	d11b      	bne.n	80074c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f06f 0204 	mvn.w	r2, #4
 8007498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2202      	movs	r2, #2
 800749e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	699b      	ldr	r3, [r3, #24]
 80074a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d003      	beq.n	80074b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 f8c4 	bl	800763c <HAL_TIM_IC_CaptureCallback>
 80074b4:	e005      	b.n	80074c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 f8b6 	bl	8007628 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 f8c7 	bl	8007650 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2200      	movs	r2, #0
 80074c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	691b      	ldr	r3, [r3, #16]
 80074ce:	f003 0308 	and.w	r3, r3, #8
 80074d2:	2b08      	cmp	r3, #8
 80074d4:	d122      	bne.n	800751c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	f003 0308 	and.w	r3, r3, #8
 80074e0:	2b08      	cmp	r3, #8
 80074e2:	d11b      	bne.n	800751c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f06f 0208 	mvn.w	r2, #8
 80074ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2204      	movs	r2, #4
 80074f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	69db      	ldr	r3, [r3, #28]
 80074fa:	f003 0303 	and.w	r3, r3, #3
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d003      	beq.n	800750a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 f89a 	bl	800763c <HAL_TIM_IC_CaptureCallback>
 8007508:	e005      	b.n	8007516 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 f88c 	bl	8007628 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f000 f89d 	bl	8007650 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2200      	movs	r2, #0
 800751a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	691b      	ldr	r3, [r3, #16]
 8007522:	f003 0310 	and.w	r3, r3, #16
 8007526:	2b10      	cmp	r3, #16
 8007528:	d122      	bne.n	8007570 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	f003 0310 	and.w	r3, r3, #16
 8007534:	2b10      	cmp	r3, #16
 8007536:	d11b      	bne.n	8007570 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f06f 0210 	mvn.w	r2, #16
 8007540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2208      	movs	r2, #8
 8007546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	69db      	ldr	r3, [r3, #28]
 800754e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007552:	2b00      	cmp	r3, #0
 8007554:	d003      	beq.n	800755e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 f870 	bl	800763c <HAL_TIM_IC_CaptureCallback>
 800755c:	e005      	b.n	800756a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 f862 	bl	8007628 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 f873 	bl	8007650 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	691b      	ldr	r3, [r3, #16]
 8007576:	f003 0301 	and.w	r3, r3, #1
 800757a:	2b01      	cmp	r3, #1
 800757c:	d10e      	bne.n	800759c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	68db      	ldr	r3, [r3, #12]
 8007584:	f003 0301 	and.w	r3, r3, #1
 8007588:	2b01      	cmp	r3, #1
 800758a:	d107      	bne.n	800759c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f06f 0201 	mvn.w	r2, #1
 8007594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f7fa fa42 	bl	8001a20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	691b      	ldr	r3, [r3, #16]
 80075a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075a6:	2b80      	cmp	r3, #128	; 0x80
 80075a8:	d10e      	bne.n	80075c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	68db      	ldr	r3, [r3, #12]
 80075b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075b4:	2b80      	cmp	r3, #128	; 0x80
 80075b6:	d107      	bne.n	80075c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80075c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 f902 	bl	80077cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	691b      	ldr	r3, [r3, #16]
 80075ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075d2:	2b40      	cmp	r3, #64	; 0x40
 80075d4:	d10e      	bne.n	80075f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	68db      	ldr	r3, [r3, #12]
 80075dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075e0:	2b40      	cmp	r3, #64	; 0x40
 80075e2:	d107      	bne.n	80075f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80075ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 f838 	bl	8007664 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	691b      	ldr	r3, [r3, #16]
 80075fa:	f003 0320 	and.w	r3, r3, #32
 80075fe:	2b20      	cmp	r3, #32
 8007600:	d10e      	bne.n	8007620 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	68db      	ldr	r3, [r3, #12]
 8007608:	f003 0320 	and.w	r3, r3, #32
 800760c:	2b20      	cmp	r3, #32
 800760e:	d107      	bne.n	8007620 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f06f 0220 	mvn.w	r2, #32
 8007618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 f8cc 	bl	80077b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007620:	bf00      	nop
 8007622:	3708      	adds	r7, #8
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007630:	bf00      	nop
 8007632:	370c      	adds	r7, #12
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007644:	bf00      	nop
 8007646:	370c      	adds	r7, #12
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007658:	bf00      	nop
 800765a:	370c      	adds	r7, #12
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007664:	b480      	push	{r7}
 8007666:	b083      	sub	sp, #12
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800766c:	bf00      	nop
 800766e:	370c      	adds	r7, #12
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr

08007678 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007678:	b480      	push	{r7}
 800767a:	b085      	sub	sp, #20
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	4a40      	ldr	r2, [pc, #256]	; (800778c <TIM_Base_SetConfig+0x114>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d013      	beq.n	80076b8 <TIM_Base_SetConfig+0x40>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007696:	d00f      	beq.n	80076b8 <TIM_Base_SetConfig+0x40>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	4a3d      	ldr	r2, [pc, #244]	; (8007790 <TIM_Base_SetConfig+0x118>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d00b      	beq.n	80076b8 <TIM_Base_SetConfig+0x40>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	4a3c      	ldr	r2, [pc, #240]	; (8007794 <TIM_Base_SetConfig+0x11c>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d007      	beq.n	80076b8 <TIM_Base_SetConfig+0x40>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4a3b      	ldr	r2, [pc, #236]	; (8007798 <TIM_Base_SetConfig+0x120>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d003      	beq.n	80076b8 <TIM_Base_SetConfig+0x40>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	4a3a      	ldr	r2, [pc, #232]	; (800779c <TIM_Base_SetConfig+0x124>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d108      	bne.n	80076ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	68fa      	ldr	r2, [r7, #12]
 80076c6:	4313      	orrs	r3, r2
 80076c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	4a2f      	ldr	r2, [pc, #188]	; (800778c <TIM_Base_SetConfig+0x114>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d02b      	beq.n	800772a <TIM_Base_SetConfig+0xb2>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076d8:	d027      	beq.n	800772a <TIM_Base_SetConfig+0xb2>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	4a2c      	ldr	r2, [pc, #176]	; (8007790 <TIM_Base_SetConfig+0x118>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d023      	beq.n	800772a <TIM_Base_SetConfig+0xb2>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	4a2b      	ldr	r2, [pc, #172]	; (8007794 <TIM_Base_SetConfig+0x11c>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d01f      	beq.n	800772a <TIM_Base_SetConfig+0xb2>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	4a2a      	ldr	r2, [pc, #168]	; (8007798 <TIM_Base_SetConfig+0x120>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d01b      	beq.n	800772a <TIM_Base_SetConfig+0xb2>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	4a29      	ldr	r2, [pc, #164]	; (800779c <TIM_Base_SetConfig+0x124>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d017      	beq.n	800772a <TIM_Base_SetConfig+0xb2>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	4a28      	ldr	r2, [pc, #160]	; (80077a0 <TIM_Base_SetConfig+0x128>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d013      	beq.n	800772a <TIM_Base_SetConfig+0xb2>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	4a27      	ldr	r2, [pc, #156]	; (80077a4 <TIM_Base_SetConfig+0x12c>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d00f      	beq.n	800772a <TIM_Base_SetConfig+0xb2>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	4a26      	ldr	r2, [pc, #152]	; (80077a8 <TIM_Base_SetConfig+0x130>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d00b      	beq.n	800772a <TIM_Base_SetConfig+0xb2>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	4a25      	ldr	r2, [pc, #148]	; (80077ac <TIM_Base_SetConfig+0x134>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d007      	beq.n	800772a <TIM_Base_SetConfig+0xb2>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4a24      	ldr	r2, [pc, #144]	; (80077b0 <TIM_Base_SetConfig+0x138>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d003      	beq.n	800772a <TIM_Base_SetConfig+0xb2>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4a23      	ldr	r2, [pc, #140]	; (80077b4 <TIM_Base_SetConfig+0x13c>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d108      	bne.n	800773c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007730:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	68db      	ldr	r3, [r3, #12]
 8007736:	68fa      	ldr	r2, [r7, #12]
 8007738:	4313      	orrs	r3, r2
 800773a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	695b      	ldr	r3, [r3, #20]
 8007746:	4313      	orrs	r3, r2
 8007748:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	68fa      	ldr	r2, [r7, #12]
 800774e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	689a      	ldr	r2, [r3, #8]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	4a0a      	ldr	r2, [pc, #40]	; (800778c <TIM_Base_SetConfig+0x114>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d003      	beq.n	8007770 <TIM_Base_SetConfig+0xf8>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	4a0c      	ldr	r2, [pc, #48]	; (800779c <TIM_Base_SetConfig+0x124>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d103      	bne.n	8007778 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	691a      	ldr	r2, [r3, #16]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	615a      	str	r2, [r3, #20]
}
 800777e:	bf00      	nop
 8007780:	3714      	adds	r7, #20
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr
 800778a:	bf00      	nop
 800778c:	40010000 	.word	0x40010000
 8007790:	40000400 	.word	0x40000400
 8007794:	40000800 	.word	0x40000800
 8007798:	40000c00 	.word	0x40000c00
 800779c:	40010400 	.word	0x40010400
 80077a0:	40014000 	.word	0x40014000
 80077a4:	40014400 	.word	0x40014400
 80077a8:	40014800 	.word	0x40014800
 80077ac:	40001800 	.word	0x40001800
 80077b0:	40001c00 	.word	0x40001c00
 80077b4:	40002000 	.word	0x40002000

080077b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b083      	sub	sp, #12
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80077c0:	bf00      	nop
 80077c2:	370c      	adds	r7, #12
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr

080077cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b083      	sub	sp, #12
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077d4:	bf00      	nop
 80077d6:	370c      	adds	r7, #12
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr

080077e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b082      	sub	sp, #8
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d101      	bne.n	80077f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	e03f      	b.n	8007872 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d106      	bne.n	800780c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f7fa fb54 	bl	8001eb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2224      	movs	r2, #36	; 0x24
 8007810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	68da      	ldr	r2, [r3, #12]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007822:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 ffed 	bl	8008804 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	691a      	ldr	r2, [r3, #16]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007838:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	695a      	ldr	r2, [r3, #20]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007848:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	68da      	ldr	r2, [r3, #12]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007858:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2220      	movs	r2, #32
 8007864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2220      	movs	r2, #32
 800786c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007870:	2300      	movs	r3, #0
}
 8007872:	4618      	mov	r0, r3
 8007874:	3708      	adds	r7, #8
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}

0800787a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800787a:	b580      	push	{r7, lr}
 800787c:	b08a      	sub	sp, #40	; 0x28
 800787e:	af02      	add	r7, sp, #8
 8007880:	60f8      	str	r0, [r7, #12]
 8007882:	60b9      	str	r1, [r7, #8]
 8007884:	603b      	str	r3, [r7, #0]
 8007886:	4613      	mov	r3, r2
 8007888:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800788a:	2300      	movs	r3, #0
 800788c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007894:	b2db      	uxtb	r3, r3
 8007896:	2b20      	cmp	r3, #32
 8007898:	d17c      	bne.n	8007994 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d002      	beq.n	80078a6 <HAL_UART_Transmit+0x2c>
 80078a0:	88fb      	ldrh	r3, [r7, #6]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d101      	bne.n	80078aa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	e075      	b.n	8007996 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d101      	bne.n	80078b8 <HAL_UART_Transmit+0x3e>
 80078b4:	2302      	movs	r3, #2
 80078b6:	e06e      	b.n	8007996 <HAL_UART_Transmit+0x11c>
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2201      	movs	r2, #1
 80078bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2200      	movs	r2, #0
 80078c4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2221      	movs	r2, #33	; 0x21
 80078ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80078ce:	f7fc f85b 	bl	8003988 <HAL_GetTick>
 80078d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	88fa      	ldrh	r2, [r7, #6]
 80078d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	88fa      	ldrh	r2, [r7, #6]
 80078de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078e8:	d108      	bne.n	80078fc <HAL_UART_Transmit+0x82>
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	691b      	ldr	r3, [r3, #16]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d104      	bne.n	80078fc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80078f2:	2300      	movs	r3, #0
 80078f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	61bb      	str	r3, [r7, #24]
 80078fa:	e003      	b.n	8007904 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007900:	2300      	movs	r3, #0
 8007902:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2200      	movs	r2, #0
 8007908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800790c:	e02a      	b.n	8007964 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	9300      	str	r3, [sp, #0]
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	2200      	movs	r2, #0
 8007916:	2180      	movs	r1, #128	; 0x80
 8007918:	68f8      	ldr	r0, [r7, #12]
 800791a:	f000 fca9 	bl	8008270 <UART_WaitOnFlagUntilTimeout>
 800791e:	4603      	mov	r3, r0
 8007920:	2b00      	cmp	r3, #0
 8007922:	d001      	beq.n	8007928 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007924:	2303      	movs	r3, #3
 8007926:	e036      	b.n	8007996 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007928:	69fb      	ldr	r3, [r7, #28]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d10b      	bne.n	8007946 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800792e:	69bb      	ldr	r3, [r7, #24]
 8007930:	881b      	ldrh	r3, [r3, #0]
 8007932:	461a      	mov	r2, r3
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800793c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800793e:	69bb      	ldr	r3, [r7, #24]
 8007940:	3302      	adds	r3, #2
 8007942:	61bb      	str	r3, [r7, #24]
 8007944:	e007      	b.n	8007956 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007946:	69fb      	ldr	r3, [r7, #28]
 8007948:	781a      	ldrb	r2, [r3, #0]
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007950:	69fb      	ldr	r3, [r7, #28]
 8007952:	3301      	adds	r3, #1
 8007954:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800795a:	b29b      	uxth	r3, r3
 800795c:	3b01      	subs	r3, #1
 800795e:	b29a      	uxth	r2, r3
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007968:	b29b      	uxth	r3, r3
 800796a:	2b00      	cmp	r3, #0
 800796c:	d1cf      	bne.n	800790e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	9300      	str	r3, [sp, #0]
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	2200      	movs	r2, #0
 8007976:	2140      	movs	r1, #64	; 0x40
 8007978:	68f8      	ldr	r0, [r7, #12]
 800797a:	f000 fc79 	bl	8008270 <UART_WaitOnFlagUntilTimeout>
 800797e:	4603      	mov	r3, r0
 8007980:	2b00      	cmp	r3, #0
 8007982:	d001      	beq.n	8007988 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007984:	2303      	movs	r3, #3
 8007986:	e006      	b.n	8007996 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2220      	movs	r2, #32
 800798c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007990:	2300      	movs	r3, #0
 8007992:	e000      	b.n	8007996 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007994:	2302      	movs	r3, #2
  }
}
 8007996:	4618      	mov	r0, r3
 8007998:	3720      	adds	r7, #32
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}

0800799e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800799e:	b580      	push	{r7, lr}
 80079a0:	b084      	sub	sp, #16
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	60f8      	str	r0, [r7, #12]
 80079a6:	60b9      	str	r1, [r7, #8]
 80079a8:	4613      	mov	r3, r2
 80079aa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	2b20      	cmp	r3, #32
 80079b6:	d11d      	bne.n	80079f4 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d002      	beq.n	80079c4 <HAL_UART_Receive_DMA+0x26>
 80079be:	88fb      	ldrh	r3, [r7, #6]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d101      	bne.n	80079c8 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80079c4:	2301      	movs	r3, #1
 80079c6:	e016      	b.n	80079f6 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d101      	bne.n	80079d6 <HAL_UART_Receive_DMA+0x38>
 80079d2:	2302      	movs	r3, #2
 80079d4:	e00f      	b.n	80079f6 <HAL_UART_Receive_DMA+0x58>
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2201      	movs	r2, #1
 80079da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2200      	movs	r2, #0
 80079e2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80079e4:	88fb      	ldrh	r3, [r7, #6]
 80079e6:	461a      	mov	r2, r3
 80079e8:	68b9      	ldr	r1, [r7, #8]
 80079ea:	68f8      	ldr	r0, [r7, #12]
 80079ec:	f000 fcae 	bl	800834c <UART_Start_Receive_DMA>
 80079f0:	4603      	mov	r3, r0
 80079f2:	e000      	b.n	80079f6 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80079f4:	2302      	movs	r3, #2
  }
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3710      	adds	r7, #16
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}

080079fe <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b090      	sub	sp, #64	; 0x40
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007a06:	2300      	movs	r3, #0
 8007a08:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	695b      	ldr	r3, [r3, #20]
 8007a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a14:	2b80      	cmp	r3, #128	; 0x80
 8007a16:	bf0c      	ite	eq
 8007a18:	2301      	moveq	r3, #1
 8007a1a:	2300      	movne	r3, #0
 8007a1c:	b2db      	uxtb	r3, r3
 8007a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	2b21      	cmp	r3, #33	; 0x21
 8007a2a:	d128      	bne.n	8007a7e <HAL_UART_DMAStop+0x80>
 8007a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d025      	beq.n	8007a7e <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	3314      	adds	r3, #20
 8007a38:	627b      	str	r3, [r7, #36]	; 0x24
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3c:	e853 3f00 	ldrex	r3, [r3]
 8007a40:	623b      	str	r3, [r7, #32]
   return(result);
 8007a42:	6a3b      	ldr	r3, [r7, #32]
 8007a44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a48:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	3314      	adds	r3, #20
 8007a50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a52:	633a      	str	r2, [r7, #48]	; 0x30
 8007a54:	62fb      	str	r3, [r7, #44]	; 0x2c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a5a:	e841 2300 	strex	r3, r2, [r1]
 8007a5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d1e5      	bne.n	8007a32 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d004      	beq.n	8007a78 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a72:	4618      	mov	r0, r3
 8007a74:	f7fc f9bc 	bl	8003df0 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 fd01 	bl	8008480 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	695b      	ldr	r3, [r3, #20]
 8007a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a88:	2b40      	cmp	r3, #64	; 0x40
 8007a8a:	bf0c      	ite	eq
 8007a8c:	2301      	moveq	r3, #1
 8007a8e:	2300      	movne	r3, #0
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	2b22      	cmp	r3, #34	; 0x22
 8007a9e:	d128      	bne.n	8007af2 <HAL_UART_DMAStop+0xf4>
 8007aa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d025      	beq.n	8007af2 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	3314      	adds	r3, #20
 8007aac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	e853 3f00 	ldrex	r3, [r3]
 8007ab4:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007abc:	637b      	str	r3, [r7, #52]	; 0x34
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	3314      	adds	r3, #20
 8007ac4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ac6:	61fa      	str	r2, [r7, #28]
 8007ac8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aca:	69b9      	ldr	r1, [r7, #24]
 8007acc:	69fa      	ldr	r2, [r7, #28]
 8007ace:	e841 2300 	strex	r3, r2, [r1]
 8007ad2:	617b      	str	r3, [r7, #20]
   return(result);
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d1e5      	bne.n	8007aa6 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d004      	beq.n	8007aec <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f7fc f982 	bl	8003df0 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 fcef 	bl	80084d0 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8007af2:	2300      	movs	r3, #0
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3740      	adds	r7, #64	; 0x40
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}

08007afc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b0ba      	sub	sp, #232	; 0xe8
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	695b      	ldr	r3, [r3, #20]
 8007b1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007b22:	2300      	movs	r3, #0
 8007b24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b32:	f003 030f 	and.w	r3, r3, #15
 8007b36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007b3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d10f      	bne.n	8007b62 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b46:	f003 0320 	and.w	r3, r3, #32
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d009      	beq.n	8007b62 <HAL_UART_IRQHandler+0x66>
 8007b4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b52:	f003 0320 	and.w	r3, r3, #32
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d003      	beq.n	8007b62 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 fd97 	bl	800868e <UART_Receive_IT>
      return;
 8007b60:	e256      	b.n	8008010 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007b62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	f000 80de 	beq.w	8007d28 <HAL_UART_IRQHandler+0x22c>
 8007b6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b70:	f003 0301 	and.w	r3, r3, #1
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d106      	bne.n	8007b86 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b7c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	f000 80d1 	beq.w	8007d28 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b8a:	f003 0301 	and.w	r3, r3, #1
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d00b      	beq.n	8007baa <HAL_UART_IRQHandler+0xae>
 8007b92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d005      	beq.n	8007baa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba2:	f043 0201 	orr.w	r2, r3, #1
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bae:	f003 0304 	and.w	r3, r3, #4
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d00b      	beq.n	8007bce <HAL_UART_IRQHandler+0xd2>
 8007bb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bba:	f003 0301 	and.w	r3, r3, #1
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d005      	beq.n	8007bce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc6:	f043 0202 	orr.w	r2, r3, #2
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bd2:	f003 0302 	and.w	r3, r3, #2
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d00b      	beq.n	8007bf2 <HAL_UART_IRQHandler+0xf6>
 8007bda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bde:	f003 0301 	and.w	r3, r3, #1
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d005      	beq.n	8007bf2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bea:	f043 0204 	orr.w	r2, r3, #4
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bf6:	f003 0308 	and.w	r3, r3, #8
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d011      	beq.n	8007c22 <HAL_UART_IRQHandler+0x126>
 8007bfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c02:	f003 0320 	and.w	r3, r3, #32
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d105      	bne.n	8007c16 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007c0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c0e:	f003 0301 	and.w	r3, r3, #1
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d005      	beq.n	8007c22 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c1a:	f043 0208 	orr.w	r2, r3, #8
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	f000 81ed 	beq.w	8008006 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c30:	f003 0320 	and.w	r3, r3, #32
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d008      	beq.n	8007c4a <HAL_UART_IRQHandler+0x14e>
 8007c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c3c:	f003 0320 	and.w	r3, r3, #32
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d002      	beq.n	8007c4a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 fd22 	bl	800868e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	695b      	ldr	r3, [r3, #20]
 8007c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c54:	2b40      	cmp	r3, #64	; 0x40
 8007c56:	bf0c      	ite	eq
 8007c58:	2301      	moveq	r3, #1
 8007c5a:	2300      	movne	r3, #0
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c66:	f003 0308 	and.w	r3, r3, #8
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d103      	bne.n	8007c76 <HAL_UART_IRQHandler+0x17a>
 8007c6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d04f      	beq.n	8007d16 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 fc2a 	bl	80084d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	695b      	ldr	r3, [r3, #20]
 8007c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c86:	2b40      	cmp	r3, #64	; 0x40
 8007c88:	d141      	bne.n	8007d0e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	3314      	adds	r3, #20
 8007c90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c98:	e853 3f00 	ldrex	r3, [r3]
 8007c9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007ca0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ca4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ca8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	3314      	adds	r3, #20
 8007cb2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007cb6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007cba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cbe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007cc2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007cc6:	e841 2300 	strex	r3, r2, [r1]
 8007cca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007cce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d1d9      	bne.n	8007c8a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d013      	beq.n	8007d06 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce2:	4a7d      	ldr	r2, [pc, #500]	; (8007ed8 <HAL_UART_IRQHandler+0x3dc>)
 8007ce4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cea:	4618      	mov	r0, r3
 8007cec:	f7fc f8f0 	bl	8003ed0 <HAL_DMA_Abort_IT>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d016      	beq.n	8007d24 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007d00:	4610      	mov	r0, r2
 8007d02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d04:	e00e      	b.n	8007d24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 f9a4 	bl	8008054 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d0c:	e00a      	b.n	8007d24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 f9a0 	bl	8008054 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d14:	e006      	b.n	8007d24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 f99c 	bl	8008054 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007d22:	e170      	b.n	8008006 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d24:	bf00      	nop
    return;
 8007d26:	e16e      	b.n	8008006 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	f040 814a 	bne.w	8007fc6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d36:	f003 0310 	and.w	r3, r3, #16
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	f000 8143 	beq.w	8007fc6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d44:	f003 0310 	and.w	r3, r3, #16
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	f000 813c 	beq.w	8007fc6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007d4e:	2300      	movs	r3, #0
 8007d50:	60bb      	str	r3, [r7, #8]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	60bb      	str	r3, [r7, #8]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	60bb      	str	r3, [r7, #8]
 8007d62:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	695b      	ldr	r3, [r3, #20]
 8007d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d6e:	2b40      	cmp	r3, #64	; 0x40
 8007d70:	f040 80b4 	bne.w	8007edc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007d80:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	f000 8140 	beq.w	800800a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007d8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d92:	429a      	cmp	r2, r3
 8007d94:	f080 8139 	bcs.w	800800a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d9e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da4:	69db      	ldr	r3, [r3, #28]
 8007da6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007daa:	f000 8088 	beq.w	8007ebe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	330c      	adds	r3, #12
 8007db4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007dbc:	e853 3f00 	ldrex	r3, [r3]
 8007dc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007dc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007dc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007dcc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	330c      	adds	r3, #12
 8007dd6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007dda:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007dde:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007de6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007dea:	e841 2300 	strex	r3, r2, [r1]
 8007dee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007df2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d1d9      	bne.n	8007dae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	3314      	adds	r3, #20
 8007e00:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e04:	e853 3f00 	ldrex	r3, [r3]
 8007e08:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007e0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e0c:	f023 0301 	bic.w	r3, r3, #1
 8007e10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	3314      	adds	r3, #20
 8007e1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007e1e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007e22:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e24:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007e26:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007e2a:	e841 2300 	strex	r3, r2, [r1]
 8007e2e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007e30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d1e1      	bne.n	8007dfa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	3314      	adds	r3, #20
 8007e3c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e40:	e853 3f00 	ldrex	r3, [r3]
 8007e44:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007e46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	3314      	adds	r3, #20
 8007e56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007e5a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007e5c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007e60:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007e62:	e841 2300 	strex	r3, r2, [r1]
 8007e66:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007e68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d1e3      	bne.n	8007e36 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2220      	movs	r2, #32
 8007e72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	330c      	adds	r3, #12
 8007e82:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e86:	e853 3f00 	ldrex	r3, [r3]
 8007e8a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007e8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e8e:	f023 0310 	bic.w	r3, r3, #16
 8007e92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	330c      	adds	r3, #12
 8007e9c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007ea0:	65ba      	str	r2, [r7, #88]	; 0x58
 8007ea2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007ea6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ea8:	e841 2300 	strex	r3, r2, [r1]
 8007eac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007eae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d1e3      	bne.n	8007e7c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f7fb ff99 	bl	8003df0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	1ad3      	subs	r3, r2, r3
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	4619      	mov	r1, r3
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 f8ca 	bl	8008068 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007ed4:	e099      	b.n	800800a <HAL_UART_IRQHandler+0x50e>
 8007ed6:	bf00      	nop
 8007ed8:	08008597 	.word	0x08008597
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	1ad3      	subs	r3, r2, r3
 8007ee8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	f000 808b 	beq.w	800800e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007ef8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	f000 8086 	beq.w	800800e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	330c      	adds	r3, #12
 8007f08:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f0c:	e853 3f00 	ldrex	r3, [r3]
 8007f10:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	330c      	adds	r3, #12
 8007f22:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007f26:	647a      	str	r2, [r7, #68]	; 0x44
 8007f28:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007f2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f2e:	e841 2300 	strex	r3, r2, [r1]
 8007f32:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d1e3      	bne.n	8007f02 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	3314      	adds	r3, #20
 8007f40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f44:	e853 3f00 	ldrex	r3, [r3]
 8007f48:	623b      	str	r3, [r7, #32]
   return(result);
 8007f4a:	6a3b      	ldr	r3, [r7, #32]
 8007f4c:	f023 0301 	bic.w	r3, r3, #1
 8007f50:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	3314      	adds	r3, #20
 8007f5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007f5e:	633a      	str	r2, [r7, #48]	; 0x30
 8007f60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f66:	e841 2300 	strex	r3, r2, [r1]
 8007f6a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d1e3      	bne.n	8007f3a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2220      	movs	r2, #32
 8007f76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	330c      	adds	r3, #12
 8007f86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	e853 3f00 	ldrex	r3, [r3]
 8007f8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f023 0310 	bic.w	r3, r3, #16
 8007f96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	330c      	adds	r3, #12
 8007fa0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007fa4:	61fa      	str	r2, [r7, #28]
 8007fa6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa8:	69b9      	ldr	r1, [r7, #24]
 8007faa:	69fa      	ldr	r2, [r7, #28]
 8007fac:	e841 2300 	strex	r3, r2, [r1]
 8007fb0:	617b      	str	r3, [r7, #20]
   return(result);
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d1e3      	bne.n	8007f80 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007fb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 f852 	bl	8008068 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007fc4:	e023      	b.n	800800e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007fc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d009      	beq.n	8007fe6 <HAL_UART_IRQHandler+0x4ea>
 8007fd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d003      	beq.n	8007fe6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 faed 	bl	80085be <UART_Transmit_IT>
    return;
 8007fe4:	e014      	b.n	8008010 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d00e      	beq.n	8008010 <HAL_UART_IRQHandler+0x514>
 8007ff2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d008      	beq.n	8008010 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 fb2d 	bl	800865e <UART_EndTransmit_IT>
    return;
 8008004:	e004      	b.n	8008010 <HAL_UART_IRQHandler+0x514>
    return;
 8008006:	bf00      	nop
 8008008:	e002      	b.n	8008010 <HAL_UART_IRQHandler+0x514>
      return;
 800800a:	bf00      	nop
 800800c:	e000      	b.n	8008010 <HAL_UART_IRQHandler+0x514>
      return;
 800800e:	bf00      	nop
  }
}
 8008010:	37e8      	adds	r7, #232	; 0xe8
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}
 8008016:	bf00      	nop

08008018 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008018:	b480      	push	{r7}
 800801a:	b083      	sub	sp, #12
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008020:	bf00      	nop
 8008022:	370c      	adds	r7, #12
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr

0800802c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800802c:	b480      	push	{r7}
 800802e:	b083      	sub	sp, #12
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008034:	bf00      	nop
 8008036:	370c      	adds	r7, #12
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr

08008040 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008040:	b480      	push	{r7}
 8008042:	b083      	sub	sp, #12
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008048:	bf00      	nop
 800804a:	370c      	adds	r7, #12
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr

08008054 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008054:	b480      	push	{r7}
 8008056:	b083      	sub	sp, #12
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800805c:	bf00      	nop
 800805e:	370c      	adds	r7, #12
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr

08008068 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008068:	b480      	push	{r7}
 800806a:	b083      	sub	sp, #12
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	460b      	mov	r3, r1
 8008072:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008074:	bf00      	nop
 8008076:	370c      	adds	r7, #12
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr

08008080 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b09c      	sub	sp, #112	; 0x70
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800808c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008098:	2b00      	cmp	r3, #0
 800809a:	d172      	bne.n	8008182 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800809c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800809e:	2200      	movs	r2, #0
 80080a0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80080a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	330c      	adds	r3, #12
 80080a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080ac:	e853 3f00 	ldrex	r3, [r3]
 80080b0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80080b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80080ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	330c      	adds	r3, #12
 80080c0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80080c2:	65ba      	str	r2, [r7, #88]	; 0x58
 80080c4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80080c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80080ca:	e841 2300 	strex	r3, r2, [r1]
 80080ce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80080d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d1e5      	bne.n	80080a2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	3314      	adds	r3, #20
 80080dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080e0:	e853 3f00 	ldrex	r3, [r3]
 80080e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80080e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080e8:	f023 0301 	bic.w	r3, r3, #1
 80080ec:	667b      	str	r3, [r7, #100]	; 0x64
 80080ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	3314      	adds	r3, #20
 80080f4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80080f6:	647a      	str	r2, [r7, #68]	; 0x44
 80080f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80080fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80080fe:	e841 2300 	strex	r3, r2, [r1]
 8008102:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008106:	2b00      	cmp	r3, #0
 8008108:	d1e5      	bne.n	80080d6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800810a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	3314      	adds	r3, #20
 8008110:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008114:	e853 3f00 	ldrex	r3, [r3]
 8008118:	623b      	str	r3, [r7, #32]
   return(result);
 800811a:	6a3b      	ldr	r3, [r7, #32]
 800811c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008120:	663b      	str	r3, [r7, #96]	; 0x60
 8008122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	3314      	adds	r3, #20
 8008128:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800812a:	633a      	str	r2, [r7, #48]	; 0x30
 800812c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800812e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008130:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008132:	e841 2300 	strex	r3, r2, [r1]
 8008136:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800813a:	2b00      	cmp	r3, #0
 800813c:	d1e5      	bne.n	800810a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800813e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008140:	2220      	movs	r2, #32
 8008142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008146:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800814a:	2b01      	cmp	r3, #1
 800814c:	d119      	bne.n	8008182 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800814e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	330c      	adds	r3, #12
 8008154:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	e853 3f00 	ldrex	r3, [r3]
 800815c:	60fb      	str	r3, [r7, #12]
   return(result);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	f023 0310 	bic.w	r3, r3, #16
 8008164:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008166:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	330c      	adds	r3, #12
 800816c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800816e:	61fa      	str	r2, [r7, #28]
 8008170:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008172:	69b9      	ldr	r1, [r7, #24]
 8008174:	69fa      	ldr	r2, [r7, #28]
 8008176:	e841 2300 	strex	r3, r2, [r1]
 800817a:	617b      	str	r3, [r7, #20]
   return(result);
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d1e5      	bne.n	800814e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008182:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008186:	2b01      	cmp	r3, #1
 8008188:	d106      	bne.n	8008198 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800818a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800818c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800818e:	4619      	mov	r1, r3
 8008190:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008192:	f7ff ff69 	bl	8008068 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008196:	e002      	b.n	800819e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8008198:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800819a:	f7ff ff47 	bl	800802c <HAL_UART_RxCpltCallback>
}
 800819e:	bf00      	nop
 80081a0:	3770      	adds	r7, #112	; 0x70
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}

080081a6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80081a6:	b580      	push	{r7, lr}
 80081a8:	b084      	sub	sp, #16
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081b2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d108      	bne.n	80081ce <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80081c0:	085b      	lsrs	r3, r3, #1
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	4619      	mov	r1, r3
 80081c6:	68f8      	ldr	r0, [r7, #12]
 80081c8:	f7ff ff4e 	bl	8008068 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80081cc:	e002      	b.n	80081d4 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80081ce:	68f8      	ldr	r0, [r7, #12]
 80081d0:	f7ff ff36 	bl	8008040 <HAL_UART_RxHalfCpltCallback>
}
 80081d4:	bf00      	nop
 80081d6:	3710      	adds	r7, #16
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b084      	sub	sp, #16
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80081e4:	2300      	movs	r3, #0
 80081e6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ec:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	695b      	ldr	r3, [r3, #20]
 80081f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081f8:	2b80      	cmp	r3, #128	; 0x80
 80081fa:	bf0c      	ite	eq
 80081fc:	2301      	moveq	r3, #1
 80081fe:	2300      	movne	r3, #0
 8008200:	b2db      	uxtb	r3, r3
 8008202:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800820a:	b2db      	uxtb	r3, r3
 800820c:	2b21      	cmp	r3, #33	; 0x21
 800820e:	d108      	bne.n	8008222 <UART_DMAError+0x46>
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d005      	beq.n	8008222 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	2200      	movs	r2, #0
 800821a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800821c:	68b8      	ldr	r0, [r7, #8]
 800821e:	f000 f92f 	bl	8008480 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	695b      	ldr	r3, [r3, #20]
 8008228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800822c:	2b40      	cmp	r3, #64	; 0x40
 800822e:	bf0c      	ite	eq
 8008230:	2301      	moveq	r3, #1
 8008232:	2300      	movne	r3, #0
 8008234:	b2db      	uxtb	r3, r3
 8008236:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800823e:	b2db      	uxtb	r3, r3
 8008240:	2b22      	cmp	r3, #34	; 0x22
 8008242:	d108      	bne.n	8008256 <UART_DMAError+0x7a>
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d005      	beq.n	8008256 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	2200      	movs	r2, #0
 800824e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008250:	68b8      	ldr	r0, [r7, #8]
 8008252:	f000 f93d 	bl	80084d0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800825a:	f043 0210 	orr.w	r2, r3, #16
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008262:	68b8      	ldr	r0, [r7, #8]
 8008264:	f7ff fef6 	bl	8008054 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008268:	bf00      	nop
 800826a:	3710      	adds	r7, #16
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b090      	sub	sp, #64	; 0x40
 8008274:	af00      	add	r7, sp, #0
 8008276:	60f8      	str	r0, [r7, #12]
 8008278:	60b9      	str	r1, [r7, #8]
 800827a:	603b      	str	r3, [r7, #0]
 800827c:	4613      	mov	r3, r2
 800827e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008280:	e050      	b.n	8008324 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008282:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008288:	d04c      	beq.n	8008324 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800828a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800828c:	2b00      	cmp	r3, #0
 800828e:	d007      	beq.n	80082a0 <UART_WaitOnFlagUntilTimeout+0x30>
 8008290:	f7fb fb7a 	bl	8003988 <HAL_GetTick>
 8008294:	4602      	mov	r2, r0
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	1ad3      	subs	r3, r2, r3
 800829a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800829c:	429a      	cmp	r2, r3
 800829e:	d241      	bcs.n	8008324 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	330c      	adds	r3, #12
 80082a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082aa:	e853 3f00 	ldrex	r3, [r3]
 80082ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80082b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80082b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	330c      	adds	r3, #12
 80082be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80082c0:	637a      	str	r2, [r7, #52]	; 0x34
 80082c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80082c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082c8:	e841 2300 	strex	r3, r2, [r1]
 80082cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80082ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d1e5      	bne.n	80082a0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	3314      	adds	r3, #20
 80082da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	e853 3f00 	ldrex	r3, [r3]
 80082e2:	613b      	str	r3, [r7, #16]
   return(result);
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	f023 0301 	bic.w	r3, r3, #1
 80082ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	3314      	adds	r3, #20
 80082f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082f4:	623a      	str	r2, [r7, #32]
 80082f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f8:	69f9      	ldr	r1, [r7, #28]
 80082fa:	6a3a      	ldr	r2, [r7, #32]
 80082fc:	e841 2300 	strex	r3, r2, [r1]
 8008300:	61bb      	str	r3, [r7, #24]
   return(result);
 8008302:	69bb      	ldr	r3, [r7, #24]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d1e5      	bne.n	80082d4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2220      	movs	r2, #32
 800830c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2220      	movs	r2, #32
 8008314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2200      	movs	r2, #0
 800831c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008320:	2303      	movs	r3, #3
 8008322:	e00f      	b.n	8008344 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	4013      	ands	r3, r2
 800832e:	68ba      	ldr	r2, [r7, #8]
 8008330:	429a      	cmp	r2, r3
 8008332:	bf0c      	ite	eq
 8008334:	2301      	moveq	r3, #1
 8008336:	2300      	movne	r3, #0
 8008338:	b2db      	uxtb	r3, r3
 800833a:	461a      	mov	r2, r3
 800833c:	79fb      	ldrb	r3, [r7, #7]
 800833e:	429a      	cmp	r2, r3
 8008340:	d09f      	beq.n	8008282 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008342:	2300      	movs	r3, #0
}
 8008344:	4618      	mov	r0, r3
 8008346:	3740      	adds	r7, #64	; 0x40
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b098      	sub	sp, #96	; 0x60
 8008350:	af00      	add	r7, sp, #0
 8008352:	60f8      	str	r0, [r7, #12]
 8008354:	60b9      	str	r1, [r7, #8]
 8008356:	4613      	mov	r3, r2
 8008358:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800835a:	68ba      	ldr	r2, [r7, #8]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	88fa      	ldrh	r2, [r7, #6]
 8008364:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2200      	movs	r2, #0
 800836a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2222      	movs	r2, #34	; 0x22
 8008370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008378:	4a3e      	ldr	r2, [pc, #248]	; (8008474 <UART_Start_Receive_DMA+0x128>)
 800837a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008380:	4a3d      	ldr	r2, [pc, #244]	; (8008478 <UART_Start_Receive_DMA+0x12c>)
 8008382:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008388:	4a3c      	ldr	r2, [pc, #240]	; (800847c <UART_Start_Receive_DMA+0x130>)
 800838a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008390:	2200      	movs	r2, #0
 8008392:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008394:	f107 0308 	add.w	r3, r7, #8
 8008398:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	3304      	adds	r3, #4
 80083a4:	4619      	mov	r1, r3
 80083a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	88fb      	ldrh	r3, [r7, #6]
 80083ac:	f7fb fcc8 	bl	8003d40 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80083b0:	2300      	movs	r3, #0
 80083b2:	613b      	str	r3, [r7, #16]
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	613b      	str	r3, [r7, #16]
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	613b      	str	r3, [r7, #16]
 80083c4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2200      	movs	r2, #0
 80083ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	330c      	adds	r3, #12
 80083d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083d8:	e853 3f00 	ldrex	r3, [r3]
 80083dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80083de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	330c      	adds	r3, #12
 80083ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80083ee:	64fa      	str	r2, [r7, #76]	; 0x4c
 80083f0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80083f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80083f6:	e841 2300 	strex	r3, r2, [r1]
 80083fa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80083fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d1e5      	bne.n	80083ce <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	3314      	adds	r3, #20
 8008408:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800840a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800840c:	e853 3f00 	ldrex	r3, [r3]
 8008410:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008414:	f043 0301 	orr.w	r3, r3, #1
 8008418:	657b      	str	r3, [r7, #84]	; 0x54
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	3314      	adds	r3, #20
 8008420:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008422:	63ba      	str	r2, [r7, #56]	; 0x38
 8008424:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008426:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008428:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800842a:	e841 2300 	strex	r3, r2, [r1]
 800842e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008432:	2b00      	cmp	r3, #0
 8008434:	d1e5      	bne.n	8008402 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	3314      	adds	r3, #20
 800843c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800843e:	69bb      	ldr	r3, [r7, #24]
 8008440:	e853 3f00 	ldrex	r3, [r3]
 8008444:	617b      	str	r3, [r7, #20]
   return(result);
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800844c:	653b      	str	r3, [r7, #80]	; 0x50
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	3314      	adds	r3, #20
 8008454:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008456:	627a      	str	r2, [r7, #36]	; 0x24
 8008458:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800845a:	6a39      	ldr	r1, [r7, #32]
 800845c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800845e:	e841 2300 	strex	r3, r2, [r1]
 8008462:	61fb      	str	r3, [r7, #28]
   return(result);
 8008464:	69fb      	ldr	r3, [r7, #28]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d1e5      	bne.n	8008436 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800846a:	2300      	movs	r3, #0
}
 800846c:	4618      	mov	r0, r3
 800846e:	3760      	adds	r7, #96	; 0x60
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}
 8008474:	08008081 	.word	0x08008081
 8008478:	080081a7 	.word	0x080081a7
 800847c:	080081dd 	.word	0x080081dd

08008480 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008480:	b480      	push	{r7}
 8008482:	b089      	sub	sp, #36	; 0x24
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	330c      	adds	r3, #12
 800848e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	e853 3f00 	ldrex	r3, [r3]
 8008496:	60bb      	str	r3, [r7, #8]
   return(result);
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800849e:	61fb      	str	r3, [r7, #28]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	330c      	adds	r3, #12
 80084a6:	69fa      	ldr	r2, [r7, #28]
 80084a8:	61ba      	str	r2, [r7, #24]
 80084aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ac:	6979      	ldr	r1, [r7, #20]
 80084ae:	69ba      	ldr	r2, [r7, #24]
 80084b0:	e841 2300 	strex	r3, r2, [r1]
 80084b4:	613b      	str	r3, [r7, #16]
   return(result);
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d1e5      	bne.n	8008488 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2220      	movs	r2, #32
 80084c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80084c4:	bf00      	nop
 80084c6:	3724      	adds	r7, #36	; 0x24
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr

080084d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b095      	sub	sp, #84	; 0x54
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	330c      	adds	r3, #12
 80084de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084e2:	e853 3f00 	ldrex	r3, [r3]
 80084e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80084e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	330c      	adds	r3, #12
 80084f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80084f8:	643a      	str	r2, [r7, #64]	; 0x40
 80084fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80084fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008500:	e841 2300 	strex	r3, r2, [r1]
 8008504:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008508:	2b00      	cmp	r3, #0
 800850a:	d1e5      	bne.n	80084d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	3314      	adds	r3, #20
 8008512:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008514:	6a3b      	ldr	r3, [r7, #32]
 8008516:	e853 3f00 	ldrex	r3, [r3]
 800851a:	61fb      	str	r3, [r7, #28]
   return(result);
 800851c:	69fb      	ldr	r3, [r7, #28]
 800851e:	f023 0301 	bic.w	r3, r3, #1
 8008522:	64bb      	str	r3, [r7, #72]	; 0x48
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	3314      	adds	r3, #20
 800852a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800852c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800852e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008530:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008532:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008534:	e841 2300 	strex	r3, r2, [r1]
 8008538:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800853a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853c:	2b00      	cmp	r3, #0
 800853e:	d1e5      	bne.n	800850c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008544:	2b01      	cmp	r3, #1
 8008546:	d119      	bne.n	800857c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	330c      	adds	r3, #12
 800854e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	e853 3f00 	ldrex	r3, [r3]
 8008556:	60bb      	str	r3, [r7, #8]
   return(result);
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	f023 0310 	bic.w	r3, r3, #16
 800855e:	647b      	str	r3, [r7, #68]	; 0x44
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	330c      	adds	r3, #12
 8008566:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008568:	61ba      	str	r2, [r7, #24]
 800856a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800856c:	6979      	ldr	r1, [r7, #20]
 800856e:	69ba      	ldr	r2, [r7, #24]
 8008570:	e841 2300 	strex	r3, r2, [r1]
 8008574:	613b      	str	r3, [r7, #16]
   return(result);
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d1e5      	bne.n	8008548 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2220      	movs	r2, #32
 8008580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2200      	movs	r2, #0
 8008588:	631a      	str	r2, [r3, #48]	; 0x30
}
 800858a:	bf00      	nop
 800858c:	3754      	adds	r7, #84	; 0x54
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr

08008596 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008596:	b580      	push	{r7, lr}
 8008598:	b084      	sub	sp, #16
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2200      	movs	r2, #0
 80085a8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2200      	movs	r2, #0
 80085ae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80085b0:	68f8      	ldr	r0, [r7, #12]
 80085b2:	f7ff fd4f 	bl	8008054 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085b6:	bf00      	nop
 80085b8:	3710      	adds	r7, #16
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}

080085be <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80085be:	b480      	push	{r7}
 80085c0:	b085      	sub	sp, #20
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	2b21      	cmp	r3, #33	; 0x21
 80085d0:	d13e      	bne.n	8008650 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	689b      	ldr	r3, [r3, #8]
 80085d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085da:	d114      	bne.n	8008606 <UART_Transmit_IT+0x48>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	691b      	ldr	r3, [r3, #16]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d110      	bne.n	8008606 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6a1b      	ldr	r3, [r3, #32]
 80085e8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	881b      	ldrh	r3, [r3, #0]
 80085ee:	461a      	mov	r2, r3
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80085f8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6a1b      	ldr	r3, [r3, #32]
 80085fe:	1c9a      	adds	r2, r3, #2
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	621a      	str	r2, [r3, #32]
 8008604:	e008      	b.n	8008618 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6a1b      	ldr	r3, [r3, #32]
 800860a:	1c59      	adds	r1, r3, #1
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	6211      	str	r1, [r2, #32]
 8008610:	781a      	ldrb	r2, [r3, #0]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800861c:	b29b      	uxth	r3, r3
 800861e:	3b01      	subs	r3, #1
 8008620:	b29b      	uxth	r3, r3
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	4619      	mov	r1, r3
 8008626:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008628:	2b00      	cmp	r3, #0
 800862a:	d10f      	bne.n	800864c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	68da      	ldr	r2, [r3, #12]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800863a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	68da      	ldr	r2, [r3, #12]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800864a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800864c:	2300      	movs	r3, #0
 800864e:	e000      	b.n	8008652 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008650:	2302      	movs	r3, #2
  }
}
 8008652:	4618      	mov	r0, r3
 8008654:	3714      	adds	r7, #20
 8008656:	46bd      	mov	sp, r7
 8008658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865c:	4770      	bx	lr

0800865e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800865e:	b580      	push	{r7, lr}
 8008660:	b082      	sub	sp, #8
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	68da      	ldr	r2, [r3, #12]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008674:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2220      	movs	r2, #32
 800867a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f7ff fcca 	bl	8008018 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008684:	2300      	movs	r3, #0
}
 8008686:	4618      	mov	r0, r3
 8008688:	3708      	adds	r7, #8
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}

0800868e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800868e:	b580      	push	{r7, lr}
 8008690:	b08c      	sub	sp, #48	; 0x30
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800869c:	b2db      	uxtb	r3, r3
 800869e:	2b22      	cmp	r3, #34	; 0x22
 80086a0:	f040 80ab 	bne.w	80087fa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086ac:	d117      	bne.n	80086de <UART_Receive_IT+0x50>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	691b      	ldr	r3, [r3, #16]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d113      	bne.n	80086de <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80086b6:	2300      	movs	r3, #0
 80086b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086be:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086cc:	b29a      	uxth	r2, r3
 80086ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086d6:	1c9a      	adds	r2, r3, #2
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	629a      	str	r2, [r3, #40]	; 0x28
 80086dc:	e026      	b.n	800872c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80086e4:	2300      	movs	r3, #0
 80086e6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	689b      	ldr	r3, [r3, #8]
 80086ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086f0:	d007      	beq.n	8008702 <UART_Receive_IT+0x74>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	689b      	ldr	r3, [r3, #8]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d10a      	bne.n	8008710 <UART_Receive_IT+0x82>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	691b      	ldr	r3, [r3, #16]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d106      	bne.n	8008710 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	b2da      	uxtb	r2, r3
 800870a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800870c:	701a      	strb	r2, [r3, #0]
 800870e:	e008      	b.n	8008722 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	b2db      	uxtb	r3, r3
 8008718:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800871c:	b2da      	uxtb	r2, r3
 800871e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008720:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008726:	1c5a      	adds	r2, r3, #1
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008730:	b29b      	uxth	r3, r3
 8008732:	3b01      	subs	r3, #1
 8008734:	b29b      	uxth	r3, r3
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	4619      	mov	r1, r3
 800873a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800873c:	2b00      	cmp	r3, #0
 800873e:	d15a      	bne.n	80087f6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	68da      	ldr	r2, [r3, #12]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f022 0220 	bic.w	r2, r2, #32
 800874e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	68da      	ldr	r2, [r3, #12]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800875e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	695a      	ldr	r2, [r3, #20]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f022 0201 	bic.w	r2, r2, #1
 800876e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2220      	movs	r2, #32
 8008774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800877c:	2b01      	cmp	r3, #1
 800877e:	d135      	bne.n	80087ec <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2200      	movs	r2, #0
 8008784:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	330c      	adds	r3, #12
 800878c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	e853 3f00 	ldrex	r3, [r3]
 8008794:	613b      	str	r3, [r7, #16]
   return(result);
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	f023 0310 	bic.w	r3, r3, #16
 800879c:	627b      	str	r3, [r7, #36]	; 0x24
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	330c      	adds	r3, #12
 80087a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087a6:	623a      	str	r2, [r7, #32]
 80087a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087aa:	69f9      	ldr	r1, [r7, #28]
 80087ac:	6a3a      	ldr	r2, [r7, #32]
 80087ae:	e841 2300 	strex	r3, r2, [r1]
 80087b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80087b4:	69bb      	ldr	r3, [r7, #24]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d1e5      	bne.n	8008786 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f003 0310 	and.w	r3, r3, #16
 80087c4:	2b10      	cmp	r3, #16
 80087c6:	d10a      	bne.n	80087de <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80087c8:	2300      	movs	r3, #0
 80087ca:	60fb      	str	r3, [r7, #12]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	60fb      	str	r3, [r7, #12]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	60fb      	str	r3, [r7, #12]
 80087dc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80087e2:	4619      	mov	r1, r3
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f7ff fc3f 	bl	8008068 <HAL_UARTEx_RxEventCallback>
 80087ea:	e002      	b.n	80087f2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f7ff fc1d 	bl	800802c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80087f2:	2300      	movs	r3, #0
 80087f4:	e002      	b.n	80087fc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80087f6:	2300      	movs	r3, #0
 80087f8:	e000      	b.n	80087fc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80087fa:	2302      	movs	r3, #2
  }
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3730      	adds	r7, #48	; 0x30
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008804:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008808:	b0c0      	sub	sp, #256	; 0x100
 800880a:	af00      	add	r7, sp, #0
 800880c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	691b      	ldr	r3, [r3, #16]
 8008818:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800881c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008820:	68d9      	ldr	r1, [r3, #12]
 8008822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008826:	681a      	ldr	r2, [r3, #0]
 8008828:	ea40 0301 	orr.w	r3, r0, r1
 800882c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800882e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008832:	689a      	ldr	r2, [r3, #8]
 8008834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008838:	691b      	ldr	r3, [r3, #16]
 800883a:	431a      	orrs	r2, r3
 800883c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008840:	695b      	ldr	r3, [r3, #20]
 8008842:	431a      	orrs	r2, r3
 8008844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008848:	69db      	ldr	r3, [r3, #28]
 800884a:	4313      	orrs	r3, r2
 800884c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	68db      	ldr	r3, [r3, #12]
 8008858:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800885c:	f021 010c 	bic.w	r1, r1, #12
 8008860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008864:	681a      	ldr	r2, [r3, #0]
 8008866:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800886a:	430b      	orrs	r3, r1
 800886c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800886e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	695b      	ldr	r3, [r3, #20]
 8008876:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800887a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800887e:	6999      	ldr	r1, [r3, #24]
 8008880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008884:	681a      	ldr	r2, [r3, #0]
 8008886:	ea40 0301 	orr.w	r3, r0, r1
 800888a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800888c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008890:	681a      	ldr	r2, [r3, #0]
 8008892:	4b8f      	ldr	r3, [pc, #572]	; (8008ad0 <UART_SetConfig+0x2cc>)
 8008894:	429a      	cmp	r2, r3
 8008896:	d005      	beq.n	80088a4 <UART_SetConfig+0xa0>
 8008898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800889c:	681a      	ldr	r2, [r3, #0]
 800889e:	4b8d      	ldr	r3, [pc, #564]	; (8008ad4 <UART_SetConfig+0x2d0>)
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d104      	bne.n	80088ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80088a4:	f7fe fb0a 	bl	8006ebc <HAL_RCC_GetPCLK2Freq>
 80088a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80088ac:	e003      	b.n	80088b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80088ae:	f7fe faf1 	bl	8006e94 <HAL_RCC_GetPCLK1Freq>
 80088b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80088b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088ba:	69db      	ldr	r3, [r3, #28]
 80088bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088c0:	f040 810c 	bne.w	8008adc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80088c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80088c8:	2200      	movs	r2, #0
 80088ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80088ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80088d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80088d6:	4622      	mov	r2, r4
 80088d8:	462b      	mov	r3, r5
 80088da:	1891      	adds	r1, r2, r2
 80088dc:	65b9      	str	r1, [r7, #88]	; 0x58
 80088de:	415b      	adcs	r3, r3
 80088e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80088e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80088e6:	4621      	mov	r1, r4
 80088e8:	eb12 0801 	adds.w	r8, r2, r1
 80088ec:	4629      	mov	r1, r5
 80088ee:	eb43 0901 	adc.w	r9, r3, r1
 80088f2:	f04f 0200 	mov.w	r2, #0
 80088f6:	f04f 0300 	mov.w	r3, #0
 80088fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80088fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008902:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008906:	4690      	mov	r8, r2
 8008908:	4699      	mov	r9, r3
 800890a:	4623      	mov	r3, r4
 800890c:	eb18 0303 	adds.w	r3, r8, r3
 8008910:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008914:	462b      	mov	r3, r5
 8008916:	eb49 0303 	adc.w	r3, r9, r3
 800891a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800891e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	2200      	movs	r2, #0
 8008926:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800892a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800892e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008932:	460b      	mov	r3, r1
 8008934:	18db      	adds	r3, r3, r3
 8008936:	653b      	str	r3, [r7, #80]	; 0x50
 8008938:	4613      	mov	r3, r2
 800893a:	eb42 0303 	adc.w	r3, r2, r3
 800893e:	657b      	str	r3, [r7, #84]	; 0x54
 8008940:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008944:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008948:	f7f8 f93e 	bl	8000bc8 <__aeabi_uldivmod>
 800894c:	4602      	mov	r2, r0
 800894e:	460b      	mov	r3, r1
 8008950:	4b61      	ldr	r3, [pc, #388]	; (8008ad8 <UART_SetConfig+0x2d4>)
 8008952:	fba3 2302 	umull	r2, r3, r3, r2
 8008956:	095b      	lsrs	r3, r3, #5
 8008958:	011c      	lsls	r4, r3, #4
 800895a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800895e:	2200      	movs	r2, #0
 8008960:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008964:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008968:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800896c:	4642      	mov	r2, r8
 800896e:	464b      	mov	r3, r9
 8008970:	1891      	adds	r1, r2, r2
 8008972:	64b9      	str	r1, [r7, #72]	; 0x48
 8008974:	415b      	adcs	r3, r3
 8008976:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008978:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800897c:	4641      	mov	r1, r8
 800897e:	eb12 0a01 	adds.w	sl, r2, r1
 8008982:	4649      	mov	r1, r9
 8008984:	eb43 0b01 	adc.w	fp, r3, r1
 8008988:	f04f 0200 	mov.w	r2, #0
 800898c:	f04f 0300 	mov.w	r3, #0
 8008990:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008994:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008998:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800899c:	4692      	mov	sl, r2
 800899e:	469b      	mov	fp, r3
 80089a0:	4643      	mov	r3, r8
 80089a2:	eb1a 0303 	adds.w	r3, sl, r3
 80089a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80089aa:	464b      	mov	r3, r9
 80089ac:	eb4b 0303 	adc.w	r3, fp, r3
 80089b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80089b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	2200      	movs	r2, #0
 80089bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80089c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80089c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80089c8:	460b      	mov	r3, r1
 80089ca:	18db      	adds	r3, r3, r3
 80089cc:	643b      	str	r3, [r7, #64]	; 0x40
 80089ce:	4613      	mov	r3, r2
 80089d0:	eb42 0303 	adc.w	r3, r2, r3
 80089d4:	647b      	str	r3, [r7, #68]	; 0x44
 80089d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80089da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80089de:	f7f8 f8f3 	bl	8000bc8 <__aeabi_uldivmod>
 80089e2:	4602      	mov	r2, r0
 80089e4:	460b      	mov	r3, r1
 80089e6:	4611      	mov	r1, r2
 80089e8:	4b3b      	ldr	r3, [pc, #236]	; (8008ad8 <UART_SetConfig+0x2d4>)
 80089ea:	fba3 2301 	umull	r2, r3, r3, r1
 80089ee:	095b      	lsrs	r3, r3, #5
 80089f0:	2264      	movs	r2, #100	; 0x64
 80089f2:	fb02 f303 	mul.w	r3, r2, r3
 80089f6:	1acb      	subs	r3, r1, r3
 80089f8:	00db      	lsls	r3, r3, #3
 80089fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80089fe:	4b36      	ldr	r3, [pc, #216]	; (8008ad8 <UART_SetConfig+0x2d4>)
 8008a00:	fba3 2302 	umull	r2, r3, r3, r2
 8008a04:	095b      	lsrs	r3, r3, #5
 8008a06:	005b      	lsls	r3, r3, #1
 8008a08:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008a0c:	441c      	add	r4, r3
 8008a0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a12:	2200      	movs	r2, #0
 8008a14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008a18:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008a1c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008a20:	4642      	mov	r2, r8
 8008a22:	464b      	mov	r3, r9
 8008a24:	1891      	adds	r1, r2, r2
 8008a26:	63b9      	str	r1, [r7, #56]	; 0x38
 8008a28:	415b      	adcs	r3, r3
 8008a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008a30:	4641      	mov	r1, r8
 8008a32:	1851      	adds	r1, r2, r1
 8008a34:	6339      	str	r1, [r7, #48]	; 0x30
 8008a36:	4649      	mov	r1, r9
 8008a38:	414b      	adcs	r3, r1
 8008a3a:	637b      	str	r3, [r7, #52]	; 0x34
 8008a3c:	f04f 0200 	mov.w	r2, #0
 8008a40:	f04f 0300 	mov.w	r3, #0
 8008a44:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008a48:	4659      	mov	r1, fp
 8008a4a:	00cb      	lsls	r3, r1, #3
 8008a4c:	4651      	mov	r1, sl
 8008a4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008a52:	4651      	mov	r1, sl
 8008a54:	00ca      	lsls	r2, r1, #3
 8008a56:	4610      	mov	r0, r2
 8008a58:	4619      	mov	r1, r3
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	4642      	mov	r2, r8
 8008a5e:	189b      	adds	r3, r3, r2
 8008a60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008a64:	464b      	mov	r3, r9
 8008a66:	460a      	mov	r2, r1
 8008a68:	eb42 0303 	adc.w	r3, r2, r3
 8008a6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	2200      	movs	r2, #0
 8008a78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008a7c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008a80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008a84:	460b      	mov	r3, r1
 8008a86:	18db      	adds	r3, r3, r3
 8008a88:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a8a:	4613      	mov	r3, r2
 8008a8c:	eb42 0303 	adc.w	r3, r2, r3
 8008a90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008a96:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008a9a:	f7f8 f895 	bl	8000bc8 <__aeabi_uldivmod>
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	4b0d      	ldr	r3, [pc, #52]	; (8008ad8 <UART_SetConfig+0x2d4>)
 8008aa4:	fba3 1302 	umull	r1, r3, r3, r2
 8008aa8:	095b      	lsrs	r3, r3, #5
 8008aaa:	2164      	movs	r1, #100	; 0x64
 8008aac:	fb01 f303 	mul.w	r3, r1, r3
 8008ab0:	1ad3      	subs	r3, r2, r3
 8008ab2:	00db      	lsls	r3, r3, #3
 8008ab4:	3332      	adds	r3, #50	; 0x32
 8008ab6:	4a08      	ldr	r2, [pc, #32]	; (8008ad8 <UART_SetConfig+0x2d4>)
 8008ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8008abc:	095b      	lsrs	r3, r3, #5
 8008abe:	f003 0207 	and.w	r2, r3, #7
 8008ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4422      	add	r2, r4
 8008aca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008acc:	e105      	b.n	8008cda <UART_SetConfig+0x4d6>
 8008ace:	bf00      	nop
 8008ad0:	40011000 	.word	0x40011000
 8008ad4:	40011400 	.word	0x40011400
 8008ad8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008adc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008ae6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008aea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008aee:	4642      	mov	r2, r8
 8008af0:	464b      	mov	r3, r9
 8008af2:	1891      	adds	r1, r2, r2
 8008af4:	6239      	str	r1, [r7, #32]
 8008af6:	415b      	adcs	r3, r3
 8008af8:	627b      	str	r3, [r7, #36]	; 0x24
 8008afa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008afe:	4641      	mov	r1, r8
 8008b00:	1854      	adds	r4, r2, r1
 8008b02:	4649      	mov	r1, r9
 8008b04:	eb43 0501 	adc.w	r5, r3, r1
 8008b08:	f04f 0200 	mov.w	r2, #0
 8008b0c:	f04f 0300 	mov.w	r3, #0
 8008b10:	00eb      	lsls	r3, r5, #3
 8008b12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008b16:	00e2      	lsls	r2, r4, #3
 8008b18:	4614      	mov	r4, r2
 8008b1a:	461d      	mov	r5, r3
 8008b1c:	4643      	mov	r3, r8
 8008b1e:	18e3      	adds	r3, r4, r3
 8008b20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008b24:	464b      	mov	r3, r9
 8008b26:	eb45 0303 	adc.w	r3, r5, r3
 8008b2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	2200      	movs	r2, #0
 8008b36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008b3a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008b3e:	f04f 0200 	mov.w	r2, #0
 8008b42:	f04f 0300 	mov.w	r3, #0
 8008b46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008b4a:	4629      	mov	r1, r5
 8008b4c:	008b      	lsls	r3, r1, #2
 8008b4e:	4621      	mov	r1, r4
 8008b50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008b54:	4621      	mov	r1, r4
 8008b56:	008a      	lsls	r2, r1, #2
 8008b58:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008b5c:	f7f8 f834 	bl	8000bc8 <__aeabi_uldivmod>
 8008b60:	4602      	mov	r2, r0
 8008b62:	460b      	mov	r3, r1
 8008b64:	4b60      	ldr	r3, [pc, #384]	; (8008ce8 <UART_SetConfig+0x4e4>)
 8008b66:	fba3 2302 	umull	r2, r3, r3, r2
 8008b6a:	095b      	lsrs	r3, r3, #5
 8008b6c:	011c      	lsls	r4, r3, #4
 8008b6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b72:	2200      	movs	r2, #0
 8008b74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008b78:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008b7c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008b80:	4642      	mov	r2, r8
 8008b82:	464b      	mov	r3, r9
 8008b84:	1891      	adds	r1, r2, r2
 8008b86:	61b9      	str	r1, [r7, #24]
 8008b88:	415b      	adcs	r3, r3
 8008b8a:	61fb      	str	r3, [r7, #28]
 8008b8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008b90:	4641      	mov	r1, r8
 8008b92:	1851      	adds	r1, r2, r1
 8008b94:	6139      	str	r1, [r7, #16]
 8008b96:	4649      	mov	r1, r9
 8008b98:	414b      	adcs	r3, r1
 8008b9a:	617b      	str	r3, [r7, #20]
 8008b9c:	f04f 0200 	mov.w	r2, #0
 8008ba0:	f04f 0300 	mov.w	r3, #0
 8008ba4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008ba8:	4659      	mov	r1, fp
 8008baa:	00cb      	lsls	r3, r1, #3
 8008bac:	4651      	mov	r1, sl
 8008bae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008bb2:	4651      	mov	r1, sl
 8008bb4:	00ca      	lsls	r2, r1, #3
 8008bb6:	4610      	mov	r0, r2
 8008bb8:	4619      	mov	r1, r3
 8008bba:	4603      	mov	r3, r0
 8008bbc:	4642      	mov	r2, r8
 8008bbe:	189b      	adds	r3, r3, r2
 8008bc0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008bc4:	464b      	mov	r3, r9
 8008bc6:	460a      	mov	r2, r1
 8008bc8:	eb42 0303 	adc.w	r3, r2, r3
 8008bcc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	67bb      	str	r3, [r7, #120]	; 0x78
 8008bda:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008bdc:	f04f 0200 	mov.w	r2, #0
 8008be0:	f04f 0300 	mov.w	r3, #0
 8008be4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008be8:	4649      	mov	r1, r9
 8008bea:	008b      	lsls	r3, r1, #2
 8008bec:	4641      	mov	r1, r8
 8008bee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008bf2:	4641      	mov	r1, r8
 8008bf4:	008a      	lsls	r2, r1, #2
 8008bf6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008bfa:	f7f7 ffe5 	bl	8000bc8 <__aeabi_uldivmod>
 8008bfe:	4602      	mov	r2, r0
 8008c00:	460b      	mov	r3, r1
 8008c02:	4b39      	ldr	r3, [pc, #228]	; (8008ce8 <UART_SetConfig+0x4e4>)
 8008c04:	fba3 1302 	umull	r1, r3, r3, r2
 8008c08:	095b      	lsrs	r3, r3, #5
 8008c0a:	2164      	movs	r1, #100	; 0x64
 8008c0c:	fb01 f303 	mul.w	r3, r1, r3
 8008c10:	1ad3      	subs	r3, r2, r3
 8008c12:	011b      	lsls	r3, r3, #4
 8008c14:	3332      	adds	r3, #50	; 0x32
 8008c16:	4a34      	ldr	r2, [pc, #208]	; (8008ce8 <UART_SetConfig+0x4e4>)
 8008c18:	fba2 2303 	umull	r2, r3, r2, r3
 8008c1c:	095b      	lsrs	r3, r3, #5
 8008c1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008c22:	441c      	add	r4, r3
 8008c24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c28:	2200      	movs	r2, #0
 8008c2a:	673b      	str	r3, [r7, #112]	; 0x70
 8008c2c:	677a      	str	r2, [r7, #116]	; 0x74
 8008c2e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008c32:	4642      	mov	r2, r8
 8008c34:	464b      	mov	r3, r9
 8008c36:	1891      	adds	r1, r2, r2
 8008c38:	60b9      	str	r1, [r7, #8]
 8008c3a:	415b      	adcs	r3, r3
 8008c3c:	60fb      	str	r3, [r7, #12]
 8008c3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008c42:	4641      	mov	r1, r8
 8008c44:	1851      	adds	r1, r2, r1
 8008c46:	6039      	str	r1, [r7, #0]
 8008c48:	4649      	mov	r1, r9
 8008c4a:	414b      	adcs	r3, r1
 8008c4c:	607b      	str	r3, [r7, #4]
 8008c4e:	f04f 0200 	mov.w	r2, #0
 8008c52:	f04f 0300 	mov.w	r3, #0
 8008c56:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008c5a:	4659      	mov	r1, fp
 8008c5c:	00cb      	lsls	r3, r1, #3
 8008c5e:	4651      	mov	r1, sl
 8008c60:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c64:	4651      	mov	r1, sl
 8008c66:	00ca      	lsls	r2, r1, #3
 8008c68:	4610      	mov	r0, r2
 8008c6a:	4619      	mov	r1, r3
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	4642      	mov	r2, r8
 8008c70:	189b      	adds	r3, r3, r2
 8008c72:	66bb      	str	r3, [r7, #104]	; 0x68
 8008c74:	464b      	mov	r3, r9
 8008c76:	460a      	mov	r2, r1
 8008c78:	eb42 0303 	adc.w	r3, r2, r3
 8008c7c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	2200      	movs	r2, #0
 8008c86:	663b      	str	r3, [r7, #96]	; 0x60
 8008c88:	667a      	str	r2, [r7, #100]	; 0x64
 8008c8a:	f04f 0200 	mov.w	r2, #0
 8008c8e:	f04f 0300 	mov.w	r3, #0
 8008c92:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008c96:	4649      	mov	r1, r9
 8008c98:	008b      	lsls	r3, r1, #2
 8008c9a:	4641      	mov	r1, r8
 8008c9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ca0:	4641      	mov	r1, r8
 8008ca2:	008a      	lsls	r2, r1, #2
 8008ca4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008ca8:	f7f7 ff8e 	bl	8000bc8 <__aeabi_uldivmod>
 8008cac:	4602      	mov	r2, r0
 8008cae:	460b      	mov	r3, r1
 8008cb0:	4b0d      	ldr	r3, [pc, #52]	; (8008ce8 <UART_SetConfig+0x4e4>)
 8008cb2:	fba3 1302 	umull	r1, r3, r3, r2
 8008cb6:	095b      	lsrs	r3, r3, #5
 8008cb8:	2164      	movs	r1, #100	; 0x64
 8008cba:	fb01 f303 	mul.w	r3, r1, r3
 8008cbe:	1ad3      	subs	r3, r2, r3
 8008cc0:	011b      	lsls	r3, r3, #4
 8008cc2:	3332      	adds	r3, #50	; 0x32
 8008cc4:	4a08      	ldr	r2, [pc, #32]	; (8008ce8 <UART_SetConfig+0x4e4>)
 8008cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8008cca:	095b      	lsrs	r3, r3, #5
 8008ccc:	f003 020f 	and.w	r2, r3, #15
 8008cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4422      	add	r2, r4
 8008cd8:	609a      	str	r2, [r3, #8]
}
 8008cda:	bf00      	nop
 8008cdc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008ce6:	bf00      	nop
 8008ce8:	51eb851f 	.word	0x51eb851f

08008cec <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b085      	sub	sp, #20
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008cfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008cfe:	2b84      	cmp	r3, #132	; 0x84
 8008d00:	d005      	beq.n	8008d0e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008d02:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	4413      	add	r3, r2
 8008d0a:	3303      	adds	r3, #3
 8008d0c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3714      	adds	r7, #20
 8008d14:	46bd      	mov	sp, r7
 8008d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1a:	4770      	bx	lr

08008d1c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008d20:	f001 fc2a 	bl	800a578 <vTaskStartScheduler>
  
  return osOK;
 8008d24:	2300      	movs	r3, #0
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	bd80      	pop	{r7, pc}

08008d2a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008d2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d2c:	b089      	sub	sp, #36	; 0x24
 8008d2e:	af04      	add	r7, sp, #16
 8008d30:	6078      	str	r0, [r7, #4]
 8008d32:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	695b      	ldr	r3, [r3, #20]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d020      	beq.n	8008d7e <osThreadCreate+0x54>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	699b      	ldr	r3, [r3, #24]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d01c      	beq.n	8008d7e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	685c      	ldr	r4, [r3, #4]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681d      	ldr	r5, [r3, #0]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	691e      	ldr	r6, [r3, #16]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008d56:	4618      	mov	r0, r3
 8008d58:	f7ff ffc8 	bl	8008cec <makeFreeRtosPriority>
 8008d5c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	695b      	ldr	r3, [r3, #20]
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008d66:	9202      	str	r2, [sp, #8]
 8008d68:	9301      	str	r3, [sp, #4]
 8008d6a:	9100      	str	r1, [sp, #0]
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	4632      	mov	r2, r6
 8008d70:	4629      	mov	r1, r5
 8008d72:	4620      	mov	r0, r4
 8008d74:	f001 f9c4 	bl	800a100 <xTaskCreateStatic>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	60fb      	str	r3, [r7, #12]
 8008d7c:	e01c      	b.n	8008db8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	685c      	ldr	r4, [r3, #4]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008d8a:	b29e      	uxth	r6, r3
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008d92:	4618      	mov	r0, r3
 8008d94:	f7ff ffaa 	bl	8008cec <makeFreeRtosPriority>
 8008d98:	4602      	mov	r2, r0
 8008d9a:	f107 030c 	add.w	r3, r7, #12
 8008d9e:	9301      	str	r3, [sp, #4]
 8008da0:	9200      	str	r2, [sp, #0]
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	4632      	mov	r2, r6
 8008da6:	4629      	mov	r1, r5
 8008da8:	4620      	mov	r0, r4
 8008daa:	f001 fa06 	bl	800a1ba <xTaskCreate>
 8008dae:	4603      	mov	r3, r0
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d001      	beq.n	8008db8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008db4:	2300      	movs	r3, #0
 8008db6:	e000      	b.n	8008dba <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008db8:	68fb      	ldr	r3, [r7, #12]
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3714      	adds	r7, #20
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008dc2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008dc2:	b580      	push	{r7, lr}
 8008dc4:	b084      	sub	sp, #16
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d001      	beq.n	8008dd8 <osDelay+0x16>
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	e000      	b.n	8008dda <osDelay+0x18>
 8008dd8:	2301      	movs	r3, #1
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f001 fb32 	bl	800a444 <vTaskDelay>
  
  return osOK;
 8008de0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3710      	adds	r7, #16
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}

08008dea <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8008dea:	b580      	push	{r7, lr}
 8008dec:	b082      	sub	sp, #8
 8008dee:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8008df0:	2020      	movs	r0, #32
 8008df2:	f003 fb31 	bl	800c458 <pvPortMalloc>
 8008df6:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d00a      	beq.n	8008e14 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2200      	movs	r2, #0
 8008e02:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	3304      	adds	r3, #4
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f000 f9bc 	bl	8009186 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2200      	movs	r2, #0
 8008e12:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8008e14:	687b      	ldr	r3, [r7, #4]
	}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3708      	adds	r7, #8
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}
	...

08008e20 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b090      	sub	sp, #64	; 0x40
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	60b9      	str	r1, [r7, #8]
 8008e2a:	607a      	str	r2, [r7, #4]
 8008e2c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8008e32:	2300      	movs	r3, #0
 8008e34:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8008e36:	2300      	movs	r3, #0
 8008e38:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d10a      	bne.n	8008e56 <xEventGroupWaitBits+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e44:	f383 8811 	msr	BASEPRI, r3
 8008e48:	f3bf 8f6f 	isb	sy
 8008e4c:	f3bf 8f4f 	dsb	sy
 8008e50:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008e52:	bf00      	nop
 8008e54:	e7fe      	b.n	8008e54 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d00a      	beq.n	8008e76 <xEventGroupWaitBits+0x56>
	__asm volatile
 8008e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e64:	f383 8811 	msr	BASEPRI, r3
 8008e68:	f3bf 8f6f 	isb	sy
 8008e6c:	f3bf 8f4f 	dsb	sy
 8008e70:	61fb      	str	r3, [r7, #28]
}
 8008e72:	bf00      	nop
 8008e74:	e7fe      	b.n	8008e74 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d10a      	bne.n	8008e92 <xEventGroupWaitBits+0x72>
	__asm volatile
 8008e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e80:	f383 8811 	msr	BASEPRI, r3
 8008e84:	f3bf 8f6f 	isb	sy
 8008e88:	f3bf 8f4f 	dsb	sy
 8008e8c:	61bb      	str	r3, [r7, #24]
}
 8008e8e:	bf00      	nop
 8008e90:	e7fe      	b.n	8008e90 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008e92:	f002 fa1d 	bl	800b2d0 <xTaskGetSchedulerState>
 8008e96:	4603      	mov	r3, r0
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d102      	bne.n	8008ea2 <xEventGroupWaitBits+0x82>
 8008e9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d101      	bne.n	8008ea6 <xEventGroupWaitBits+0x86>
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	e000      	b.n	8008ea8 <xEventGroupWaitBits+0x88>
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d10a      	bne.n	8008ec2 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8008eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb0:	f383 8811 	msr	BASEPRI, r3
 8008eb4:	f3bf 8f6f 	isb	sy
 8008eb8:	f3bf 8f4f 	dsb	sy
 8008ebc:	617b      	str	r3, [r7, #20]
}
 8008ebe:	bf00      	nop
 8008ec0:	e7fe      	b.n	8008ec0 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8008ec2:	f001 fbc1 	bl	800a648 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8008ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8008ecc:	683a      	ldr	r2, [r7, #0]
 8008ece:	68b9      	ldr	r1, [r7, #8]
 8008ed0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ed2:	f000 f936 	bl	8009142 <prvTestWaitCondition>
 8008ed6:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8008ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d00e      	beq.n	8008efc <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8008ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d028      	beq.n	8008f3e <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8008eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eee:	681a      	ldr	r2, [r3, #0]
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	43db      	mvns	r3, r3
 8008ef4:	401a      	ands	r2, r3
 8008ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ef8:	601a      	str	r2, [r3, #0]
 8008efa:	e020      	b.n	8008f3e <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8008efc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d104      	bne.n	8008f0c <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8008f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f04:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8008f06:	2301      	movs	r3, #1
 8008f08:	633b      	str	r3, [r7, #48]	; 0x30
 8008f0a:	e018      	b.n	8008f3e <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d003      	beq.n	8008f1a <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8008f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008f18:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d003      	beq.n	8008f28 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8008f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008f26:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8008f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f2a:	1d18      	adds	r0, r3, #4
 8008f2c:	68ba      	ldr	r2, [r7, #8]
 8008f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f30:	4313      	orrs	r3, r2
 8008f32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f34:	4619      	mov	r1, r3
 8008f36:	f001 fe53 	bl	800abe0 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8008f3e:	f001 fb91 	bl	800a664 <xTaskResumeAll>
 8008f42:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8008f44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d031      	beq.n	8008fae <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8008f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d107      	bne.n	8008f60 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8008f50:	4b19      	ldr	r3, [pc, #100]	; (8008fb8 <xEventGroupWaitBits+0x198>)
 8008f52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f56:	601a      	str	r2, [r3, #0]
 8008f58:	f3bf 8f4f 	dsb	sy
 8008f5c:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8008f60:	f002 fc08 	bl	800b774 <uxTaskResetEventItemValue>
 8008f64:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8008f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d11a      	bne.n	8008fa6 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8008f70:	f003 f950 	bl	800c214 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8008f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8008f7a:	683a      	ldr	r2, [r7, #0]
 8008f7c:	68b9      	ldr	r1, [r7, #8]
 8008f7e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008f80:	f000 f8df 	bl	8009142 <prvTestWaitCondition>
 8008f84:	4603      	mov	r3, r0
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d009      	beq.n	8008f9e <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d006      	beq.n	8008f9e <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8008f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f92:	681a      	ldr	r2, [r3, #0]
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	43db      	mvns	r3, r3
 8008f98:	401a      	ands	r2, r3
 8008f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f9c:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8008fa2:	f003 f967 	bl	800c274 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8008fa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fa8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008fac:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8008fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3740      	adds	r7, #64	; 0x40
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}
 8008fb8:	e000ed04 	.word	0xe000ed04

08008fbc <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b086      	sub	sp, #24
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d10a      	bne.n	8008fe6 <xEventGroupClearBits+0x2a>
	__asm volatile
 8008fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd4:	f383 8811 	msr	BASEPRI, r3
 8008fd8:	f3bf 8f6f 	isb	sy
 8008fdc:	f3bf 8f4f 	dsb	sy
 8008fe0:	60fb      	str	r3, [r7, #12]
}
 8008fe2:	bf00      	nop
 8008fe4:	e7fe      	b.n	8008fe4 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d00a      	beq.n	8009006 <xEventGroupClearBits+0x4a>
	__asm volatile
 8008ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff4:	f383 8811 	msr	BASEPRI, r3
 8008ff8:	f3bf 8f6f 	isb	sy
 8008ffc:	f3bf 8f4f 	dsb	sy
 8009000:	60bb      	str	r3, [r7, #8]
}
 8009002:	bf00      	nop
 8009004:	e7fe      	b.n	8009004 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8009006:	f003 f905 	bl	800c214 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	681a      	ldr	r2, [r3, #0]
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	43db      	mvns	r3, r3
 8009018:	401a      	ands	r2, r3
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 800901e:	f003 f929 	bl	800c274 <vPortExitCritical>

	return uxReturn;
 8009022:	693b      	ldr	r3, [r7, #16]
}
 8009024:	4618      	mov	r0, r3
 8009026:	3718      	adds	r7, #24
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}

0800902c <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b08e      	sub	sp, #56	; 0x38
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8009036:	2300      	movs	r3, #0
 8009038:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800903e:	2300      	movs	r3, #0
 8009040:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d10a      	bne.n	800905e <xEventGroupSetBits+0x32>
	__asm volatile
 8009048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800904c:	f383 8811 	msr	BASEPRI, r3
 8009050:	f3bf 8f6f 	isb	sy
 8009054:	f3bf 8f4f 	dsb	sy
 8009058:	613b      	str	r3, [r7, #16]
}
 800905a:	bf00      	nop
 800905c:	e7fe      	b.n	800905c <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009064:	2b00      	cmp	r3, #0
 8009066:	d00a      	beq.n	800907e <xEventGroupSetBits+0x52>
	__asm volatile
 8009068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800906c:	f383 8811 	msr	BASEPRI, r3
 8009070:	f3bf 8f6f 	isb	sy
 8009074:	f3bf 8f4f 	dsb	sy
 8009078:	60fb      	str	r3, [r7, #12]
}
 800907a:	bf00      	nop
 800907c:	e7fe      	b.n	800907c <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800907e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009080:	3304      	adds	r3, #4
 8009082:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009086:	3308      	adds	r3, #8
 8009088:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800908a:	f001 fadd 	bl	800a648 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800908e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009090:	68db      	ldr	r3, [r3, #12]
 8009092:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8009094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009096:	681a      	ldr	r2, [r3, #0]
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	431a      	orrs	r2, r3
 800909c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800909e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80090a0:	e03c      	b.n	800911c <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80090a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090a4:	685b      	ldr	r3, [r3, #4]
 80090a6:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80090a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80090ae:	2300      	movs	r3, #0
 80090b0:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80090b2:	69bb      	ldr	r3, [r7, #24]
 80090b4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80090b8:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80090ba:	69bb      	ldr	r3, [r7, #24]
 80090bc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80090c0:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d108      	bne.n	80090de <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80090cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ce:	681a      	ldr	r2, [r3, #0]
 80090d0:	69bb      	ldr	r3, [r7, #24]
 80090d2:	4013      	ands	r3, r2
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d00b      	beq.n	80090f0 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80090d8:	2301      	movs	r3, #1
 80090da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80090dc:	e008      	b.n	80090f0 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80090de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e0:	681a      	ldr	r2, [r3, #0]
 80090e2:	69bb      	ldr	r3, [r7, #24]
 80090e4:	4013      	ands	r3, r2
 80090e6:	69ba      	ldr	r2, [r7, #24]
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d101      	bne.n	80090f0 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80090ec:	2301      	movs	r3, #1
 80090ee:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80090f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d010      	beq.n	8009118 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d003      	beq.n	8009108 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8009100:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009102:	69bb      	ldr	r3, [r7, #24]
 8009104:	4313      	orrs	r3, r2
 8009106:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8009108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009110:	4619      	mov	r1, r3
 8009112:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009114:	f001 fe2e 	bl	800ad74 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8009118:	69fb      	ldr	r3, [r7, #28]
 800911a:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800911c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800911e:	6a3b      	ldr	r3, [r7, #32]
 8009120:	429a      	cmp	r2, r3
 8009122:	d1be      	bne.n	80090a2 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8009124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009126:	681a      	ldr	r2, [r3, #0]
 8009128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800912a:	43db      	mvns	r3, r3
 800912c:	401a      	ands	r2, r3
 800912e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009130:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8009132:	f001 fa97 	bl	800a664 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8009136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009138:	681b      	ldr	r3, [r3, #0]
}
 800913a:	4618      	mov	r0, r3
 800913c:	3738      	adds	r7, #56	; 0x38
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}

08009142 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8009142:	b480      	push	{r7}
 8009144:	b087      	sub	sp, #28
 8009146:	af00      	add	r7, sp, #0
 8009148:	60f8      	str	r0, [r7, #12]
 800914a:	60b9      	str	r1, [r7, #8]
 800914c:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800914e:	2300      	movs	r3, #0
 8009150:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d107      	bne.n	8009168 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8009158:	68fa      	ldr	r2, [r7, #12]
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	4013      	ands	r3, r2
 800915e:	2b00      	cmp	r3, #0
 8009160:	d00a      	beq.n	8009178 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8009162:	2301      	movs	r3, #1
 8009164:	617b      	str	r3, [r7, #20]
 8009166:	e007      	b.n	8009178 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8009168:	68fa      	ldr	r2, [r7, #12]
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	4013      	ands	r3, r2
 800916e:	68ba      	ldr	r2, [r7, #8]
 8009170:	429a      	cmp	r2, r3
 8009172:	d101      	bne.n	8009178 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8009174:	2301      	movs	r3, #1
 8009176:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8009178:	697b      	ldr	r3, [r7, #20]
}
 800917a:	4618      	mov	r0, r3
 800917c:	371c      	adds	r7, #28
 800917e:	46bd      	mov	sp, r7
 8009180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009184:	4770      	bx	lr

08009186 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009186:	b480      	push	{r7}
 8009188:	b083      	sub	sp, #12
 800918a:	af00      	add	r7, sp, #0
 800918c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f103 0208 	add.w	r2, r3, #8
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f04f 32ff 	mov.w	r2, #4294967295
 800919e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f103 0208 	add.w	r2, r3, #8
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f103 0208 	add.w	r2, r3, #8
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2200      	movs	r2, #0
 80091b8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80091ba:	bf00      	nop
 80091bc:	370c      	adds	r7, #12
 80091be:	46bd      	mov	sp, r7
 80091c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c4:	4770      	bx	lr

080091c6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80091c6:	b480      	push	{r7}
 80091c8:	b083      	sub	sp, #12
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2200      	movs	r2, #0
 80091d2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80091d4:	bf00      	nop
 80091d6:	370c      	adds	r7, #12
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr

080091e0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80091e0:	b480      	push	{r7}
 80091e2:	b085      	sub	sp, #20
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
 80091e8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	685b      	ldr	r3, [r3, #4]
 80091ee:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	68fa      	ldr	r2, [r7, #12]
 80091f4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	689a      	ldr	r2, [r3, #8]
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	689b      	ldr	r3, [r3, #8]
 8009202:	683a      	ldr	r2, [r7, #0]
 8009204:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	683a      	ldr	r2, [r7, #0]
 800920a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	1c5a      	adds	r2, r3, #1
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	601a      	str	r2, [r3, #0]
}
 800921c:	bf00      	nop
 800921e:	3714      	adds	r7, #20
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr

08009228 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009228:	b480      	push	{r7}
 800922a:	b085      	sub	sp, #20
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800923e:	d103      	bne.n	8009248 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	691b      	ldr	r3, [r3, #16]
 8009244:	60fb      	str	r3, [r7, #12]
 8009246:	e00c      	b.n	8009262 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	3308      	adds	r3, #8
 800924c:	60fb      	str	r3, [r7, #12]
 800924e:	e002      	b.n	8009256 <vListInsert+0x2e>
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	60fb      	str	r3, [r7, #12]
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	685b      	ldr	r3, [r3, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	68ba      	ldr	r2, [r7, #8]
 800925e:	429a      	cmp	r2, r3
 8009260:	d2f6      	bcs.n	8009250 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	685a      	ldr	r2, [r3, #4]
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	685b      	ldr	r3, [r3, #4]
 800926e:	683a      	ldr	r2, [r7, #0]
 8009270:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	68fa      	ldr	r2, [r7, #12]
 8009276:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	683a      	ldr	r2, [r7, #0]
 800927c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	687a      	ldr	r2, [r7, #4]
 8009282:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	1c5a      	adds	r2, r3, #1
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	601a      	str	r2, [r3, #0]
}
 800928e:	bf00      	nop
 8009290:	3714      	adds	r7, #20
 8009292:	46bd      	mov	sp, r7
 8009294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009298:	4770      	bx	lr

0800929a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800929a:	b480      	push	{r7}
 800929c:	b085      	sub	sp, #20
 800929e:	af00      	add	r7, sp, #0
 80092a0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	691b      	ldr	r3, [r3, #16]
 80092a6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	687a      	ldr	r2, [r7, #4]
 80092ae:	6892      	ldr	r2, [r2, #8]
 80092b0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	689b      	ldr	r3, [r3, #8]
 80092b6:	687a      	ldr	r2, [r7, #4]
 80092b8:	6852      	ldr	r2, [r2, #4]
 80092ba:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	687a      	ldr	r2, [r7, #4]
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d103      	bne.n	80092ce <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	689a      	ldr	r2, [r3, #8]
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2200      	movs	r2, #0
 80092d2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	1e5a      	subs	r2, r3, #1
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3714      	adds	r7, #20
 80092e6:	46bd      	mov	sp, r7
 80092e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ec:	4770      	bx	lr
	...

080092f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b084      	sub	sp, #16
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d10a      	bne.n	800931a <xQueueGenericReset+0x2a>
	__asm volatile
 8009304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009308:	f383 8811 	msr	BASEPRI, r3
 800930c:	f3bf 8f6f 	isb	sy
 8009310:	f3bf 8f4f 	dsb	sy
 8009314:	60bb      	str	r3, [r7, #8]
}
 8009316:	bf00      	nop
 8009318:	e7fe      	b.n	8009318 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800931a:	f002 ff7b 	bl	800c214 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681a      	ldr	r2, [r3, #0]
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009326:	68f9      	ldr	r1, [r7, #12]
 8009328:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800932a:	fb01 f303 	mul.w	r3, r1, r3
 800932e:	441a      	add	r2, r3
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	2200      	movs	r2, #0
 8009338:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681a      	ldr	r2, [r3, #0]
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681a      	ldr	r2, [r3, #0]
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800934a:	3b01      	subs	r3, #1
 800934c:	68f9      	ldr	r1, [r7, #12]
 800934e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009350:	fb01 f303 	mul.w	r3, r1, r3
 8009354:	441a      	add	r2, r3
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	22ff      	movs	r2, #255	; 0xff
 800935e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	22ff      	movs	r2, #255	; 0xff
 8009366:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d114      	bne.n	800939a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	691b      	ldr	r3, [r3, #16]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d01a      	beq.n	80093ae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	3310      	adds	r3, #16
 800937c:	4618      	mov	r0, r3
 800937e:	f001 fc97 	bl	800acb0 <xTaskRemoveFromEventList>
 8009382:	4603      	mov	r3, r0
 8009384:	2b00      	cmp	r3, #0
 8009386:	d012      	beq.n	80093ae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009388:	4b0c      	ldr	r3, [pc, #48]	; (80093bc <xQueueGenericReset+0xcc>)
 800938a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800938e:	601a      	str	r2, [r3, #0]
 8009390:	f3bf 8f4f 	dsb	sy
 8009394:	f3bf 8f6f 	isb	sy
 8009398:	e009      	b.n	80093ae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	3310      	adds	r3, #16
 800939e:	4618      	mov	r0, r3
 80093a0:	f7ff fef1 	bl	8009186 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	3324      	adds	r3, #36	; 0x24
 80093a8:	4618      	mov	r0, r3
 80093aa:	f7ff feec 	bl	8009186 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80093ae:	f002 ff61 	bl	800c274 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80093b2:	2301      	movs	r3, #1
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	3710      	adds	r7, #16
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}
 80093bc:	e000ed04 	.word	0xe000ed04

080093c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b08e      	sub	sp, #56	; 0x38
 80093c4:	af02      	add	r7, sp, #8
 80093c6:	60f8      	str	r0, [r7, #12]
 80093c8:	60b9      	str	r1, [r7, #8]
 80093ca:	607a      	str	r2, [r7, #4]
 80093cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d10a      	bne.n	80093ea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80093d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d8:	f383 8811 	msr	BASEPRI, r3
 80093dc:	f3bf 8f6f 	isb	sy
 80093e0:	f3bf 8f4f 	dsb	sy
 80093e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80093e6:	bf00      	nop
 80093e8:	e7fe      	b.n	80093e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d10a      	bne.n	8009406 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80093f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f4:	f383 8811 	msr	BASEPRI, r3
 80093f8:	f3bf 8f6f 	isb	sy
 80093fc:	f3bf 8f4f 	dsb	sy
 8009400:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009402:	bf00      	nop
 8009404:	e7fe      	b.n	8009404 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d002      	beq.n	8009412 <xQueueGenericCreateStatic+0x52>
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d001      	beq.n	8009416 <xQueueGenericCreateStatic+0x56>
 8009412:	2301      	movs	r3, #1
 8009414:	e000      	b.n	8009418 <xQueueGenericCreateStatic+0x58>
 8009416:	2300      	movs	r3, #0
 8009418:	2b00      	cmp	r3, #0
 800941a:	d10a      	bne.n	8009432 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800941c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009420:	f383 8811 	msr	BASEPRI, r3
 8009424:	f3bf 8f6f 	isb	sy
 8009428:	f3bf 8f4f 	dsb	sy
 800942c:	623b      	str	r3, [r7, #32]
}
 800942e:	bf00      	nop
 8009430:	e7fe      	b.n	8009430 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d102      	bne.n	800943e <xQueueGenericCreateStatic+0x7e>
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d101      	bne.n	8009442 <xQueueGenericCreateStatic+0x82>
 800943e:	2301      	movs	r3, #1
 8009440:	e000      	b.n	8009444 <xQueueGenericCreateStatic+0x84>
 8009442:	2300      	movs	r3, #0
 8009444:	2b00      	cmp	r3, #0
 8009446:	d10a      	bne.n	800945e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800944c:	f383 8811 	msr	BASEPRI, r3
 8009450:	f3bf 8f6f 	isb	sy
 8009454:	f3bf 8f4f 	dsb	sy
 8009458:	61fb      	str	r3, [r7, #28]
}
 800945a:	bf00      	nop
 800945c:	e7fe      	b.n	800945c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800945e:	2350      	movs	r3, #80	; 0x50
 8009460:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	2b50      	cmp	r3, #80	; 0x50
 8009466:	d00a      	beq.n	800947e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800946c:	f383 8811 	msr	BASEPRI, r3
 8009470:	f3bf 8f6f 	isb	sy
 8009474:	f3bf 8f4f 	dsb	sy
 8009478:	61bb      	str	r3, [r7, #24]
}
 800947a:	bf00      	nop
 800947c:	e7fe      	b.n	800947c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800947e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009486:	2b00      	cmp	r3, #0
 8009488:	d00d      	beq.n	80094a6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800948a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800948c:	2201      	movs	r2, #1
 800948e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009492:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009498:	9300      	str	r3, [sp, #0]
 800949a:	4613      	mov	r3, r2
 800949c:	687a      	ldr	r2, [r7, #4]
 800949e:	68b9      	ldr	r1, [r7, #8]
 80094a0:	68f8      	ldr	r0, [r7, #12]
 80094a2:	f000 f83f 	bl	8009524 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80094a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3730      	adds	r7, #48	; 0x30
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}

080094b0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b08a      	sub	sp, #40	; 0x28
 80094b4:	af02      	add	r7, sp, #8
 80094b6:	60f8      	str	r0, [r7, #12]
 80094b8:	60b9      	str	r1, [r7, #8]
 80094ba:	4613      	mov	r3, r2
 80094bc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d10a      	bne.n	80094da <xQueueGenericCreate+0x2a>
	__asm volatile
 80094c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c8:	f383 8811 	msr	BASEPRI, r3
 80094cc:	f3bf 8f6f 	isb	sy
 80094d0:	f3bf 8f4f 	dsb	sy
 80094d4:	613b      	str	r3, [r7, #16]
}
 80094d6:	bf00      	nop
 80094d8:	e7fe      	b.n	80094d8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	68ba      	ldr	r2, [r7, #8]
 80094de:	fb02 f303 	mul.w	r3, r2, r3
 80094e2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80094e4:	69fb      	ldr	r3, [r7, #28]
 80094e6:	3350      	adds	r3, #80	; 0x50
 80094e8:	4618      	mov	r0, r3
 80094ea:	f002 ffb5 	bl	800c458 <pvPortMalloc>
 80094ee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80094f0:	69bb      	ldr	r3, [r7, #24]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d011      	beq.n	800951a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80094f6:	69bb      	ldr	r3, [r7, #24]
 80094f8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	3350      	adds	r3, #80	; 0x50
 80094fe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009500:	69bb      	ldr	r3, [r7, #24]
 8009502:	2200      	movs	r2, #0
 8009504:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009508:	79fa      	ldrb	r2, [r7, #7]
 800950a:	69bb      	ldr	r3, [r7, #24]
 800950c:	9300      	str	r3, [sp, #0]
 800950e:	4613      	mov	r3, r2
 8009510:	697a      	ldr	r2, [r7, #20]
 8009512:	68b9      	ldr	r1, [r7, #8]
 8009514:	68f8      	ldr	r0, [r7, #12]
 8009516:	f000 f805 	bl	8009524 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800951a:	69bb      	ldr	r3, [r7, #24]
	}
 800951c:	4618      	mov	r0, r3
 800951e:	3720      	adds	r7, #32
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}

08009524 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b084      	sub	sp, #16
 8009528:	af00      	add	r7, sp, #0
 800952a:	60f8      	str	r0, [r7, #12]
 800952c:	60b9      	str	r1, [r7, #8]
 800952e:	607a      	str	r2, [r7, #4]
 8009530:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d103      	bne.n	8009540 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009538:	69bb      	ldr	r3, [r7, #24]
 800953a:	69ba      	ldr	r2, [r7, #24]
 800953c:	601a      	str	r2, [r3, #0]
 800953e:	e002      	b.n	8009546 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009540:	69bb      	ldr	r3, [r7, #24]
 8009542:	687a      	ldr	r2, [r7, #4]
 8009544:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009546:	69bb      	ldr	r3, [r7, #24]
 8009548:	68fa      	ldr	r2, [r7, #12]
 800954a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800954c:	69bb      	ldr	r3, [r7, #24]
 800954e:	68ba      	ldr	r2, [r7, #8]
 8009550:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009552:	2101      	movs	r1, #1
 8009554:	69b8      	ldr	r0, [r7, #24]
 8009556:	f7ff fecb 	bl	80092f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800955a:	69bb      	ldr	r3, [r7, #24]
 800955c:	78fa      	ldrb	r2, [r7, #3]
 800955e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009562:	bf00      	nop
 8009564:	3710      	adds	r7, #16
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}

0800956a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800956a:	b580      	push	{r7, lr}
 800956c:	b082      	sub	sp, #8
 800956e:	af00      	add	r7, sp, #0
 8009570:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d00e      	beq.n	8009596 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2200      	movs	r2, #0
 800957c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2200      	movs	r2, #0
 8009582:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2200      	movs	r2, #0
 8009588:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800958a:	2300      	movs	r3, #0
 800958c:	2200      	movs	r2, #0
 800958e:	2100      	movs	r1, #0
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f000 f81d 	bl	80095d0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009596:	bf00      	nop
 8009598:	3708      	adds	r7, #8
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}

0800959e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800959e:	b580      	push	{r7, lr}
 80095a0:	b086      	sub	sp, #24
 80095a2:	af00      	add	r7, sp, #0
 80095a4:	4603      	mov	r3, r0
 80095a6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80095a8:	2301      	movs	r3, #1
 80095aa:	617b      	str	r3, [r7, #20]
 80095ac:	2300      	movs	r3, #0
 80095ae:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80095b0:	79fb      	ldrb	r3, [r7, #7]
 80095b2:	461a      	mov	r2, r3
 80095b4:	6939      	ldr	r1, [r7, #16]
 80095b6:	6978      	ldr	r0, [r7, #20]
 80095b8:	f7ff ff7a 	bl	80094b0 <xQueueGenericCreate>
 80095bc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80095be:	68f8      	ldr	r0, [r7, #12]
 80095c0:	f7ff ffd3 	bl	800956a <prvInitialiseMutex>

		return xNewQueue;
 80095c4:	68fb      	ldr	r3, [r7, #12]
	}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3718      	adds	r7, #24
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
	...

080095d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b08e      	sub	sp, #56	; 0x38
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	60f8      	str	r0, [r7, #12]
 80095d8:	60b9      	str	r1, [r7, #8]
 80095da:	607a      	str	r2, [r7, #4]
 80095dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80095de:	2300      	movs	r3, #0
 80095e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80095e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d10a      	bne.n	8009602 <xQueueGenericSend+0x32>
	__asm volatile
 80095ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f0:	f383 8811 	msr	BASEPRI, r3
 80095f4:	f3bf 8f6f 	isb	sy
 80095f8:	f3bf 8f4f 	dsb	sy
 80095fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80095fe:	bf00      	nop
 8009600:	e7fe      	b.n	8009600 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d103      	bne.n	8009610 <xQueueGenericSend+0x40>
 8009608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800960a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800960c:	2b00      	cmp	r3, #0
 800960e:	d101      	bne.n	8009614 <xQueueGenericSend+0x44>
 8009610:	2301      	movs	r3, #1
 8009612:	e000      	b.n	8009616 <xQueueGenericSend+0x46>
 8009614:	2300      	movs	r3, #0
 8009616:	2b00      	cmp	r3, #0
 8009618:	d10a      	bne.n	8009630 <xQueueGenericSend+0x60>
	__asm volatile
 800961a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800961e:	f383 8811 	msr	BASEPRI, r3
 8009622:	f3bf 8f6f 	isb	sy
 8009626:	f3bf 8f4f 	dsb	sy
 800962a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800962c:	bf00      	nop
 800962e:	e7fe      	b.n	800962e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	2b02      	cmp	r3, #2
 8009634:	d103      	bne.n	800963e <xQueueGenericSend+0x6e>
 8009636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800963a:	2b01      	cmp	r3, #1
 800963c:	d101      	bne.n	8009642 <xQueueGenericSend+0x72>
 800963e:	2301      	movs	r3, #1
 8009640:	e000      	b.n	8009644 <xQueueGenericSend+0x74>
 8009642:	2300      	movs	r3, #0
 8009644:	2b00      	cmp	r3, #0
 8009646:	d10a      	bne.n	800965e <xQueueGenericSend+0x8e>
	__asm volatile
 8009648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800964c:	f383 8811 	msr	BASEPRI, r3
 8009650:	f3bf 8f6f 	isb	sy
 8009654:	f3bf 8f4f 	dsb	sy
 8009658:	623b      	str	r3, [r7, #32]
}
 800965a:	bf00      	nop
 800965c:	e7fe      	b.n	800965c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800965e:	f001 fe37 	bl	800b2d0 <xTaskGetSchedulerState>
 8009662:	4603      	mov	r3, r0
 8009664:	2b00      	cmp	r3, #0
 8009666:	d102      	bne.n	800966e <xQueueGenericSend+0x9e>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d101      	bne.n	8009672 <xQueueGenericSend+0xa2>
 800966e:	2301      	movs	r3, #1
 8009670:	e000      	b.n	8009674 <xQueueGenericSend+0xa4>
 8009672:	2300      	movs	r3, #0
 8009674:	2b00      	cmp	r3, #0
 8009676:	d10a      	bne.n	800968e <xQueueGenericSend+0xbe>
	__asm volatile
 8009678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800967c:	f383 8811 	msr	BASEPRI, r3
 8009680:	f3bf 8f6f 	isb	sy
 8009684:	f3bf 8f4f 	dsb	sy
 8009688:	61fb      	str	r3, [r7, #28]
}
 800968a:	bf00      	nop
 800968c:	e7fe      	b.n	800968c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800968e:	f002 fdc1 	bl	800c214 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009694:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800969a:	429a      	cmp	r2, r3
 800969c:	d302      	bcc.n	80096a4 <xQueueGenericSend+0xd4>
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	2b02      	cmp	r3, #2
 80096a2:	d129      	bne.n	80096f8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80096a4:	683a      	ldr	r2, [r7, #0]
 80096a6:	68b9      	ldr	r1, [r7, #8]
 80096a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096aa:	f000 fbbb 	bl	8009e24 <prvCopyDataToQueue>
 80096ae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80096b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d010      	beq.n	80096da <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80096b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ba:	3324      	adds	r3, #36	; 0x24
 80096bc:	4618      	mov	r0, r3
 80096be:	f001 faf7 	bl	800acb0 <xTaskRemoveFromEventList>
 80096c2:	4603      	mov	r3, r0
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d013      	beq.n	80096f0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80096c8:	4b3f      	ldr	r3, [pc, #252]	; (80097c8 <xQueueGenericSend+0x1f8>)
 80096ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096ce:	601a      	str	r2, [r3, #0]
 80096d0:	f3bf 8f4f 	dsb	sy
 80096d4:	f3bf 8f6f 	isb	sy
 80096d8:	e00a      	b.n	80096f0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80096da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d007      	beq.n	80096f0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80096e0:	4b39      	ldr	r3, [pc, #228]	; (80097c8 <xQueueGenericSend+0x1f8>)
 80096e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096e6:	601a      	str	r2, [r3, #0]
 80096e8:	f3bf 8f4f 	dsb	sy
 80096ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80096f0:	f002 fdc0 	bl	800c274 <vPortExitCritical>
				return pdPASS;
 80096f4:	2301      	movs	r3, #1
 80096f6:	e063      	b.n	80097c0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d103      	bne.n	8009706 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80096fe:	f002 fdb9 	bl	800c274 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009702:	2300      	movs	r3, #0
 8009704:	e05c      	b.n	80097c0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009708:	2b00      	cmp	r3, #0
 800970a:	d106      	bne.n	800971a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800970c:	f107 0314 	add.w	r3, r7, #20
 8009710:	4618      	mov	r0, r3
 8009712:	f001 fb91 	bl	800ae38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009716:	2301      	movs	r3, #1
 8009718:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800971a:	f002 fdab 	bl	800c274 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800971e:	f000 ff93 	bl	800a648 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009722:	f002 fd77 	bl	800c214 <vPortEnterCritical>
 8009726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009728:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800972c:	b25b      	sxtb	r3, r3
 800972e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009732:	d103      	bne.n	800973c <xQueueGenericSend+0x16c>
 8009734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009736:	2200      	movs	r2, #0
 8009738:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800973c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800973e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009742:	b25b      	sxtb	r3, r3
 8009744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009748:	d103      	bne.n	8009752 <xQueueGenericSend+0x182>
 800974a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800974c:	2200      	movs	r2, #0
 800974e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009752:	f002 fd8f 	bl	800c274 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009756:	1d3a      	adds	r2, r7, #4
 8009758:	f107 0314 	add.w	r3, r7, #20
 800975c:	4611      	mov	r1, r2
 800975e:	4618      	mov	r0, r3
 8009760:	f001 fb80 	bl	800ae64 <xTaskCheckForTimeOut>
 8009764:	4603      	mov	r3, r0
 8009766:	2b00      	cmp	r3, #0
 8009768:	d124      	bne.n	80097b4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800976a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800976c:	f000 fc52 	bl	800a014 <prvIsQueueFull>
 8009770:	4603      	mov	r3, r0
 8009772:	2b00      	cmp	r3, #0
 8009774:	d018      	beq.n	80097a8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009778:	3310      	adds	r3, #16
 800977a:	687a      	ldr	r2, [r7, #4]
 800977c:	4611      	mov	r1, r2
 800977e:	4618      	mov	r0, r3
 8009780:	f001 fa0a 	bl	800ab98 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009784:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009786:	f000 fbdd 	bl	8009f44 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800978a:	f000 ff6b 	bl	800a664 <xTaskResumeAll>
 800978e:	4603      	mov	r3, r0
 8009790:	2b00      	cmp	r3, #0
 8009792:	f47f af7c 	bne.w	800968e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009796:	4b0c      	ldr	r3, [pc, #48]	; (80097c8 <xQueueGenericSend+0x1f8>)
 8009798:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800979c:	601a      	str	r2, [r3, #0]
 800979e:	f3bf 8f4f 	dsb	sy
 80097a2:	f3bf 8f6f 	isb	sy
 80097a6:	e772      	b.n	800968e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80097a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80097aa:	f000 fbcb 	bl	8009f44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80097ae:	f000 ff59 	bl	800a664 <xTaskResumeAll>
 80097b2:	e76c      	b.n	800968e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80097b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80097b6:	f000 fbc5 	bl	8009f44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80097ba:	f000 ff53 	bl	800a664 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80097be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	3738      	adds	r7, #56	; 0x38
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}
 80097c8:	e000ed04 	.word	0xe000ed04

080097cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b090      	sub	sp, #64	; 0x40
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	60f8      	str	r0, [r7, #12]
 80097d4:	60b9      	str	r1, [r7, #8]
 80097d6:	607a      	str	r2, [r7, #4]
 80097d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80097de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d10a      	bne.n	80097fa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80097e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e8:	f383 8811 	msr	BASEPRI, r3
 80097ec:	f3bf 8f6f 	isb	sy
 80097f0:	f3bf 8f4f 	dsb	sy
 80097f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80097f6:	bf00      	nop
 80097f8:	e7fe      	b.n	80097f8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d103      	bne.n	8009808 <xQueueGenericSendFromISR+0x3c>
 8009800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009804:	2b00      	cmp	r3, #0
 8009806:	d101      	bne.n	800980c <xQueueGenericSendFromISR+0x40>
 8009808:	2301      	movs	r3, #1
 800980a:	e000      	b.n	800980e <xQueueGenericSendFromISR+0x42>
 800980c:	2300      	movs	r3, #0
 800980e:	2b00      	cmp	r3, #0
 8009810:	d10a      	bne.n	8009828 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009816:	f383 8811 	msr	BASEPRI, r3
 800981a:	f3bf 8f6f 	isb	sy
 800981e:	f3bf 8f4f 	dsb	sy
 8009822:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009824:	bf00      	nop
 8009826:	e7fe      	b.n	8009826 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	2b02      	cmp	r3, #2
 800982c:	d103      	bne.n	8009836 <xQueueGenericSendFromISR+0x6a>
 800982e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009832:	2b01      	cmp	r3, #1
 8009834:	d101      	bne.n	800983a <xQueueGenericSendFromISR+0x6e>
 8009836:	2301      	movs	r3, #1
 8009838:	e000      	b.n	800983c <xQueueGenericSendFromISR+0x70>
 800983a:	2300      	movs	r3, #0
 800983c:	2b00      	cmp	r3, #0
 800983e:	d10a      	bne.n	8009856 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009844:	f383 8811 	msr	BASEPRI, r3
 8009848:	f3bf 8f6f 	isb	sy
 800984c:	f3bf 8f4f 	dsb	sy
 8009850:	623b      	str	r3, [r7, #32]
}
 8009852:	bf00      	nop
 8009854:	e7fe      	b.n	8009854 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009856:	f002 fdbf 	bl	800c3d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800985a:	f3ef 8211 	mrs	r2, BASEPRI
 800985e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009862:	f383 8811 	msr	BASEPRI, r3
 8009866:	f3bf 8f6f 	isb	sy
 800986a:	f3bf 8f4f 	dsb	sy
 800986e:	61fa      	str	r2, [r7, #28]
 8009870:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009872:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009874:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009878:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800987a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800987c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800987e:	429a      	cmp	r2, r3
 8009880:	d302      	bcc.n	8009888 <xQueueGenericSendFromISR+0xbc>
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	2b02      	cmp	r3, #2
 8009886:	d12f      	bne.n	80098e8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800988a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800988e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009896:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009898:	683a      	ldr	r2, [r7, #0]
 800989a:	68b9      	ldr	r1, [r7, #8]
 800989c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800989e:	f000 fac1 	bl	8009e24 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80098a2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80098a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098aa:	d112      	bne.n	80098d2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80098ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d016      	beq.n	80098e2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80098b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098b6:	3324      	adds	r3, #36	; 0x24
 80098b8:	4618      	mov	r0, r3
 80098ba:	f001 f9f9 	bl	800acb0 <xTaskRemoveFromEventList>
 80098be:	4603      	mov	r3, r0
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d00e      	beq.n	80098e2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d00b      	beq.n	80098e2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2201      	movs	r2, #1
 80098ce:	601a      	str	r2, [r3, #0]
 80098d0:	e007      	b.n	80098e2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80098d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80098d6:	3301      	adds	r3, #1
 80098d8:	b2db      	uxtb	r3, r3
 80098da:	b25a      	sxtb	r2, r3
 80098dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80098e2:	2301      	movs	r3, #1
 80098e4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80098e6:	e001      	b.n	80098ec <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80098e8:	2300      	movs	r3, #0
 80098ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098ee:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80098f6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80098f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3740      	adds	r7, #64	; 0x40
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}

08009902 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009902:	b580      	push	{r7, lr}
 8009904:	b08e      	sub	sp, #56	; 0x38
 8009906:	af00      	add	r7, sp, #0
 8009908:	6078      	str	r0, [r7, #4]
 800990a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009912:	2b00      	cmp	r3, #0
 8009914:	d10a      	bne.n	800992c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8009916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800991a:	f383 8811 	msr	BASEPRI, r3
 800991e:	f3bf 8f6f 	isb	sy
 8009922:	f3bf 8f4f 	dsb	sy
 8009926:	623b      	str	r3, [r7, #32]
}
 8009928:	bf00      	nop
 800992a:	e7fe      	b.n	800992a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800992c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800992e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009930:	2b00      	cmp	r3, #0
 8009932:	d00a      	beq.n	800994a <xQueueGiveFromISR+0x48>
	__asm volatile
 8009934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009938:	f383 8811 	msr	BASEPRI, r3
 800993c:	f3bf 8f6f 	isb	sy
 8009940:	f3bf 8f4f 	dsb	sy
 8009944:	61fb      	str	r3, [r7, #28]
}
 8009946:	bf00      	nop
 8009948:	e7fe      	b.n	8009948 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800994a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d103      	bne.n	800995a <xQueueGiveFromISR+0x58>
 8009952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009954:	689b      	ldr	r3, [r3, #8]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d101      	bne.n	800995e <xQueueGiveFromISR+0x5c>
 800995a:	2301      	movs	r3, #1
 800995c:	e000      	b.n	8009960 <xQueueGiveFromISR+0x5e>
 800995e:	2300      	movs	r3, #0
 8009960:	2b00      	cmp	r3, #0
 8009962:	d10a      	bne.n	800997a <xQueueGiveFromISR+0x78>
	__asm volatile
 8009964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009968:	f383 8811 	msr	BASEPRI, r3
 800996c:	f3bf 8f6f 	isb	sy
 8009970:	f3bf 8f4f 	dsb	sy
 8009974:	61bb      	str	r3, [r7, #24]
}
 8009976:	bf00      	nop
 8009978:	e7fe      	b.n	8009978 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800997a:	f002 fd2d 	bl	800c3d8 <vPortValidateInterruptPriority>
	__asm volatile
 800997e:	f3ef 8211 	mrs	r2, BASEPRI
 8009982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009986:	f383 8811 	msr	BASEPRI, r3
 800998a:	f3bf 8f6f 	isb	sy
 800998e:	f3bf 8f4f 	dsb	sy
 8009992:	617a      	str	r2, [r7, #20]
 8009994:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009996:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009998:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800999a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800999c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800999e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80099a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099a6:	429a      	cmp	r2, r3
 80099a8:	d22b      	bcs.n	8009a02 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80099aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80099b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099b6:	1c5a      	adds	r2, r3, #1
 80099b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ba:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80099bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80099c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099c4:	d112      	bne.n	80099ec <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80099c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d016      	beq.n	80099fc <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80099ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d0:	3324      	adds	r3, #36	; 0x24
 80099d2:	4618      	mov	r0, r3
 80099d4:	f001 f96c 	bl	800acb0 <xTaskRemoveFromEventList>
 80099d8:	4603      	mov	r3, r0
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d00e      	beq.n	80099fc <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d00b      	beq.n	80099fc <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	2201      	movs	r2, #1
 80099e8:	601a      	str	r2, [r3, #0]
 80099ea:	e007      	b.n	80099fc <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80099ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099f0:	3301      	adds	r3, #1
 80099f2:	b2db      	uxtb	r3, r3
 80099f4:	b25a      	sxtb	r2, r3
 80099f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80099fc:	2301      	movs	r3, #1
 80099fe:	637b      	str	r3, [r7, #52]	; 0x34
 8009a00:	e001      	b.n	8009a06 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009a02:	2300      	movs	r3, #0
 8009a04:	637b      	str	r3, [r7, #52]	; 0x34
 8009a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a08:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	f383 8811 	msr	BASEPRI, r3
}
 8009a10:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3738      	adds	r7, #56	; 0x38
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}

08009a1c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b08c      	sub	sp, #48	; 0x30
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	60f8      	str	r0, [r7, #12]
 8009a24:	60b9      	str	r1, [r7, #8]
 8009a26:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d10a      	bne.n	8009a4c <xQueueReceive+0x30>
	__asm volatile
 8009a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a3a:	f383 8811 	msr	BASEPRI, r3
 8009a3e:	f3bf 8f6f 	isb	sy
 8009a42:	f3bf 8f4f 	dsb	sy
 8009a46:	623b      	str	r3, [r7, #32]
}
 8009a48:	bf00      	nop
 8009a4a:	e7fe      	b.n	8009a4a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d103      	bne.n	8009a5a <xQueueReceive+0x3e>
 8009a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d101      	bne.n	8009a5e <xQueueReceive+0x42>
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	e000      	b.n	8009a60 <xQueueReceive+0x44>
 8009a5e:	2300      	movs	r3, #0
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d10a      	bne.n	8009a7a <xQueueReceive+0x5e>
	__asm volatile
 8009a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a68:	f383 8811 	msr	BASEPRI, r3
 8009a6c:	f3bf 8f6f 	isb	sy
 8009a70:	f3bf 8f4f 	dsb	sy
 8009a74:	61fb      	str	r3, [r7, #28]
}
 8009a76:	bf00      	nop
 8009a78:	e7fe      	b.n	8009a78 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009a7a:	f001 fc29 	bl	800b2d0 <xTaskGetSchedulerState>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d102      	bne.n	8009a8a <xQueueReceive+0x6e>
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d101      	bne.n	8009a8e <xQueueReceive+0x72>
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	e000      	b.n	8009a90 <xQueueReceive+0x74>
 8009a8e:	2300      	movs	r3, #0
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d10a      	bne.n	8009aaa <xQueueReceive+0x8e>
	__asm volatile
 8009a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a98:	f383 8811 	msr	BASEPRI, r3
 8009a9c:	f3bf 8f6f 	isb	sy
 8009aa0:	f3bf 8f4f 	dsb	sy
 8009aa4:	61bb      	str	r3, [r7, #24]
}
 8009aa6:	bf00      	nop
 8009aa8:	e7fe      	b.n	8009aa8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009aaa:	f002 fbb3 	bl	800c214 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ab2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d01f      	beq.n	8009afa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009aba:	68b9      	ldr	r1, [r7, #8]
 8009abc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009abe:	f000 fa1b 	bl	8009ef8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac4:	1e5a      	subs	r2, r3, #1
 8009ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ac8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009acc:	691b      	ldr	r3, [r3, #16]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d00f      	beq.n	8009af2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ad4:	3310      	adds	r3, #16
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f001 f8ea 	bl	800acb0 <xTaskRemoveFromEventList>
 8009adc:	4603      	mov	r3, r0
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d007      	beq.n	8009af2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009ae2:	4b3d      	ldr	r3, [pc, #244]	; (8009bd8 <xQueueReceive+0x1bc>)
 8009ae4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ae8:	601a      	str	r2, [r3, #0]
 8009aea:	f3bf 8f4f 	dsb	sy
 8009aee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009af2:	f002 fbbf 	bl	800c274 <vPortExitCritical>
				return pdPASS;
 8009af6:	2301      	movs	r3, #1
 8009af8:	e069      	b.n	8009bce <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d103      	bne.n	8009b08 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009b00:	f002 fbb8 	bl	800c274 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009b04:	2300      	movs	r3, #0
 8009b06:	e062      	b.n	8009bce <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d106      	bne.n	8009b1c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009b0e:	f107 0310 	add.w	r3, r7, #16
 8009b12:	4618      	mov	r0, r3
 8009b14:	f001 f990 	bl	800ae38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009b18:	2301      	movs	r3, #1
 8009b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009b1c:	f002 fbaa 	bl	800c274 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009b20:	f000 fd92 	bl	800a648 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009b24:	f002 fb76 	bl	800c214 <vPortEnterCritical>
 8009b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b2e:	b25b      	sxtb	r3, r3
 8009b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b34:	d103      	bne.n	8009b3e <xQueueReceive+0x122>
 8009b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b38:	2200      	movs	r2, #0
 8009b3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b44:	b25b      	sxtb	r3, r3
 8009b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b4a:	d103      	bne.n	8009b54 <xQueueReceive+0x138>
 8009b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b4e:	2200      	movs	r2, #0
 8009b50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b54:	f002 fb8e 	bl	800c274 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009b58:	1d3a      	adds	r2, r7, #4
 8009b5a:	f107 0310 	add.w	r3, r7, #16
 8009b5e:	4611      	mov	r1, r2
 8009b60:	4618      	mov	r0, r3
 8009b62:	f001 f97f 	bl	800ae64 <xTaskCheckForTimeOut>
 8009b66:	4603      	mov	r3, r0
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d123      	bne.n	8009bb4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009b6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b6e:	f000 fa3b 	bl	8009fe8 <prvIsQueueEmpty>
 8009b72:	4603      	mov	r3, r0
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d017      	beq.n	8009ba8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b7a:	3324      	adds	r3, #36	; 0x24
 8009b7c:	687a      	ldr	r2, [r7, #4]
 8009b7e:	4611      	mov	r1, r2
 8009b80:	4618      	mov	r0, r3
 8009b82:	f001 f809 	bl	800ab98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009b86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b88:	f000 f9dc 	bl	8009f44 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009b8c:	f000 fd6a 	bl	800a664 <xTaskResumeAll>
 8009b90:	4603      	mov	r3, r0
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d189      	bne.n	8009aaa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009b96:	4b10      	ldr	r3, [pc, #64]	; (8009bd8 <xQueueReceive+0x1bc>)
 8009b98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b9c:	601a      	str	r2, [r3, #0]
 8009b9e:	f3bf 8f4f 	dsb	sy
 8009ba2:	f3bf 8f6f 	isb	sy
 8009ba6:	e780      	b.n	8009aaa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009ba8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009baa:	f000 f9cb 	bl	8009f44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009bae:	f000 fd59 	bl	800a664 <xTaskResumeAll>
 8009bb2:	e77a      	b.n	8009aaa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009bb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bb6:	f000 f9c5 	bl	8009f44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009bba:	f000 fd53 	bl	800a664 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009bbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bc0:	f000 fa12 	bl	8009fe8 <prvIsQueueEmpty>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	f43f af6f 	beq.w	8009aaa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009bcc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3730      	adds	r7, #48	; 0x30
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
 8009bd6:	bf00      	nop
 8009bd8:	e000ed04 	.word	0xe000ed04

08009bdc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b08e      	sub	sp, #56	; 0x38
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
 8009be4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009be6:	2300      	movs	r3, #0
 8009be8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d10a      	bne.n	8009c0e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bfc:	f383 8811 	msr	BASEPRI, r3
 8009c00:	f3bf 8f6f 	isb	sy
 8009c04:	f3bf 8f4f 	dsb	sy
 8009c08:	623b      	str	r3, [r7, #32]
}
 8009c0a:	bf00      	nop
 8009c0c:	e7fe      	b.n	8009c0c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d00a      	beq.n	8009c2c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8009c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c1a:	f383 8811 	msr	BASEPRI, r3
 8009c1e:	f3bf 8f6f 	isb	sy
 8009c22:	f3bf 8f4f 	dsb	sy
 8009c26:	61fb      	str	r3, [r7, #28]
}
 8009c28:	bf00      	nop
 8009c2a:	e7fe      	b.n	8009c2a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009c2c:	f001 fb50 	bl	800b2d0 <xTaskGetSchedulerState>
 8009c30:	4603      	mov	r3, r0
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d102      	bne.n	8009c3c <xQueueSemaphoreTake+0x60>
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d101      	bne.n	8009c40 <xQueueSemaphoreTake+0x64>
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	e000      	b.n	8009c42 <xQueueSemaphoreTake+0x66>
 8009c40:	2300      	movs	r3, #0
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d10a      	bne.n	8009c5c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8009c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c4a:	f383 8811 	msr	BASEPRI, r3
 8009c4e:	f3bf 8f6f 	isb	sy
 8009c52:	f3bf 8f4f 	dsb	sy
 8009c56:	61bb      	str	r3, [r7, #24]
}
 8009c58:	bf00      	nop
 8009c5a:	e7fe      	b.n	8009c5a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009c5c:	f002 fada 	bl	800c214 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c64:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d024      	beq.n	8009cb6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c6e:	1e5a      	subs	r2, r3, #1
 8009c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c72:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d104      	bne.n	8009c86 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009c7c:	f001 fd92 	bl	800b7a4 <pvTaskIncrementMutexHeldCount>
 8009c80:	4602      	mov	r2, r0
 8009c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c84:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c88:	691b      	ldr	r3, [r3, #16]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d00f      	beq.n	8009cae <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c90:	3310      	adds	r3, #16
 8009c92:	4618      	mov	r0, r3
 8009c94:	f001 f80c 	bl	800acb0 <xTaskRemoveFromEventList>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d007      	beq.n	8009cae <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009c9e:	4b54      	ldr	r3, [pc, #336]	; (8009df0 <xQueueSemaphoreTake+0x214>)
 8009ca0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ca4:	601a      	str	r2, [r3, #0]
 8009ca6:	f3bf 8f4f 	dsb	sy
 8009caa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009cae:	f002 fae1 	bl	800c274 <vPortExitCritical>
				return pdPASS;
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	e097      	b.n	8009de6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d111      	bne.n	8009ce0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d00a      	beq.n	8009cd8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8009cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc6:	f383 8811 	msr	BASEPRI, r3
 8009cca:	f3bf 8f6f 	isb	sy
 8009cce:	f3bf 8f4f 	dsb	sy
 8009cd2:	617b      	str	r3, [r7, #20]
}
 8009cd4:	bf00      	nop
 8009cd6:	e7fe      	b.n	8009cd6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009cd8:	f002 facc 	bl	800c274 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	e082      	b.n	8009de6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d106      	bne.n	8009cf4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009ce6:	f107 030c 	add.w	r3, r7, #12
 8009cea:	4618      	mov	r0, r3
 8009cec:	f001 f8a4 	bl	800ae38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009cf4:	f002 fabe 	bl	800c274 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009cf8:	f000 fca6 	bl	800a648 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009cfc:	f002 fa8a 	bl	800c214 <vPortEnterCritical>
 8009d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d06:	b25b      	sxtb	r3, r3
 8009d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d0c:	d103      	bne.n	8009d16 <xQueueSemaphoreTake+0x13a>
 8009d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d10:	2200      	movs	r2, #0
 8009d12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d1c:	b25b      	sxtb	r3, r3
 8009d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d22:	d103      	bne.n	8009d2c <xQueueSemaphoreTake+0x150>
 8009d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d26:	2200      	movs	r2, #0
 8009d28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d2c:	f002 faa2 	bl	800c274 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009d30:	463a      	mov	r2, r7
 8009d32:	f107 030c 	add.w	r3, r7, #12
 8009d36:	4611      	mov	r1, r2
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f001 f893 	bl	800ae64 <xTaskCheckForTimeOut>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d132      	bne.n	8009daa <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009d44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d46:	f000 f94f 	bl	8009fe8 <prvIsQueueEmpty>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d026      	beq.n	8009d9e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d109      	bne.n	8009d6c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009d58:	f002 fa5c 	bl	800c214 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d5e:	689b      	ldr	r3, [r3, #8]
 8009d60:	4618      	mov	r0, r3
 8009d62:	f001 fad3 	bl	800b30c <xTaskPriorityInherit>
 8009d66:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009d68:	f002 fa84 	bl	800c274 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d6e:	3324      	adds	r3, #36	; 0x24
 8009d70:	683a      	ldr	r2, [r7, #0]
 8009d72:	4611      	mov	r1, r2
 8009d74:	4618      	mov	r0, r3
 8009d76:	f000 ff0f 	bl	800ab98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009d7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d7c:	f000 f8e2 	bl	8009f44 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009d80:	f000 fc70 	bl	800a664 <xTaskResumeAll>
 8009d84:	4603      	mov	r3, r0
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	f47f af68 	bne.w	8009c5c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009d8c:	4b18      	ldr	r3, [pc, #96]	; (8009df0 <xQueueSemaphoreTake+0x214>)
 8009d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d92:	601a      	str	r2, [r3, #0]
 8009d94:	f3bf 8f4f 	dsb	sy
 8009d98:	f3bf 8f6f 	isb	sy
 8009d9c:	e75e      	b.n	8009c5c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009d9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009da0:	f000 f8d0 	bl	8009f44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009da4:	f000 fc5e 	bl	800a664 <xTaskResumeAll>
 8009da8:	e758      	b.n	8009c5c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009daa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009dac:	f000 f8ca 	bl	8009f44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009db0:	f000 fc58 	bl	800a664 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009db4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009db6:	f000 f917 	bl	8009fe8 <prvIsQueueEmpty>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	f43f af4d 	beq.w	8009c5c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d00d      	beq.n	8009de4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009dc8:	f002 fa24 	bl	800c214 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009dcc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009dce:	f000 f811 	bl	8009df4 <prvGetDisinheritPriorityAfterTimeout>
 8009dd2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dd6:	689b      	ldr	r3, [r3, #8]
 8009dd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f001 fb92 	bl	800b504 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009de0:	f002 fa48 	bl	800c274 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009de4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3738      	adds	r7, #56	; 0x38
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}
 8009dee:	bf00      	nop
 8009df0:	e000ed04 	.word	0xe000ed04

08009df4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009df4:	b480      	push	{r7}
 8009df6:	b085      	sub	sp, #20
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d006      	beq.n	8009e12 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f1c3 0307 	rsb	r3, r3, #7
 8009e0e:	60fb      	str	r3, [r7, #12]
 8009e10:	e001      	b.n	8009e16 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009e12:	2300      	movs	r3, #0
 8009e14:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009e16:	68fb      	ldr	r3, [r7, #12]
	}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3714      	adds	r7, #20
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e22:	4770      	bx	lr

08009e24 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b086      	sub	sp, #24
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	60f8      	str	r0, [r7, #12]
 8009e2c:	60b9      	str	r1, [r7, #8]
 8009e2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009e30:	2300      	movs	r3, #0
 8009e32:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e38:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d10d      	bne.n	8009e5e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d14d      	bne.n	8009ee6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	689b      	ldr	r3, [r3, #8]
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f001 fad2 	bl	800b3f8 <xTaskPriorityDisinherit>
 8009e54:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	609a      	str	r2, [r3, #8]
 8009e5c:	e043      	b.n	8009ee6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d119      	bne.n	8009e98 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	6858      	ldr	r0, [r3, #4]
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	68b9      	ldr	r1, [r7, #8]
 8009e70:	f002 fd16 	bl	800c8a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	685a      	ldr	r2, [r3, #4]
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e7c:	441a      	add	r2, r3
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	685a      	ldr	r2, [r3, #4]
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	689b      	ldr	r3, [r3, #8]
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	d32b      	bcc.n	8009ee6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681a      	ldr	r2, [r3, #0]
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	605a      	str	r2, [r3, #4]
 8009e96:	e026      	b.n	8009ee6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	68d8      	ldr	r0, [r3, #12]
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ea0:	461a      	mov	r2, r3
 8009ea2:	68b9      	ldr	r1, [r7, #8]
 8009ea4:	f002 fcfc 	bl	800c8a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	68da      	ldr	r2, [r3, #12]
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eb0:	425b      	negs	r3, r3
 8009eb2:	441a      	add	r2, r3
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	68da      	ldr	r2, [r3, #12]
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	429a      	cmp	r2, r3
 8009ec2:	d207      	bcs.n	8009ed4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	689a      	ldr	r2, [r3, #8]
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ecc:	425b      	negs	r3, r3
 8009ece:	441a      	add	r2, r3
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2b02      	cmp	r3, #2
 8009ed8:	d105      	bne.n	8009ee6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d002      	beq.n	8009ee6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	3b01      	subs	r3, #1
 8009ee4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	1c5a      	adds	r2, r3, #1
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009eee:	697b      	ldr	r3, [r7, #20]
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3718      	adds	r7, #24
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}

08009ef8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b082      	sub	sp, #8
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
 8009f00:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d018      	beq.n	8009f3c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	68da      	ldr	r2, [r3, #12]
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f12:	441a      	add	r2, r3
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	68da      	ldr	r2, [r3, #12]
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	689b      	ldr	r3, [r3, #8]
 8009f20:	429a      	cmp	r2, r3
 8009f22:	d303      	bcc.n	8009f2c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681a      	ldr	r2, [r3, #0]
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	68d9      	ldr	r1, [r3, #12]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f34:	461a      	mov	r2, r3
 8009f36:	6838      	ldr	r0, [r7, #0]
 8009f38:	f002 fcb2 	bl	800c8a0 <memcpy>
	}
}
 8009f3c:	bf00      	nop
 8009f3e:	3708      	adds	r7, #8
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}

08009f44 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b084      	sub	sp, #16
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009f4c:	f002 f962 	bl	800c214 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f56:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009f58:	e011      	b.n	8009f7e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d012      	beq.n	8009f88 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	3324      	adds	r3, #36	; 0x24
 8009f66:	4618      	mov	r0, r3
 8009f68:	f000 fea2 	bl	800acb0 <xTaskRemoveFromEventList>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d001      	beq.n	8009f76 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009f72:	f000 ffd9 	bl	800af28 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009f76:	7bfb      	ldrb	r3, [r7, #15]
 8009f78:	3b01      	subs	r3, #1
 8009f7a:	b2db      	uxtb	r3, r3
 8009f7c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	dce9      	bgt.n	8009f5a <prvUnlockQueue+0x16>
 8009f86:	e000      	b.n	8009f8a <prvUnlockQueue+0x46>
					break;
 8009f88:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	22ff      	movs	r2, #255	; 0xff
 8009f8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009f92:	f002 f96f 	bl	800c274 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009f96:	f002 f93d 	bl	800c214 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009fa0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009fa2:	e011      	b.n	8009fc8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	691b      	ldr	r3, [r3, #16]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d012      	beq.n	8009fd2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	3310      	adds	r3, #16
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f000 fe7d 	bl	800acb0 <xTaskRemoveFromEventList>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d001      	beq.n	8009fc0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009fbc:	f000 ffb4 	bl	800af28 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009fc0:	7bbb      	ldrb	r3, [r7, #14]
 8009fc2:	3b01      	subs	r3, #1
 8009fc4:	b2db      	uxtb	r3, r3
 8009fc6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009fc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	dce9      	bgt.n	8009fa4 <prvUnlockQueue+0x60>
 8009fd0:	e000      	b.n	8009fd4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009fd2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	22ff      	movs	r2, #255	; 0xff
 8009fd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009fdc:	f002 f94a 	bl	800c274 <vPortExitCritical>
}
 8009fe0:	bf00      	nop
 8009fe2:	3710      	adds	r7, #16
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bd80      	pop	{r7, pc}

08009fe8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b084      	sub	sp, #16
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009ff0:	f002 f910 	bl	800c214 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d102      	bne.n	800a002 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	60fb      	str	r3, [r7, #12]
 800a000:	e001      	b.n	800a006 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a002:	2300      	movs	r3, #0
 800a004:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a006:	f002 f935 	bl	800c274 <vPortExitCritical>

	return xReturn;
 800a00a:	68fb      	ldr	r3, [r7, #12]
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3710      	adds	r7, #16
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}

0800a014 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b084      	sub	sp, #16
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a01c:	f002 f8fa 	bl	800c214 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a028:	429a      	cmp	r2, r3
 800a02a:	d102      	bne.n	800a032 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a02c:	2301      	movs	r3, #1
 800a02e:	60fb      	str	r3, [r7, #12]
 800a030:	e001      	b.n	800a036 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a032:	2300      	movs	r3, #0
 800a034:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a036:	f002 f91d 	bl	800c274 <vPortExitCritical>

	return xReturn;
 800a03a:	68fb      	ldr	r3, [r7, #12]
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3710      	adds	r7, #16
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}

0800a044 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a044:	b480      	push	{r7}
 800a046:	b085      	sub	sp, #20
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
 800a04c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a04e:	2300      	movs	r3, #0
 800a050:	60fb      	str	r3, [r7, #12]
 800a052:	e014      	b.n	800a07e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a054:	4a0f      	ldr	r2, [pc, #60]	; (800a094 <vQueueAddToRegistry+0x50>)
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d10b      	bne.n	800a078 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a060:	490c      	ldr	r1, [pc, #48]	; (800a094 <vQueueAddToRegistry+0x50>)
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	683a      	ldr	r2, [r7, #0]
 800a066:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a06a:	4a0a      	ldr	r2, [pc, #40]	; (800a094 <vQueueAddToRegistry+0x50>)
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	00db      	lsls	r3, r3, #3
 800a070:	4413      	add	r3, r2
 800a072:	687a      	ldr	r2, [r7, #4]
 800a074:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a076:	e006      	b.n	800a086 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	3301      	adds	r3, #1
 800a07c:	60fb      	str	r3, [r7, #12]
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	2b07      	cmp	r3, #7
 800a082:	d9e7      	bls.n	800a054 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a084:	bf00      	nop
 800a086:	bf00      	nop
 800a088:	3714      	adds	r7, #20
 800a08a:	46bd      	mov	sp, r7
 800a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a090:	4770      	bx	lr
 800a092:	bf00      	nop
 800a094:	200017b4 	.word	0x200017b4

0800a098 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b086      	sub	sp, #24
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	60f8      	str	r0, [r7, #12]
 800a0a0:	60b9      	str	r1, [r7, #8]
 800a0a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a0a8:	f002 f8b4 	bl	800c214 <vPortEnterCritical>
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a0b2:	b25b      	sxtb	r3, r3
 800a0b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0b8:	d103      	bne.n	800a0c2 <vQueueWaitForMessageRestricted+0x2a>
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a0c8:	b25b      	sxtb	r3, r3
 800a0ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0ce:	d103      	bne.n	800a0d8 <vQueueWaitForMessageRestricted+0x40>
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a0d8:	f002 f8cc 	bl	800c274 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a0dc:	697b      	ldr	r3, [r7, #20]
 800a0de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d106      	bne.n	800a0f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	3324      	adds	r3, #36	; 0x24
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	68b9      	ldr	r1, [r7, #8]
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f000 fdb3 	bl	800ac58 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a0f2:	6978      	ldr	r0, [r7, #20]
 800a0f4:	f7ff ff26 	bl	8009f44 <prvUnlockQueue>
	}
 800a0f8:	bf00      	nop
 800a0fa:	3718      	adds	r7, #24
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}

0800a100 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a100:	b580      	push	{r7, lr}
 800a102:	b08e      	sub	sp, #56	; 0x38
 800a104:	af04      	add	r7, sp, #16
 800a106:	60f8      	str	r0, [r7, #12]
 800a108:	60b9      	str	r1, [r7, #8]
 800a10a:	607a      	str	r2, [r7, #4]
 800a10c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a10e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a110:	2b00      	cmp	r3, #0
 800a112:	d10a      	bne.n	800a12a <xTaskCreateStatic+0x2a>
	__asm volatile
 800a114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a118:	f383 8811 	msr	BASEPRI, r3
 800a11c:	f3bf 8f6f 	isb	sy
 800a120:	f3bf 8f4f 	dsb	sy
 800a124:	623b      	str	r3, [r7, #32]
}
 800a126:	bf00      	nop
 800a128:	e7fe      	b.n	800a128 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a12a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d10a      	bne.n	800a146 <xTaskCreateStatic+0x46>
	__asm volatile
 800a130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a134:	f383 8811 	msr	BASEPRI, r3
 800a138:	f3bf 8f6f 	isb	sy
 800a13c:	f3bf 8f4f 	dsb	sy
 800a140:	61fb      	str	r3, [r7, #28]
}
 800a142:	bf00      	nop
 800a144:	e7fe      	b.n	800a144 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a146:	2360      	movs	r3, #96	; 0x60
 800a148:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	2b60      	cmp	r3, #96	; 0x60
 800a14e:	d00a      	beq.n	800a166 <xTaskCreateStatic+0x66>
	__asm volatile
 800a150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a154:	f383 8811 	msr	BASEPRI, r3
 800a158:	f3bf 8f6f 	isb	sy
 800a15c:	f3bf 8f4f 	dsb	sy
 800a160:	61bb      	str	r3, [r7, #24]
}
 800a162:	bf00      	nop
 800a164:	e7fe      	b.n	800a164 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a166:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d01e      	beq.n	800a1ac <xTaskCreateStatic+0xac>
 800a16e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a170:	2b00      	cmp	r3, #0
 800a172:	d01b      	beq.n	800a1ac <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a176:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a17a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a17c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a180:	2202      	movs	r2, #2
 800a182:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a186:	2300      	movs	r3, #0
 800a188:	9303      	str	r3, [sp, #12]
 800a18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a18c:	9302      	str	r3, [sp, #8]
 800a18e:	f107 0314 	add.w	r3, r7, #20
 800a192:	9301      	str	r3, [sp, #4]
 800a194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a196:	9300      	str	r3, [sp, #0]
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	687a      	ldr	r2, [r7, #4]
 800a19c:	68b9      	ldr	r1, [r7, #8]
 800a19e:	68f8      	ldr	r0, [r7, #12]
 800a1a0:	f000 f850 	bl	800a244 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a1a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a1a6:	f000 f8df 	bl	800a368 <prvAddNewTaskToReadyList>
 800a1aa:	e001      	b.n	800a1b0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a1b0:	697b      	ldr	r3, [r7, #20]
	}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3728      	adds	r7, #40	; 0x28
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}

0800a1ba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a1ba:	b580      	push	{r7, lr}
 800a1bc:	b08c      	sub	sp, #48	; 0x30
 800a1be:	af04      	add	r7, sp, #16
 800a1c0:	60f8      	str	r0, [r7, #12]
 800a1c2:	60b9      	str	r1, [r7, #8]
 800a1c4:	603b      	str	r3, [r7, #0]
 800a1c6:	4613      	mov	r3, r2
 800a1c8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a1ca:	88fb      	ldrh	r3, [r7, #6]
 800a1cc:	009b      	lsls	r3, r3, #2
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f002 f942 	bl	800c458 <pvPortMalloc>
 800a1d4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d00e      	beq.n	800a1fa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a1dc:	2060      	movs	r0, #96	; 0x60
 800a1de:	f002 f93b 	bl	800c458 <pvPortMalloc>
 800a1e2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a1e4:	69fb      	ldr	r3, [r7, #28]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d003      	beq.n	800a1f2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a1ea:	69fb      	ldr	r3, [r7, #28]
 800a1ec:	697a      	ldr	r2, [r7, #20]
 800a1ee:	631a      	str	r2, [r3, #48]	; 0x30
 800a1f0:	e005      	b.n	800a1fe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a1f2:	6978      	ldr	r0, [r7, #20]
 800a1f4:	f002 fa00 	bl	800c5f8 <vPortFree>
 800a1f8:	e001      	b.n	800a1fe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a1fe:	69fb      	ldr	r3, [r7, #28]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d017      	beq.n	800a234 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a204:	69fb      	ldr	r3, [r7, #28]
 800a206:	2200      	movs	r2, #0
 800a208:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a20c:	88fa      	ldrh	r2, [r7, #6]
 800a20e:	2300      	movs	r3, #0
 800a210:	9303      	str	r3, [sp, #12]
 800a212:	69fb      	ldr	r3, [r7, #28]
 800a214:	9302      	str	r3, [sp, #8]
 800a216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a218:	9301      	str	r3, [sp, #4]
 800a21a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a21c:	9300      	str	r3, [sp, #0]
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	68b9      	ldr	r1, [r7, #8]
 800a222:	68f8      	ldr	r0, [r7, #12]
 800a224:	f000 f80e 	bl	800a244 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a228:	69f8      	ldr	r0, [r7, #28]
 800a22a:	f000 f89d 	bl	800a368 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a22e:	2301      	movs	r3, #1
 800a230:	61bb      	str	r3, [r7, #24]
 800a232:	e002      	b.n	800a23a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a234:	f04f 33ff 	mov.w	r3, #4294967295
 800a238:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a23a:	69bb      	ldr	r3, [r7, #24]
	}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3720      	adds	r7, #32
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}

0800a244 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b088      	sub	sp, #32
 800a248:	af00      	add	r7, sp, #0
 800a24a:	60f8      	str	r0, [r7, #12]
 800a24c:	60b9      	str	r1, [r7, #8]
 800a24e:	607a      	str	r2, [r7, #4]
 800a250:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a254:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	009b      	lsls	r3, r3, #2
 800a25a:	461a      	mov	r2, r3
 800a25c:	21a5      	movs	r1, #165	; 0xa5
 800a25e:	f002 fb2d 	bl	800c8bc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a264:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a26c:	3b01      	subs	r3, #1
 800a26e:	009b      	lsls	r3, r3, #2
 800a270:	4413      	add	r3, r2
 800a272:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a274:	69bb      	ldr	r3, [r7, #24]
 800a276:	f023 0307 	bic.w	r3, r3, #7
 800a27a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a27c:	69bb      	ldr	r3, [r7, #24]
 800a27e:	f003 0307 	and.w	r3, r3, #7
 800a282:	2b00      	cmp	r3, #0
 800a284:	d00a      	beq.n	800a29c <prvInitialiseNewTask+0x58>
	__asm volatile
 800a286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a28a:	f383 8811 	msr	BASEPRI, r3
 800a28e:	f3bf 8f6f 	isb	sy
 800a292:	f3bf 8f4f 	dsb	sy
 800a296:	617b      	str	r3, [r7, #20]
}
 800a298:	bf00      	nop
 800a29a:	e7fe      	b.n	800a29a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d01f      	beq.n	800a2e2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	61fb      	str	r3, [r7, #28]
 800a2a6:	e012      	b.n	800a2ce <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a2a8:	68ba      	ldr	r2, [r7, #8]
 800a2aa:	69fb      	ldr	r3, [r7, #28]
 800a2ac:	4413      	add	r3, r2
 800a2ae:	7819      	ldrb	r1, [r3, #0]
 800a2b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2b2:	69fb      	ldr	r3, [r7, #28]
 800a2b4:	4413      	add	r3, r2
 800a2b6:	3334      	adds	r3, #52	; 0x34
 800a2b8:	460a      	mov	r2, r1
 800a2ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a2bc:	68ba      	ldr	r2, [r7, #8]
 800a2be:	69fb      	ldr	r3, [r7, #28]
 800a2c0:	4413      	add	r3, r2
 800a2c2:	781b      	ldrb	r3, [r3, #0]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d006      	beq.n	800a2d6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a2c8:	69fb      	ldr	r3, [r7, #28]
 800a2ca:	3301      	adds	r3, #1
 800a2cc:	61fb      	str	r3, [r7, #28]
 800a2ce:	69fb      	ldr	r3, [r7, #28]
 800a2d0:	2b0f      	cmp	r3, #15
 800a2d2:	d9e9      	bls.n	800a2a8 <prvInitialiseNewTask+0x64>
 800a2d4:	e000      	b.n	800a2d8 <prvInitialiseNewTask+0x94>
			{
				break;
 800a2d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a2d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2da:	2200      	movs	r2, #0
 800a2dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a2e0:	e003      	b.n	800a2ea <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a2ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ec:	2b06      	cmp	r3, #6
 800a2ee:	d901      	bls.n	800a2f4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a2f0:	2306      	movs	r3, #6
 800a2f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2fe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a302:	2200      	movs	r2, #0
 800a304:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a308:	3304      	adds	r3, #4
 800a30a:	4618      	mov	r0, r3
 800a30c:	f7fe ff5b 	bl	80091c6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a312:	3318      	adds	r3, #24
 800a314:	4618      	mov	r0, r3
 800a316:	f7fe ff56 	bl	80091c6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a31c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a31e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a322:	f1c3 0207 	rsb	r2, r3, #7
 800a326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a328:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a32c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a32e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800a330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a332:	2200      	movs	r2, #0
 800a334:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a338:	2200      	movs	r2, #0
 800a33a:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a33c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a33e:	2200      	movs	r2, #0
 800a340:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a344:	683a      	ldr	r2, [r7, #0]
 800a346:	68f9      	ldr	r1, [r7, #12]
 800a348:	69b8      	ldr	r0, [r7, #24]
 800a34a:	f001 fe33 	bl	800bfb4 <pxPortInitialiseStack>
 800a34e:	4602      	mov	r2, r0
 800a350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a352:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a356:	2b00      	cmp	r3, #0
 800a358:	d002      	beq.n	800a360 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a35c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a35e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a360:	bf00      	nop
 800a362:	3720      	adds	r7, #32
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}

0800a368 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b082      	sub	sp, #8
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a370:	f001 ff50 	bl	800c214 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a374:	4b2c      	ldr	r3, [pc, #176]	; (800a428 <prvAddNewTaskToReadyList+0xc0>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	3301      	adds	r3, #1
 800a37a:	4a2b      	ldr	r2, [pc, #172]	; (800a428 <prvAddNewTaskToReadyList+0xc0>)
 800a37c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a37e:	4b2b      	ldr	r3, [pc, #172]	; (800a42c <prvAddNewTaskToReadyList+0xc4>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d109      	bne.n	800a39a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a386:	4a29      	ldr	r2, [pc, #164]	; (800a42c <prvAddNewTaskToReadyList+0xc4>)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a38c:	4b26      	ldr	r3, [pc, #152]	; (800a428 <prvAddNewTaskToReadyList+0xc0>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	2b01      	cmp	r3, #1
 800a392:	d110      	bne.n	800a3b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a394:	f000 fdee 	bl	800af74 <prvInitialiseTaskLists>
 800a398:	e00d      	b.n	800a3b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a39a:	4b25      	ldr	r3, [pc, #148]	; (800a430 <prvAddNewTaskToReadyList+0xc8>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d109      	bne.n	800a3b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a3a2:	4b22      	ldr	r3, [pc, #136]	; (800a42c <prvAddNewTaskToReadyList+0xc4>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ac:	429a      	cmp	r2, r3
 800a3ae:	d802      	bhi.n	800a3b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a3b0:	4a1e      	ldr	r2, [pc, #120]	; (800a42c <prvAddNewTaskToReadyList+0xc4>)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a3b6:	4b1f      	ldr	r3, [pc, #124]	; (800a434 <prvAddNewTaskToReadyList+0xcc>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	3301      	adds	r3, #1
 800a3bc:	4a1d      	ldr	r2, [pc, #116]	; (800a434 <prvAddNewTaskToReadyList+0xcc>)
 800a3be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a3c0:	4b1c      	ldr	r3, [pc, #112]	; (800a434 <prvAddNewTaskToReadyList+0xcc>)
 800a3c2:	681a      	ldr	r2, [r3, #0]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3cc:	2201      	movs	r2, #1
 800a3ce:	409a      	lsls	r2, r3
 800a3d0:	4b19      	ldr	r3, [pc, #100]	; (800a438 <prvAddNewTaskToReadyList+0xd0>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	4313      	orrs	r3, r2
 800a3d6:	4a18      	ldr	r2, [pc, #96]	; (800a438 <prvAddNewTaskToReadyList+0xd0>)
 800a3d8:	6013      	str	r3, [r2, #0]
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3de:	4613      	mov	r3, r2
 800a3e0:	009b      	lsls	r3, r3, #2
 800a3e2:	4413      	add	r3, r2
 800a3e4:	009b      	lsls	r3, r3, #2
 800a3e6:	4a15      	ldr	r2, [pc, #84]	; (800a43c <prvAddNewTaskToReadyList+0xd4>)
 800a3e8:	441a      	add	r2, r3
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	3304      	adds	r3, #4
 800a3ee:	4619      	mov	r1, r3
 800a3f0:	4610      	mov	r0, r2
 800a3f2:	f7fe fef5 	bl	80091e0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a3f6:	f001 ff3d 	bl	800c274 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a3fa:	4b0d      	ldr	r3, [pc, #52]	; (800a430 <prvAddNewTaskToReadyList+0xc8>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d00e      	beq.n	800a420 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a402:	4b0a      	ldr	r3, [pc, #40]	; (800a42c <prvAddNewTaskToReadyList+0xc4>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d207      	bcs.n	800a420 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a410:	4b0b      	ldr	r3, [pc, #44]	; (800a440 <prvAddNewTaskToReadyList+0xd8>)
 800a412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a416:	601a      	str	r2, [r3, #0]
 800a418:	f3bf 8f4f 	dsb	sy
 800a41c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a420:	bf00      	nop
 800a422:	3708      	adds	r7, #8
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}
 800a428:	200018f4 	.word	0x200018f4
 800a42c:	200017f4 	.word	0x200017f4
 800a430:	20001900 	.word	0x20001900
 800a434:	20001910 	.word	0x20001910
 800a438:	200018fc 	.word	0x200018fc
 800a43c:	200017f8 	.word	0x200017f8
 800a440:	e000ed04 	.word	0xe000ed04

0800a444 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a444:	b580      	push	{r7, lr}
 800a446:	b084      	sub	sp, #16
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a44c:	2300      	movs	r3, #0
 800a44e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d017      	beq.n	800a486 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a456:	4b13      	ldr	r3, [pc, #76]	; (800a4a4 <vTaskDelay+0x60>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d00a      	beq.n	800a474 <vTaskDelay+0x30>
	__asm volatile
 800a45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a462:	f383 8811 	msr	BASEPRI, r3
 800a466:	f3bf 8f6f 	isb	sy
 800a46a:	f3bf 8f4f 	dsb	sy
 800a46e:	60bb      	str	r3, [r7, #8]
}
 800a470:	bf00      	nop
 800a472:	e7fe      	b.n	800a472 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a474:	f000 f8e8 	bl	800a648 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a478:	2100      	movs	r1, #0
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f001 f9a6 	bl	800b7cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a480:	f000 f8f0 	bl	800a664 <xTaskResumeAll>
 800a484:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d107      	bne.n	800a49c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a48c:	4b06      	ldr	r3, [pc, #24]	; (800a4a8 <vTaskDelay+0x64>)
 800a48e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a492:	601a      	str	r2, [r3, #0]
 800a494:	f3bf 8f4f 	dsb	sy
 800a498:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a49c:	bf00      	nop
 800a49e:	3710      	adds	r7, #16
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}
 800a4a4:	2000191c 	.word	0x2000191c
 800a4a8:	e000ed04 	.word	0xe000ed04

0800a4ac <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b088      	sub	sp, #32
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800a4b8:	69bb      	ldr	r3, [r7, #24]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d10a      	bne.n	800a4d4 <eTaskGetState+0x28>
	__asm volatile
 800a4be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c2:	f383 8811 	msr	BASEPRI, r3
 800a4c6:	f3bf 8f6f 	isb	sy
 800a4ca:	f3bf 8f4f 	dsb	sy
 800a4ce:	60bb      	str	r3, [r7, #8]
}
 800a4d0:	bf00      	nop
 800a4d2:	e7fe      	b.n	800a4d2 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800a4d4:	4b23      	ldr	r3, [pc, #140]	; (800a564 <eTaskGetState+0xb8>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	69ba      	ldr	r2, [r7, #24]
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	d102      	bne.n	800a4e4 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	77fb      	strb	r3, [r7, #31]
 800a4e2:	e03a      	b.n	800a55a <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 800a4e4:	f001 fe96 	bl	800c214 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800a4e8:	69bb      	ldr	r3, [r7, #24]
 800a4ea:	695b      	ldr	r3, [r3, #20]
 800a4ec:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800a4ee:	4b1e      	ldr	r3, [pc, #120]	; (800a568 <eTaskGetState+0xbc>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800a4f4:	4b1d      	ldr	r3, [pc, #116]	; (800a56c <eTaskGetState+0xc0>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800a4fa:	f001 febb 	bl	800c274 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800a4fe:	697a      	ldr	r2, [r7, #20]
 800a500:	693b      	ldr	r3, [r7, #16]
 800a502:	429a      	cmp	r2, r3
 800a504:	d003      	beq.n	800a50e <eTaskGetState+0x62>
 800a506:	697a      	ldr	r2, [r7, #20]
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	429a      	cmp	r2, r3
 800a50c:	d102      	bne.n	800a514 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800a50e:	2302      	movs	r3, #2
 800a510:	77fb      	strb	r3, [r7, #31]
 800a512:	e022      	b.n	800a55a <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	4a16      	ldr	r2, [pc, #88]	; (800a570 <eTaskGetState+0xc4>)
 800a518:	4293      	cmp	r3, r2
 800a51a:	d112      	bne.n	800a542 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800a51c:	69bb      	ldr	r3, [r7, #24]
 800a51e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a520:	2b00      	cmp	r3, #0
 800a522:	d10b      	bne.n	800a53c <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800a524:	69bb      	ldr	r3, [r7, #24]
 800a526:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a52a:	b2db      	uxtb	r3, r3
 800a52c:	2b01      	cmp	r3, #1
 800a52e:	d102      	bne.n	800a536 <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 800a530:	2302      	movs	r3, #2
 800a532:	77fb      	strb	r3, [r7, #31]
 800a534:	e011      	b.n	800a55a <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 800a536:	2303      	movs	r3, #3
 800a538:	77fb      	strb	r3, [r7, #31]
 800a53a:	e00e      	b.n	800a55a <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800a53c:	2302      	movs	r3, #2
 800a53e:	77fb      	strb	r3, [r7, #31]
 800a540:	e00b      	b.n	800a55a <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	4a0b      	ldr	r2, [pc, #44]	; (800a574 <eTaskGetState+0xc8>)
 800a546:	4293      	cmp	r3, r2
 800a548:	d002      	beq.n	800a550 <eTaskGetState+0xa4>
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d102      	bne.n	800a556 <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800a550:	2304      	movs	r3, #4
 800a552:	77fb      	strb	r3, [r7, #31]
 800a554:	e001      	b.n	800a55a <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800a556:	2301      	movs	r3, #1
 800a558:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800a55a:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800a55c:	4618      	mov	r0, r3
 800a55e:	3720      	adds	r7, #32
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}
 800a564:	200017f4 	.word	0x200017f4
 800a568:	200018ac 	.word	0x200018ac
 800a56c:	200018b0 	.word	0x200018b0
 800a570:	200018e0 	.word	0x200018e0
 800a574:	200018c8 	.word	0x200018c8

0800a578 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b08a      	sub	sp, #40	; 0x28
 800a57c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a57e:	2300      	movs	r3, #0
 800a580:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a582:	2300      	movs	r3, #0
 800a584:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a586:	463a      	mov	r2, r7
 800a588:	1d39      	adds	r1, r7, #4
 800a58a:	f107 0308 	add.w	r3, r7, #8
 800a58e:	4618      	mov	r0, r3
 800a590:	f7f6 fc9c 	bl	8000ecc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a594:	6839      	ldr	r1, [r7, #0]
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	68ba      	ldr	r2, [r7, #8]
 800a59a:	9202      	str	r2, [sp, #8]
 800a59c:	9301      	str	r3, [sp, #4]
 800a59e:	2300      	movs	r3, #0
 800a5a0:	9300      	str	r3, [sp, #0]
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	460a      	mov	r2, r1
 800a5a6:	4922      	ldr	r1, [pc, #136]	; (800a630 <vTaskStartScheduler+0xb8>)
 800a5a8:	4822      	ldr	r0, [pc, #136]	; (800a634 <vTaskStartScheduler+0xbc>)
 800a5aa:	f7ff fda9 	bl	800a100 <xTaskCreateStatic>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	4a21      	ldr	r2, [pc, #132]	; (800a638 <vTaskStartScheduler+0xc0>)
 800a5b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a5b4:	4b20      	ldr	r3, [pc, #128]	; (800a638 <vTaskStartScheduler+0xc0>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d002      	beq.n	800a5c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a5bc:	2301      	movs	r3, #1
 800a5be:	617b      	str	r3, [r7, #20]
 800a5c0:	e001      	b.n	800a5c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a5c6:	697b      	ldr	r3, [r7, #20]
 800a5c8:	2b01      	cmp	r3, #1
 800a5ca:	d102      	bne.n	800a5d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a5cc:	f001 f964 	bl	800b898 <xTimerCreateTimerTask>
 800a5d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a5d2:	697b      	ldr	r3, [r7, #20]
 800a5d4:	2b01      	cmp	r3, #1
 800a5d6:	d118      	bne.n	800a60a <vTaskStartScheduler+0x92>
	__asm volatile
 800a5d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5dc:	f383 8811 	msr	BASEPRI, r3
 800a5e0:	f3bf 8f6f 	isb	sy
 800a5e4:	f3bf 8f4f 	dsb	sy
 800a5e8:	613b      	str	r3, [r7, #16]
}
 800a5ea:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a5ec:	4b13      	ldr	r3, [pc, #76]	; (800a63c <vTaskStartScheduler+0xc4>)
 800a5ee:	f04f 32ff 	mov.w	r2, #4294967295
 800a5f2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a5f4:	4b12      	ldr	r3, [pc, #72]	; (800a640 <vTaskStartScheduler+0xc8>)
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a5fa:	4b12      	ldr	r3, [pc, #72]	; (800a644 <vTaskStartScheduler+0xcc>)
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800a600:	f7f6 fca4 	bl	8000f4c <vConfigureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a604:	f001 fd64 	bl	800c0d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a608:	e00e      	b.n	800a628 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a60a:	697b      	ldr	r3, [r7, #20]
 800a60c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a610:	d10a      	bne.n	800a628 <vTaskStartScheduler+0xb0>
	__asm volatile
 800a612:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a616:	f383 8811 	msr	BASEPRI, r3
 800a61a:	f3bf 8f6f 	isb	sy
 800a61e:	f3bf 8f4f 	dsb	sy
 800a622:	60fb      	str	r3, [r7, #12]
}
 800a624:	bf00      	nop
 800a626:	e7fe      	b.n	800a626 <vTaskStartScheduler+0xae>
}
 800a628:	bf00      	nop
 800a62a:	3718      	adds	r7, #24
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}
 800a630:	08010094 	.word	0x08010094
 800a634:	0800af41 	.word	0x0800af41
 800a638:	20001918 	.word	0x20001918
 800a63c:	20001914 	.word	0x20001914
 800a640:	20001900 	.word	0x20001900
 800a644:	200018f8 	.word	0x200018f8

0800a648 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a648:	b480      	push	{r7}
 800a64a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a64c:	4b04      	ldr	r3, [pc, #16]	; (800a660 <vTaskSuspendAll+0x18>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	3301      	adds	r3, #1
 800a652:	4a03      	ldr	r2, [pc, #12]	; (800a660 <vTaskSuspendAll+0x18>)
 800a654:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a656:	bf00      	nop
 800a658:	46bd      	mov	sp, r7
 800a65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65e:	4770      	bx	lr
 800a660:	2000191c 	.word	0x2000191c

0800a664 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b084      	sub	sp, #16
 800a668:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a66a:	2300      	movs	r3, #0
 800a66c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a66e:	2300      	movs	r3, #0
 800a670:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a672:	4b41      	ldr	r3, [pc, #260]	; (800a778 <xTaskResumeAll+0x114>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d10a      	bne.n	800a690 <xTaskResumeAll+0x2c>
	__asm volatile
 800a67a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a67e:	f383 8811 	msr	BASEPRI, r3
 800a682:	f3bf 8f6f 	isb	sy
 800a686:	f3bf 8f4f 	dsb	sy
 800a68a:	603b      	str	r3, [r7, #0]
}
 800a68c:	bf00      	nop
 800a68e:	e7fe      	b.n	800a68e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a690:	f001 fdc0 	bl	800c214 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a694:	4b38      	ldr	r3, [pc, #224]	; (800a778 <xTaskResumeAll+0x114>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	3b01      	subs	r3, #1
 800a69a:	4a37      	ldr	r2, [pc, #220]	; (800a778 <xTaskResumeAll+0x114>)
 800a69c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a69e:	4b36      	ldr	r3, [pc, #216]	; (800a778 <xTaskResumeAll+0x114>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d161      	bne.n	800a76a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a6a6:	4b35      	ldr	r3, [pc, #212]	; (800a77c <xTaskResumeAll+0x118>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d05d      	beq.n	800a76a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a6ae:	e02e      	b.n	800a70e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6b0:	4b33      	ldr	r3, [pc, #204]	; (800a780 <xTaskResumeAll+0x11c>)
 800a6b2:	68db      	ldr	r3, [r3, #12]
 800a6b4:	68db      	ldr	r3, [r3, #12]
 800a6b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	3318      	adds	r3, #24
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f7fe fdec 	bl	800929a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	3304      	adds	r3, #4
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f7fe fde7 	bl	800929a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6d0:	2201      	movs	r2, #1
 800a6d2:	409a      	lsls	r2, r3
 800a6d4:	4b2b      	ldr	r3, [pc, #172]	; (800a784 <xTaskResumeAll+0x120>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	4313      	orrs	r3, r2
 800a6da:	4a2a      	ldr	r2, [pc, #168]	; (800a784 <xTaskResumeAll+0x120>)
 800a6dc:	6013      	str	r3, [r2, #0]
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6e2:	4613      	mov	r3, r2
 800a6e4:	009b      	lsls	r3, r3, #2
 800a6e6:	4413      	add	r3, r2
 800a6e8:	009b      	lsls	r3, r3, #2
 800a6ea:	4a27      	ldr	r2, [pc, #156]	; (800a788 <xTaskResumeAll+0x124>)
 800a6ec:	441a      	add	r2, r3
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	3304      	adds	r3, #4
 800a6f2:	4619      	mov	r1, r3
 800a6f4:	4610      	mov	r0, r2
 800a6f6:	f7fe fd73 	bl	80091e0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6fe:	4b23      	ldr	r3, [pc, #140]	; (800a78c <xTaskResumeAll+0x128>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a704:	429a      	cmp	r2, r3
 800a706:	d302      	bcc.n	800a70e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a708:	4b21      	ldr	r3, [pc, #132]	; (800a790 <xTaskResumeAll+0x12c>)
 800a70a:	2201      	movs	r2, #1
 800a70c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a70e:	4b1c      	ldr	r3, [pc, #112]	; (800a780 <xTaskResumeAll+0x11c>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d1cc      	bne.n	800a6b0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d001      	beq.n	800a720 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a71c:	f000 fdb8 	bl	800b290 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a720:	4b1c      	ldr	r3, [pc, #112]	; (800a794 <xTaskResumeAll+0x130>)
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d010      	beq.n	800a74e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a72c:	f000 f8d6 	bl	800a8dc <xTaskIncrementTick>
 800a730:	4603      	mov	r3, r0
 800a732:	2b00      	cmp	r3, #0
 800a734:	d002      	beq.n	800a73c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a736:	4b16      	ldr	r3, [pc, #88]	; (800a790 <xTaskResumeAll+0x12c>)
 800a738:	2201      	movs	r2, #1
 800a73a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	3b01      	subs	r3, #1
 800a740:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d1f1      	bne.n	800a72c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800a748:	4b12      	ldr	r3, [pc, #72]	; (800a794 <xTaskResumeAll+0x130>)
 800a74a:	2200      	movs	r2, #0
 800a74c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a74e:	4b10      	ldr	r3, [pc, #64]	; (800a790 <xTaskResumeAll+0x12c>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d009      	beq.n	800a76a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a756:	2301      	movs	r3, #1
 800a758:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a75a:	4b0f      	ldr	r3, [pc, #60]	; (800a798 <xTaskResumeAll+0x134>)
 800a75c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a760:	601a      	str	r2, [r3, #0]
 800a762:	f3bf 8f4f 	dsb	sy
 800a766:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a76a:	f001 fd83 	bl	800c274 <vPortExitCritical>

	return xAlreadyYielded;
 800a76e:	68bb      	ldr	r3, [r7, #8]
}
 800a770:	4618      	mov	r0, r3
 800a772:	3710      	adds	r7, #16
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}
 800a778:	2000191c 	.word	0x2000191c
 800a77c:	200018f4 	.word	0x200018f4
 800a780:	200018b4 	.word	0x200018b4
 800a784:	200018fc 	.word	0x200018fc
 800a788:	200017f8 	.word	0x200017f8
 800a78c:	200017f4 	.word	0x200017f4
 800a790:	20001908 	.word	0x20001908
 800a794:	20001904 	.word	0x20001904
 800a798:	e000ed04 	.word	0xe000ed04

0800a79c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a79c:	b480      	push	{r7}
 800a79e:	b083      	sub	sp, #12
 800a7a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a7a2:	4b05      	ldr	r3, [pc, #20]	; (800a7b8 <xTaskGetTickCount+0x1c>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a7a8:	687b      	ldr	r3, [r7, #4]
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	370c      	adds	r7, #12
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b4:	4770      	bx	lr
 800a7b6:	bf00      	nop
 800a7b8:	200018f8 	.word	0x200018f8

0800a7bc <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b086      	sub	sp, #24
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	60f8      	str	r0, [r7, #12]
 800a7c4:	60b9      	str	r1, [r7, #8]
 800a7c6:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	617b      	str	r3, [r7, #20]
 800a7cc:	2307      	movs	r3, #7
 800a7ce:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 800a7d0:	f7ff ff3a 	bl	800a648 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800a7d4:	4b3b      	ldr	r3, [pc, #236]	; (800a8c4 <uxTaskGetSystemState+0x108>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	68ba      	ldr	r2, [r7, #8]
 800a7da:	429a      	cmp	r2, r3
 800a7dc:	d36a      	bcc.n	800a8b4 <uxTaskGetSystemState+0xf8>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 800a7de:	693b      	ldr	r3, [r7, #16]
 800a7e0:	3b01      	subs	r3, #1
 800a7e2:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800a7e4:	697a      	ldr	r2, [r7, #20]
 800a7e6:	4613      	mov	r3, r2
 800a7e8:	00db      	lsls	r3, r3, #3
 800a7ea:	4413      	add	r3, r2
 800a7ec:	009b      	lsls	r3, r3, #2
 800a7ee:	461a      	mov	r2, r3
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	1898      	adds	r0, r3, r2
 800a7f4:	693a      	ldr	r2, [r7, #16]
 800a7f6:	4613      	mov	r3, r2
 800a7f8:	009b      	lsls	r3, r3, #2
 800a7fa:	4413      	add	r3, r2
 800a7fc:	009b      	lsls	r3, r3, #2
 800a7fe:	4a32      	ldr	r2, [pc, #200]	; (800a8c8 <uxTaskGetSystemState+0x10c>)
 800a800:	4413      	add	r3, r2
 800a802:	2201      	movs	r2, #1
 800a804:	4619      	mov	r1, r3
 800a806:	f000 fc89 	bl	800b11c <prvListTasksWithinSingleList>
 800a80a:	4602      	mov	r2, r0
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	4413      	add	r3, r2
 800a810:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a812:	693b      	ldr	r3, [r7, #16]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d1e2      	bne.n	800a7de <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800a818:	697a      	ldr	r2, [r7, #20]
 800a81a:	4613      	mov	r3, r2
 800a81c:	00db      	lsls	r3, r3, #3
 800a81e:	4413      	add	r3, r2
 800a820:	009b      	lsls	r3, r3, #2
 800a822:	461a      	mov	r2, r3
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	4413      	add	r3, r2
 800a828:	4a28      	ldr	r2, [pc, #160]	; (800a8cc <uxTaskGetSystemState+0x110>)
 800a82a:	6811      	ldr	r1, [r2, #0]
 800a82c:	2202      	movs	r2, #2
 800a82e:	4618      	mov	r0, r3
 800a830:	f000 fc74 	bl	800b11c <prvListTasksWithinSingleList>
 800a834:	4602      	mov	r2, r0
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	4413      	add	r3, r2
 800a83a:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800a83c:	697a      	ldr	r2, [r7, #20]
 800a83e:	4613      	mov	r3, r2
 800a840:	00db      	lsls	r3, r3, #3
 800a842:	4413      	add	r3, r2
 800a844:	009b      	lsls	r3, r3, #2
 800a846:	461a      	mov	r2, r3
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	4413      	add	r3, r2
 800a84c:	4a20      	ldr	r2, [pc, #128]	; (800a8d0 <uxTaskGetSystemState+0x114>)
 800a84e:	6811      	ldr	r1, [r2, #0]
 800a850:	2202      	movs	r2, #2
 800a852:	4618      	mov	r0, r3
 800a854:	f000 fc62 	bl	800b11c <prvListTasksWithinSingleList>
 800a858:	4602      	mov	r2, r0
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	4413      	add	r3, r2
 800a85e:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800a860:	697a      	ldr	r2, [r7, #20]
 800a862:	4613      	mov	r3, r2
 800a864:	00db      	lsls	r3, r3, #3
 800a866:	4413      	add	r3, r2
 800a868:	009b      	lsls	r3, r3, #2
 800a86a:	461a      	mov	r2, r3
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	4413      	add	r3, r2
 800a870:	2204      	movs	r2, #4
 800a872:	4918      	ldr	r1, [pc, #96]	; (800a8d4 <uxTaskGetSystemState+0x118>)
 800a874:	4618      	mov	r0, r3
 800a876:	f000 fc51 	bl	800b11c <prvListTasksWithinSingleList>
 800a87a:	4602      	mov	r2, r0
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	4413      	add	r3, r2
 800a880:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800a882:	697a      	ldr	r2, [r7, #20]
 800a884:	4613      	mov	r3, r2
 800a886:	00db      	lsls	r3, r3, #3
 800a888:	4413      	add	r3, r2
 800a88a:	009b      	lsls	r3, r3, #2
 800a88c:	461a      	mov	r2, r3
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	4413      	add	r3, r2
 800a892:	2203      	movs	r2, #3
 800a894:	4910      	ldr	r1, [pc, #64]	; (800a8d8 <uxTaskGetSystemState+0x11c>)
 800a896:	4618      	mov	r0, r3
 800a898:	f000 fc40 	bl	800b11c <prvListTasksWithinSingleList>
 800a89c:	4602      	mov	r2, r0
 800a89e:	697b      	ldr	r3, [r7, #20]
 800a8a0:	4413      	add	r3, r2
 800a8a2:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d004      	beq.n	800a8b4 <uxTaskGetSystemState+0xf8>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800a8aa:	f7f6 fb43 	bl	8000f34 <tim3_get_counter>
 800a8ae:	4602      	mov	r2, r0
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 800a8b4:	f7ff fed6 	bl	800a664 <xTaskResumeAll>

		return uxTask;
 800a8b8:	697b      	ldr	r3, [r7, #20]
	}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	3718      	adds	r7, #24
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}
 800a8c2:	bf00      	nop
 800a8c4:	200018f4 	.word	0x200018f4
 800a8c8:	200017f8 	.word	0x200017f8
 800a8cc:	200018ac 	.word	0x200018ac
 800a8d0:	200018b0 	.word	0x200018b0
 800a8d4:	200018c8 	.word	0x200018c8
 800a8d8:	200018e0 	.word	0x200018e0

0800a8dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b086      	sub	sp, #24
 800a8e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a8e6:	4b52      	ldr	r3, [pc, #328]	; (800aa30 <xTaskIncrementTick+0x154>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	f040 8094 	bne.w	800aa18 <xTaskIncrementTick+0x13c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a8f0:	4b50      	ldr	r3, [pc, #320]	; (800aa34 <xTaskIncrementTick+0x158>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	3301      	adds	r3, #1
 800a8f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a8f8:	4a4e      	ldr	r2, [pc, #312]	; (800aa34 <xTaskIncrementTick+0x158>)
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a8fe:	693b      	ldr	r3, [r7, #16]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d120      	bne.n	800a946 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a904:	4b4c      	ldr	r3, [pc, #304]	; (800aa38 <xTaskIncrementTick+0x15c>)
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d00a      	beq.n	800a924 <xTaskIncrementTick+0x48>
	__asm volatile
 800a90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a912:	f383 8811 	msr	BASEPRI, r3
 800a916:	f3bf 8f6f 	isb	sy
 800a91a:	f3bf 8f4f 	dsb	sy
 800a91e:	603b      	str	r3, [r7, #0]
}
 800a920:	bf00      	nop
 800a922:	e7fe      	b.n	800a922 <xTaskIncrementTick+0x46>
 800a924:	4b44      	ldr	r3, [pc, #272]	; (800aa38 <xTaskIncrementTick+0x15c>)
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	60fb      	str	r3, [r7, #12]
 800a92a:	4b44      	ldr	r3, [pc, #272]	; (800aa3c <xTaskIncrementTick+0x160>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	4a42      	ldr	r2, [pc, #264]	; (800aa38 <xTaskIncrementTick+0x15c>)
 800a930:	6013      	str	r3, [r2, #0]
 800a932:	4a42      	ldr	r2, [pc, #264]	; (800aa3c <xTaskIncrementTick+0x160>)
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	6013      	str	r3, [r2, #0]
 800a938:	4b41      	ldr	r3, [pc, #260]	; (800aa40 <xTaskIncrementTick+0x164>)
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	3301      	adds	r3, #1
 800a93e:	4a40      	ldr	r2, [pc, #256]	; (800aa40 <xTaskIncrementTick+0x164>)
 800a940:	6013      	str	r3, [r2, #0]
 800a942:	f000 fca5 	bl	800b290 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a946:	4b3f      	ldr	r3, [pc, #252]	; (800aa44 <xTaskIncrementTick+0x168>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	693a      	ldr	r2, [r7, #16]
 800a94c:	429a      	cmp	r2, r3
 800a94e:	d348      	bcc.n	800a9e2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a950:	4b39      	ldr	r3, [pc, #228]	; (800aa38 <xTaskIncrementTick+0x15c>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d104      	bne.n	800a964 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a95a:	4b3a      	ldr	r3, [pc, #232]	; (800aa44 <xTaskIncrementTick+0x168>)
 800a95c:	f04f 32ff 	mov.w	r2, #4294967295
 800a960:	601a      	str	r2, [r3, #0]
					break;
 800a962:	e03e      	b.n	800a9e2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a964:	4b34      	ldr	r3, [pc, #208]	; (800aa38 <xTaskIncrementTick+0x15c>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	68db      	ldr	r3, [r3, #12]
 800a96a:	68db      	ldr	r3, [r3, #12]
 800a96c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	685b      	ldr	r3, [r3, #4]
 800a972:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a974:	693a      	ldr	r2, [r7, #16]
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	429a      	cmp	r2, r3
 800a97a:	d203      	bcs.n	800a984 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a97c:	4a31      	ldr	r2, [pc, #196]	; (800aa44 <xTaskIncrementTick+0x168>)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a982:	e02e      	b.n	800a9e2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	3304      	adds	r3, #4
 800a988:	4618      	mov	r0, r3
 800a98a:	f7fe fc86 	bl	800929a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a992:	2b00      	cmp	r3, #0
 800a994:	d004      	beq.n	800a9a0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	3318      	adds	r3, #24
 800a99a:	4618      	mov	r0, r3
 800a99c:	f7fe fc7d 	bl	800929a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9a4:	2201      	movs	r2, #1
 800a9a6:	409a      	lsls	r2, r3
 800a9a8:	4b27      	ldr	r3, [pc, #156]	; (800aa48 <xTaskIncrementTick+0x16c>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	4313      	orrs	r3, r2
 800a9ae:	4a26      	ldr	r2, [pc, #152]	; (800aa48 <xTaskIncrementTick+0x16c>)
 800a9b0:	6013      	str	r3, [r2, #0]
 800a9b2:	68bb      	ldr	r3, [r7, #8]
 800a9b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9b6:	4613      	mov	r3, r2
 800a9b8:	009b      	lsls	r3, r3, #2
 800a9ba:	4413      	add	r3, r2
 800a9bc:	009b      	lsls	r3, r3, #2
 800a9be:	4a23      	ldr	r2, [pc, #140]	; (800aa4c <xTaskIncrementTick+0x170>)
 800a9c0:	441a      	add	r2, r3
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	3304      	adds	r3, #4
 800a9c6:	4619      	mov	r1, r3
 800a9c8:	4610      	mov	r0, r2
 800a9ca:	f7fe fc09 	bl	80091e0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9d2:	4b1f      	ldr	r3, [pc, #124]	; (800aa50 <xTaskIncrementTick+0x174>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9d8:	429a      	cmp	r2, r3
 800a9da:	d3b9      	bcc.n	800a950 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a9dc:	2301      	movs	r3, #1
 800a9de:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a9e0:	e7b6      	b.n	800a950 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a9e2:	4b1b      	ldr	r3, [pc, #108]	; (800aa50 <xTaskIncrementTick+0x174>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9e8:	4918      	ldr	r1, [pc, #96]	; (800aa4c <xTaskIncrementTick+0x170>)
 800a9ea:	4613      	mov	r3, r2
 800a9ec:	009b      	lsls	r3, r3, #2
 800a9ee:	4413      	add	r3, r2
 800a9f0:	009b      	lsls	r3, r3, #2
 800a9f2:	440b      	add	r3, r1
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	2b01      	cmp	r3, #1
 800a9f8:	d901      	bls.n	800a9fe <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 800a9fe:	4b15      	ldr	r3, [pc, #84]	; (800aa54 <xTaskIncrementTick+0x178>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d101      	bne.n	800aa0a <xTaskIncrementTick+0x12e>
			{
				vApplicationTickHook();
 800aa06:	f7f6 fafb 	bl	8001000 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800aa0a:	4b13      	ldr	r3, [pc, #76]	; (800aa58 <xTaskIncrementTick+0x17c>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d009      	beq.n	800aa26 <xTaskIncrementTick+0x14a>
			{
				xSwitchRequired = pdTRUE;
 800aa12:	2301      	movs	r3, #1
 800aa14:	617b      	str	r3, [r7, #20]
 800aa16:	e006      	b.n	800aa26 <xTaskIncrementTick+0x14a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800aa18:	4b0e      	ldr	r3, [pc, #56]	; (800aa54 <xTaskIncrementTick+0x178>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	3301      	adds	r3, #1
 800aa1e:	4a0d      	ldr	r2, [pc, #52]	; (800aa54 <xTaskIncrementTick+0x178>)
 800aa20:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 800aa22:	f7f6 faed 	bl	8001000 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 800aa26:	697b      	ldr	r3, [r7, #20]
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	3718      	adds	r7, #24
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}
 800aa30:	2000191c 	.word	0x2000191c
 800aa34:	200018f8 	.word	0x200018f8
 800aa38:	200018ac 	.word	0x200018ac
 800aa3c:	200018b0 	.word	0x200018b0
 800aa40:	2000190c 	.word	0x2000190c
 800aa44:	20001914 	.word	0x20001914
 800aa48:	200018fc 	.word	0x200018fc
 800aa4c:	200017f8 	.word	0x200017f8
 800aa50:	200017f4 	.word	0x200017f4
 800aa54:	20001904 	.word	0x20001904
 800aa58:	20001908 	.word	0x20001908

0800aa5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b088      	sub	sp, #32
 800aa60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800aa62:	4b46      	ldr	r3, [pc, #280]	; (800ab7c <vTaskSwitchContext+0x120>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d003      	beq.n	800aa72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800aa6a:	4b45      	ldr	r3, [pc, #276]	; (800ab80 <vTaskSwitchContext+0x124>)
 800aa6c:	2201      	movs	r2, #1
 800aa6e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800aa70:	e07f      	b.n	800ab72 <vTaskSwitchContext+0x116>
		xYieldPending = pdFALSE;
 800aa72:	4b43      	ldr	r3, [pc, #268]	; (800ab80 <vTaskSwitchContext+0x124>)
 800aa74:	2200      	movs	r2, #0
 800aa76:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800aa78:	f7f6 fa5c 	bl	8000f34 <tim3_get_counter>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	4a41      	ldr	r2, [pc, #260]	; (800ab84 <vTaskSwitchContext+0x128>)
 800aa80:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800aa82:	4b40      	ldr	r3, [pc, #256]	; (800ab84 <vTaskSwitchContext+0x128>)
 800aa84:	681a      	ldr	r2, [r3, #0]
 800aa86:	4b40      	ldr	r3, [pc, #256]	; (800ab88 <vTaskSwitchContext+0x12c>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	429a      	cmp	r2, r3
 800aa8c:	d909      	bls.n	800aaa2 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800aa8e:	4b3f      	ldr	r3, [pc, #252]	; (800ab8c <vTaskSwitchContext+0x130>)
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800aa94:	4a3b      	ldr	r2, [pc, #236]	; (800ab84 <vTaskSwitchContext+0x128>)
 800aa96:	6810      	ldr	r0, [r2, #0]
 800aa98:	4a3b      	ldr	r2, [pc, #236]	; (800ab88 <vTaskSwitchContext+0x12c>)
 800aa9a:	6812      	ldr	r2, [r2, #0]
 800aa9c:	1a82      	subs	r2, r0, r2
 800aa9e:	440a      	add	r2, r1
 800aaa0:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800aaa2:	4b38      	ldr	r3, [pc, #224]	; (800ab84 <vTaskSwitchContext+0x128>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	4a38      	ldr	r2, [pc, #224]	; (800ab88 <vTaskSwitchContext+0x12c>)
 800aaa8:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800aaaa:	4b38      	ldr	r3, [pc, #224]	; (800ab8c <vTaskSwitchContext+0x130>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aab0:	61fb      	str	r3, [r7, #28]
 800aab2:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800aab6:	61bb      	str	r3, [r7, #24]
 800aab8:	69fb      	ldr	r3, [r7, #28]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	69ba      	ldr	r2, [r7, #24]
 800aabe:	429a      	cmp	r2, r3
 800aac0:	d111      	bne.n	800aae6 <vTaskSwitchContext+0x8a>
 800aac2:	69fb      	ldr	r3, [r7, #28]
 800aac4:	3304      	adds	r3, #4
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	69ba      	ldr	r2, [r7, #24]
 800aaca:	429a      	cmp	r2, r3
 800aacc:	d10b      	bne.n	800aae6 <vTaskSwitchContext+0x8a>
 800aace:	69fb      	ldr	r3, [r7, #28]
 800aad0:	3308      	adds	r3, #8
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	69ba      	ldr	r2, [r7, #24]
 800aad6:	429a      	cmp	r2, r3
 800aad8:	d105      	bne.n	800aae6 <vTaskSwitchContext+0x8a>
 800aada:	69fb      	ldr	r3, [r7, #28]
 800aadc:	330c      	adds	r3, #12
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	69ba      	ldr	r2, [r7, #24]
 800aae2:	429a      	cmp	r2, r3
 800aae4:	d008      	beq.n	800aaf8 <vTaskSwitchContext+0x9c>
 800aae6:	4b29      	ldr	r3, [pc, #164]	; (800ab8c <vTaskSwitchContext+0x130>)
 800aae8:	681a      	ldr	r2, [r3, #0]
 800aaea:	4b28      	ldr	r3, [pc, #160]	; (800ab8c <vTaskSwitchContext+0x130>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	3334      	adds	r3, #52	; 0x34
 800aaf0:	4619      	mov	r1, r3
 800aaf2:	4610      	mov	r0, r2
 800aaf4:	f7f6 fa6c 	bl	8000fd0 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aaf8:	4b25      	ldr	r3, [pc, #148]	; (800ab90 <vTaskSwitchContext+0x134>)
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	fab3 f383 	clz	r3, r3
 800ab04:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ab06:	7afb      	ldrb	r3, [r7, #11]
 800ab08:	f1c3 031f 	rsb	r3, r3, #31
 800ab0c:	617b      	str	r3, [r7, #20]
 800ab0e:	4921      	ldr	r1, [pc, #132]	; (800ab94 <vTaskSwitchContext+0x138>)
 800ab10:	697a      	ldr	r2, [r7, #20]
 800ab12:	4613      	mov	r3, r2
 800ab14:	009b      	lsls	r3, r3, #2
 800ab16:	4413      	add	r3, r2
 800ab18:	009b      	lsls	r3, r3, #2
 800ab1a:	440b      	add	r3, r1
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d10a      	bne.n	800ab38 <vTaskSwitchContext+0xdc>
	__asm volatile
 800ab22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab26:	f383 8811 	msr	BASEPRI, r3
 800ab2a:	f3bf 8f6f 	isb	sy
 800ab2e:	f3bf 8f4f 	dsb	sy
 800ab32:	607b      	str	r3, [r7, #4]
}
 800ab34:	bf00      	nop
 800ab36:	e7fe      	b.n	800ab36 <vTaskSwitchContext+0xda>
 800ab38:	697a      	ldr	r2, [r7, #20]
 800ab3a:	4613      	mov	r3, r2
 800ab3c:	009b      	lsls	r3, r3, #2
 800ab3e:	4413      	add	r3, r2
 800ab40:	009b      	lsls	r3, r3, #2
 800ab42:	4a14      	ldr	r2, [pc, #80]	; (800ab94 <vTaskSwitchContext+0x138>)
 800ab44:	4413      	add	r3, r2
 800ab46:	613b      	str	r3, [r7, #16]
 800ab48:	693b      	ldr	r3, [r7, #16]
 800ab4a:	685b      	ldr	r3, [r3, #4]
 800ab4c:	685a      	ldr	r2, [r3, #4]
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	605a      	str	r2, [r3, #4]
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	685a      	ldr	r2, [r3, #4]
 800ab56:	693b      	ldr	r3, [r7, #16]
 800ab58:	3308      	adds	r3, #8
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	d104      	bne.n	800ab68 <vTaskSwitchContext+0x10c>
 800ab5e:	693b      	ldr	r3, [r7, #16]
 800ab60:	685b      	ldr	r3, [r3, #4]
 800ab62:	685a      	ldr	r2, [r3, #4]
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	605a      	str	r2, [r3, #4]
 800ab68:	693b      	ldr	r3, [r7, #16]
 800ab6a:	685b      	ldr	r3, [r3, #4]
 800ab6c:	68db      	ldr	r3, [r3, #12]
 800ab6e:	4a07      	ldr	r2, [pc, #28]	; (800ab8c <vTaskSwitchContext+0x130>)
 800ab70:	6013      	str	r3, [r2, #0]
}
 800ab72:	bf00      	nop
 800ab74:	3720      	adds	r7, #32
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}
 800ab7a:	bf00      	nop
 800ab7c:	2000191c 	.word	0x2000191c
 800ab80:	20001908 	.word	0x20001908
 800ab84:	20001924 	.word	0x20001924
 800ab88:	20001920 	.word	0x20001920
 800ab8c:	200017f4 	.word	0x200017f4
 800ab90:	200018fc 	.word	0x200018fc
 800ab94:	200017f8 	.word	0x200017f8

0800ab98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b084      	sub	sp, #16
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
 800aba0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d10a      	bne.n	800abbe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800aba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abac:	f383 8811 	msr	BASEPRI, r3
 800abb0:	f3bf 8f6f 	isb	sy
 800abb4:	f3bf 8f4f 	dsb	sy
 800abb8:	60fb      	str	r3, [r7, #12]
}
 800abba:	bf00      	nop
 800abbc:	e7fe      	b.n	800abbc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800abbe:	4b07      	ldr	r3, [pc, #28]	; (800abdc <vTaskPlaceOnEventList+0x44>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	3318      	adds	r3, #24
 800abc4:	4619      	mov	r1, r3
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f7fe fb2e 	bl	8009228 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800abcc:	2101      	movs	r1, #1
 800abce:	6838      	ldr	r0, [r7, #0]
 800abd0:	f000 fdfc 	bl	800b7cc <prvAddCurrentTaskToDelayedList>
}
 800abd4:	bf00      	nop
 800abd6:	3710      	adds	r7, #16
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}
 800abdc:	200017f4 	.word	0x200017f4

0800abe0 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b086      	sub	sp, #24
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	60f8      	str	r0, [r7, #12]
 800abe8:	60b9      	str	r1, [r7, #8]
 800abea:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d10a      	bne.n	800ac08 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800abf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf6:	f383 8811 	msr	BASEPRI, r3
 800abfa:	f3bf 8f6f 	isb	sy
 800abfe:	f3bf 8f4f 	dsb	sy
 800ac02:	617b      	str	r3, [r7, #20]
}
 800ac04:	bf00      	nop
 800ac06:	e7fe      	b.n	800ac06 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800ac08:	4b11      	ldr	r3, [pc, #68]	; (800ac50 <vTaskPlaceOnUnorderedEventList+0x70>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d10a      	bne.n	800ac26 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800ac10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac14:	f383 8811 	msr	BASEPRI, r3
 800ac18:	f3bf 8f6f 	isb	sy
 800ac1c:	f3bf 8f4f 	dsb	sy
 800ac20:	613b      	str	r3, [r7, #16]
}
 800ac22:	bf00      	nop
 800ac24:	e7fe      	b.n	800ac24 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800ac26:	4b0b      	ldr	r3, [pc, #44]	; (800ac54 <vTaskPlaceOnUnorderedEventList+0x74>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	68ba      	ldr	r2, [r7, #8]
 800ac2c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800ac30:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ac32:	4b08      	ldr	r3, [pc, #32]	; (800ac54 <vTaskPlaceOnUnorderedEventList+0x74>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	3318      	adds	r3, #24
 800ac38:	4619      	mov	r1, r3
 800ac3a:	68f8      	ldr	r0, [r7, #12]
 800ac3c:	f7fe fad0 	bl	80091e0 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ac40:	2101      	movs	r1, #1
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f000 fdc2 	bl	800b7cc <prvAddCurrentTaskToDelayedList>
}
 800ac48:	bf00      	nop
 800ac4a:	3718      	adds	r7, #24
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}
 800ac50:	2000191c 	.word	0x2000191c
 800ac54:	200017f4 	.word	0x200017f4

0800ac58 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b086      	sub	sp, #24
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	60f8      	str	r0, [r7, #12]
 800ac60:	60b9      	str	r1, [r7, #8]
 800ac62:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d10a      	bne.n	800ac80 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ac6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac6e:	f383 8811 	msr	BASEPRI, r3
 800ac72:	f3bf 8f6f 	isb	sy
 800ac76:	f3bf 8f4f 	dsb	sy
 800ac7a:	617b      	str	r3, [r7, #20]
}
 800ac7c:	bf00      	nop
 800ac7e:	e7fe      	b.n	800ac7e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ac80:	4b0a      	ldr	r3, [pc, #40]	; (800acac <vTaskPlaceOnEventListRestricted+0x54>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	3318      	adds	r3, #24
 800ac86:	4619      	mov	r1, r3
 800ac88:	68f8      	ldr	r0, [r7, #12]
 800ac8a:	f7fe faa9 	bl	80091e0 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d002      	beq.n	800ac9a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ac94:	f04f 33ff 	mov.w	r3, #4294967295
 800ac98:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ac9a:	6879      	ldr	r1, [r7, #4]
 800ac9c:	68b8      	ldr	r0, [r7, #8]
 800ac9e:	f000 fd95 	bl	800b7cc <prvAddCurrentTaskToDelayedList>
	}
 800aca2:	bf00      	nop
 800aca4:	3718      	adds	r7, #24
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}
 800acaa:	bf00      	nop
 800acac:	200017f4 	.word	0x200017f4

0800acb0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b086      	sub	sp, #24
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	68db      	ldr	r3, [r3, #12]
 800acbc:	68db      	ldr	r3, [r3, #12]
 800acbe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800acc0:	693b      	ldr	r3, [r7, #16]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d10a      	bne.n	800acdc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800acc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acca:	f383 8811 	msr	BASEPRI, r3
 800acce:	f3bf 8f6f 	isb	sy
 800acd2:	f3bf 8f4f 	dsb	sy
 800acd6:	60fb      	str	r3, [r7, #12]
}
 800acd8:	bf00      	nop
 800acda:	e7fe      	b.n	800acda <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800acdc:	693b      	ldr	r3, [r7, #16]
 800acde:	3318      	adds	r3, #24
 800ace0:	4618      	mov	r0, r3
 800ace2:	f7fe fada 	bl	800929a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ace6:	4b1d      	ldr	r3, [pc, #116]	; (800ad5c <xTaskRemoveFromEventList+0xac>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d11c      	bne.n	800ad28 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800acee:	693b      	ldr	r3, [r7, #16]
 800acf0:	3304      	adds	r3, #4
 800acf2:	4618      	mov	r0, r3
 800acf4:	f7fe fad1 	bl	800929a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800acf8:	693b      	ldr	r3, [r7, #16]
 800acfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acfc:	2201      	movs	r2, #1
 800acfe:	409a      	lsls	r2, r3
 800ad00:	4b17      	ldr	r3, [pc, #92]	; (800ad60 <xTaskRemoveFromEventList+0xb0>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	4313      	orrs	r3, r2
 800ad06:	4a16      	ldr	r2, [pc, #88]	; (800ad60 <xTaskRemoveFromEventList+0xb0>)
 800ad08:	6013      	str	r3, [r2, #0]
 800ad0a:	693b      	ldr	r3, [r7, #16]
 800ad0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad0e:	4613      	mov	r3, r2
 800ad10:	009b      	lsls	r3, r3, #2
 800ad12:	4413      	add	r3, r2
 800ad14:	009b      	lsls	r3, r3, #2
 800ad16:	4a13      	ldr	r2, [pc, #76]	; (800ad64 <xTaskRemoveFromEventList+0xb4>)
 800ad18:	441a      	add	r2, r3
 800ad1a:	693b      	ldr	r3, [r7, #16]
 800ad1c:	3304      	adds	r3, #4
 800ad1e:	4619      	mov	r1, r3
 800ad20:	4610      	mov	r0, r2
 800ad22:	f7fe fa5d 	bl	80091e0 <vListInsertEnd>
 800ad26:	e005      	b.n	800ad34 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ad28:	693b      	ldr	r3, [r7, #16]
 800ad2a:	3318      	adds	r3, #24
 800ad2c:	4619      	mov	r1, r3
 800ad2e:	480e      	ldr	r0, [pc, #56]	; (800ad68 <xTaskRemoveFromEventList+0xb8>)
 800ad30:	f7fe fa56 	bl	80091e0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ad34:	693b      	ldr	r3, [r7, #16]
 800ad36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad38:	4b0c      	ldr	r3, [pc, #48]	; (800ad6c <xTaskRemoveFromEventList+0xbc>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad3e:	429a      	cmp	r2, r3
 800ad40:	d905      	bls.n	800ad4e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ad42:	2301      	movs	r3, #1
 800ad44:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ad46:	4b0a      	ldr	r3, [pc, #40]	; (800ad70 <xTaskRemoveFromEventList+0xc0>)
 800ad48:	2201      	movs	r2, #1
 800ad4a:	601a      	str	r2, [r3, #0]
 800ad4c:	e001      	b.n	800ad52 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800ad4e:	2300      	movs	r3, #0
 800ad50:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ad52:	697b      	ldr	r3, [r7, #20]
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	3718      	adds	r7, #24
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}
 800ad5c:	2000191c 	.word	0x2000191c
 800ad60:	200018fc 	.word	0x200018fc
 800ad64:	200017f8 	.word	0x200017f8
 800ad68:	200018b4 	.word	0x200018b4
 800ad6c:	200017f4 	.word	0x200017f4
 800ad70:	20001908 	.word	0x20001908

0800ad74 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b086      	sub	sp, #24
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
 800ad7c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800ad7e:	4b29      	ldr	r3, [pc, #164]	; (800ae24 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d10a      	bne.n	800ad9c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800ad86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad8a:	f383 8811 	msr	BASEPRI, r3
 800ad8e:	f3bf 8f6f 	isb	sy
 800ad92:	f3bf 8f4f 	dsb	sy
 800ad96:	613b      	str	r3, [r7, #16]
}
 800ad98:	bf00      	nop
 800ad9a:	e7fe      	b.n	800ad9a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	68db      	ldr	r3, [r3, #12]
 800adaa:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d10a      	bne.n	800adc8 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800adb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adb6:	f383 8811 	msr	BASEPRI, r3
 800adba:	f3bf 8f6f 	isb	sy
 800adbe:	f3bf 8f4f 	dsb	sy
 800adc2:	60fb      	str	r3, [r7, #12]
}
 800adc4:	bf00      	nop
 800adc6:	e7fe      	b.n	800adc6 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f7fe fa66 	bl	800929a <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	3304      	adds	r3, #4
 800add2:	4618      	mov	r0, r3
 800add4:	f7fe fa61 	bl	800929a <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800addc:	2201      	movs	r2, #1
 800adde:	409a      	lsls	r2, r3
 800ade0:	4b11      	ldr	r3, [pc, #68]	; (800ae28 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	4313      	orrs	r3, r2
 800ade6:	4a10      	ldr	r2, [pc, #64]	; (800ae28 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800ade8:	6013      	str	r3, [r2, #0]
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adee:	4613      	mov	r3, r2
 800adf0:	009b      	lsls	r3, r3, #2
 800adf2:	4413      	add	r3, r2
 800adf4:	009b      	lsls	r3, r3, #2
 800adf6:	4a0d      	ldr	r2, [pc, #52]	; (800ae2c <vTaskRemoveFromUnorderedEventList+0xb8>)
 800adf8:	441a      	add	r2, r3
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	3304      	adds	r3, #4
 800adfe:	4619      	mov	r1, r3
 800ae00:	4610      	mov	r0, r2
 800ae02:	f7fe f9ed 	bl	80091e0 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae0a:	4b09      	ldr	r3, [pc, #36]	; (800ae30 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae10:	429a      	cmp	r2, r3
 800ae12:	d902      	bls.n	800ae1a <vTaskRemoveFromUnorderedEventList+0xa6>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800ae14:	4b07      	ldr	r3, [pc, #28]	; (800ae34 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800ae16:	2201      	movs	r2, #1
 800ae18:	601a      	str	r2, [r3, #0]
	}
}
 800ae1a:	bf00      	nop
 800ae1c:	3718      	adds	r7, #24
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}
 800ae22:	bf00      	nop
 800ae24:	2000191c 	.word	0x2000191c
 800ae28:	200018fc 	.word	0x200018fc
 800ae2c:	200017f8 	.word	0x200017f8
 800ae30:	200017f4 	.word	0x200017f4
 800ae34:	20001908 	.word	0x20001908

0800ae38 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ae38:	b480      	push	{r7}
 800ae3a:	b083      	sub	sp, #12
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ae40:	4b06      	ldr	r3, [pc, #24]	; (800ae5c <vTaskInternalSetTimeOutState+0x24>)
 800ae42:	681a      	ldr	r2, [r3, #0]
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ae48:	4b05      	ldr	r3, [pc, #20]	; (800ae60 <vTaskInternalSetTimeOutState+0x28>)
 800ae4a:	681a      	ldr	r2, [r3, #0]
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	605a      	str	r2, [r3, #4]
}
 800ae50:	bf00      	nop
 800ae52:	370c      	adds	r7, #12
 800ae54:	46bd      	mov	sp, r7
 800ae56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5a:	4770      	bx	lr
 800ae5c:	2000190c 	.word	0x2000190c
 800ae60:	200018f8 	.word	0x200018f8

0800ae64 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b088      	sub	sp, #32
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
 800ae6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d10a      	bne.n	800ae8a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ae74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae78:	f383 8811 	msr	BASEPRI, r3
 800ae7c:	f3bf 8f6f 	isb	sy
 800ae80:	f3bf 8f4f 	dsb	sy
 800ae84:	613b      	str	r3, [r7, #16]
}
 800ae86:	bf00      	nop
 800ae88:	e7fe      	b.n	800ae88 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d10a      	bne.n	800aea6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ae90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae94:	f383 8811 	msr	BASEPRI, r3
 800ae98:	f3bf 8f6f 	isb	sy
 800ae9c:	f3bf 8f4f 	dsb	sy
 800aea0:	60fb      	str	r3, [r7, #12]
}
 800aea2:	bf00      	nop
 800aea4:	e7fe      	b.n	800aea4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800aea6:	f001 f9b5 	bl	800c214 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800aeaa:	4b1d      	ldr	r3, [pc, #116]	; (800af20 <xTaskCheckForTimeOut+0xbc>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	685b      	ldr	r3, [r3, #4]
 800aeb4:	69ba      	ldr	r2, [r7, #24]
 800aeb6:	1ad3      	subs	r3, r2, r3
 800aeb8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aec2:	d102      	bne.n	800aeca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800aec4:	2300      	movs	r3, #0
 800aec6:	61fb      	str	r3, [r7, #28]
 800aec8:	e023      	b.n	800af12 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681a      	ldr	r2, [r3, #0]
 800aece:	4b15      	ldr	r3, [pc, #84]	; (800af24 <xTaskCheckForTimeOut+0xc0>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	429a      	cmp	r2, r3
 800aed4:	d007      	beq.n	800aee6 <xTaskCheckForTimeOut+0x82>
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	685b      	ldr	r3, [r3, #4]
 800aeda:	69ba      	ldr	r2, [r7, #24]
 800aedc:	429a      	cmp	r2, r3
 800aede:	d302      	bcc.n	800aee6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800aee0:	2301      	movs	r3, #1
 800aee2:	61fb      	str	r3, [r7, #28]
 800aee4:	e015      	b.n	800af12 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	697a      	ldr	r2, [r7, #20]
 800aeec:	429a      	cmp	r2, r3
 800aeee:	d20b      	bcs.n	800af08 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	681a      	ldr	r2, [r3, #0]
 800aef4:	697b      	ldr	r3, [r7, #20]
 800aef6:	1ad2      	subs	r2, r2, r3
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f7ff ff9b 	bl	800ae38 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800af02:	2300      	movs	r3, #0
 800af04:	61fb      	str	r3, [r7, #28]
 800af06:	e004      	b.n	800af12 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	2200      	movs	r2, #0
 800af0c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800af0e:	2301      	movs	r3, #1
 800af10:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800af12:	f001 f9af 	bl	800c274 <vPortExitCritical>

	return xReturn;
 800af16:	69fb      	ldr	r3, [r7, #28]
}
 800af18:	4618      	mov	r0, r3
 800af1a:	3720      	adds	r7, #32
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}
 800af20:	200018f8 	.word	0x200018f8
 800af24:	2000190c 	.word	0x2000190c

0800af28 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800af28:	b480      	push	{r7}
 800af2a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800af2c:	4b03      	ldr	r3, [pc, #12]	; (800af3c <vTaskMissedYield+0x14>)
 800af2e:	2201      	movs	r2, #1
 800af30:	601a      	str	r2, [r3, #0]
}
 800af32:	bf00      	nop
 800af34:	46bd      	mov	sp, r7
 800af36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3a:	4770      	bx	lr
 800af3c:	20001908 	.word	0x20001908

0800af40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b082      	sub	sp, #8
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800af48:	f000 f854 	bl	800aff4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800af4c:	4b07      	ldr	r3, [pc, #28]	; (800af6c <prvIdleTask+0x2c>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	2b01      	cmp	r3, #1
 800af52:	d907      	bls.n	800af64 <prvIdleTask+0x24>
			{
				taskYIELD();
 800af54:	4b06      	ldr	r3, [pc, #24]	; (800af70 <prvIdleTask+0x30>)
 800af56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af5a:	601a      	str	r2, [r3, #0]
 800af5c:	f3bf 8f4f 	dsb	sy
 800af60:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800af64:	f7f6 f840 	bl	8000fe8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800af68:	e7ee      	b.n	800af48 <prvIdleTask+0x8>
 800af6a:	bf00      	nop
 800af6c:	200017f8 	.word	0x200017f8
 800af70:	e000ed04 	.word	0xe000ed04

0800af74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b082      	sub	sp, #8
 800af78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800af7a:	2300      	movs	r3, #0
 800af7c:	607b      	str	r3, [r7, #4]
 800af7e:	e00c      	b.n	800af9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800af80:	687a      	ldr	r2, [r7, #4]
 800af82:	4613      	mov	r3, r2
 800af84:	009b      	lsls	r3, r3, #2
 800af86:	4413      	add	r3, r2
 800af88:	009b      	lsls	r3, r3, #2
 800af8a:	4a12      	ldr	r2, [pc, #72]	; (800afd4 <prvInitialiseTaskLists+0x60>)
 800af8c:	4413      	add	r3, r2
 800af8e:	4618      	mov	r0, r3
 800af90:	f7fe f8f9 	bl	8009186 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	3301      	adds	r3, #1
 800af98:	607b      	str	r3, [r7, #4]
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	2b06      	cmp	r3, #6
 800af9e:	d9ef      	bls.n	800af80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800afa0:	480d      	ldr	r0, [pc, #52]	; (800afd8 <prvInitialiseTaskLists+0x64>)
 800afa2:	f7fe f8f0 	bl	8009186 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800afa6:	480d      	ldr	r0, [pc, #52]	; (800afdc <prvInitialiseTaskLists+0x68>)
 800afa8:	f7fe f8ed 	bl	8009186 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800afac:	480c      	ldr	r0, [pc, #48]	; (800afe0 <prvInitialiseTaskLists+0x6c>)
 800afae:	f7fe f8ea 	bl	8009186 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800afb2:	480c      	ldr	r0, [pc, #48]	; (800afe4 <prvInitialiseTaskLists+0x70>)
 800afb4:	f7fe f8e7 	bl	8009186 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800afb8:	480b      	ldr	r0, [pc, #44]	; (800afe8 <prvInitialiseTaskLists+0x74>)
 800afba:	f7fe f8e4 	bl	8009186 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800afbe:	4b0b      	ldr	r3, [pc, #44]	; (800afec <prvInitialiseTaskLists+0x78>)
 800afc0:	4a05      	ldr	r2, [pc, #20]	; (800afd8 <prvInitialiseTaskLists+0x64>)
 800afc2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800afc4:	4b0a      	ldr	r3, [pc, #40]	; (800aff0 <prvInitialiseTaskLists+0x7c>)
 800afc6:	4a05      	ldr	r2, [pc, #20]	; (800afdc <prvInitialiseTaskLists+0x68>)
 800afc8:	601a      	str	r2, [r3, #0]
}
 800afca:	bf00      	nop
 800afcc:	3708      	adds	r7, #8
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}
 800afd2:	bf00      	nop
 800afd4:	200017f8 	.word	0x200017f8
 800afd8:	20001884 	.word	0x20001884
 800afdc:	20001898 	.word	0x20001898
 800afe0:	200018b4 	.word	0x200018b4
 800afe4:	200018c8 	.word	0x200018c8
 800afe8:	200018e0 	.word	0x200018e0
 800afec:	200018ac 	.word	0x200018ac
 800aff0:	200018b0 	.word	0x200018b0

0800aff4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b082      	sub	sp, #8
 800aff8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800affa:	e019      	b.n	800b030 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800affc:	f001 f90a 	bl	800c214 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b000:	4b10      	ldr	r3, [pc, #64]	; (800b044 <prvCheckTasksWaitingTermination+0x50>)
 800b002:	68db      	ldr	r3, [r3, #12]
 800b004:	68db      	ldr	r3, [r3, #12]
 800b006:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	3304      	adds	r3, #4
 800b00c:	4618      	mov	r0, r3
 800b00e:	f7fe f944 	bl	800929a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b012:	4b0d      	ldr	r3, [pc, #52]	; (800b048 <prvCheckTasksWaitingTermination+0x54>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	3b01      	subs	r3, #1
 800b018:	4a0b      	ldr	r2, [pc, #44]	; (800b048 <prvCheckTasksWaitingTermination+0x54>)
 800b01a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b01c:	4b0b      	ldr	r3, [pc, #44]	; (800b04c <prvCheckTasksWaitingTermination+0x58>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	3b01      	subs	r3, #1
 800b022:	4a0a      	ldr	r2, [pc, #40]	; (800b04c <prvCheckTasksWaitingTermination+0x58>)
 800b024:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b026:	f001 f925 	bl	800c274 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f000 f900 	bl	800b230 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b030:	4b06      	ldr	r3, [pc, #24]	; (800b04c <prvCheckTasksWaitingTermination+0x58>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d1e1      	bne.n	800affc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b038:	bf00      	nop
 800b03a:	bf00      	nop
 800b03c:	3708      	adds	r7, #8
 800b03e:	46bd      	mov	sp, r7
 800b040:	bd80      	pop	{r7, pc}
 800b042:	bf00      	nop
 800b044:	200018c8 	.word	0x200018c8
 800b048:	200018f4 	.word	0x200018f4
 800b04c:	200018dc 	.word	0x200018dc

0800b050 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800b050:	b580      	push	{r7, lr}
 800b052:	b086      	sub	sp, #24
 800b054:	af00      	add	r7, sp, #0
 800b056:	60f8      	str	r0, [r7, #12]
 800b058:	60b9      	str	r1, [r7, #8]
 800b05a:	607a      	str	r2, [r7, #4]
 800b05c:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d102      	bne.n	800b06a <vTaskGetInfo+0x1a>
 800b064:	4b2c      	ldr	r3, [pc, #176]	; (800b118 <vTaskGetInfo+0xc8>)
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	e000      	b.n	800b06c <vTaskGetInfo+0x1c>
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	697a      	ldr	r2, [r7, #20]
 800b072:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800b074:	697b      	ldr	r3, [r7, #20]
 800b076:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800b086:	697b      	ldr	r3, [r7, #20]
 800b088:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b08a:	68bb      	ldr	r3, [r7, #8]
 800b08c:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 800b09e:	697b      	ldr	r3, [r7, #20]
 800b0a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b0a2:	68bb      	ldr	r3, [r7, #8]
 800b0a4:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800b0a6:	78fb      	ldrb	r3, [r7, #3]
 800b0a8:	2b05      	cmp	r3, #5
 800b0aa:	d01a      	beq.n	800b0e2 <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 800b0ac:	4b1a      	ldr	r3, [pc, #104]	; (800b118 <vTaskGetInfo+0xc8>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	697a      	ldr	r2, [r7, #20]
 800b0b2:	429a      	cmp	r2, r3
 800b0b4:	d103      	bne.n	800b0be <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	731a      	strb	r2, [r3, #12]
 800b0bc:	e018      	b.n	800b0f0 <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800b0be:	68bb      	ldr	r3, [r7, #8]
 800b0c0:	78fa      	ldrb	r2, [r7, #3]
 800b0c2:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800b0c4:	78fb      	ldrb	r3, [r7, #3]
 800b0c6:	2b03      	cmp	r3, #3
 800b0c8:	d112      	bne.n	800b0f0 <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 800b0ca:	f7ff fabd 	bl	800a648 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d002      	beq.n	800b0dc <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	2202      	movs	r2, #2
 800b0da:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800b0dc:	f7ff fac2 	bl	800a664 <xTaskResumeAll>
 800b0e0:	e006      	b.n	800b0f0 <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800b0e2:	6978      	ldr	r0, [r7, #20]
 800b0e4:	f7ff f9e2 	bl	800a4ac <eTaskGetState>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	461a      	mov	r2, r3
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d009      	beq.n	800b10a <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800b0f6:	697b      	ldr	r3, [r7, #20]
 800b0f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f000 f860 	bl	800b1c0 <prvTaskCheckFreeStackSpace>
 800b100:	4603      	mov	r3, r0
 800b102:	461a      	mov	r2, r3
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800b108:	e002      	b.n	800b110 <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 800b10a:	68bb      	ldr	r3, [r7, #8]
 800b10c:	2200      	movs	r2, #0
 800b10e:	841a      	strh	r2, [r3, #32]
	}
 800b110:	bf00      	nop
 800b112:	3718      	adds	r7, #24
 800b114:	46bd      	mov	sp, r7
 800b116:	bd80      	pop	{r7, pc}
 800b118:	200017f4 	.word	0x200017f4

0800b11c <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b08a      	sub	sp, #40	; 0x28
 800b120:	af00      	add	r7, sp, #0
 800b122:	60f8      	str	r0, [r7, #12]
 800b124:	60b9      	str	r1, [r7, #8]
 800b126:	4613      	mov	r3, r2
 800b128:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 800b12a:	2300      	movs	r3, #0
 800b12c:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d03f      	beq.n	800b1b6 <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b136:	68bb      	ldr	r3, [r7, #8]
 800b138:	623b      	str	r3, [r7, #32]
 800b13a:	6a3b      	ldr	r3, [r7, #32]
 800b13c:	685b      	ldr	r3, [r3, #4]
 800b13e:	685a      	ldr	r2, [r3, #4]
 800b140:	6a3b      	ldr	r3, [r7, #32]
 800b142:	605a      	str	r2, [r3, #4]
 800b144:	6a3b      	ldr	r3, [r7, #32]
 800b146:	685a      	ldr	r2, [r3, #4]
 800b148:	6a3b      	ldr	r3, [r7, #32]
 800b14a:	3308      	adds	r3, #8
 800b14c:	429a      	cmp	r2, r3
 800b14e:	d104      	bne.n	800b15a <prvListTasksWithinSingleList+0x3e>
 800b150:	6a3b      	ldr	r3, [r7, #32]
 800b152:	685b      	ldr	r3, [r3, #4]
 800b154:	685a      	ldr	r2, [r3, #4]
 800b156:	6a3b      	ldr	r3, [r7, #32]
 800b158:	605a      	str	r2, [r3, #4]
 800b15a:	6a3b      	ldr	r3, [r7, #32]
 800b15c:	685b      	ldr	r3, [r3, #4]
 800b15e:	68db      	ldr	r3, [r3, #12]
 800b160:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b162:	68bb      	ldr	r3, [r7, #8]
 800b164:	61bb      	str	r3, [r7, #24]
 800b166:	69bb      	ldr	r3, [r7, #24]
 800b168:	685b      	ldr	r3, [r3, #4]
 800b16a:	685a      	ldr	r2, [r3, #4]
 800b16c:	69bb      	ldr	r3, [r7, #24]
 800b16e:	605a      	str	r2, [r3, #4]
 800b170:	69bb      	ldr	r3, [r7, #24]
 800b172:	685a      	ldr	r2, [r3, #4]
 800b174:	69bb      	ldr	r3, [r7, #24]
 800b176:	3308      	adds	r3, #8
 800b178:	429a      	cmp	r2, r3
 800b17a:	d104      	bne.n	800b186 <prvListTasksWithinSingleList+0x6a>
 800b17c:	69bb      	ldr	r3, [r7, #24]
 800b17e:	685b      	ldr	r3, [r3, #4]
 800b180:	685a      	ldr	r2, [r3, #4]
 800b182:	69bb      	ldr	r3, [r7, #24]
 800b184:	605a      	str	r2, [r3, #4]
 800b186:	69bb      	ldr	r3, [r7, #24]
 800b188:	685b      	ldr	r3, [r3, #4]
 800b18a:	68db      	ldr	r3, [r3, #12]
 800b18c:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800b18e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b190:	4613      	mov	r3, r2
 800b192:	00db      	lsls	r3, r3, #3
 800b194:	4413      	add	r3, r2
 800b196:	009b      	lsls	r3, r3, #2
 800b198:	461a      	mov	r2, r3
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	1899      	adds	r1, r3, r2
 800b19e:	79fb      	ldrb	r3, [r7, #7]
 800b1a0:	2201      	movs	r2, #1
 800b1a2:	6978      	ldr	r0, [r7, #20]
 800b1a4:	f7ff ff54 	bl	800b050 <vTaskGetInfo>
				uxTask++;
 800b1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1aa:	3301      	adds	r3, #1
 800b1ac:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 800b1ae:	697a      	ldr	r2, [r7, #20]
 800b1b0:	69fb      	ldr	r3, [r7, #28]
 800b1b2:	429a      	cmp	r2, r3
 800b1b4:	d1d5      	bne.n	800b162 <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 800b1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	3728      	adds	r7, #40	; 0x28
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	bd80      	pop	{r7, pc}

0800b1c0 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800b1c0:	b480      	push	{r7}
 800b1c2:	b085      	sub	sp, #20
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800b1cc:	e005      	b.n	800b1da <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	3301      	adds	r3, #1
 800b1d2:	607b      	str	r3, [r7, #4]
			ulCount++;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	3301      	adds	r3, #1
 800b1d8:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	781b      	ldrb	r3, [r3, #0]
 800b1de:	2ba5      	cmp	r3, #165	; 0xa5
 800b1e0:	d0f5      	beq.n	800b1ce <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	089b      	lsrs	r3, r3, #2
 800b1e6:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	b29b      	uxth	r3, r3
	}
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	3714      	adds	r7, #20
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f6:	4770      	bx	lr

0800b1f8 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b086      	sub	sp, #24
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d102      	bne.n	800b20c <uxTaskGetStackHighWaterMark+0x14>
 800b206:	4b09      	ldr	r3, [pc, #36]	; (800b22c <uxTaskGetStackHighWaterMark+0x34>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	e000      	b.n	800b20e <uxTaskGetStackHighWaterMark+0x16>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800b210:	697b      	ldr	r3, [r7, #20]
 800b212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b214:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800b216:	6938      	ldr	r0, [r7, #16]
 800b218:	f7ff ffd2 	bl	800b1c0 <prvTaskCheckFreeStackSpace>
 800b21c:	4603      	mov	r3, r0
 800b21e:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800b220:	68fb      	ldr	r3, [r7, #12]
	}
 800b222:	4618      	mov	r0, r3
 800b224:	3718      	adds	r7, #24
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}
 800b22a:	bf00      	nop
 800b22c:	200017f4 	.word	0x200017f4

0800b230 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b230:	b580      	push	{r7, lr}
 800b232:	b084      	sub	sp, #16
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d108      	bne.n	800b254 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b246:	4618      	mov	r0, r3
 800b248:	f001 f9d6 	bl	800c5f8 <vPortFree>
				vPortFree( pxTCB );
 800b24c:	6878      	ldr	r0, [r7, #4]
 800b24e:	f001 f9d3 	bl	800c5f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b252:	e018      	b.n	800b286 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b25a:	2b01      	cmp	r3, #1
 800b25c:	d103      	bne.n	800b266 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f001 f9ca 	bl	800c5f8 <vPortFree>
	}
 800b264:	e00f      	b.n	800b286 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b26c:	2b02      	cmp	r3, #2
 800b26e:	d00a      	beq.n	800b286 <prvDeleteTCB+0x56>
	__asm volatile
 800b270:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b274:	f383 8811 	msr	BASEPRI, r3
 800b278:	f3bf 8f6f 	isb	sy
 800b27c:	f3bf 8f4f 	dsb	sy
 800b280:	60fb      	str	r3, [r7, #12]
}
 800b282:	bf00      	nop
 800b284:	e7fe      	b.n	800b284 <prvDeleteTCB+0x54>
	}
 800b286:	bf00      	nop
 800b288:	3710      	adds	r7, #16
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bd80      	pop	{r7, pc}
	...

0800b290 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b290:	b480      	push	{r7}
 800b292:	b083      	sub	sp, #12
 800b294:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b296:	4b0c      	ldr	r3, [pc, #48]	; (800b2c8 <prvResetNextTaskUnblockTime+0x38>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d104      	bne.n	800b2aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b2a0:	4b0a      	ldr	r3, [pc, #40]	; (800b2cc <prvResetNextTaskUnblockTime+0x3c>)
 800b2a2:	f04f 32ff 	mov.w	r2, #4294967295
 800b2a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b2a8:	e008      	b.n	800b2bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2aa:	4b07      	ldr	r3, [pc, #28]	; (800b2c8 <prvResetNextTaskUnblockTime+0x38>)
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	68db      	ldr	r3, [r3, #12]
 800b2b0:	68db      	ldr	r3, [r3, #12]
 800b2b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	685b      	ldr	r3, [r3, #4]
 800b2b8:	4a04      	ldr	r2, [pc, #16]	; (800b2cc <prvResetNextTaskUnblockTime+0x3c>)
 800b2ba:	6013      	str	r3, [r2, #0]
}
 800b2bc:	bf00      	nop
 800b2be:	370c      	adds	r7, #12
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c6:	4770      	bx	lr
 800b2c8:	200018ac 	.word	0x200018ac
 800b2cc:	20001914 	.word	0x20001914

0800b2d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b2d0:	b480      	push	{r7}
 800b2d2:	b083      	sub	sp, #12
 800b2d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b2d6:	4b0b      	ldr	r3, [pc, #44]	; (800b304 <xTaskGetSchedulerState+0x34>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d102      	bne.n	800b2e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b2de:	2301      	movs	r3, #1
 800b2e0:	607b      	str	r3, [r7, #4]
 800b2e2:	e008      	b.n	800b2f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2e4:	4b08      	ldr	r3, [pc, #32]	; (800b308 <xTaskGetSchedulerState+0x38>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d102      	bne.n	800b2f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b2ec:	2302      	movs	r3, #2
 800b2ee:	607b      	str	r3, [r7, #4]
 800b2f0:	e001      	b.n	800b2f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b2f6:	687b      	ldr	r3, [r7, #4]
	}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	370c      	adds	r7, #12
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b302:	4770      	bx	lr
 800b304:	20001900 	.word	0x20001900
 800b308:	2000191c 	.word	0x2000191c

0800b30c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b084      	sub	sp, #16
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b318:	2300      	movs	r3, #0
 800b31a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d05e      	beq.n	800b3e0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b322:	68bb      	ldr	r3, [r7, #8]
 800b324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b326:	4b31      	ldr	r3, [pc, #196]	; (800b3ec <xTaskPriorityInherit+0xe0>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b32c:	429a      	cmp	r2, r3
 800b32e:	d24e      	bcs.n	800b3ce <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	699b      	ldr	r3, [r3, #24]
 800b334:	2b00      	cmp	r3, #0
 800b336:	db06      	blt.n	800b346 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b338:	4b2c      	ldr	r3, [pc, #176]	; (800b3ec <xTaskPriorityInherit+0xe0>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b33e:	f1c3 0207 	rsb	r2, r3, #7
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	6959      	ldr	r1, [r3, #20]
 800b34a:	68bb      	ldr	r3, [r7, #8]
 800b34c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b34e:	4613      	mov	r3, r2
 800b350:	009b      	lsls	r3, r3, #2
 800b352:	4413      	add	r3, r2
 800b354:	009b      	lsls	r3, r3, #2
 800b356:	4a26      	ldr	r2, [pc, #152]	; (800b3f0 <xTaskPriorityInherit+0xe4>)
 800b358:	4413      	add	r3, r2
 800b35a:	4299      	cmp	r1, r3
 800b35c:	d12f      	bne.n	800b3be <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	3304      	adds	r3, #4
 800b362:	4618      	mov	r0, r3
 800b364:	f7fd ff99 	bl	800929a <uxListRemove>
 800b368:	4603      	mov	r3, r0
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d10a      	bne.n	800b384 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b372:	2201      	movs	r2, #1
 800b374:	fa02 f303 	lsl.w	r3, r2, r3
 800b378:	43da      	mvns	r2, r3
 800b37a:	4b1e      	ldr	r3, [pc, #120]	; (800b3f4 <xTaskPriorityInherit+0xe8>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	4013      	ands	r3, r2
 800b380:	4a1c      	ldr	r2, [pc, #112]	; (800b3f4 <xTaskPriorityInherit+0xe8>)
 800b382:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b384:	4b19      	ldr	r3, [pc, #100]	; (800b3ec <xTaskPriorityInherit+0xe0>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b392:	2201      	movs	r2, #1
 800b394:	409a      	lsls	r2, r3
 800b396:	4b17      	ldr	r3, [pc, #92]	; (800b3f4 <xTaskPriorityInherit+0xe8>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	4313      	orrs	r3, r2
 800b39c:	4a15      	ldr	r2, [pc, #84]	; (800b3f4 <xTaskPriorityInherit+0xe8>)
 800b39e:	6013      	str	r3, [r2, #0]
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3a4:	4613      	mov	r3, r2
 800b3a6:	009b      	lsls	r3, r3, #2
 800b3a8:	4413      	add	r3, r2
 800b3aa:	009b      	lsls	r3, r3, #2
 800b3ac:	4a10      	ldr	r2, [pc, #64]	; (800b3f0 <xTaskPriorityInherit+0xe4>)
 800b3ae:	441a      	add	r2, r3
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	3304      	adds	r3, #4
 800b3b4:	4619      	mov	r1, r3
 800b3b6:	4610      	mov	r0, r2
 800b3b8:	f7fd ff12 	bl	80091e0 <vListInsertEnd>
 800b3bc:	e004      	b.n	800b3c8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b3be:	4b0b      	ldr	r3, [pc, #44]	; (800b3ec <xTaskPriorityInherit+0xe0>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	60fb      	str	r3, [r7, #12]
 800b3cc:	e008      	b.n	800b3e0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b3d2:	4b06      	ldr	r3, [pc, #24]	; (800b3ec <xTaskPriorityInherit+0xe0>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3d8:	429a      	cmp	r2, r3
 800b3da:	d201      	bcs.n	800b3e0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b3dc:	2301      	movs	r3, #1
 800b3de:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
	}
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	3710      	adds	r7, #16
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}
 800b3ea:	bf00      	nop
 800b3ec:	200017f4 	.word	0x200017f4
 800b3f0:	200017f8 	.word	0x200017f8
 800b3f4:	200018fc 	.word	0x200018fc

0800b3f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b086      	sub	sp, #24
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b404:	2300      	movs	r3, #0
 800b406:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d06e      	beq.n	800b4ec <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b40e:	4b3a      	ldr	r3, [pc, #232]	; (800b4f8 <xTaskPriorityDisinherit+0x100>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	693a      	ldr	r2, [r7, #16]
 800b414:	429a      	cmp	r2, r3
 800b416:	d00a      	beq.n	800b42e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b41c:	f383 8811 	msr	BASEPRI, r3
 800b420:	f3bf 8f6f 	isb	sy
 800b424:	f3bf 8f4f 	dsb	sy
 800b428:	60fb      	str	r3, [r7, #12]
}
 800b42a:	bf00      	nop
 800b42c:	e7fe      	b.n	800b42c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b42e:	693b      	ldr	r3, [r7, #16]
 800b430:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b432:	2b00      	cmp	r3, #0
 800b434:	d10a      	bne.n	800b44c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b43a:	f383 8811 	msr	BASEPRI, r3
 800b43e:	f3bf 8f6f 	isb	sy
 800b442:	f3bf 8f4f 	dsb	sy
 800b446:	60bb      	str	r3, [r7, #8]
}
 800b448:	bf00      	nop
 800b44a:	e7fe      	b.n	800b44a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b44c:	693b      	ldr	r3, [r7, #16]
 800b44e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b450:	1e5a      	subs	r2, r3, #1
 800b452:	693b      	ldr	r3, [r7, #16]
 800b454:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b456:	693b      	ldr	r3, [r7, #16]
 800b458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b45a:	693b      	ldr	r3, [r7, #16]
 800b45c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b45e:	429a      	cmp	r2, r3
 800b460:	d044      	beq.n	800b4ec <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b462:	693b      	ldr	r3, [r7, #16]
 800b464:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b466:	2b00      	cmp	r3, #0
 800b468:	d140      	bne.n	800b4ec <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b46a:	693b      	ldr	r3, [r7, #16]
 800b46c:	3304      	adds	r3, #4
 800b46e:	4618      	mov	r0, r3
 800b470:	f7fd ff13 	bl	800929a <uxListRemove>
 800b474:	4603      	mov	r3, r0
 800b476:	2b00      	cmp	r3, #0
 800b478:	d115      	bne.n	800b4a6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b47a:	693b      	ldr	r3, [r7, #16]
 800b47c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b47e:	491f      	ldr	r1, [pc, #124]	; (800b4fc <xTaskPriorityDisinherit+0x104>)
 800b480:	4613      	mov	r3, r2
 800b482:	009b      	lsls	r3, r3, #2
 800b484:	4413      	add	r3, r2
 800b486:	009b      	lsls	r3, r3, #2
 800b488:	440b      	add	r3, r1
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d10a      	bne.n	800b4a6 <xTaskPriorityDisinherit+0xae>
 800b490:	693b      	ldr	r3, [r7, #16]
 800b492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b494:	2201      	movs	r2, #1
 800b496:	fa02 f303 	lsl.w	r3, r2, r3
 800b49a:	43da      	mvns	r2, r3
 800b49c:	4b18      	ldr	r3, [pc, #96]	; (800b500 <xTaskPriorityDisinherit+0x108>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	4013      	ands	r3, r2
 800b4a2:	4a17      	ldr	r2, [pc, #92]	; (800b500 <xTaskPriorityDisinherit+0x108>)
 800b4a4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b4a6:	693b      	ldr	r3, [r7, #16]
 800b4a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b4aa:	693b      	ldr	r3, [r7, #16]
 800b4ac:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4ae:	693b      	ldr	r3, [r7, #16]
 800b4b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4b2:	f1c3 0207 	rsb	r2, r3, #7
 800b4b6:	693b      	ldr	r3, [r7, #16]
 800b4b8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b4ba:	693b      	ldr	r3, [r7, #16]
 800b4bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4be:	2201      	movs	r2, #1
 800b4c0:	409a      	lsls	r2, r3
 800b4c2:	4b0f      	ldr	r3, [pc, #60]	; (800b500 <xTaskPriorityDisinherit+0x108>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	4313      	orrs	r3, r2
 800b4c8:	4a0d      	ldr	r2, [pc, #52]	; (800b500 <xTaskPriorityDisinherit+0x108>)
 800b4ca:	6013      	str	r3, [r2, #0]
 800b4cc:	693b      	ldr	r3, [r7, #16]
 800b4ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4d0:	4613      	mov	r3, r2
 800b4d2:	009b      	lsls	r3, r3, #2
 800b4d4:	4413      	add	r3, r2
 800b4d6:	009b      	lsls	r3, r3, #2
 800b4d8:	4a08      	ldr	r2, [pc, #32]	; (800b4fc <xTaskPriorityDisinherit+0x104>)
 800b4da:	441a      	add	r2, r3
 800b4dc:	693b      	ldr	r3, [r7, #16]
 800b4de:	3304      	adds	r3, #4
 800b4e0:	4619      	mov	r1, r3
 800b4e2:	4610      	mov	r0, r2
 800b4e4:	f7fd fe7c 	bl	80091e0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b4ec:	697b      	ldr	r3, [r7, #20]
	}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3718      	adds	r7, #24
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}
 800b4f6:	bf00      	nop
 800b4f8:	200017f4 	.word	0x200017f4
 800b4fc:	200017f8 	.word	0x200017f8
 800b500:	200018fc 	.word	0x200018fc

0800b504 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b504:	b580      	push	{r7, lr}
 800b506:	b088      	sub	sp, #32
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
 800b50c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b512:	2301      	movs	r3, #1
 800b514:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d077      	beq.n	800b60c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b51c:	69bb      	ldr	r3, [r7, #24]
 800b51e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b520:	2b00      	cmp	r3, #0
 800b522:	d10a      	bne.n	800b53a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b524:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b528:	f383 8811 	msr	BASEPRI, r3
 800b52c:	f3bf 8f6f 	isb	sy
 800b530:	f3bf 8f4f 	dsb	sy
 800b534:	60fb      	str	r3, [r7, #12]
}
 800b536:	bf00      	nop
 800b538:	e7fe      	b.n	800b538 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b53a:	69bb      	ldr	r3, [r7, #24]
 800b53c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b53e:	683a      	ldr	r2, [r7, #0]
 800b540:	429a      	cmp	r2, r3
 800b542:	d902      	bls.n	800b54a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	61fb      	str	r3, [r7, #28]
 800b548:	e002      	b.n	800b550 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b54a:	69bb      	ldr	r3, [r7, #24]
 800b54c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b54e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b550:	69bb      	ldr	r3, [r7, #24]
 800b552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b554:	69fa      	ldr	r2, [r7, #28]
 800b556:	429a      	cmp	r2, r3
 800b558:	d058      	beq.n	800b60c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b55a:	69bb      	ldr	r3, [r7, #24]
 800b55c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b55e:	697a      	ldr	r2, [r7, #20]
 800b560:	429a      	cmp	r2, r3
 800b562:	d153      	bne.n	800b60c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b564:	4b2b      	ldr	r3, [pc, #172]	; (800b614 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	69ba      	ldr	r2, [r7, #24]
 800b56a:	429a      	cmp	r2, r3
 800b56c:	d10a      	bne.n	800b584 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b572:	f383 8811 	msr	BASEPRI, r3
 800b576:	f3bf 8f6f 	isb	sy
 800b57a:	f3bf 8f4f 	dsb	sy
 800b57e:	60bb      	str	r3, [r7, #8]
}
 800b580:	bf00      	nop
 800b582:	e7fe      	b.n	800b582 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b584:	69bb      	ldr	r3, [r7, #24]
 800b586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b588:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b58a:	69bb      	ldr	r3, [r7, #24]
 800b58c:	69fa      	ldr	r2, [r7, #28]
 800b58e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b590:	69bb      	ldr	r3, [r7, #24]
 800b592:	699b      	ldr	r3, [r3, #24]
 800b594:	2b00      	cmp	r3, #0
 800b596:	db04      	blt.n	800b5a2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b598:	69fb      	ldr	r3, [r7, #28]
 800b59a:	f1c3 0207 	rsb	r2, r3, #7
 800b59e:	69bb      	ldr	r3, [r7, #24]
 800b5a0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b5a2:	69bb      	ldr	r3, [r7, #24]
 800b5a4:	6959      	ldr	r1, [r3, #20]
 800b5a6:	693a      	ldr	r2, [r7, #16]
 800b5a8:	4613      	mov	r3, r2
 800b5aa:	009b      	lsls	r3, r3, #2
 800b5ac:	4413      	add	r3, r2
 800b5ae:	009b      	lsls	r3, r3, #2
 800b5b0:	4a19      	ldr	r2, [pc, #100]	; (800b618 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800b5b2:	4413      	add	r3, r2
 800b5b4:	4299      	cmp	r1, r3
 800b5b6:	d129      	bne.n	800b60c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b5b8:	69bb      	ldr	r3, [r7, #24]
 800b5ba:	3304      	adds	r3, #4
 800b5bc:	4618      	mov	r0, r3
 800b5be:	f7fd fe6c 	bl	800929a <uxListRemove>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d10a      	bne.n	800b5de <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800b5c8:	69bb      	ldr	r3, [r7, #24]
 800b5ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5cc:	2201      	movs	r2, #1
 800b5ce:	fa02 f303 	lsl.w	r3, r2, r3
 800b5d2:	43da      	mvns	r2, r3
 800b5d4:	4b11      	ldr	r3, [pc, #68]	; (800b61c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	4013      	ands	r3, r2
 800b5da:	4a10      	ldr	r2, [pc, #64]	; (800b61c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b5dc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b5de:	69bb      	ldr	r3, [r7, #24]
 800b5e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5e2:	2201      	movs	r2, #1
 800b5e4:	409a      	lsls	r2, r3
 800b5e6:	4b0d      	ldr	r3, [pc, #52]	; (800b61c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	4313      	orrs	r3, r2
 800b5ec:	4a0b      	ldr	r2, [pc, #44]	; (800b61c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b5ee:	6013      	str	r3, [r2, #0]
 800b5f0:	69bb      	ldr	r3, [r7, #24]
 800b5f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5f4:	4613      	mov	r3, r2
 800b5f6:	009b      	lsls	r3, r3, #2
 800b5f8:	4413      	add	r3, r2
 800b5fa:	009b      	lsls	r3, r3, #2
 800b5fc:	4a06      	ldr	r2, [pc, #24]	; (800b618 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800b5fe:	441a      	add	r2, r3
 800b600:	69bb      	ldr	r3, [r7, #24]
 800b602:	3304      	adds	r3, #4
 800b604:	4619      	mov	r1, r3
 800b606:	4610      	mov	r0, r2
 800b608:	f7fd fdea 	bl	80091e0 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b60c:	bf00      	nop
 800b60e:	3720      	adds	r7, #32
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}
 800b614:	200017f4 	.word	0x200017f4
 800b618:	200017f8 	.word	0x200017f8
 800b61c:	200018fc 	.word	0x200018fc

0800b620 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800b620:	b580      	push	{r7, lr}
 800b622:	b084      	sub	sp, #16
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
 800b628:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800b62a:	6839      	ldr	r1, [r7, #0]
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f001 fe65 	bl	800d2fc <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800b632:	6878      	ldr	r0, [r7, #4]
 800b634:	f7f4 fddc 	bl	80001f0 <strlen>
 800b638:	60f8      	str	r0, [r7, #12]
 800b63a:	e007      	b.n	800b64c <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 800b63c:	687a      	ldr	r2, [r7, #4]
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	4413      	add	r3, r2
 800b642:	2220      	movs	r2, #32
 800b644:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	3301      	adds	r3, #1
 800b64a:	60fb      	str	r3, [r7, #12]
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	2b0e      	cmp	r3, #14
 800b650:	d9f4      	bls.n	800b63c <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 800b652:	687a      	ldr	r2, [r7, #4]
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	4413      	add	r3, r2
 800b658:	2200      	movs	r2, #0
 800b65a:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 800b65c:	687a      	ldr	r2, [r7, #4]
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	4413      	add	r3, r2
	}
 800b662:	4618      	mov	r0, r3
 800b664:	3710      	adds	r7, #16
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}
	...

0800b66c <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b088      	sub	sp, #32
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2200      	movs	r2, #0
 800b678:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800b67a:	4b3a      	ldr	r3, [pc, #232]	; (800b764 <vTaskGetRunTimeStats+0xf8>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	61bb      	str	r3, [r7, #24]

		/* Allocate an array index for each task.  NOTE!  If
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800b680:	4b38      	ldr	r3, [pc, #224]	; (800b764 <vTaskGetRunTimeStats+0xf8>)
 800b682:	681a      	ldr	r2, [r3, #0]
 800b684:	4613      	mov	r3, r2
 800b686:	00db      	lsls	r3, r3, #3
 800b688:	4413      	add	r3, r2
 800b68a:	009b      	lsls	r3, r3, #2
 800b68c:	4618      	mov	r0, r3
 800b68e:	f000 fee3 	bl	800c458 <pvPortMalloc>
 800b692:	6178      	str	r0, [r7, #20]

		if( pxTaskStatusArray != NULL )
 800b694:	697b      	ldr	r3, [r7, #20]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d05f      	beq.n	800b75a <vTaskGetRunTimeStats+0xee>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800b69a:	f107 030c 	add.w	r3, r7, #12
 800b69e:	461a      	mov	r2, r3
 800b6a0:	69b9      	ldr	r1, [r7, #24]
 800b6a2:	6978      	ldr	r0, [r7, #20]
 800b6a4:	f7ff f88a 	bl	800a7bc <uxTaskGetSystemState>
 800b6a8:	61b8      	str	r0, [r7, #24]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	4a2e      	ldr	r2, [pc, #184]	; (800b768 <vTaskGetRunTimeStats+0xfc>)
 800b6ae:	fba2 2303 	umull	r2, r3, r2, r3
 800b6b2:	095b      	lsrs	r3, r3, #5
 800b6b4:	60fb      	str	r3, [r7, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0UL )
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d04b      	beq.n	800b754 <vTaskGetRunTimeStats+0xe8>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800b6bc:	2300      	movs	r3, #0
 800b6be:	61fb      	str	r3, [r7, #28]
 800b6c0:	e044      	b.n	800b74c <vTaskGetRunTimeStats+0xe0>
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTimeDiv100 has already been divided by 100. */
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800b6c2:	69fa      	ldr	r2, [r7, #28]
 800b6c4:	4613      	mov	r3, r2
 800b6c6:	00db      	lsls	r3, r3, #3
 800b6c8:	4413      	add	r3, r2
 800b6ca:	009b      	lsls	r3, r3, #2
 800b6cc:	461a      	mov	r2, r3
 800b6ce:	697b      	ldr	r3, [r7, #20]
 800b6d0:	4413      	add	r3, r2
 800b6d2:	699a      	ldr	r2, [r3, #24]
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6da:	613b      	str	r3, [r7, #16]

					/* Write the task name to the string, padding with
					spaces so it can be printed in tabular form more
					easily. */
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800b6dc:	69fa      	ldr	r2, [r7, #28]
 800b6de:	4613      	mov	r3, r2
 800b6e0:	00db      	lsls	r3, r3, #3
 800b6e2:	4413      	add	r3, r2
 800b6e4:	009b      	lsls	r3, r3, #2
 800b6e6:	461a      	mov	r2, r3
 800b6e8:	697b      	ldr	r3, [r7, #20]
 800b6ea:	4413      	add	r3, r2
 800b6ec:	685b      	ldr	r3, [r3, #4]
 800b6ee:	4619      	mov	r1, r3
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f7ff ff95 	bl	800b620 <prvWriteNameToBuffer>
 800b6f6:	6078      	str	r0, [r7, #4]

					if( ulStatsAsPercentage > 0UL )
 800b6f8:	693b      	ldr	r3, [r7, #16]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d00e      	beq.n	800b71c <vTaskGetRunTimeStats+0xb0>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800b6fe:	69fa      	ldr	r2, [r7, #28]
 800b700:	4613      	mov	r3, r2
 800b702:	00db      	lsls	r3, r3, #3
 800b704:	4413      	add	r3, r2
 800b706:	009b      	lsls	r3, r3, #2
 800b708:	461a      	mov	r2, r3
 800b70a:	697b      	ldr	r3, [r7, #20]
 800b70c:	4413      	add	r3, r2
 800b70e:	699a      	ldr	r2, [r3, #24]
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	4916      	ldr	r1, [pc, #88]	; (800b76c <vTaskGetRunTimeStats+0x100>)
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f001 fdd1 	bl	800d2bc <siprintf>
 800b71a:	e00d      	b.n	800b738 <vTaskGetRunTimeStats+0xcc>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800b71c:	69fa      	ldr	r2, [r7, #28]
 800b71e:	4613      	mov	r3, r2
 800b720:	00db      	lsls	r3, r3, #3
 800b722:	4413      	add	r3, r2
 800b724:	009b      	lsls	r3, r3, #2
 800b726:	461a      	mov	r2, r3
 800b728:	697b      	ldr	r3, [r7, #20]
 800b72a:	4413      	add	r3, r2
 800b72c:	699b      	ldr	r3, [r3, #24]
 800b72e:	461a      	mov	r2, r3
 800b730:	490f      	ldr	r1, [pc, #60]	; (800b770 <vTaskGetRunTimeStats+0x104>)
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f001 fdc2 	bl	800d2bc <siprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f7f4 fd59 	bl	80001f0 <strlen>
 800b73e:	4602      	mov	r2, r0
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	4413      	add	r3, r2
 800b744:	607b      	str	r3, [r7, #4]
				for( x = 0; x < uxArraySize; x++ )
 800b746:	69fb      	ldr	r3, [r7, #28]
 800b748:	3301      	adds	r3, #1
 800b74a:	61fb      	str	r3, [r7, #28]
 800b74c:	69fa      	ldr	r2, [r7, #28]
 800b74e:	69bb      	ldr	r3, [r7, #24]
 800b750:	429a      	cmp	r2, r3
 800b752:	d3b6      	bcc.n	800b6c2 <vTaskGetRunTimeStats+0x56>
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800b754:	6978      	ldr	r0, [r7, #20]
 800b756:	f000 ff4f 	bl	800c5f8 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b75a:	bf00      	nop
 800b75c:	3720      	adds	r7, #32
 800b75e:	46bd      	mov	sp, r7
 800b760:	bd80      	pop	{r7, pc}
 800b762:	bf00      	nop
 800b764:	200018f4 	.word	0x200018f4
 800b768:	51eb851f 	.word	0x51eb851f
 800b76c:	080100ac 	.word	0x080100ac
 800b770:	080100b8 	.word	0x080100b8

0800b774 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800b774:	b480      	push	{r7}
 800b776:	b083      	sub	sp, #12
 800b778:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800b77a:	4b09      	ldr	r3, [pc, #36]	; (800b7a0 <uxTaskResetEventItemValue+0x2c>)
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	699b      	ldr	r3, [r3, #24]
 800b780:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b782:	4b07      	ldr	r3, [pc, #28]	; (800b7a0 <uxTaskResetEventItemValue+0x2c>)
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b788:	4b05      	ldr	r3, [pc, #20]	; (800b7a0 <uxTaskResetEventItemValue+0x2c>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	f1c2 0207 	rsb	r2, r2, #7
 800b790:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800b792:	687b      	ldr	r3, [r7, #4]
}
 800b794:	4618      	mov	r0, r3
 800b796:	370c      	adds	r7, #12
 800b798:	46bd      	mov	sp, r7
 800b79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79e:	4770      	bx	lr
 800b7a0:	200017f4 	.word	0x200017f4

0800b7a4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b7a4:	b480      	push	{r7}
 800b7a6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b7a8:	4b07      	ldr	r3, [pc, #28]	; (800b7c8 <pvTaskIncrementMutexHeldCount+0x24>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d004      	beq.n	800b7ba <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b7b0:	4b05      	ldr	r3, [pc, #20]	; (800b7c8 <pvTaskIncrementMutexHeldCount+0x24>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b7b6:	3201      	adds	r2, #1
 800b7b8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b7ba:	4b03      	ldr	r3, [pc, #12]	; (800b7c8 <pvTaskIncrementMutexHeldCount+0x24>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
	}
 800b7be:	4618      	mov	r0, r3
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c6:	4770      	bx	lr
 800b7c8:	200017f4 	.word	0x200017f4

0800b7cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b084      	sub	sp, #16
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b7d6:	4b29      	ldr	r3, [pc, #164]	; (800b87c <prvAddCurrentTaskToDelayedList+0xb0>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b7dc:	4b28      	ldr	r3, [pc, #160]	; (800b880 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	3304      	adds	r3, #4
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f7fd fd59 	bl	800929a <uxListRemove>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d10b      	bne.n	800b806 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b7ee:	4b24      	ldr	r3, [pc, #144]	; (800b880 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7f4:	2201      	movs	r2, #1
 800b7f6:	fa02 f303 	lsl.w	r3, r2, r3
 800b7fa:	43da      	mvns	r2, r3
 800b7fc:	4b21      	ldr	r3, [pc, #132]	; (800b884 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	4013      	ands	r3, r2
 800b802:	4a20      	ldr	r2, [pc, #128]	; (800b884 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b804:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b80c:	d10a      	bne.n	800b824 <prvAddCurrentTaskToDelayedList+0x58>
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d007      	beq.n	800b824 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b814:	4b1a      	ldr	r3, [pc, #104]	; (800b880 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	3304      	adds	r3, #4
 800b81a:	4619      	mov	r1, r3
 800b81c:	481a      	ldr	r0, [pc, #104]	; (800b888 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b81e:	f7fd fcdf 	bl	80091e0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b822:	e026      	b.n	800b872 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b824:	68fa      	ldr	r2, [r7, #12]
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	4413      	add	r3, r2
 800b82a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b82c:	4b14      	ldr	r3, [pc, #80]	; (800b880 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	68ba      	ldr	r2, [r7, #8]
 800b832:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b834:	68ba      	ldr	r2, [r7, #8]
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	429a      	cmp	r2, r3
 800b83a:	d209      	bcs.n	800b850 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b83c:	4b13      	ldr	r3, [pc, #76]	; (800b88c <prvAddCurrentTaskToDelayedList+0xc0>)
 800b83e:	681a      	ldr	r2, [r3, #0]
 800b840:	4b0f      	ldr	r3, [pc, #60]	; (800b880 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	3304      	adds	r3, #4
 800b846:	4619      	mov	r1, r3
 800b848:	4610      	mov	r0, r2
 800b84a:	f7fd fced 	bl	8009228 <vListInsert>
}
 800b84e:	e010      	b.n	800b872 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b850:	4b0f      	ldr	r3, [pc, #60]	; (800b890 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b852:	681a      	ldr	r2, [r3, #0]
 800b854:	4b0a      	ldr	r3, [pc, #40]	; (800b880 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	3304      	adds	r3, #4
 800b85a:	4619      	mov	r1, r3
 800b85c:	4610      	mov	r0, r2
 800b85e:	f7fd fce3 	bl	8009228 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b862:	4b0c      	ldr	r3, [pc, #48]	; (800b894 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	68ba      	ldr	r2, [r7, #8]
 800b868:	429a      	cmp	r2, r3
 800b86a:	d202      	bcs.n	800b872 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b86c:	4a09      	ldr	r2, [pc, #36]	; (800b894 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	6013      	str	r3, [r2, #0]
}
 800b872:	bf00      	nop
 800b874:	3710      	adds	r7, #16
 800b876:	46bd      	mov	sp, r7
 800b878:	bd80      	pop	{r7, pc}
 800b87a:	bf00      	nop
 800b87c:	200018f8 	.word	0x200018f8
 800b880:	200017f4 	.word	0x200017f4
 800b884:	200018fc 	.word	0x200018fc
 800b888:	200018e0 	.word	0x200018e0
 800b88c:	200018b0 	.word	0x200018b0
 800b890:	200018ac 	.word	0x200018ac
 800b894:	20001914 	.word	0x20001914

0800b898 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b08a      	sub	sp, #40	; 0x28
 800b89c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b89e:	2300      	movs	r3, #0
 800b8a0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b8a2:	f000 fb47 	bl	800bf34 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b8a6:	4b1c      	ldr	r3, [pc, #112]	; (800b918 <xTimerCreateTimerTask+0x80>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d021      	beq.n	800b8f2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b8b6:	1d3a      	adds	r2, r7, #4
 800b8b8:	f107 0108 	add.w	r1, r7, #8
 800b8bc:	f107 030c 	add.w	r3, r7, #12
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	f7f5 fb1d 	bl	8000f00 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b8c6:	6879      	ldr	r1, [r7, #4]
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	68fa      	ldr	r2, [r7, #12]
 800b8cc:	9202      	str	r2, [sp, #8]
 800b8ce:	9301      	str	r3, [sp, #4]
 800b8d0:	2306      	movs	r3, #6
 800b8d2:	9300      	str	r3, [sp, #0]
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	460a      	mov	r2, r1
 800b8d8:	4910      	ldr	r1, [pc, #64]	; (800b91c <xTimerCreateTimerTask+0x84>)
 800b8da:	4811      	ldr	r0, [pc, #68]	; (800b920 <xTimerCreateTimerTask+0x88>)
 800b8dc:	f7fe fc10 	bl	800a100 <xTaskCreateStatic>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	4a10      	ldr	r2, [pc, #64]	; (800b924 <xTimerCreateTimerTask+0x8c>)
 800b8e4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b8e6:	4b0f      	ldr	r3, [pc, #60]	; (800b924 <xTimerCreateTimerTask+0x8c>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d001      	beq.n	800b8f2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b8f2:	697b      	ldr	r3, [r7, #20]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d10a      	bne.n	800b90e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b8f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8fc:	f383 8811 	msr	BASEPRI, r3
 800b900:	f3bf 8f6f 	isb	sy
 800b904:	f3bf 8f4f 	dsb	sy
 800b908:	613b      	str	r3, [r7, #16]
}
 800b90a:	bf00      	nop
 800b90c:	e7fe      	b.n	800b90c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b90e:	697b      	ldr	r3, [r7, #20]
}
 800b910:	4618      	mov	r0, r3
 800b912:	3718      	adds	r7, #24
 800b914:	46bd      	mov	sp, r7
 800b916:	bd80      	pop	{r7, pc}
 800b918:	20001958 	.word	0x20001958
 800b91c:	080100c4 	.word	0x080100c4
 800b920:	0800bb15 	.word	0x0800bb15
 800b924:	2000195c 	.word	0x2000195c

0800b928 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b088      	sub	sp, #32
 800b92c:	af02      	add	r7, sp, #8
 800b92e:	60f8      	str	r0, [r7, #12]
 800b930:	60b9      	str	r1, [r7, #8]
 800b932:	607a      	str	r2, [r7, #4]
 800b934:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800b936:	202c      	movs	r0, #44	; 0x2c
 800b938:	f000 fd8e 	bl	800c458 <pvPortMalloc>
 800b93c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800b93e:	697b      	ldr	r3, [r7, #20]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d00d      	beq.n	800b960 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800b944:	697b      	ldr	r3, [r7, #20]
 800b946:	2200      	movs	r2, #0
 800b948:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800b94c:	697b      	ldr	r3, [r7, #20]
 800b94e:	9301      	str	r3, [sp, #4]
 800b950:	6a3b      	ldr	r3, [r7, #32]
 800b952:	9300      	str	r3, [sp, #0]
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	687a      	ldr	r2, [r7, #4]
 800b958:	68b9      	ldr	r1, [r7, #8]
 800b95a:	68f8      	ldr	r0, [r7, #12]
 800b95c:	f000 f805 	bl	800b96a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800b960:	697b      	ldr	r3, [r7, #20]
	}
 800b962:	4618      	mov	r0, r3
 800b964:	3718      	adds	r7, #24
 800b966:	46bd      	mov	sp, r7
 800b968:	bd80      	pop	{r7, pc}

0800b96a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800b96a:	b580      	push	{r7, lr}
 800b96c:	b086      	sub	sp, #24
 800b96e:	af00      	add	r7, sp, #0
 800b970:	60f8      	str	r0, [r7, #12]
 800b972:	60b9      	str	r1, [r7, #8]
 800b974:	607a      	str	r2, [r7, #4]
 800b976:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800b978:	68bb      	ldr	r3, [r7, #8]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d10a      	bne.n	800b994 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800b97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b982:	f383 8811 	msr	BASEPRI, r3
 800b986:	f3bf 8f6f 	isb	sy
 800b98a:	f3bf 8f4f 	dsb	sy
 800b98e:	617b      	str	r3, [r7, #20]
}
 800b990:	bf00      	nop
 800b992:	e7fe      	b.n	800b992 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800b994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b996:	2b00      	cmp	r3, #0
 800b998:	d01e      	beq.n	800b9d8 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800b99a:	f000 facb 	bl	800bf34 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800b99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a0:	68fa      	ldr	r2, [r7, #12]
 800b9a2:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800b9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a6:	68ba      	ldr	r2, [r7, #8]
 800b9a8:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800b9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ac:	683a      	ldr	r2, [r7, #0]
 800b9ae:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800b9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b2:	6a3a      	ldr	r2, [r7, #32]
 800b9b4:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800b9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b8:	3304      	adds	r3, #4
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f7fd fc03 	bl	80091c6 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d008      	beq.n	800b9d8 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800b9c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b9cc:	f043 0304 	orr.w	r3, r3, #4
 800b9d0:	b2da      	uxtb	r2, r3
 800b9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800b9d8:	bf00      	nop
 800b9da:	3718      	adds	r7, #24
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bd80      	pop	{r7, pc}

0800b9e0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b08a      	sub	sp, #40	; 0x28
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	60f8      	str	r0, [r7, #12]
 800b9e8:	60b9      	str	r1, [r7, #8]
 800b9ea:	607a      	str	r2, [r7, #4]
 800b9ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d10a      	bne.n	800ba0e <xTimerGenericCommand+0x2e>
	__asm volatile
 800b9f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9fc:	f383 8811 	msr	BASEPRI, r3
 800ba00:	f3bf 8f6f 	isb	sy
 800ba04:	f3bf 8f4f 	dsb	sy
 800ba08:	623b      	str	r3, [r7, #32]
}
 800ba0a:	bf00      	nop
 800ba0c:	e7fe      	b.n	800ba0c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ba0e:	4b1a      	ldr	r3, [pc, #104]	; (800ba78 <xTimerGenericCommand+0x98>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d02a      	beq.n	800ba6c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ba22:	68bb      	ldr	r3, [r7, #8]
 800ba24:	2b05      	cmp	r3, #5
 800ba26:	dc18      	bgt.n	800ba5a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ba28:	f7ff fc52 	bl	800b2d0 <xTaskGetSchedulerState>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	2b02      	cmp	r3, #2
 800ba30:	d109      	bne.n	800ba46 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ba32:	4b11      	ldr	r3, [pc, #68]	; (800ba78 <xTimerGenericCommand+0x98>)
 800ba34:	6818      	ldr	r0, [r3, #0]
 800ba36:	f107 0114 	add.w	r1, r7, #20
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba3e:	f7fd fdc7 	bl	80095d0 <xQueueGenericSend>
 800ba42:	6278      	str	r0, [r7, #36]	; 0x24
 800ba44:	e012      	b.n	800ba6c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ba46:	4b0c      	ldr	r3, [pc, #48]	; (800ba78 <xTimerGenericCommand+0x98>)
 800ba48:	6818      	ldr	r0, [r3, #0]
 800ba4a:	f107 0114 	add.w	r1, r7, #20
 800ba4e:	2300      	movs	r3, #0
 800ba50:	2200      	movs	r2, #0
 800ba52:	f7fd fdbd 	bl	80095d0 <xQueueGenericSend>
 800ba56:	6278      	str	r0, [r7, #36]	; 0x24
 800ba58:	e008      	b.n	800ba6c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ba5a:	4b07      	ldr	r3, [pc, #28]	; (800ba78 <xTimerGenericCommand+0x98>)
 800ba5c:	6818      	ldr	r0, [r3, #0]
 800ba5e:	f107 0114 	add.w	r1, r7, #20
 800ba62:	2300      	movs	r3, #0
 800ba64:	683a      	ldr	r2, [r7, #0]
 800ba66:	f7fd feb1 	bl	80097cc <xQueueGenericSendFromISR>
 800ba6a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ba6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	3728      	adds	r7, #40	; 0x28
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}
 800ba76:	bf00      	nop
 800ba78:	20001958 	.word	0x20001958

0800ba7c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b088      	sub	sp, #32
 800ba80:	af02      	add	r7, sp, #8
 800ba82:	6078      	str	r0, [r7, #4]
 800ba84:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba86:	4b22      	ldr	r3, [pc, #136]	; (800bb10 <prvProcessExpiredTimer+0x94>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	68db      	ldr	r3, [r3, #12]
 800ba8c:	68db      	ldr	r3, [r3, #12]
 800ba8e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ba90:	697b      	ldr	r3, [r7, #20]
 800ba92:	3304      	adds	r3, #4
 800ba94:	4618      	mov	r0, r3
 800ba96:	f7fd fc00 	bl	800929a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ba9a:	697b      	ldr	r3, [r7, #20]
 800ba9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800baa0:	f003 0304 	and.w	r3, r3, #4
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d022      	beq.n	800baee <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800baa8:	697b      	ldr	r3, [r7, #20]
 800baaa:	699a      	ldr	r2, [r3, #24]
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	18d1      	adds	r1, r2, r3
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	683a      	ldr	r2, [r7, #0]
 800bab4:	6978      	ldr	r0, [r7, #20]
 800bab6:	f000 f8d1 	bl	800bc5c <prvInsertTimerInActiveList>
 800baba:	4603      	mov	r3, r0
 800babc:	2b00      	cmp	r3, #0
 800babe:	d01f      	beq.n	800bb00 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bac0:	2300      	movs	r3, #0
 800bac2:	9300      	str	r3, [sp, #0]
 800bac4:	2300      	movs	r3, #0
 800bac6:	687a      	ldr	r2, [r7, #4]
 800bac8:	2100      	movs	r1, #0
 800baca:	6978      	ldr	r0, [r7, #20]
 800bacc:	f7ff ff88 	bl	800b9e0 <xTimerGenericCommand>
 800bad0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bad2:	693b      	ldr	r3, [r7, #16]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d113      	bne.n	800bb00 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800bad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800badc:	f383 8811 	msr	BASEPRI, r3
 800bae0:	f3bf 8f6f 	isb	sy
 800bae4:	f3bf 8f4f 	dsb	sy
 800bae8:	60fb      	str	r3, [r7, #12]
}
 800baea:	bf00      	nop
 800baec:	e7fe      	b.n	800baec <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800baee:	697b      	ldr	r3, [r7, #20]
 800baf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800baf4:	f023 0301 	bic.w	r3, r3, #1
 800baf8:	b2da      	uxtb	r2, r3
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bb00:	697b      	ldr	r3, [r7, #20]
 800bb02:	6a1b      	ldr	r3, [r3, #32]
 800bb04:	6978      	ldr	r0, [r7, #20]
 800bb06:	4798      	blx	r3
}
 800bb08:	bf00      	nop
 800bb0a:	3718      	adds	r7, #24
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}
 800bb10:	20001950 	.word	0x20001950

0800bb14 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b084      	sub	sp, #16
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bb1c:	f107 0308 	add.w	r3, r7, #8
 800bb20:	4618      	mov	r0, r3
 800bb22:	f000 f857 	bl	800bbd4 <prvGetNextExpireTime>
 800bb26:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bb28:	68bb      	ldr	r3, [r7, #8]
 800bb2a:	4619      	mov	r1, r3
 800bb2c:	68f8      	ldr	r0, [r7, #12]
 800bb2e:	f000 f803 	bl	800bb38 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bb32:	f000 f8d5 	bl	800bce0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bb36:	e7f1      	b.n	800bb1c <prvTimerTask+0x8>

0800bb38 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b084      	sub	sp, #16
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
 800bb40:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bb42:	f7fe fd81 	bl	800a648 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bb46:	f107 0308 	add.w	r3, r7, #8
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f000 f866 	bl	800bc1c <prvSampleTimeNow>
 800bb50:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bb52:	68bb      	ldr	r3, [r7, #8]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d130      	bne.n	800bbba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d10a      	bne.n	800bb74 <prvProcessTimerOrBlockTask+0x3c>
 800bb5e:	687a      	ldr	r2, [r7, #4]
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	429a      	cmp	r2, r3
 800bb64:	d806      	bhi.n	800bb74 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bb66:	f7fe fd7d 	bl	800a664 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bb6a:	68f9      	ldr	r1, [r7, #12]
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	f7ff ff85 	bl	800ba7c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bb72:	e024      	b.n	800bbbe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d008      	beq.n	800bb8c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bb7a:	4b13      	ldr	r3, [pc, #76]	; (800bbc8 <prvProcessTimerOrBlockTask+0x90>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d101      	bne.n	800bb88 <prvProcessTimerOrBlockTask+0x50>
 800bb84:	2301      	movs	r3, #1
 800bb86:	e000      	b.n	800bb8a <prvProcessTimerOrBlockTask+0x52>
 800bb88:	2300      	movs	r3, #0
 800bb8a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bb8c:	4b0f      	ldr	r3, [pc, #60]	; (800bbcc <prvProcessTimerOrBlockTask+0x94>)
 800bb8e:	6818      	ldr	r0, [r3, #0]
 800bb90:	687a      	ldr	r2, [r7, #4]
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	1ad3      	subs	r3, r2, r3
 800bb96:	683a      	ldr	r2, [r7, #0]
 800bb98:	4619      	mov	r1, r3
 800bb9a:	f7fe fa7d 	bl	800a098 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bb9e:	f7fe fd61 	bl	800a664 <xTaskResumeAll>
 800bba2:	4603      	mov	r3, r0
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d10a      	bne.n	800bbbe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bba8:	4b09      	ldr	r3, [pc, #36]	; (800bbd0 <prvProcessTimerOrBlockTask+0x98>)
 800bbaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbae:	601a      	str	r2, [r3, #0]
 800bbb0:	f3bf 8f4f 	dsb	sy
 800bbb4:	f3bf 8f6f 	isb	sy
}
 800bbb8:	e001      	b.n	800bbbe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bbba:	f7fe fd53 	bl	800a664 <xTaskResumeAll>
}
 800bbbe:	bf00      	nop
 800bbc0:	3710      	adds	r7, #16
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}
 800bbc6:	bf00      	nop
 800bbc8:	20001954 	.word	0x20001954
 800bbcc:	20001958 	.word	0x20001958
 800bbd0:	e000ed04 	.word	0xe000ed04

0800bbd4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bbd4:	b480      	push	{r7}
 800bbd6:	b085      	sub	sp, #20
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bbdc:	4b0e      	ldr	r3, [pc, #56]	; (800bc18 <prvGetNextExpireTime+0x44>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d101      	bne.n	800bbea <prvGetNextExpireTime+0x16>
 800bbe6:	2201      	movs	r2, #1
 800bbe8:	e000      	b.n	800bbec <prvGetNextExpireTime+0x18>
 800bbea:	2200      	movs	r2, #0
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d105      	bne.n	800bc04 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bbf8:	4b07      	ldr	r3, [pc, #28]	; (800bc18 <prvGetNextExpireTime+0x44>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	68db      	ldr	r3, [r3, #12]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	60fb      	str	r3, [r7, #12]
 800bc02:	e001      	b.n	800bc08 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bc04:	2300      	movs	r3, #0
 800bc06:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bc08:	68fb      	ldr	r3, [r7, #12]
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	3714      	adds	r7, #20
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc14:	4770      	bx	lr
 800bc16:	bf00      	nop
 800bc18:	20001950 	.word	0x20001950

0800bc1c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b084      	sub	sp, #16
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bc24:	f7fe fdba 	bl	800a79c <xTaskGetTickCount>
 800bc28:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bc2a:	4b0b      	ldr	r3, [pc, #44]	; (800bc58 <prvSampleTimeNow+0x3c>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	68fa      	ldr	r2, [r7, #12]
 800bc30:	429a      	cmp	r2, r3
 800bc32:	d205      	bcs.n	800bc40 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bc34:	f000 f91a 	bl	800be6c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2201      	movs	r2, #1
 800bc3c:	601a      	str	r2, [r3, #0]
 800bc3e:	e002      	b.n	800bc46 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2200      	movs	r2, #0
 800bc44:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bc46:	4a04      	ldr	r2, [pc, #16]	; (800bc58 <prvSampleTimeNow+0x3c>)
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	3710      	adds	r7, #16
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}
 800bc56:	bf00      	nop
 800bc58:	20001960 	.word	0x20001960

0800bc5c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b086      	sub	sp, #24
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	60f8      	str	r0, [r7, #12]
 800bc64:	60b9      	str	r1, [r7, #8]
 800bc66:	607a      	str	r2, [r7, #4]
 800bc68:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	68ba      	ldr	r2, [r7, #8]
 800bc72:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	68fa      	ldr	r2, [r7, #12]
 800bc78:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bc7a:	68ba      	ldr	r2, [r7, #8]
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	429a      	cmp	r2, r3
 800bc80:	d812      	bhi.n	800bca8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc82:	687a      	ldr	r2, [r7, #4]
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	1ad2      	subs	r2, r2, r3
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	699b      	ldr	r3, [r3, #24]
 800bc8c:	429a      	cmp	r2, r3
 800bc8e:	d302      	bcc.n	800bc96 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bc90:	2301      	movs	r3, #1
 800bc92:	617b      	str	r3, [r7, #20]
 800bc94:	e01b      	b.n	800bcce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bc96:	4b10      	ldr	r3, [pc, #64]	; (800bcd8 <prvInsertTimerInActiveList+0x7c>)
 800bc98:	681a      	ldr	r2, [r3, #0]
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	3304      	adds	r3, #4
 800bc9e:	4619      	mov	r1, r3
 800bca0:	4610      	mov	r0, r2
 800bca2:	f7fd fac1 	bl	8009228 <vListInsert>
 800bca6:	e012      	b.n	800bcce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bca8:	687a      	ldr	r2, [r7, #4]
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	429a      	cmp	r2, r3
 800bcae:	d206      	bcs.n	800bcbe <prvInsertTimerInActiveList+0x62>
 800bcb0:	68ba      	ldr	r2, [r7, #8]
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	429a      	cmp	r2, r3
 800bcb6:	d302      	bcc.n	800bcbe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bcb8:	2301      	movs	r3, #1
 800bcba:	617b      	str	r3, [r7, #20]
 800bcbc:	e007      	b.n	800bcce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bcbe:	4b07      	ldr	r3, [pc, #28]	; (800bcdc <prvInsertTimerInActiveList+0x80>)
 800bcc0:	681a      	ldr	r2, [r3, #0]
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	3304      	adds	r3, #4
 800bcc6:	4619      	mov	r1, r3
 800bcc8:	4610      	mov	r0, r2
 800bcca:	f7fd faad 	bl	8009228 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bcce:	697b      	ldr	r3, [r7, #20]
}
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	3718      	adds	r7, #24
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bd80      	pop	{r7, pc}
 800bcd8:	20001954 	.word	0x20001954
 800bcdc:	20001950 	.word	0x20001950

0800bce0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b08c      	sub	sp, #48	; 0x30
 800bce4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bce6:	e0ae      	b.n	800be46 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	f2c0 80aa 	blt.w	800be44 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bcf0:	693b      	ldr	r3, [r7, #16]
 800bcf2:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bcf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcf6:	695b      	ldr	r3, [r3, #20]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d004      	beq.n	800bd06 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bcfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcfe:	3304      	adds	r3, #4
 800bd00:	4618      	mov	r0, r3
 800bd02:	f7fd faca 	bl	800929a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bd06:	1d3b      	adds	r3, r7, #4
 800bd08:	4618      	mov	r0, r3
 800bd0a:	f7ff ff87 	bl	800bc1c <prvSampleTimeNow>
 800bd0e:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	2b09      	cmp	r3, #9
 800bd14:	f200 8097 	bhi.w	800be46 <prvProcessReceivedCommands+0x166>
 800bd18:	a201      	add	r2, pc, #4	; (adr r2, 800bd20 <prvProcessReceivedCommands+0x40>)
 800bd1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd1e:	bf00      	nop
 800bd20:	0800bd49 	.word	0x0800bd49
 800bd24:	0800bd49 	.word	0x0800bd49
 800bd28:	0800bd49 	.word	0x0800bd49
 800bd2c:	0800bdbd 	.word	0x0800bdbd
 800bd30:	0800bdd1 	.word	0x0800bdd1
 800bd34:	0800be1b 	.word	0x0800be1b
 800bd38:	0800bd49 	.word	0x0800bd49
 800bd3c:	0800bd49 	.word	0x0800bd49
 800bd40:	0800bdbd 	.word	0x0800bdbd
 800bd44:	0800bdd1 	.word	0x0800bdd1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bd48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd4e:	f043 0301 	orr.w	r3, r3, #1
 800bd52:	b2da      	uxtb	r2, r3
 800bd54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bd5a:	68fa      	ldr	r2, [r7, #12]
 800bd5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd5e:	699b      	ldr	r3, [r3, #24]
 800bd60:	18d1      	adds	r1, r2, r3
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	6a3a      	ldr	r2, [r7, #32]
 800bd66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bd68:	f7ff ff78 	bl	800bc5c <prvInsertTimerInActiveList>
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d069      	beq.n	800be46 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bd72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd74:	6a1b      	ldr	r3, [r3, #32]
 800bd76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bd78:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bd7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd80:	f003 0304 	and.w	r3, r3, #4
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d05e      	beq.n	800be46 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bd88:	68fa      	ldr	r2, [r7, #12]
 800bd8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd8c:	699b      	ldr	r3, [r3, #24]
 800bd8e:	441a      	add	r2, r3
 800bd90:	2300      	movs	r3, #0
 800bd92:	9300      	str	r3, [sp, #0]
 800bd94:	2300      	movs	r3, #0
 800bd96:	2100      	movs	r1, #0
 800bd98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bd9a:	f7ff fe21 	bl	800b9e0 <xTimerGenericCommand>
 800bd9e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800bda0:	69fb      	ldr	r3, [r7, #28]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d14f      	bne.n	800be46 <prvProcessReceivedCommands+0x166>
	__asm volatile
 800bda6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdaa:	f383 8811 	msr	BASEPRI, r3
 800bdae:	f3bf 8f6f 	isb	sy
 800bdb2:	f3bf 8f4f 	dsb	sy
 800bdb6:	61bb      	str	r3, [r7, #24]
}
 800bdb8:	bf00      	nop
 800bdba:	e7fe      	b.n	800bdba <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bdbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bdc2:	f023 0301 	bic.w	r3, r3, #1
 800bdc6:	b2da      	uxtb	r2, r3
 800bdc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bdce:	e03a      	b.n	800be46 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bdd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bdd6:	f043 0301 	orr.w	r3, r3, #1
 800bdda:	b2da      	uxtb	r2, r3
 800bddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bde2:	68fa      	ldr	r2, [r7, #12]
 800bde4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bde6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bde8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdea:	699b      	ldr	r3, [r3, #24]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d10a      	bne.n	800be06 <prvProcessReceivedCommands+0x126>
	__asm volatile
 800bdf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdf4:	f383 8811 	msr	BASEPRI, r3
 800bdf8:	f3bf 8f6f 	isb	sy
 800bdfc:	f3bf 8f4f 	dsb	sy
 800be00:	617b      	str	r3, [r7, #20]
}
 800be02:	bf00      	nop
 800be04:	e7fe      	b.n	800be04 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800be06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be08:	699a      	ldr	r2, [r3, #24]
 800be0a:	6a3b      	ldr	r3, [r7, #32]
 800be0c:	18d1      	adds	r1, r2, r3
 800be0e:	6a3b      	ldr	r3, [r7, #32]
 800be10:	6a3a      	ldr	r2, [r7, #32]
 800be12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800be14:	f7ff ff22 	bl	800bc5c <prvInsertTimerInActiveList>
					break;
 800be18:	e015      	b.n	800be46 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800be1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be20:	f003 0302 	and.w	r3, r3, #2
 800be24:	2b00      	cmp	r3, #0
 800be26:	d103      	bne.n	800be30 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 800be28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800be2a:	f000 fbe5 	bl	800c5f8 <vPortFree>
 800be2e:	e00a      	b.n	800be46 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800be30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be36:	f023 0301 	bic.w	r3, r3, #1
 800be3a:	b2da      	uxtb	r2, r3
 800be3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800be42:	e000      	b.n	800be46 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800be44:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800be46:	4b08      	ldr	r3, [pc, #32]	; (800be68 <prvProcessReceivedCommands+0x188>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f107 0108 	add.w	r1, r7, #8
 800be4e:	2200      	movs	r2, #0
 800be50:	4618      	mov	r0, r3
 800be52:	f7fd fde3 	bl	8009a1c <xQueueReceive>
 800be56:	4603      	mov	r3, r0
 800be58:	2b00      	cmp	r3, #0
 800be5a:	f47f af45 	bne.w	800bce8 <prvProcessReceivedCommands+0x8>
	}
}
 800be5e:	bf00      	nop
 800be60:	bf00      	nop
 800be62:	3728      	adds	r7, #40	; 0x28
 800be64:	46bd      	mov	sp, r7
 800be66:	bd80      	pop	{r7, pc}
 800be68:	20001958 	.word	0x20001958

0800be6c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b088      	sub	sp, #32
 800be70:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800be72:	e048      	b.n	800bf06 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800be74:	4b2d      	ldr	r3, [pc, #180]	; (800bf2c <prvSwitchTimerLists+0xc0>)
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	68db      	ldr	r3, [r3, #12]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be7e:	4b2b      	ldr	r3, [pc, #172]	; (800bf2c <prvSwitchTimerLists+0xc0>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	68db      	ldr	r3, [r3, #12]
 800be84:	68db      	ldr	r3, [r3, #12]
 800be86:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	3304      	adds	r3, #4
 800be8c:	4618      	mov	r0, r3
 800be8e:	f7fd fa04 	bl	800929a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	6a1b      	ldr	r3, [r3, #32]
 800be96:	68f8      	ldr	r0, [r7, #12]
 800be98:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bea0:	f003 0304 	and.w	r3, r3, #4
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d02e      	beq.n	800bf06 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	699b      	ldr	r3, [r3, #24]
 800beac:	693a      	ldr	r2, [r7, #16]
 800beae:	4413      	add	r3, r2
 800beb0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800beb2:	68ba      	ldr	r2, [r7, #8]
 800beb4:	693b      	ldr	r3, [r7, #16]
 800beb6:	429a      	cmp	r2, r3
 800beb8:	d90e      	bls.n	800bed8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	68ba      	ldr	r2, [r7, #8]
 800bebe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	68fa      	ldr	r2, [r7, #12]
 800bec4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bec6:	4b19      	ldr	r3, [pc, #100]	; (800bf2c <prvSwitchTimerLists+0xc0>)
 800bec8:	681a      	ldr	r2, [r3, #0]
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	3304      	adds	r3, #4
 800bece:	4619      	mov	r1, r3
 800bed0:	4610      	mov	r0, r2
 800bed2:	f7fd f9a9 	bl	8009228 <vListInsert>
 800bed6:	e016      	b.n	800bf06 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bed8:	2300      	movs	r3, #0
 800beda:	9300      	str	r3, [sp, #0]
 800bedc:	2300      	movs	r3, #0
 800bede:	693a      	ldr	r2, [r7, #16]
 800bee0:	2100      	movs	r1, #0
 800bee2:	68f8      	ldr	r0, [r7, #12]
 800bee4:	f7ff fd7c 	bl	800b9e0 <xTimerGenericCommand>
 800bee8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d10a      	bne.n	800bf06 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800bef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef4:	f383 8811 	msr	BASEPRI, r3
 800bef8:	f3bf 8f6f 	isb	sy
 800befc:	f3bf 8f4f 	dsb	sy
 800bf00:	603b      	str	r3, [r7, #0]
}
 800bf02:	bf00      	nop
 800bf04:	e7fe      	b.n	800bf04 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bf06:	4b09      	ldr	r3, [pc, #36]	; (800bf2c <prvSwitchTimerLists+0xc0>)
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d1b1      	bne.n	800be74 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bf10:	4b06      	ldr	r3, [pc, #24]	; (800bf2c <prvSwitchTimerLists+0xc0>)
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bf16:	4b06      	ldr	r3, [pc, #24]	; (800bf30 <prvSwitchTimerLists+0xc4>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	4a04      	ldr	r2, [pc, #16]	; (800bf2c <prvSwitchTimerLists+0xc0>)
 800bf1c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bf1e:	4a04      	ldr	r2, [pc, #16]	; (800bf30 <prvSwitchTimerLists+0xc4>)
 800bf20:	697b      	ldr	r3, [r7, #20]
 800bf22:	6013      	str	r3, [r2, #0]
}
 800bf24:	bf00      	nop
 800bf26:	3718      	adds	r7, #24
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bd80      	pop	{r7, pc}
 800bf2c:	20001950 	.word	0x20001950
 800bf30:	20001954 	.word	0x20001954

0800bf34 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b082      	sub	sp, #8
 800bf38:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bf3a:	f000 f96b 	bl	800c214 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bf3e:	4b15      	ldr	r3, [pc, #84]	; (800bf94 <prvCheckForValidListAndQueue+0x60>)
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d120      	bne.n	800bf88 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bf46:	4814      	ldr	r0, [pc, #80]	; (800bf98 <prvCheckForValidListAndQueue+0x64>)
 800bf48:	f7fd f91d 	bl	8009186 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bf4c:	4813      	ldr	r0, [pc, #76]	; (800bf9c <prvCheckForValidListAndQueue+0x68>)
 800bf4e:	f7fd f91a 	bl	8009186 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bf52:	4b13      	ldr	r3, [pc, #76]	; (800bfa0 <prvCheckForValidListAndQueue+0x6c>)
 800bf54:	4a10      	ldr	r2, [pc, #64]	; (800bf98 <prvCheckForValidListAndQueue+0x64>)
 800bf56:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bf58:	4b12      	ldr	r3, [pc, #72]	; (800bfa4 <prvCheckForValidListAndQueue+0x70>)
 800bf5a:	4a10      	ldr	r2, [pc, #64]	; (800bf9c <prvCheckForValidListAndQueue+0x68>)
 800bf5c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bf5e:	2300      	movs	r3, #0
 800bf60:	9300      	str	r3, [sp, #0]
 800bf62:	4b11      	ldr	r3, [pc, #68]	; (800bfa8 <prvCheckForValidListAndQueue+0x74>)
 800bf64:	4a11      	ldr	r2, [pc, #68]	; (800bfac <prvCheckForValidListAndQueue+0x78>)
 800bf66:	210c      	movs	r1, #12
 800bf68:	200a      	movs	r0, #10
 800bf6a:	f7fd fa29 	bl	80093c0 <xQueueGenericCreateStatic>
 800bf6e:	4603      	mov	r3, r0
 800bf70:	4a08      	ldr	r2, [pc, #32]	; (800bf94 <prvCheckForValidListAndQueue+0x60>)
 800bf72:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bf74:	4b07      	ldr	r3, [pc, #28]	; (800bf94 <prvCheckForValidListAndQueue+0x60>)
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d005      	beq.n	800bf88 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bf7c:	4b05      	ldr	r3, [pc, #20]	; (800bf94 <prvCheckForValidListAndQueue+0x60>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	490b      	ldr	r1, [pc, #44]	; (800bfb0 <prvCheckForValidListAndQueue+0x7c>)
 800bf82:	4618      	mov	r0, r3
 800bf84:	f7fe f85e 	bl	800a044 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bf88:	f000 f974 	bl	800c274 <vPortExitCritical>
}
 800bf8c:	bf00      	nop
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	bd80      	pop	{r7, pc}
 800bf92:	bf00      	nop
 800bf94:	20001958 	.word	0x20001958
 800bf98:	20001928 	.word	0x20001928
 800bf9c:	2000193c 	.word	0x2000193c
 800bfa0:	20001950 	.word	0x20001950
 800bfa4:	20001954 	.word	0x20001954
 800bfa8:	200019dc 	.word	0x200019dc
 800bfac:	20001964 	.word	0x20001964
 800bfb0:	080100cc 	.word	0x080100cc

0800bfb4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bfb4:	b480      	push	{r7}
 800bfb6:	b085      	sub	sp, #20
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	60f8      	str	r0, [r7, #12]
 800bfbc:	60b9      	str	r1, [r7, #8]
 800bfbe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	3b04      	subs	r3, #4
 800bfc4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bfcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	3b04      	subs	r3, #4
 800bfd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	f023 0201 	bic.w	r2, r3, #1
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	3b04      	subs	r3, #4
 800bfe2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bfe4:	4a0c      	ldr	r2, [pc, #48]	; (800c018 <pxPortInitialiseStack+0x64>)
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	3b14      	subs	r3, #20
 800bfee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bff0:	687a      	ldr	r2, [r7, #4]
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	3b04      	subs	r3, #4
 800bffa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	f06f 0202 	mvn.w	r2, #2
 800c002:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	3b20      	subs	r3, #32
 800c008:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c00a:	68fb      	ldr	r3, [r7, #12]
}
 800c00c:	4618      	mov	r0, r3
 800c00e:	3714      	adds	r7, #20
 800c010:	46bd      	mov	sp, r7
 800c012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c016:	4770      	bx	lr
 800c018:	0800c01d 	.word	0x0800c01d

0800c01c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c01c:	b480      	push	{r7}
 800c01e:	b085      	sub	sp, #20
 800c020:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c022:	2300      	movs	r3, #0
 800c024:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c026:	4b12      	ldr	r3, [pc, #72]	; (800c070 <prvTaskExitError+0x54>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c02e:	d00a      	beq.n	800c046 <prvTaskExitError+0x2a>
	__asm volatile
 800c030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c034:	f383 8811 	msr	BASEPRI, r3
 800c038:	f3bf 8f6f 	isb	sy
 800c03c:	f3bf 8f4f 	dsb	sy
 800c040:	60fb      	str	r3, [r7, #12]
}
 800c042:	bf00      	nop
 800c044:	e7fe      	b.n	800c044 <prvTaskExitError+0x28>
	__asm volatile
 800c046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c04a:	f383 8811 	msr	BASEPRI, r3
 800c04e:	f3bf 8f6f 	isb	sy
 800c052:	f3bf 8f4f 	dsb	sy
 800c056:	60bb      	str	r3, [r7, #8]
}
 800c058:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c05a:	bf00      	nop
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d0fc      	beq.n	800c05c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c062:	bf00      	nop
 800c064:	bf00      	nop
 800c066:	3714      	adds	r7, #20
 800c068:	46bd      	mov	sp, r7
 800c06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06e:	4770      	bx	lr
 800c070:	200001e0 	.word	0x200001e0
	...

0800c080 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c080:	4b07      	ldr	r3, [pc, #28]	; (800c0a0 <pxCurrentTCBConst2>)
 800c082:	6819      	ldr	r1, [r3, #0]
 800c084:	6808      	ldr	r0, [r1, #0]
 800c086:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c08a:	f380 8809 	msr	PSP, r0
 800c08e:	f3bf 8f6f 	isb	sy
 800c092:	f04f 0000 	mov.w	r0, #0
 800c096:	f380 8811 	msr	BASEPRI, r0
 800c09a:	4770      	bx	lr
 800c09c:	f3af 8000 	nop.w

0800c0a0 <pxCurrentTCBConst2>:
 800c0a0:	200017f4 	.word	0x200017f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c0a4:	bf00      	nop
 800c0a6:	bf00      	nop

0800c0a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c0a8:	4808      	ldr	r0, [pc, #32]	; (800c0cc <prvPortStartFirstTask+0x24>)
 800c0aa:	6800      	ldr	r0, [r0, #0]
 800c0ac:	6800      	ldr	r0, [r0, #0]
 800c0ae:	f380 8808 	msr	MSP, r0
 800c0b2:	f04f 0000 	mov.w	r0, #0
 800c0b6:	f380 8814 	msr	CONTROL, r0
 800c0ba:	b662      	cpsie	i
 800c0bc:	b661      	cpsie	f
 800c0be:	f3bf 8f4f 	dsb	sy
 800c0c2:	f3bf 8f6f 	isb	sy
 800c0c6:	df00      	svc	0
 800c0c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c0ca:	bf00      	nop
 800c0cc:	e000ed08 	.word	0xe000ed08

0800c0d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b086      	sub	sp, #24
 800c0d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c0d6:	4b46      	ldr	r3, [pc, #280]	; (800c1f0 <xPortStartScheduler+0x120>)
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	4a46      	ldr	r2, [pc, #280]	; (800c1f4 <xPortStartScheduler+0x124>)
 800c0dc:	4293      	cmp	r3, r2
 800c0de:	d10a      	bne.n	800c0f6 <xPortStartScheduler+0x26>
	__asm volatile
 800c0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0e4:	f383 8811 	msr	BASEPRI, r3
 800c0e8:	f3bf 8f6f 	isb	sy
 800c0ec:	f3bf 8f4f 	dsb	sy
 800c0f0:	613b      	str	r3, [r7, #16]
}
 800c0f2:	bf00      	nop
 800c0f4:	e7fe      	b.n	800c0f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c0f6:	4b3e      	ldr	r3, [pc, #248]	; (800c1f0 <xPortStartScheduler+0x120>)
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	4a3f      	ldr	r2, [pc, #252]	; (800c1f8 <xPortStartScheduler+0x128>)
 800c0fc:	4293      	cmp	r3, r2
 800c0fe:	d10a      	bne.n	800c116 <xPortStartScheduler+0x46>
	__asm volatile
 800c100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c104:	f383 8811 	msr	BASEPRI, r3
 800c108:	f3bf 8f6f 	isb	sy
 800c10c:	f3bf 8f4f 	dsb	sy
 800c110:	60fb      	str	r3, [r7, #12]
}
 800c112:	bf00      	nop
 800c114:	e7fe      	b.n	800c114 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c116:	4b39      	ldr	r3, [pc, #228]	; (800c1fc <xPortStartScheduler+0x12c>)
 800c118:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c11a:	697b      	ldr	r3, [r7, #20]
 800c11c:	781b      	ldrb	r3, [r3, #0]
 800c11e:	b2db      	uxtb	r3, r3
 800c120:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c122:	697b      	ldr	r3, [r7, #20]
 800c124:	22ff      	movs	r2, #255	; 0xff
 800c126:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c128:	697b      	ldr	r3, [r7, #20]
 800c12a:	781b      	ldrb	r3, [r3, #0]
 800c12c:	b2db      	uxtb	r3, r3
 800c12e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c130:	78fb      	ldrb	r3, [r7, #3]
 800c132:	b2db      	uxtb	r3, r3
 800c134:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c138:	b2da      	uxtb	r2, r3
 800c13a:	4b31      	ldr	r3, [pc, #196]	; (800c200 <xPortStartScheduler+0x130>)
 800c13c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c13e:	4b31      	ldr	r3, [pc, #196]	; (800c204 <xPortStartScheduler+0x134>)
 800c140:	2207      	movs	r2, #7
 800c142:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c144:	e009      	b.n	800c15a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c146:	4b2f      	ldr	r3, [pc, #188]	; (800c204 <xPortStartScheduler+0x134>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	3b01      	subs	r3, #1
 800c14c:	4a2d      	ldr	r2, [pc, #180]	; (800c204 <xPortStartScheduler+0x134>)
 800c14e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c150:	78fb      	ldrb	r3, [r7, #3]
 800c152:	b2db      	uxtb	r3, r3
 800c154:	005b      	lsls	r3, r3, #1
 800c156:	b2db      	uxtb	r3, r3
 800c158:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c15a:	78fb      	ldrb	r3, [r7, #3]
 800c15c:	b2db      	uxtb	r3, r3
 800c15e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c162:	2b80      	cmp	r3, #128	; 0x80
 800c164:	d0ef      	beq.n	800c146 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c166:	4b27      	ldr	r3, [pc, #156]	; (800c204 <xPortStartScheduler+0x134>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	f1c3 0307 	rsb	r3, r3, #7
 800c16e:	2b04      	cmp	r3, #4
 800c170:	d00a      	beq.n	800c188 <xPortStartScheduler+0xb8>
	__asm volatile
 800c172:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c176:	f383 8811 	msr	BASEPRI, r3
 800c17a:	f3bf 8f6f 	isb	sy
 800c17e:	f3bf 8f4f 	dsb	sy
 800c182:	60bb      	str	r3, [r7, #8]
}
 800c184:	bf00      	nop
 800c186:	e7fe      	b.n	800c186 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c188:	4b1e      	ldr	r3, [pc, #120]	; (800c204 <xPortStartScheduler+0x134>)
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	021b      	lsls	r3, r3, #8
 800c18e:	4a1d      	ldr	r2, [pc, #116]	; (800c204 <xPortStartScheduler+0x134>)
 800c190:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c192:	4b1c      	ldr	r3, [pc, #112]	; (800c204 <xPortStartScheduler+0x134>)
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c19a:	4a1a      	ldr	r2, [pc, #104]	; (800c204 <xPortStartScheduler+0x134>)
 800c19c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	b2da      	uxtb	r2, r3
 800c1a2:	697b      	ldr	r3, [r7, #20]
 800c1a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c1a6:	4b18      	ldr	r3, [pc, #96]	; (800c208 <xPortStartScheduler+0x138>)
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	4a17      	ldr	r2, [pc, #92]	; (800c208 <xPortStartScheduler+0x138>)
 800c1ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c1b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c1b2:	4b15      	ldr	r3, [pc, #84]	; (800c208 <xPortStartScheduler+0x138>)
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	4a14      	ldr	r2, [pc, #80]	; (800c208 <xPortStartScheduler+0x138>)
 800c1b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c1bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c1be:	f000 f8dd 	bl	800c37c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c1c2:	4b12      	ldr	r3, [pc, #72]	; (800c20c <xPortStartScheduler+0x13c>)
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c1c8:	f000 f8fc 	bl	800c3c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c1cc:	4b10      	ldr	r3, [pc, #64]	; (800c210 <xPortStartScheduler+0x140>)
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	4a0f      	ldr	r2, [pc, #60]	; (800c210 <xPortStartScheduler+0x140>)
 800c1d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c1d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c1d8:	f7ff ff66 	bl	800c0a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c1dc:	f7fe fc3e 	bl	800aa5c <vTaskSwitchContext>
	prvTaskExitError();
 800c1e0:	f7ff ff1c 	bl	800c01c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c1e4:	2300      	movs	r3, #0
}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	3718      	adds	r7, #24
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}
 800c1ee:	bf00      	nop
 800c1f0:	e000ed00 	.word	0xe000ed00
 800c1f4:	410fc271 	.word	0x410fc271
 800c1f8:	410fc270 	.word	0x410fc270
 800c1fc:	e000e400 	.word	0xe000e400
 800c200:	20001a2c 	.word	0x20001a2c
 800c204:	20001a30 	.word	0x20001a30
 800c208:	e000ed20 	.word	0xe000ed20
 800c20c:	200001e0 	.word	0x200001e0
 800c210:	e000ef34 	.word	0xe000ef34

0800c214 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c214:	b480      	push	{r7}
 800c216:	b083      	sub	sp, #12
 800c218:	af00      	add	r7, sp, #0
	__asm volatile
 800c21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c21e:	f383 8811 	msr	BASEPRI, r3
 800c222:	f3bf 8f6f 	isb	sy
 800c226:	f3bf 8f4f 	dsb	sy
 800c22a:	607b      	str	r3, [r7, #4]
}
 800c22c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c22e:	4b0f      	ldr	r3, [pc, #60]	; (800c26c <vPortEnterCritical+0x58>)
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	3301      	adds	r3, #1
 800c234:	4a0d      	ldr	r2, [pc, #52]	; (800c26c <vPortEnterCritical+0x58>)
 800c236:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c238:	4b0c      	ldr	r3, [pc, #48]	; (800c26c <vPortEnterCritical+0x58>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	2b01      	cmp	r3, #1
 800c23e:	d10f      	bne.n	800c260 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c240:	4b0b      	ldr	r3, [pc, #44]	; (800c270 <vPortEnterCritical+0x5c>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	b2db      	uxtb	r3, r3
 800c246:	2b00      	cmp	r3, #0
 800c248:	d00a      	beq.n	800c260 <vPortEnterCritical+0x4c>
	__asm volatile
 800c24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c24e:	f383 8811 	msr	BASEPRI, r3
 800c252:	f3bf 8f6f 	isb	sy
 800c256:	f3bf 8f4f 	dsb	sy
 800c25a:	603b      	str	r3, [r7, #0]
}
 800c25c:	bf00      	nop
 800c25e:	e7fe      	b.n	800c25e <vPortEnterCritical+0x4a>
	}
}
 800c260:	bf00      	nop
 800c262:	370c      	adds	r7, #12
 800c264:	46bd      	mov	sp, r7
 800c266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26a:	4770      	bx	lr
 800c26c:	200001e0 	.word	0x200001e0
 800c270:	e000ed04 	.word	0xe000ed04

0800c274 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c274:	b480      	push	{r7}
 800c276:	b083      	sub	sp, #12
 800c278:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c27a:	4b12      	ldr	r3, [pc, #72]	; (800c2c4 <vPortExitCritical+0x50>)
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d10a      	bne.n	800c298 <vPortExitCritical+0x24>
	__asm volatile
 800c282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c286:	f383 8811 	msr	BASEPRI, r3
 800c28a:	f3bf 8f6f 	isb	sy
 800c28e:	f3bf 8f4f 	dsb	sy
 800c292:	607b      	str	r3, [r7, #4]
}
 800c294:	bf00      	nop
 800c296:	e7fe      	b.n	800c296 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c298:	4b0a      	ldr	r3, [pc, #40]	; (800c2c4 <vPortExitCritical+0x50>)
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	3b01      	subs	r3, #1
 800c29e:	4a09      	ldr	r2, [pc, #36]	; (800c2c4 <vPortExitCritical+0x50>)
 800c2a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c2a2:	4b08      	ldr	r3, [pc, #32]	; (800c2c4 <vPortExitCritical+0x50>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d105      	bne.n	800c2b6 <vPortExitCritical+0x42>
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	f383 8811 	msr	BASEPRI, r3
}
 800c2b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c2b6:	bf00      	nop
 800c2b8:	370c      	adds	r7, #12
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c0:	4770      	bx	lr
 800c2c2:	bf00      	nop
 800c2c4:	200001e0 	.word	0x200001e0
	...

0800c2d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c2d0:	f3ef 8009 	mrs	r0, PSP
 800c2d4:	f3bf 8f6f 	isb	sy
 800c2d8:	4b15      	ldr	r3, [pc, #84]	; (800c330 <pxCurrentTCBConst>)
 800c2da:	681a      	ldr	r2, [r3, #0]
 800c2dc:	f01e 0f10 	tst.w	lr, #16
 800c2e0:	bf08      	it	eq
 800c2e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c2e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2ea:	6010      	str	r0, [r2, #0]
 800c2ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c2f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c2f4:	f380 8811 	msr	BASEPRI, r0
 800c2f8:	f3bf 8f4f 	dsb	sy
 800c2fc:	f3bf 8f6f 	isb	sy
 800c300:	f7fe fbac 	bl	800aa5c <vTaskSwitchContext>
 800c304:	f04f 0000 	mov.w	r0, #0
 800c308:	f380 8811 	msr	BASEPRI, r0
 800c30c:	bc09      	pop	{r0, r3}
 800c30e:	6819      	ldr	r1, [r3, #0]
 800c310:	6808      	ldr	r0, [r1, #0]
 800c312:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c316:	f01e 0f10 	tst.w	lr, #16
 800c31a:	bf08      	it	eq
 800c31c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c320:	f380 8809 	msr	PSP, r0
 800c324:	f3bf 8f6f 	isb	sy
 800c328:	4770      	bx	lr
 800c32a:	bf00      	nop
 800c32c:	f3af 8000 	nop.w

0800c330 <pxCurrentTCBConst>:
 800c330:	200017f4 	.word	0x200017f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c334:	bf00      	nop
 800c336:	bf00      	nop

0800c338 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b082      	sub	sp, #8
 800c33c:	af00      	add	r7, sp, #0
	__asm volatile
 800c33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c342:	f383 8811 	msr	BASEPRI, r3
 800c346:	f3bf 8f6f 	isb	sy
 800c34a:	f3bf 8f4f 	dsb	sy
 800c34e:	607b      	str	r3, [r7, #4]
}
 800c350:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c352:	f7fe fac3 	bl	800a8dc <xTaskIncrementTick>
 800c356:	4603      	mov	r3, r0
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d003      	beq.n	800c364 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c35c:	4b06      	ldr	r3, [pc, #24]	; (800c378 <SysTick_Handler+0x40>)
 800c35e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c362:	601a      	str	r2, [r3, #0]
 800c364:	2300      	movs	r3, #0
 800c366:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	f383 8811 	msr	BASEPRI, r3
}
 800c36e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c370:	bf00      	nop
 800c372:	3708      	adds	r7, #8
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}
 800c378:	e000ed04 	.word	0xe000ed04

0800c37c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c37c:	b480      	push	{r7}
 800c37e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c380:	4b0b      	ldr	r3, [pc, #44]	; (800c3b0 <vPortSetupTimerInterrupt+0x34>)
 800c382:	2200      	movs	r2, #0
 800c384:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c386:	4b0b      	ldr	r3, [pc, #44]	; (800c3b4 <vPortSetupTimerInterrupt+0x38>)
 800c388:	2200      	movs	r2, #0
 800c38a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c38c:	4b0a      	ldr	r3, [pc, #40]	; (800c3b8 <vPortSetupTimerInterrupt+0x3c>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	4a0a      	ldr	r2, [pc, #40]	; (800c3bc <vPortSetupTimerInterrupt+0x40>)
 800c392:	fba2 2303 	umull	r2, r3, r2, r3
 800c396:	099b      	lsrs	r3, r3, #6
 800c398:	4a09      	ldr	r2, [pc, #36]	; (800c3c0 <vPortSetupTimerInterrupt+0x44>)
 800c39a:	3b01      	subs	r3, #1
 800c39c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c39e:	4b04      	ldr	r3, [pc, #16]	; (800c3b0 <vPortSetupTimerInterrupt+0x34>)
 800c3a0:	2207      	movs	r2, #7
 800c3a2:	601a      	str	r2, [r3, #0]
}
 800c3a4:	bf00      	nop
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ac:	4770      	bx	lr
 800c3ae:	bf00      	nop
 800c3b0:	e000e010 	.word	0xe000e010
 800c3b4:	e000e018 	.word	0xe000e018
 800c3b8:	20000000 	.word	0x20000000
 800c3bc:	10624dd3 	.word	0x10624dd3
 800c3c0:	e000e014 	.word	0xe000e014

0800c3c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c3c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c3d4 <vPortEnableVFP+0x10>
 800c3c8:	6801      	ldr	r1, [r0, #0]
 800c3ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c3ce:	6001      	str	r1, [r0, #0]
 800c3d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c3d2:	bf00      	nop
 800c3d4:	e000ed88 	.word	0xe000ed88

0800c3d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c3d8:	b480      	push	{r7}
 800c3da:	b085      	sub	sp, #20
 800c3dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c3de:	f3ef 8305 	mrs	r3, IPSR
 800c3e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	2b0f      	cmp	r3, #15
 800c3e8:	d914      	bls.n	800c414 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c3ea:	4a17      	ldr	r2, [pc, #92]	; (800c448 <vPortValidateInterruptPriority+0x70>)
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	4413      	add	r3, r2
 800c3f0:	781b      	ldrb	r3, [r3, #0]
 800c3f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c3f4:	4b15      	ldr	r3, [pc, #84]	; (800c44c <vPortValidateInterruptPriority+0x74>)
 800c3f6:	781b      	ldrb	r3, [r3, #0]
 800c3f8:	7afa      	ldrb	r2, [r7, #11]
 800c3fa:	429a      	cmp	r2, r3
 800c3fc:	d20a      	bcs.n	800c414 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c402:	f383 8811 	msr	BASEPRI, r3
 800c406:	f3bf 8f6f 	isb	sy
 800c40a:	f3bf 8f4f 	dsb	sy
 800c40e:	607b      	str	r3, [r7, #4]
}
 800c410:	bf00      	nop
 800c412:	e7fe      	b.n	800c412 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c414:	4b0e      	ldr	r3, [pc, #56]	; (800c450 <vPortValidateInterruptPriority+0x78>)
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c41c:	4b0d      	ldr	r3, [pc, #52]	; (800c454 <vPortValidateInterruptPriority+0x7c>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	429a      	cmp	r2, r3
 800c422:	d90a      	bls.n	800c43a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c424:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c428:	f383 8811 	msr	BASEPRI, r3
 800c42c:	f3bf 8f6f 	isb	sy
 800c430:	f3bf 8f4f 	dsb	sy
 800c434:	603b      	str	r3, [r7, #0]
}
 800c436:	bf00      	nop
 800c438:	e7fe      	b.n	800c438 <vPortValidateInterruptPriority+0x60>
	}
 800c43a:	bf00      	nop
 800c43c:	3714      	adds	r7, #20
 800c43e:	46bd      	mov	sp, r7
 800c440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c444:	4770      	bx	lr
 800c446:	bf00      	nop
 800c448:	e000e3f0 	.word	0xe000e3f0
 800c44c:	20001a2c 	.word	0x20001a2c
 800c450:	e000ed0c 	.word	0xe000ed0c
 800c454:	20001a30 	.word	0x20001a30

0800c458 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b08a      	sub	sp, #40	; 0x28
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c460:	2300      	movs	r3, #0
 800c462:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c464:	f7fe f8f0 	bl	800a648 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c468:	4b5d      	ldr	r3, [pc, #372]	; (800c5e0 <pvPortMalloc+0x188>)
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d101      	bne.n	800c474 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c470:	f000 f930 	bl	800c6d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c474:	4b5b      	ldr	r3, [pc, #364]	; (800c5e4 <pvPortMalloc+0x18c>)
 800c476:	681a      	ldr	r2, [r3, #0]
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	4013      	ands	r3, r2
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	f040 8093 	bne.w	800c5a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d01d      	beq.n	800c4c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c488:	2208      	movs	r2, #8
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	4413      	add	r3, r2
 800c48e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	f003 0307 	and.w	r3, r3, #7
 800c496:	2b00      	cmp	r3, #0
 800c498:	d014      	beq.n	800c4c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	f023 0307 	bic.w	r3, r3, #7
 800c4a0:	3308      	adds	r3, #8
 800c4a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	f003 0307 	and.w	r3, r3, #7
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d00a      	beq.n	800c4c4 <pvPortMalloc+0x6c>
	__asm volatile
 800c4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4b2:	f383 8811 	msr	BASEPRI, r3
 800c4b6:	f3bf 8f6f 	isb	sy
 800c4ba:	f3bf 8f4f 	dsb	sy
 800c4be:	617b      	str	r3, [r7, #20]
}
 800c4c0:	bf00      	nop
 800c4c2:	e7fe      	b.n	800c4c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d06e      	beq.n	800c5a8 <pvPortMalloc+0x150>
 800c4ca:	4b47      	ldr	r3, [pc, #284]	; (800c5e8 <pvPortMalloc+0x190>)
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	687a      	ldr	r2, [r7, #4]
 800c4d0:	429a      	cmp	r2, r3
 800c4d2:	d869      	bhi.n	800c5a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c4d4:	4b45      	ldr	r3, [pc, #276]	; (800c5ec <pvPortMalloc+0x194>)
 800c4d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c4d8:	4b44      	ldr	r3, [pc, #272]	; (800c5ec <pvPortMalloc+0x194>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c4de:	e004      	b.n	800c4ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ec:	685b      	ldr	r3, [r3, #4]
 800c4ee:	687a      	ldr	r2, [r7, #4]
 800c4f0:	429a      	cmp	r2, r3
 800c4f2:	d903      	bls.n	800c4fc <pvPortMalloc+0xa4>
 800c4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d1f1      	bne.n	800c4e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c4fc:	4b38      	ldr	r3, [pc, #224]	; (800c5e0 <pvPortMalloc+0x188>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c502:	429a      	cmp	r2, r3
 800c504:	d050      	beq.n	800c5a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c506:	6a3b      	ldr	r3, [r7, #32]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	2208      	movs	r2, #8
 800c50c:	4413      	add	r3, r2
 800c50e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c512:	681a      	ldr	r2, [r3, #0]
 800c514:	6a3b      	ldr	r3, [r7, #32]
 800c516:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c51a:	685a      	ldr	r2, [r3, #4]
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	1ad2      	subs	r2, r2, r3
 800c520:	2308      	movs	r3, #8
 800c522:	005b      	lsls	r3, r3, #1
 800c524:	429a      	cmp	r2, r3
 800c526:	d91f      	bls.n	800c568 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	4413      	add	r3, r2
 800c52e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c530:	69bb      	ldr	r3, [r7, #24]
 800c532:	f003 0307 	and.w	r3, r3, #7
 800c536:	2b00      	cmp	r3, #0
 800c538:	d00a      	beq.n	800c550 <pvPortMalloc+0xf8>
	__asm volatile
 800c53a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c53e:	f383 8811 	msr	BASEPRI, r3
 800c542:	f3bf 8f6f 	isb	sy
 800c546:	f3bf 8f4f 	dsb	sy
 800c54a:	613b      	str	r3, [r7, #16]
}
 800c54c:	bf00      	nop
 800c54e:	e7fe      	b.n	800c54e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c552:	685a      	ldr	r2, [r3, #4]
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	1ad2      	subs	r2, r2, r3
 800c558:	69bb      	ldr	r3, [r7, #24]
 800c55a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c55e:	687a      	ldr	r2, [r7, #4]
 800c560:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c562:	69b8      	ldr	r0, [r7, #24]
 800c564:	f000 f918 	bl	800c798 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c568:	4b1f      	ldr	r3, [pc, #124]	; (800c5e8 <pvPortMalloc+0x190>)
 800c56a:	681a      	ldr	r2, [r3, #0]
 800c56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c56e:	685b      	ldr	r3, [r3, #4]
 800c570:	1ad3      	subs	r3, r2, r3
 800c572:	4a1d      	ldr	r2, [pc, #116]	; (800c5e8 <pvPortMalloc+0x190>)
 800c574:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c576:	4b1c      	ldr	r3, [pc, #112]	; (800c5e8 <pvPortMalloc+0x190>)
 800c578:	681a      	ldr	r2, [r3, #0]
 800c57a:	4b1d      	ldr	r3, [pc, #116]	; (800c5f0 <pvPortMalloc+0x198>)
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	429a      	cmp	r2, r3
 800c580:	d203      	bcs.n	800c58a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c582:	4b19      	ldr	r3, [pc, #100]	; (800c5e8 <pvPortMalloc+0x190>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	4a1a      	ldr	r2, [pc, #104]	; (800c5f0 <pvPortMalloc+0x198>)
 800c588:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c58c:	685a      	ldr	r2, [r3, #4]
 800c58e:	4b15      	ldr	r3, [pc, #84]	; (800c5e4 <pvPortMalloc+0x18c>)
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	431a      	orrs	r2, r3
 800c594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c596:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c59a:	2200      	movs	r2, #0
 800c59c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c59e:	4b15      	ldr	r3, [pc, #84]	; (800c5f4 <pvPortMalloc+0x19c>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	3301      	adds	r3, #1
 800c5a4:	4a13      	ldr	r2, [pc, #76]	; (800c5f4 <pvPortMalloc+0x19c>)
 800c5a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c5a8:	f7fe f85c 	bl	800a664 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800c5ac:	69fb      	ldr	r3, [r7, #28]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d101      	bne.n	800c5b6 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800c5b2:	f7f4 fd05 	bl	8000fc0 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c5b6:	69fb      	ldr	r3, [r7, #28]
 800c5b8:	f003 0307 	and.w	r3, r3, #7
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d00a      	beq.n	800c5d6 <pvPortMalloc+0x17e>
	__asm volatile
 800c5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5c4:	f383 8811 	msr	BASEPRI, r3
 800c5c8:	f3bf 8f6f 	isb	sy
 800c5cc:	f3bf 8f4f 	dsb	sy
 800c5d0:	60fb      	str	r3, [r7, #12]
}
 800c5d2:	bf00      	nop
 800c5d4:	e7fe      	b.n	800c5d4 <pvPortMalloc+0x17c>
	return pvReturn;
 800c5d6:	69fb      	ldr	r3, [r7, #28]
}
 800c5d8:	4618      	mov	r0, r3
 800c5da:	3728      	adds	r7, #40	; 0x28
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	bd80      	pop	{r7, pc}
 800c5e0:	2000563c 	.word	0x2000563c
 800c5e4:	20005650 	.word	0x20005650
 800c5e8:	20005640 	.word	0x20005640
 800c5ec:	20005634 	.word	0x20005634
 800c5f0:	20005644 	.word	0x20005644
 800c5f4:	20005648 	.word	0x20005648

0800c5f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b086      	sub	sp, #24
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d04d      	beq.n	800c6a6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c60a:	2308      	movs	r3, #8
 800c60c:	425b      	negs	r3, r3
 800c60e:	697a      	ldr	r2, [r7, #20]
 800c610:	4413      	add	r3, r2
 800c612:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c614:	697b      	ldr	r3, [r7, #20]
 800c616:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c618:	693b      	ldr	r3, [r7, #16]
 800c61a:	685a      	ldr	r2, [r3, #4]
 800c61c:	4b24      	ldr	r3, [pc, #144]	; (800c6b0 <vPortFree+0xb8>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	4013      	ands	r3, r2
 800c622:	2b00      	cmp	r3, #0
 800c624:	d10a      	bne.n	800c63c <vPortFree+0x44>
	__asm volatile
 800c626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c62a:	f383 8811 	msr	BASEPRI, r3
 800c62e:	f3bf 8f6f 	isb	sy
 800c632:	f3bf 8f4f 	dsb	sy
 800c636:	60fb      	str	r3, [r7, #12]
}
 800c638:	bf00      	nop
 800c63a:	e7fe      	b.n	800c63a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c63c:	693b      	ldr	r3, [r7, #16]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d00a      	beq.n	800c65a <vPortFree+0x62>
	__asm volatile
 800c644:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c648:	f383 8811 	msr	BASEPRI, r3
 800c64c:	f3bf 8f6f 	isb	sy
 800c650:	f3bf 8f4f 	dsb	sy
 800c654:	60bb      	str	r3, [r7, #8]
}
 800c656:	bf00      	nop
 800c658:	e7fe      	b.n	800c658 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c65a:	693b      	ldr	r3, [r7, #16]
 800c65c:	685a      	ldr	r2, [r3, #4]
 800c65e:	4b14      	ldr	r3, [pc, #80]	; (800c6b0 <vPortFree+0xb8>)
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	4013      	ands	r3, r2
 800c664:	2b00      	cmp	r3, #0
 800c666:	d01e      	beq.n	800c6a6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c668:	693b      	ldr	r3, [r7, #16]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d11a      	bne.n	800c6a6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c670:	693b      	ldr	r3, [r7, #16]
 800c672:	685a      	ldr	r2, [r3, #4]
 800c674:	4b0e      	ldr	r3, [pc, #56]	; (800c6b0 <vPortFree+0xb8>)
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	43db      	mvns	r3, r3
 800c67a:	401a      	ands	r2, r3
 800c67c:	693b      	ldr	r3, [r7, #16]
 800c67e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c680:	f7fd ffe2 	bl	800a648 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c684:	693b      	ldr	r3, [r7, #16]
 800c686:	685a      	ldr	r2, [r3, #4]
 800c688:	4b0a      	ldr	r3, [pc, #40]	; (800c6b4 <vPortFree+0xbc>)
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	4413      	add	r3, r2
 800c68e:	4a09      	ldr	r2, [pc, #36]	; (800c6b4 <vPortFree+0xbc>)
 800c690:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c692:	6938      	ldr	r0, [r7, #16]
 800c694:	f000 f880 	bl	800c798 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c698:	4b07      	ldr	r3, [pc, #28]	; (800c6b8 <vPortFree+0xc0>)
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	3301      	adds	r3, #1
 800c69e:	4a06      	ldr	r2, [pc, #24]	; (800c6b8 <vPortFree+0xc0>)
 800c6a0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c6a2:	f7fd ffdf 	bl	800a664 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c6a6:	bf00      	nop
 800c6a8:	3718      	adds	r7, #24
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	bd80      	pop	{r7, pc}
 800c6ae:	bf00      	nop
 800c6b0:	20005650 	.word	0x20005650
 800c6b4:	20005640 	.word	0x20005640
 800c6b8:	2000564c 	.word	0x2000564c

0800c6bc <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800c6bc:	b480      	push	{r7}
 800c6be:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 800c6c0:	4b03      	ldr	r3, [pc, #12]	; (800c6d0 <xPortGetFreeHeapSize+0x14>)
 800c6c2:	681b      	ldr	r3, [r3, #0]
}
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6cc:	4770      	bx	lr
 800c6ce:	bf00      	nop
 800c6d0:	20005640 	.word	0x20005640

0800c6d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c6d4:	b480      	push	{r7}
 800c6d6:	b085      	sub	sp, #20
 800c6d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c6da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c6de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c6e0:	4b27      	ldr	r3, [pc, #156]	; (800c780 <prvHeapInit+0xac>)
 800c6e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	f003 0307 	and.w	r3, r3, #7
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d00c      	beq.n	800c708 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	3307      	adds	r3, #7
 800c6f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	f023 0307 	bic.w	r3, r3, #7
 800c6fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c6fc:	68ba      	ldr	r2, [r7, #8]
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	1ad3      	subs	r3, r2, r3
 800c702:	4a1f      	ldr	r2, [pc, #124]	; (800c780 <prvHeapInit+0xac>)
 800c704:	4413      	add	r3, r2
 800c706:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c70c:	4a1d      	ldr	r2, [pc, #116]	; (800c784 <prvHeapInit+0xb0>)
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c712:	4b1c      	ldr	r3, [pc, #112]	; (800c784 <prvHeapInit+0xb0>)
 800c714:	2200      	movs	r2, #0
 800c716:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	68ba      	ldr	r2, [r7, #8]
 800c71c:	4413      	add	r3, r2
 800c71e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c720:	2208      	movs	r2, #8
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	1a9b      	subs	r3, r3, r2
 800c726:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	f023 0307 	bic.w	r3, r3, #7
 800c72e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	4a15      	ldr	r2, [pc, #84]	; (800c788 <prvHeapInit+0xb4>)
 800c734:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c736:	4b14      	ldr	r3, [pc, #80]	; (800c788 <prvHeapInit+0xb4>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	2200      	movs	r2, #0
 800c73c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c73e:	4b12      	ldr	r3, [pc, #72]	; (800c788 <prvHeapInit+0xb4>)
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	2200      	movs	r2, #0
 800c744:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c74a:	683b      	ldr	r3, [r7, #0]
 800c74c:	68fa      	ldr	r2, [r7, #12]
 800c74e:	1ad2      	subs	r2, r2, r3
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c754:	4b0c      	ldr	r3, [pc, #48]	; (800c788 <prvHeapInit+0xb4>)
 800c756:	681a      	ldr	r2, [r3, #0]
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	685b      	ldr	r3, [r3, #4]
 800c760:	4a0a      	ldr	r2, [pc, #40]	; (800c78c <prvHeapInit+0xb8>)
 800c762:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	685b      	ldr	r3, [r3, #4]
 800c768:	4a09      	ldr	r2, [pc, #36]	; (800c790 <prvHeapInit+0xbc>)
 800c76a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c76c:	4b09      	ldr	r3, [pc, #36]	; (800c794 <prvHeapInit+0xc0>)
 800c76e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c772:	601a      	str	r2, [r3, #0]
}
 800c774:	bf00      	nop
 800c776:	3714      	adds	r7, #20
 800c778:	46bd      	mov	sp, r7
 800c77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77e:	4770      	bx	lr
 800c780:	20001a34 	.word	0x20001a34
 800c784:	20005634 	.word	0x20005634
 800c788:	2000563c 	.word	0x2000563c
 800c78c:	20005644 	.word	0x20005644
 800c790:	20005640 	.word	0x20005640
 800c794:	20005650 	.word	0x20005650

0800c798 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c798:	b480      	push	{r7}
 800c79a:	b085      	sub	sp, #20
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c7a0:	4b28      	ldr	r3, [pc, #160]	; (800c844 <prvInsertBlockIntoFreeList+0xac>)
 800c7a2:	60fb      	str	r3, [r7, #12]
 800c7a4:	e002      	b.n	800c7ac <prvInsertBlockIntoFreeList+0x14>
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	60fb      	str	r3, [r7, #12]
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	687a      	ldr	r2, [r7, #4]
 800c7b2:	429a      	cmp	r2, r3
 800c7b4:	d8f7      	bhi.n	800c7a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	685b      	ldr	r3, [r3, #4]
 800c7be:	68ba      	ldr	r2, [r7, #8]
 800c7c0:	4413      	add	r3, r2
 800c7c2:	687a      	ldr	r2, [r7, #4]
 800c7c4:	429a      	cmp	r2, r3
 800c7c6:	d108      	bne.n	800c7da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	685a      	ldr	r2, [r3, #4]
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	685b      	ldr	r3, [r3, #4]
 800c7d0:	441a      	add	r2, r3
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	685b      	ldr	r3, [r3, #4]
 800c7e2:	68ba      	ldr	r2, [r7, #8]
 800c7e4:	441a      	add	r2, r3
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	429a      	cmp	r2, r3
 800c7ec:	d118      	bne.n	800c820 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	681a      	ldr	r2, [r3, #0]
 800c7f2:	4b15      	ldr	r3, [pc, #84]	; (800c848 <prvInsertBlockIntoFreeList+0xb0>)
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	429a      	cmp	r2, r3
 800c7f8:	d00d      	beq.n	800c816 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	685a      	ldr	r2, [r3, #4]
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	685b      	ldr	r3, [r3, #4]
 800c804:	441a      	add	r2, r3
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	681a      	ldr	r2, [r3, #0]
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	601a      	str	r2, [r3, #0]
 800c814:	e008      	b.n	800c828 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c816:	4b0c      	ldr	r3, [pc, #48]	; (800c848 <prvInsertBlockIntoFreeList+0xb0>)
 800c818:	681a      	ldr	r2, [r3, #0]
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	601a      	str	r2, [r3, #0]
 800c81e:	e003      	b.n	800c828 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	681a      	ldr	r2, [r3, #0]
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c828:	68fa      	ldr	r2, [r7, #12]
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	429a      	cmp	r2, r3
 800c82e:	d002      	beq.n	800c836 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	687a      	ldr	r2, [r7, #4]
 800c834:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c836:	bf00      	nop
 800c838:	3714      	adds	r7, #20
 800c83a:	46bd      	mov	sp, r7
 800c83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c840:	4770      	bx	lr
 800c842:	bf00      	nop
 800c844:	20005634 	.word	0x20005634
 800c848:	2000563c 	.word	0x2000563c

0800c84c <__errno>:
 800c84c:	4b01      	ldr	r3, [pc, #4]	; (800c854 <__errno+0x8>)
 800c84e:	6818      	ldr	r0, [r3, #0]
 800c850:	4770      	bx	lr
 800c852:	bf00      	nop
 800c854:	200001e4 	.word	0x200001e4

0800c858 <__libc_init_array>:
 800c858:	b570      	push	{r4, r5, r6, lr}
 800c85a:	4d0d      	ldr	r5, [pc, #52]	; (800c890 <__libc_init_array+0x38>)
 800c85c:	4c0d      	ldr	r4, [pc, #52]	; (800c894 <__libc_init_array+0x3c>)
 800c85e:	1b64      	subs	r4, r4, r5
 800c860:	10a4      	asrs	r4, r4, #2
 800c862:	2600      	movs	r6, #0
 800c864:	42a6      	cmp	r6, r4
 800c866:	d109      	bne.n	800c87c <__libc_init_array+0x24>
 800c868:	4d0b      	ldr	r5, [pc, #44]	; (800c898 <__libc_init_array+0x40>)
 800c86a:	4c0c      	ldr	r4, [pc, #48]	; (800c89c <__libc_init_array+0x44>)
 800c86c:	f002 ffae 	bl	800f7cc <_init>
 800c870:	1b64      	subs	r4, r4, r5
 800c872:	10a4      	asrs	r4, r4, #2
 800c874:	2600      	movs	r6, #0
 800c876:	42a6      	cmp	r6, r4
 800c878:	d105      	bne.n	800c886 <__libc_init_array+0x2e>
 800c87a:	bd70      	pop	{r4, r5, r6, pc}
 800c87c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c880:	4798      	blx	r3
 800c882:	3601      	adds	r6, #1
 800c884:	e7ee      	b.n	800c864 <__libc_init_array+0xc>
 800c886:	f855 3b04 	ldr.w	r3, [r5], #4
 800c88a:	4798      	blx	r3
 800c88c:	3601      	adds	r6, #1
 800c88e:	e7f2      	b.n	800c876 <__libc_init_array+0x1e>
 800c890:	080104e4 	.word	0x080104e4
 800c894:	080104e4 	.word	0x080104e4
 800c898:	080104e4 	.word	0x080104e4
 800c89c:	080104e8 	.word	0x080104e8

0800c8a0 <memcpy>:
 800c8a0:	440a      	add	r2, r1
 800c8a2:	4291      	cmp	r1, r2
 800c8a4:	f100 33ff 	add.w	r3, r0, #4294967295
 800c8a8:	d100      	bne.n	800c8ac <memcpy+0xc>
 800c8aa:	4770      	bx	lr
 800c8ac:	b510      	push	{r4, lr}
 800c8ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c8b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c8b6:	4291      	cmp	r1, r2
 800c8b8:	d1f9      	bne.n	800c8ae <memcpy+0xe>
 800c8ba:	bd10      	pop	{r4, pc}

0800c8bc <memset>:
 800c8bc:	4402      	add	r2, r0
 800c8be:	4603      	mov	r3, r0
 800c8c0:	4293      	cmp	r3, r2
 800c8c2:	d100      	bne.n	800c8c6 <memset+0xa>
 800c8c4:	4770      	bx	lr
 800c8c6:	f803 1b01 	strb.w	r1, [r3], #1
 800c8ca:	e7f9      	b.n	800c8c0 <memset+0x4>

0800c8cc <__cvt>:
 800c8cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c8d0:	ec55 4b10 	vmov	r4, r5, d0
 800c8d4:	2d00      	cmp	r5, #0
 800c8d6:	460e      	mov	r6, r1
 800c8d8:	4619      	mov	r1, r3
 800c8da:	462b      	mov	r3, r5
 800c8dc:	bfbb      	ittet	lt
 800c8de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c8e2:	461d      	movlt	r5, r3
 800c8e4:	2300      	movge	r3, #0
 800c8e6:	232d      	movlt	r3, #45	; 0x2d
 800c8e8:	700b      	strb	r3, [r1, #0]
 800c8ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c8ec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c8f0:	4691      	mov	r9, r2
 800c8f2:	f023 0820 	bic.w	r8, r3, #32
 800c8f6:	bfbc      	itt	lt
 800c8f8:	4622      	movlt	r2, r4
 800c8fa:	4614      	movlt	r4, r2
 800c8fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c900:	d005      	beq.n	800c90e <__cvt+0x42>
 800c902:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c906:	d100      	bne.n	800c90a <__cvt+0x3e>
 800c908:	3601      	adds	r6, #1
 800c90a:	2102      	movs	r1, #2
 800c90c:	e000      	b.n	800c910 <__cvt+0x44>
 800c90e:	2103      	movs	r1, #3
 800c910:	ab03      	add	r3, sp, #12
 800c912:	9301      	str	r3, [sp, #4]
 800c914:	ab02      	add	r3, sp, #8
 800c916:	9300      	str	r3, [sp, #0]
 800c918:	ec45 4b10 	vmov	d0, r4, r5
 800c91c:	4653      	mov	r3, sl
 800c91e:	4632      	mov	r2, r6
 800c920:	f000 fe56 	bl	800d5d0 <_dtoa_r>
 800c924:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c928:	4607      	mov	r7, r0
 800c92a:	d102      	bne.n	800c932 <__cvt+0x66>
 800c92c:	f019 0f01 	tst.w	r9, #1
 800c930:	d022      	beq.n	800c978 <__cvt+0xac>
 800c932:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c936:	eb07 0906 	add.w	r9, r7, r6
 800c93a:	d110      	bne.n	800c95e <__cvt+0x92>
 800c93c:	783b      	ldrb	r3, [r7, #0]
 800c93e:	2b30      	cmp	r3, #48	; 0x30
 800c940:	d10a      	bne.n	800c958 <__cvt+0x8c>
 800c942:	2200      	movs	r2, #0
 800c944:	2300      	movs	r3, #0
 800c946:	4620      	mov	r0, r4
 800c948:	4629      	mov	r1, r5
 800c94a:	f7f4 f8cd 	bl	8000ae8 <__aeabi_dcmpeq>
 800c94e:	b918      	cbnz	r0, 800c958 <__cvt+0x8c>
 800c950:	f1c6 0601 	rsb	r6, r6, #1
 800c954:	f8ca 6000 	str.w	r6, [sl]
 800c958:	f8da 3000 	ldr.w	r3, [sl]
 800c95c:	4499      	add	r9, r3
 800c95e:	2200      	movs	r2, #0
 800c960:	2300      	movs	r3, #0
 800c962:	4620      	mov	r0, r4
 800c964:	4629      	mov	r1, r5
 800c966:	f7f4 f8bf 	bl	8000ae8 <__aeabi_dcmpeq>
 800c96a:	b108      	cbz	r0, 800c970 <__cvt+0xa4>
 800c96c:	f8cd 900c 	str.w	r9, [sp, #12]
 800c970:	2230      	movs	r2, #48	; 0x30
 800c972:	9b03      	ldr	r3, [sp, #12]
 800c974:	454b      	cmp	r3, r9
 800c976:	d307      	bcc.n	800c988 <__cvt+0xbc>
 800c978:	9b03      	ldr	r3, [sp, #12]
 800c97a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c97c:	1bdb      	subs	r3, r3, r7
 800c97e:	4638      	mov	r0, r7
 800c980:	6013      	str	r3, [r2, #0]
 800c982:	b004      	add	sp, #16
 800c984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c988:	1c59      	adds	r1, r3, #1
 800c98a:	9103      	str	r1, [sp, #12]
 800c98c:	701a      	strb	r2, [r3, #0]
 800c98e:	e7f0      	b.n	800c972 <__cvt+0xa6>

0800c990 <__exponent>:
 800c990:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c992:	4603      	mov	r3, r0
 800c994:	2900      	cmp	r1, #0
 800c996:	bfb8      	it	lt
 800c998:	4249      	neglt	r1, r1
 800c99a:	f803 2b02 	strb.w	r2, [r3], #2
 800c99e:	bfb4      	ite	lt
 800c9a0:	222d      	movlt	r2, #45	; 0x2d
 800c9a2:	222b      	movge	r2, #43	; 0x2b
 800c9a4:	2909      	cmp	r1, #9
 800c9a6:	7042      	strb	r2, [r0, #1]
 800c9a8:	dd2a      	ble.n	800ca00 <__exponent+0x70>
 800c9aa:	f10d 0407 	add.w	r4, sp, #7
 800c9ae:	46a4      	mov	ip, r4
 800c9b0:	270a      	movs	r7, #10
 800c9b2:	46a6      	mov	lr, r4
 800c9b4:	460a      	mov	r2, r1
 800c9b6:	fb91 f6f7 	sdiv	r6, r1, r7
 800c9ba:	fb07 1516 	mls	r5, r7, r6, r1
 800c9be:	3530      	adds	r5, #48	; 0x30
 800c9c0:	2a63      	cmp	r2, #99	; 0x63
 800c9c2:	f104 34ff 	add.w	r4, r4, #4294967295
 800c9c6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c9ca:	4631      	mov	r1, r6
 800c9cc:	dcf1      	bgt.n	800c9b2 <__exponent+0x22>
 800c9ce:	3130      	adds	r1, #48	; 0x30
 800c9d0:	f1ae 0502 	sub.w	r5, lr, #2
 800c9d4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c9d8:	1c44      	adds	r4, r0, #1
 800c9da:	4629      	mov	r1, r5
 800c9dc:	4561      	cmp	r1, ip
 800c9de:	d30a      	bcc.n	800c9f6 <__exponent+0x66>
 800c9e0:	f10d 0209 	add.w	r2, sp, #9
 800c9e4:	eba2 020e 	sub.w	r2, r2, lr
 800c9e8:	4565      	cmp	r5, ip
 800c9ea:	bf88      	it	hi
 800c9ec:	2200      	movhi	r2, #0
 800c9ee:	4413      	add	r3, r2
 800c9f0:	1a18      	subs	r0, r3, r0
 800c9f2:	b003      	add	sp, #12
 800c9f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c9fa:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c9fe:	e7ed      	b.n	800c9dc <__exponent+0x4c>
 800ca00:	2330      	movs	r3, #48	; 0x30
 800ca02:	3130      	adds	r1, #48	; 0x30
 800ca04:	7083      	strb	r3, [r0, #2]
 800ca06:	70c1      	strb	r1, [r0, #3]
 800ca08:	1d03      	adds	r3, r0, #4
 800ca0a:	e7f1      	b.n	800c9f0 <__exponent+0x60>

0800ca0c <_printf_float>:
 800ca0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca10:	ed2d 8b02 	vpush	{d8}
 800ca14:	b08d      	sub	sp, #52	; 0x34
 800ca16:	460c      	mov	r4, r1
 800ca18:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ca1c:	4616      	mov	r6, r2
 800ca1e:	461f      	mov	r7, r3
 800ca20:	4605      	mov	r5, r0
 800ca22:	f001 fd7b 	bl	800e51c <_localeconv_r>
 800ca26:	f8d0 a000 	ldr.w	sl, [r0]
 800ca2a:	4650      	mov	r0, sl
 800ca2c:	f7f3 fbe0 	bl	80001f0 <strlen>
 800ca30:	2300      	movs	r3, #0
 800ca32:	930a      	str	r3, [sp, #40]	; 0x28
 800ca34:	6823      	ldr	r3, [r4, #0]
 800ca36:	9305      	str	r3, [sp, #20]
 800ca38:	f8d8 3000 	ldr.w	r3, [r8]
 800ca3c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ca40:	3307      	adds	r3, #7
 800ca42:	f023 0307 	bic.w	r3, r3, #7
 800ca46:	f103 0208 	add.w	r2, r3, #8
 800ca4a:	f8c8 2000 	str.w	r2, [r8]
 800ca4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca52:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ca56:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ca5a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ca5e:	9307      	str	r3, [sp, #28]
 800ca60:	f8cd 8018 	str.w	r8, [sp, #24]
 800ca64:	ee08 0a10 	vmov	s16, r0
 800ca68:	4b9f      	ldr	r3, [pc, #636]	; (800cce8 <_printf_float+0x2dc>)
 800ca6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ca6e:	f04f 32ff 	mov.w	r2, #4294967295
 800ca72:	f7f4 f86b 	bl	8000b4c <__aeabi_dcmpun>
 800ca76:	bb88      	cbnz	r0, 800cadc <_printf_float+0xd0>
 800ca78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ca7c:	4b9a      	ldr	r3, [pc, #616]	; (800cce8 <_printf_float+0x2dc>)
 800ca7e:	f04f 32ff 	mov.w	r2, #4294967295
 800ca82:	f7f4 f845 	bl	8000b10 <__aeabi_dcmple>
 800ca86:	bb48      	cbnz	r0, 800cadc <_printf_float+0xd0>
 800ca88:	2200      	movs	r2, #0
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	4640      	mov	r0, r8
 800ca8e:	4649      	mov	r1, r9
 800ca90:	f7f4 f834 	bl	8000afc <__aeabi_dcmplt>
 800ca94:	b110      	cbz	r0, 800ca9c <_printf_float+0x90>
 800ca96:	232d      	movs	r3, #45	; 0x2d
 800ca98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca9c:	4b93      	ldr	r3, [pc, #588]	; (800ccec <_printf_float+0x2e0>)
 800ca9e:	4894      	ldr	r0, [pc, #592]	; (800ccf0 <_printf_float+0x2e4>)
 800caa0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800caa4:	bf94      	ite	ls
 800caa6:	4698      	movls	r8, r3
 800caa8:	4680      	movhi	r8, r0
 800caaa:	2303      	movs	r3, #3
 800caac:	6123      	str	r3, [r4, #16]
 800caae:	9b05      	ldr	r3, [sp, #20]
 800cab0:	f023 0204 	bic.w	r2, r3, #4
 800cab4:	6022      	str	r2, [r4, #0]
 800cab6:	f04f 0900 	mov.w	r9, #0
 800caba:	9700      	str	r7, [sp, #0]
 800cabc:	4633      	mov	r3, r6
 800cabe:	aa0b      	add	r2, sp, #44	; 0x2c
 800cac0:	4621      	mov	r1, r4
 800cac2:	4628      	mov	r0, r5
 800cac4:	f000 f9d8 	bl	800ce78 <_printf_common>
 800cac8:	3001      	adds	r0, #1
 800caca:	f040 8090 	bne.w	800cbee <_printf_float+0x1e2>
 800cace:	f04f 30ff 	mov.w	r0, #4294967295
 800cad2:	b00d      	add	sp, #52	; 0x34
 800cad4:	ecbd 8b02 	vpop	{d8}
 800cad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cadc:	4642      	mov	r2, r8
 800cade:	464b      	mov	r3, r9
 800cae0:	4640      	mov	r0, r8
 800cae2:	4649      	mov	r1, r9
 800cae4:	f7f4 f832 	bl	8000b4c <__aeabi_dcmpun>
 800cae8:	b140      	cbz	r0, 800cafc <_printf_float+0xf0>
 800caea:	464b      	mov	r3, r9
 800caec:	2b00      	cmp	r3, #0
 800caee:	bfbc      	itt	lt
 800caf0:	232d      	movlt	r3, #45	; 0x2d
 800caf2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800caf6:	487f      	ldr	r0, [pc, #508]	; (800ccf4 <_printf_float+0x2e8>)
 800caf8:	4b7f      	ldr	r3, [pc, #508]	; (800ccf8 <_printf_float+0x2ec>)
 800cafa:	e7d1      	b.n	800caa0 <_printf_float+0x94>
 800cafc:	6863      	ldr	r3, [r4, #4]
 800cafe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800cb02:	9206      	str	r2, [sp, #24]
 800cb04:	1c5a      	adds	r2, r3, #1
 800cb06:	d13f      	bne.n	800cb88 <_printf_float+0x17c>
 800cb08:	2306      	movs	r3, #6
 800cb0a:	6063      	str	r3, [r4, #4]
 800cb0c:	9b05      	ldr	r3, [sp, #20]
 800cb0e:	6861      	ldr	r1, [r4, #4]
 800cb10:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800cb14:	2300      	movs	r3, #0
 800cb16:	9303      	str	r3, [sp, #12]
 800cb18:	ab0a      	add	r3, sp, #40	; 0x28
 800cb1a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800cb1e:	ab09      	add	r3, sp, #36	; 0x24
 800cb20:	ec49 8b10 	vmov	d0, r8, r9
 800cb24:	9300      	str	r3, [sp, #0]
 800cb26:	6022      	str	r2, [r4, #0]
 800cb28:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cb2c:	4628      	mov	r0, r5
 800cb2e:	f7ff fecd 	bl	800c8cc <__cvt>
 800cb32:	9b06      	ldr	r3, [sp, #24]
 800cb34:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cb36:	2b47      	cmp	r3, #71	; 0x47
 800cb38:	4680      	mov	r8, r0
 800cb3a:	d108      	bne.n	800cb4e <_printf_float+0x142>
 800cb3c:	1cc8      	adds	r0, r1, #3
 800cb3e:	db02      	blt.n	800cb46 <_printf_float+0x13a>
 800cb40:	6863      	ldr	r3, [r4, #4]
 800cb42:	4299      	cmp	r1, r3
 800cb44:	dd41      	ble.n	800cbca <_printf_float+0x1be>
 800cb46:	f1ab 0b02 	sub.w	fp, fp, #2
 800cb4a:	fa5f fb8b 	uxtb.w	fp, fp
 800cb4e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cb52:	d820      	bhi.n	800cb96 <_printf_float+0x18a>
 800cb54:	3901      	subs	r1, #1
 800cb56:	465a      	mov	r2, fp
 800cb58:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cb5c:	9109      	str	r1, [sp, #36]	; 0x24
 800cb5e:	f7ff ff17 	bl	800c990 <__exponent>
 800cb62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb64:	1813      	adds	r3, r2, r0
 800cb66:	2a01      	cmp	r2, #1
 800cb68:	4681      	mov	r9, r0
 800cb6a:	6123      	str	r3, [r4, #16]
 800cb6c:	dc02      	bgt.n	800cb74 <_printf_float+0x168>
 800cb6e:	6822      	ldr	r2, [r4, #0]
 800cb70:	07d2      	lsls	r2, r2, #31
 800cb72:	d501      	bpl.n	800cb78 <_printf_float+0x16c>
 800cb74:	3301      	adds	r3, #1
 800cb76:	6123      	str	r3, [r4, #16]
 800cb78:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d09c      	beq.n	800caba <_printf_float+0xae>
 800cb80:	232d      	movs	r3, #45	; 0x2d
 800cb82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb86:	e798      	b.n	800caba <_printf_float+0xae>
 800cb88:	9a06      	ldr	r2, [sp, #24]
 800cb8a:	2a47      	cmp	r2, #71	; 0x47
 800cb8c:	d1be      	bne.n	800cb0c <_printf_float+0x100>
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d1bc      	bne.n	800cb0c <_printf_float+0x100>
 800cb92:	2301      	movs	r3, #1
 800cb94:	e7b9      	b.n	800cb0a <_printf_float+0xfe>
 800cb96:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800cb9a:	d118      	bne.n	800cbce <_printf_float+0x1c2>
 800cb9c:	2900      	cmp	r1, #0
 800cb9e:	6863      	ldr	r3, [r4, #4]
 800cba0:	dd0b      	ble.n	800cbba <_printf_float+0x1ae>
 800cba2:	6121      	str	r1, [r4, #16]
 800cba4:	b913      	cbnz	r3, 800cbac <_printf_float+0x1a0>
 800cba6:	6822      	ldr	r2, [r4, #0]
 800cba8:	07d0      	lsls	r0, r2, #31
 800cbaa:	d502      	bpl.n	800cbb2 <_printf_float+0x1a6>
 800cbac:	3301      	adds	r3, #1
 800cbae:	440b      	add	r3, r1
 800cbb0:	6123      	str	r3, [r4, #16]
 800cbb2:	65a1      	str	r1, [r4, #88]	; 0x58
 800cbb4:	f04f 0900 	mov.w	r9, #0
 800cbb8:	e7de      	b.n	800cb78 <_printf_float+0x16c>
 800cbba:	b913      	cbnz	r3, 800cbc2 <_printf_float+0x1b6>
 800cbbc:	6822      	ldr	r2, [r4, #0]
 800cbbe:	07d2      	lsls	r2, r2, #31
 800cbc0:	d501      	bpl.n	800cbc6 <_printf_float+0x1ba>
 800cbc2:	3302      	adds	r3, #2
 800cbc4:	e7f4      	b.n	800cbb0 <_printf_float+0x1a4>
 800cbc6:	2301      	movs	r3, #1
 800cbc8:	e7f2      	b.n	800cbb0 <_printf_float+0x1a4>
 800cbca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800cbce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbd0:	4299      	cmp	r1, r3
 800cbd2:	db05      	blt.n	800cbe0 <_printf_float+0x1d4>
 800cbd4:	6823      	ldr	r3, [r4, #0]
 800cbd6:	6121      	str	r1, [r4, #16]
 800cbd8:	07d8      	lsls	r0, r3, #31
 800cbda:	d5ea      	bpl.n	800cbb2 <_printf_float+0x1a6>
 800cbdc:	1c4b      	adds	r3, r1, #1
 800cbde:	e7e7      	b.n	800cbb0 <_printf_float+0x1a4>
 800cbe0:	2900      	cmp	r1, #0
 800cbe2:	bfd4      	ite	le
 800cbe4:	f1c1 0202 	rsble	r2, r1, #2
 800cbe8:	2201      	movgt	r2, #1
 800cbea:	4413      	add	r3, r2
 800cbec:	e7e0      	b.n	800cbb0 <_printf_float+0x1a4>
 800cbee:	6823      	ldr	r3, [r4, #0]
 800cbf0:	055a      	lsls	r2, r3, #21
 800cbf2:	d407      	bmi.n	800cc04 <_printf_float+0x1f8>
 800cbf4:	6923      	ldr	r3, [r4, #16]
 800cbf6:	4642      	mov	r2, r8
 800cbf8:	4631      	mov	r1, r6
 800cbfa:	4628      	mov	r0, r5
 800cbfc:	47b8      	blx	r7
 800cbfe:	3001      	adds	r0, #1
 800cc00:	d12c      	bne.n	800cc5c <_printf_float+0x250>
 800cc02:	e764      	b.n	800cace <_printf_float+0xc2>
 800cc04:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cc08:	f240 80e0 	bls.w	800cdcc <_printf_float+0x3c0>
 800cc0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cc10:	2200      	movs	r2, #0
 800cc12:	2300      	movs	r3, #0
 800cc14:	f7f3 ff68 	bl	8000ae8 <__aeabi_dcmpeq>
 800cc18:	2800      	cmp	r0, #0
 800cc1a:	d034      	beq.n	800cc86 <_printf_float+0x27a>
 800cc1c:	4a37      	ldr	r2, [pc, #220]	; (800ccfc <_printf_float+0x2f0>)
 800cc1e:	2301      	movs	r3, #1
 800cc20:	4631      	mov	r1, r6
 800cc22:	4628      	mov	r0, r5
 800cc24:	47b8      	blx	r7
 800cc26:	3001      	adds	r0, #1
 800cc28:	f43f af51 	beq.w	800cace <_printf_float+0xc2>
 800cc2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cc30:	429a      	cmp	r2, r3
 800cc32:	db02      	blt.n	800cc3a <_printf_float+0x22e>
 800cc34:	6823      	ldr	r3, [r4, #0]
 800cc36:	07d8      	lsls	r0, r3, #31
 800cc38:	d510      	bpl.n	800cc5c <_printf_float+0x250>
 800cc3a:	ee18 3a10 	vmov	r3, s16
 800cc3e:	4652      	mov	r2, sl
 800cc40:	4631      	mov	r1, r6
 800cc42:	4628      	mov	r0, r5
 800cc44:	47b8      	blx	r7
 800cc46:	3001      	adds	r0, #1
 800cc48:	f43f af41 	beq.w	800cace <_printf_float+0xc2>
 800cc4c:	f04f 0800 	mov.w	r8, #0
 800cc50:	f104 091a 	add.w	r9, r4, #26
 800cc54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc56:	3b01      	subs	r3, #1
 800cc58:	4543      	cmp	r3, r8
 800cc5a:	dc09      	bgt.n	800cc70 <_printf_float+0x264>
 800cc5c:	6823      	ldr	r3, [r4, #0]
 800cc5e:	079b      	lsls	r3, r3, #30
 800cc60:	f100 8105 	bmi.w	800ce6e <_printf_float+0x462>
 800cc64:	68e0      	ldr	r0, [r4, #12]
 800cc66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc68:	4298      	cmp	r0, r3
 800cc6a:	bfb8      	it	lt
 800cc6c:	4618      	movlt	r0, r3
 800cc6e:	e730      	b.n	800cad2 <_printf_float+0xc6>
 800cc70:	2301      	movs	r3, #1
 800cc72:	464a      	mov	r2, r9
 800cc74:	4631      	mov	r1, r6
 800cc76:	4628      	mov	r0, r5
 800cc78:	47b8      	blx	r7
 800cc7a:	3001      	adds	r0, #1
 800cc7c:	f43f af27 	beq.w	800cace <_printf_float+0xc2>
 800cc80:	f108 0801 	add.w	r8, r8, #1
 800cc84:	e7e6      	b.n	800cc54 <_printf_float+0x248>
 800cc86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	dc39      	bgt.n	800cd00 <_printf_float+0x2f4>
 800cc8c:	4a1b      	ldr	r2, [pc, #108]	; (800ccfc <_printf_float+0x2f0>)
 800cc8e:	2301      	movs	r3, #1
 800cc90:	4631      	mov	r1, r6
 800cc92:	4628      	mov	r0, r5
 800cc94:	47b8      	blx	r7
 800cc96:	3001      	adds	r0, #1
 800cc98:	f43f af19 	beq.w	800cace <_printf_float+0xc2>
 800cc9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cca0:	4313      	orrs	r3, r2
 800cca2:	d102      	bne.n	800ccaa <_printf_float+0x29e>
 800cca4:	6823      	ldr	r3, [r4, #0]
 800cca6:	07d9      	lsls	r1, r3, #31
 800cca8:	d5d8      	bpl.n	800cc5c <_printf_float+0x250>
 800ccaa:	ee18 3a10 	vmov	r3, s16
 800ccae:	4652      	mov	r2, sl
 800ccb0:	4631      	mov	r1, r6
 800ccb2:	4628      	mov	r0, r5
 800ccb4:	47b8      	blx	r7
 800ccb6:	3001      	adds	r0, #1
 800ccb8:	f43f af09 	beq.w	800cace <_printf_float+0xc2>
 800ccbc:	f04f 0900 	mov.w	r9, #0
 800ccc0:	f104 0a1a 	add.w	sl, r4, #26
 800ccc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccc6:	425b      	negs	r3, r3
 800ccc8:	454b      	cmp	r3, r9
 800ccca:	dc01      	bgt.n	800ccd0 <_printf_float+0x2c4>
 800cccc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccce:	e792      	b.n	800cbf6 <_printf_float+0x1ea>
 800ccd0:	2301      	movs	r3, #1
 800ccd2:	4652      	mov	r2, sl
 800ccd4:	4631      	mov	r1, r6
 800ccd6:	4628      	mov	r0, r5
 800ccd8:	47b8      	blx	r7
 800ccda:	3001      	adds	r0, #1
 800ccdc:	f43f aef7 	beq.w	800cace <_printf_float+0xc2>
 800cce0:	f109 0901 	add.w	r9, r9, #1
 800cce4:	e7ee      	b.n	800ccc4 <_printf_float+0x2b8>
 800cce6:	bf00      	nop
 800cce8:	7fefffff 	.word	0x7fefffff
 800ccec:	08010104 	.word	0x08010104
 800ccf0:	08010108 	.word	0x08010108
 800ccf4:	08010110 	.word	0x08010110
 800ccf8:	0801010c 	.word	0x0801010c
 800ccfc:	08010114 	.word	0x08010114
 800cd00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cd02:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cd04:	429a      	cmp	r2, r3
 800cd06:	bfa8      	it	ge
 800cd08:	461a      	movge	r2, r3
 800cd0a:	2a00      	cmp	r2, #0
 800cd0c:	4691      	mov	r9, r2
 800cd0e:	dc37      	bgt.n	800cd80 <_printf_float+0x374>
 800cd10:	f04f 0b00 	mov.w	fp, #0
 800cd14:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cd18:	f104 021a 	add.w	r2, r4, #26
 800cd1c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cd1e:	9305      	str	r3, [sp, #20]
 800cd20:	eba3 0309 	sub.w	r3, r3, r9
 800cd24:	455b      	cmp	r3, fp
 800cd26:	dc33      	bgt.n	800cd90 <_printf_float+0x384>
 800cd28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cd2c:	429a      	cmp	r2, r3
 800cd2e:	db3b      	blt.n	800cda8 <_printf_float+0x39c>
 800cd30:	6823      	ldr	r3, [r4, #0]
 800cd32:	07da      	lsls	r2, r3, #31
 800cd34:	d438      	bmi.n	800cda8 <_printf_float+0x39c>
 800cd36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd38:	9a05      	ldr	r2, [sp, #20]
 800cd3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cd3c:	1a9a      	subs	r2, r3, r2
 800cd3e:	eba3 0901 	sub.w	r9, r3, r1
 800cd42:	4591      	cmp	r9, r2
 800cd44:	bfa8      	it	ge
 800cd46:	4691      	movge	r9, r2
 800cd48:	f1b9 0f00 	cmp.w	r9, #0
 800cd4c:	dc35      	bgt.n	800cdba <_printf_float+0x3ae>
 800cd4e:	f04f 0800 	mov.w	r8, #0
 800cd52:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cd56:	f104 0a1a 	add.w	sl, r4, #26
 800cd5a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cd5e:	1a9b      	subs	r3, r3, r2
 800cd60:	eba3 0309 	sub.w	r3, r3, r9
 800cd64:	4543      	cmp	r3, r8
 800cd66:	f77f af79 	ble.w	800cc5c <_printf_float+0x250>
 800cd6a:	2301      	movs	r3, #1
 800cd6c:	4652      	mov	r2, sl
 800cd6e:	4631      	mov	r1, r6
 800cd70:	4628      	mov	r0, r5
 800cd72:	47b8      	blx	r7
 800cd74:	3001      	adds	r0, #1
 800cd76:	f43f aeaa 	beq.w	800cace <_printf_float+0xc2>
 800cd7a:	f108 0801 	add.w	r8, r8, #1
 800cd7e:	e7ec      	b.n	800cd5a <_printf_float+0x34e>
 800cd80:	4613      	mov	r3, r2
 800cd82:	4631      	mov	r1, r6
 800cd84:	4642      	mov	r2, r8
 800cd86:	4628      	mov	r0, r5
 800cd88:	47b8      	blx	r7
 800cd8a:	3001      	adds	r0, #1
 800cd8c:	d1c0      	bne.n	800cd10 <_printf_float+0x304>
 800cd8e:	e69e      	b.n	800cace <_printf_float+0xc2>
 800cd90:	2301      	movs	r3, #1
 800cd92:	4631      	mov	r1, r6
 800cd94:	4628      	mov	r0, r5
 800cd96:	9205      	str	r2, [sp, #20]
 800cd98:	47b8      	blx	r7
 800cd9a:	3001      	adds	r0, #1
 800cd9c:	f43f ae97 	beq.w	800cace <_printf_float+0xc2>
 800cda0:	9a05      	ldr	r2, [sp, #20]
 800cda2:	f10b 0b01 	add.w	fp, fp, #1
 800cda6:	e7b9      	b.n	800cd1c <_printf_float+0x310>
 800cda8:	ee18 3a10 	vmov	r3, s16
 800cdac:	4652      	mov	r2, sl
 800cdae:	4631      	mov	r1, r6
 800cdb0:	4628      	mov	r0, r5
 800cdb2:	47b8      	blx	r7
 800cdb4:	3001      	adds	r0, #1
 800cdb6:	d1be      	bne.n	800cd36 <_printf_float+0x32a>
 800cdb8:	e689      	b.n	800cace <_printf_float+0xc2>
 800cdba:	9a05      	ldr	r2, [sp, #20]
 800cdbc:	464b      	mov	r3, r9
 800cdbe:	4442      	add	r2, r8
 800cdc0:	4631      	mov	r1, r6
 800cdc2:	4628      	mov	r0, r5
 800cdc4:	47b8      	blx	r7
 800cdc6:	3001      	adds	r0, #1
 800cdc8:	d1c1      	bne.n	800cd4e <_printf_float+0x342>
 800cdca:	e680      	b.n	800cace <_printf_float+0xc2>
 800cdcc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cdce:	2a01      	cmp	r2, #1
 800cdd0:	dc01      	bgt.n	800cdd6 <_printf_float+0x3ca>
 800cdd2:	07db      	lsls	r3, r3, #31
 800cdd4:	d538      	bpl.n	800ce48 <_printf_float+0x43c>
 800cdd6:	2301      	movs	r3, #1
 800cdd8:	4642      	mov	r2, r8
 800cdda:	4631      	mov	r1, r6
 800cddc:	4628      	mov	r0, r5
 800cdde:	47b8      	blx	r7
 800cde0:	3001      	adds	r0, #1
 800cde2:	f43f ae74 	beq.w	800cace <_printf_float+0xc2>
 800cde6:	ee18 3a10 	vmov	r3, s16
 800cdea:	4652      	mov	r2, sl
 800cdec:	4631      	mov	r1, r6
 800cdee:	4628      	mov	r0, r5
 800cdf0:	47b8      	blx	r7
 800cdf2:	3001      	adds	r0, #1
 800cdf4:	f43f ae6b 	beq.w	800cace <_printf_float+0xc2>
 800cdf8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	2300      	movs	r3, #0
 800ce00:	f7f3 fe72 	bl	8000ae8 <__aeabi_dcmpeq>
 800ce04:	b9d8      	cbnz	r0, 800ce3e <_printf_float+0x432>
 800ce06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce08:	f108 0201 	add.w	r2, r8, #1
 800ce0c:	3b01      	subs	r3, #1
 800ce0e:	4631      	mov	r1, r6
 800ce10:	4628      	mov	r0, r5
 800ce12:	47b8      	blx	r7
 800ce14:	3001      	adds	r0, #1
 800ce16:	d10e      	bne.n	800ce36 <_printf_float+0x42a>
 800ce18:	e659      	b.n	800cace <_printf_float+0xc2>
 800ce1a:	2301      	movs	r3, #1
 800ce1c:	4652      	mov	r2, sl
 800ce1e:	4631      	mov	r1, r6
 800ce20:	4628      	mov	r0, r5
 800ce22:	47b8      	blx	r7
 800ce24:	3001      	adds	r0, #1
 800ce26:	f43f ae52 	beq.w	800cace <_printf_float+0xc2>
 800ce2a:	f108 0801 	add.w	r8, r8, #1
 800ce2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce30:	3b01      	subs	r3, #1
 800ce32:	4543      	cmp	r3, r8
 800ce34:	dcf1      	bgt.n	800ce1a <_printf_float+0x40e>
 800ce36:	464b      	mov	r3, r9
 800ce38:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ce3c:	e6dc      	b.n	800cbf8 <_printf_float+0x1ec>
 800ce3e:	f04f 0800 	mov.w	r8, #0
 800ce42:	f104 0a1a 	add.w	sl, r4, #26
 800ce46:	e7f2      	b.n	800ce2e <_printf_float+0x422>
 800ce48:	2301      	movs	r3, #1
 800ce4a:	4642      	mov	r2, r8
 800ce4c:	e7df      	b.n	800ce0e <_printf_float+0x402>
 800ce4e:	2301      	movs	r3, #1
 800ce50:	464a      	mov	r2, r9
 800ce52:	4631      	mov	r1, r6
 800ce54:	4628      	mov	r0, r5
 800ce56:	47b8      	blx	r7
 800ce58:	3001      	adds	r0, #1
 800ce5a:	f43f ae38 	beq.w	800cace <_printf_float+0xc2>
 800ce5e:	f108 0801 	add.w	r8, r8, #1
 800ce62:	68e3      	ldr	r3, [r4, #12]
 800ce64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ce66:	1a5b      	subs	r3, r3, r1
 800ce68:	4543      	cmp	r3, r8
 800ce6a:	dcf0      	bgt.n	800ce4e <_printf_float+0x442>
 800ce6c:	e6fa      	b.n	800cc64 <_printf_float+0x258>
 800ce6e:	f04f 0800 	mov.w	r8, #0
 800ce72:	f104 0919 	add.w	r9, r4, #25
 800ce76:	e7f4      	b.n	800ce62 <_printf_float+0x456>

0800ce78 <_printf_common>:
 800ce78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce7c:	4616      	mov	r6, r2
 800ce7e:	4699      	mov	r9, r3
 800ce80:	688a      	ldr	r2, [r1, #8]
 800ce82:	690b      	ldr	r3, [r1, #16]
 800ce84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ce88:	4293      	cmp	r3, r2
 800ce8a:	bfb8      	it	lt
 800ce8c:	4613      	movlt	r3, r2
 800ce8e:	6033      	str	r3, [r6, #0]
 800ce90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ce94:	4607      	mov	r7, r0
 800ce96:	460c      	mov	r4, r1
 800ce98:	b10a      	cbz	r2, 800ce9e <_printf_common+0x26>
 800ce9a:	3301      	adds	r3, #1
 800ce9c:	6033      	str	r3, [r6, #0]
 800ce9e:	6823      	ldr	r3, [r4, #0]
 800cea0:	0699      	lsls	r1, r3, #26
 800cea2:	bf42      	ittt	mi
 800cea4:	6833      	ldrmi	r3, [r6, #0]
 800cea6:	3302      	addmi	r3, #2
 800cea8:	6033      	strmi	r3, [r6, #0]
 800ceaa:	6825      	ldr	r5, [r4, #0]
 800ceac:	f015 0506 	ands.w	r5, r5, #6
 800ceb0:	d106      	bne.n	800cec0 <_printf_common+0x48>
 800ceb2:	f104 0a19 	add.w	sl, r4, #25
 800ceb6:	68e3      	ldr	r3, [r4, #12]
 800ceb8:	6832      	ldr	r2, [r6, #0]
 800ceba:	1a9b      	subs	r3, r3, r2
 800cebc:	42ab      	cmp	r3, r5
 800cebe:	dc26      	bgt.n	800cf0e <_printf_common+0x96>
 800cec0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cec4:	1e13      	subs	r3, r2, #0
 800cec6:	6822      	ldr	r2, [r4, #0]
 800cec8:	bf18      	it	ne
 800ceca:	2301      	movne	r3, #1
 800cecc:	0692      	lsls	r2, r2, #26
 800cece:	d42b      	bmi.n	800cf28 <_printf_common+0xb0>
 800ced0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ced4:	4649      	mov	r1, r9
 800ced6:	4638      	mov	r0, r7
 800ced8:	47c0      	blx	r8
 800ceda:	3001      	adds	r0, #1
 800cedc:	d01e      	beq.n	800cf1c <_printf_common+0xa4>
 800cede:	6823      	ldr	r3, [r4, #0]
 800cee0:	68e5      	ldr	r5, [r4, #12]
 800cee2:	6832      	ldr	r2, [r6, #0]
 800cee4:	f003 0306 	and.w	r3, r3, #6
 800cee8:	2b04      	cmp	r3, #4
 800ceea:	bf08      	it	eq
 800ceec:	1aad      	subeq	r5, r5, r2
 800ceee:	68a3      	ldr	r3, [r4, #8]
 800cef0:	6922      	ldr	r2, [r4, #16]
 800cef2:	bf0c      	ite	eq
 800cef4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cef8:	2500      	movne	r5, #0
 800cefa:	4293      	cmp	r3, r2
 800cefc:	bfc4      	itt	gt
 800cefe:	1a9b      	subgt	r3, r3, r2
 800cf00:	18ed      	addgt	r5, r5, r3
 800cf02:	2600      	movs	r6, #0
 800cf04:	341a      	adds	r4, #26
 800cf06:	42b5      	cmp	r5, r6
 800cf08:	d11a      	bne.n	800cf40 <_printf_common+0xc8>
 800cf0a:	2000      	movs	r0, #0
 800cf0c:	e008      	b.n	800cf20 <_printf_common+0xa8>
 800cf0e:	2301      	movs	r3, #1
 800cf10:	4652      	mov	r2, sl
 800cf12:	4649      	mov	r1, r9
 800cf14:	4638      	mov	r0, r7
 800cf16:	47c0      	blx	r8
 800cf18:	3001      	adds	r0, #1
 800cf1a:	d103      	bne.n	800cf24 <_printf_common+0xac>
 800cf1c:	f04f 30ff 	mov.w	r0, #4294967295
 800cf20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf24:	3501      	adds	r5, #1
 800cf26:	e7c6      	b.n	800ceb6 <_printf_common+0x3e>
 800cf28:	18e1      	adds	r1, r4, r3
 800cf2a:	1c5a      	adds	r2, r3, #1
 800cf2c:	2030      	movs	r0, #48	; 0x30
 800cf2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cf32:	4422      	add	r2, r4
 800cf34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cf38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cf3c:	3302      	adds	r3, #2
 800cf3e:	e7c7      	b.n	800ced0 <_printf_common+0x58>
 800cf40:	2301      	movs	r3, #1
 800cf42:	4622      	mov	r2, r4
 800cf44:	4649      	mov	r1, r9
 800cf46:	4638      	mov	r0, r7
 800cf48:	47c0      	blx	r8
 800cf4a:	3001      	adds	r0, #1
 800cf4c:	d0e6      	beq.n	800cf1c <_printf_common+0xa4>
 800cf4e:	3601      	adds	r6, #1
 800cf50:	e7d9      	b.n	800cf06 <_printf_common+0x8e>
	...

0800cf54 <_printf_i>:
 800cf54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cf58:	7e0f      	ldrb	r7, [r1, #24]
 800cf5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cf5c:	2f78      	cmp	r7, #120	; 0x78
 800cf5e:	4691      	mov	r9, r2
 800cf60:	4680      	mov	r8, r0
 800cf62:	460c      	mov	r4, r1
 800cf64:	469a      	mov	sl, r3
 800cf66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cf6a:	d807      	bhi.n	800cf7c <_printf_i+0x28>
 800cf6c:	2f62      	cmp	r7, #98	; 0x62
 800cf6e:	d80a      	bhi.n	800cf86 <_printf_i+0x32>
 800cf70:	2f00      	cmp	r7, #0
 800cf72:	f000 80d8 	beq.w	800d126 <_printf_i+0x1d2>
 800cf76:	2f58      	cmp	r7, #88	; 0x58
 800cf78:	f000 80a3 	beq.w	800d0c2 <_printf_i+0x16e>
 800cf7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cf80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cf84:	e03a      	b.n	800cffc <_printf_i+0xa8>
 800cf86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cf8a:	2b15      	cmp	r3, #21
 800cf8c:	d8f6      	bhi.n	800cf7c <_printf_i+0x28>
 800cf8e:	a101      	add	r1, pc, #4	; (adr r1, 800cf94 <_printf_i+0x40>)
 800cf90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cf94:	0800cfed 	.word	0x0800cfed
 800cf98:	0800d001 	.word	0x0800d001
 800cf9c:	0800cf7d 	.word	0x0800cf7d
 800cfa0:	0800cf7d 	.word	0x0800cf7d
 800cfa4:	0800cf7d 	.word	0x0800cf7d
 800cfa8:	0800cf7d 	.word	0x0800cf7d
 800cfac:	0800d001 	.word	0x0800d001
 800cfb0:	0800cf7d 	.word	0x0800cf7d
 800cfb4:	0800cf7d 	.word	0x0800cf7d
 800cfb8:	0800cf7d 	.word	0x0800cf7d
 800cfbc:	0800cf7d 	.word	0x0800cf7d
 800cfc0:	0800d10d 	.word	0x0800d10d
 800cfc4:	0800d031 	.word	0x0800d031
 800cfc8:	0800d0ef 	.word	0x0800d0ef
 800cfcc:	0800cf7d 	.word	0x0800cf7d
 800cfd0:	0800cf7d 	.word	0x0800cf7d
 800cfd4:	0800d12f 	.word	0x0800d12f
 800cfd8:	0800cf7d 	.word	0x0800cf7d
 800cfdc:	0800d031 	.word	0x0800d031
 800cfe0:	0800cf7d 	.word	0x0800cf7d
 800cfe4:	0800cf7d 	.word	0x0800cf7d
 800cfe8:	0800d0f7 	.word	0x0800d0f7
 800cfec:	682b      	ldr	r3, [r5, #0]
 800cfee:	1d1a      	adds	r2, r3, #4
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	602a      	str	r2, [r5, #0]
 800cff4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cff8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cffc:	2301      	movs	r3, #1
 800cffe:	e0a3      	b.n	800d148 <_printf_i+0x1f4>
 800d000:	6820      	ldr	r0, [r4, #0]
 800d002:	6829      	ldr	r1, [r5, #0]
 800d004:	0606      	lsls	r6, r0, #24
 800d006:	f101 0304 	add.w	r3, r1, #4
 800d00a:	d50a      	bpl.n	800d022 <_printf_i+0xce>
 800d00c:	680e      	ldr	r6, [r1, #0]
 800d00e:	602b      	str	r3, [r5, #0]
 800d010:	2e00      	cmp	r6, #0
 800d012:	da03      	bge.n	800d01c <_printf_i+0xc8>
 800d014:	232d      	movs	r3, #45	; 0x2d
 800d016:	4276      	negs	r6, r6
 800d018:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d01c:	485e      	ldr	r0, [pc, #376]	; (800d198 <_printf_i+0x244>)
 800d01e:	230a      	movs	r3, #10
 800d020:	e019      	b.n	800d056 <_printf_i+0x102>
 800d022:	680e      	ldr	r6, [r1, #0]
 800d024:	602b      	str	r3, [r5, #0]
 800d026:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d02a:	bf18      	it	ne
 800d02c:	b236      	sxthne	r6, r6
 800d02e:	e7ef      	b.n	800d010 <_printf_i+0xbc>
 800d030:	682b      	ldr	r3, [r5, #0]
 800d032:	6820      	ldr	r0, [r4, #0]
 800d034:	1d19      	adds	r1, r3, #4
 800d036:	6029      	str	r1, [r5, #0]
 800d038:	0601      	lsls	r1, r0, #24
 800d03a:	d501      	bpl.n	800d040 <_printf_i+0xec>
 800d03c:	681e      	ldr	r6, [r3, #0]
 800d03e:	e002      	b.n	800d046 <_printf_i+0xf2>
 800d040:	0646      	lsls	r6, r0, #25
 800d042:	d5fb      	bpl.n	800d03c <_printf_i+0xe8>
 800d044:	881e      	ldrh	r6, [r3, #0]
 800d046:	4854      	ldr	r0, [pc, #336]	; (800d198 <_printf_i+0x244>)
 800d048:	2f6f      	cmp	r7, #111	; 0x6f
 800d04a:	bf0c      	ite	eq
 800d04c:	2308      	moveq	r3, #8
 800d04e:	230a      	movne	r3, #10
 800d050:	2100      	movs	r1, #0
 800d052:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d056:	6865      	ldr	r5, [r4, #4]
 800d058:	60a5      	str	r5, [r4, #8]
 800d05a:	2d00      	cmp	r5, #0
 800d05c:	bfa2      	ittt	ge
 800d05e:	6821      	ldrge	r1, [r4, #0]
 800d060:	f021 0104 	bicge.w	r1, r1, #4
 800d064:	6021      	strge	r1, [r4, #0]
 800d066:	b90e      	cbnz	r6, 800d06c <_printf_i+0x118>
 800d068:	2d00      	cmp	r5, #0
 800d06a:	d04d      	beq.n	800d108 <_printf_i+0x1b4>
 800d06c:	4615      	mov	r5, r2
 800d06e:	fbb6 f1f3 	udiv	r1, r6, r3
 800d072:	fb03 6711 	mls	r7, r3, r1, r6
 800d076:	5dc7      	ldrb	r7, [r0, r7]
 800d078:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d07c:	4637      	mov	r7, r6
 800d07e:	42bb      	cmp	r3, r7
 800d080:	460e      	mov	r6, r1
 800d082:	d9f4      	bls.n	800d06e <_printf_i+0x11a>
 800d084:	2b08      	cmp	r3, #8
 800d086:	d10b      	bne.n	800d0a0 <_printf_i+0x14c>
 800d088:	6823      	ldr	r3, [r4, #0]
 800d08a:	07de      	lsls	r6, r3, #31
 800d08c:	d508      	bpl.n	800d0a0 <_printf_i+0x14c>
 800d08e:	6923      	ldr	r3, [r4, #16]
 800d090:	6861      	ldr	r1, [r4, #4]
 800d092:	4299      	cmp	r1, r3
 800d094:	bfde      	ittt	le
 800d096:	2330      	movle	r3, #48	; 0x30
 800d098:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d09c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d0a0:	1b52      	subs	r2, r2, r5
 800d0a2:	6122      	str	r2, [r4, #16]
 800d0a4:	f8cd a000 	str.w	sl, [sp]
 800d0a8:	464b      	mov	r3, r9
 800d0aa:	aa03      	add	r2, sp, #12
 800d0ac:	4621      	mov	r1, r4
 800d0ae:	4640      	mov	r0, r8
 800d0b0:	f7ff fee2 	bl	800ce78 <_printf_common>
 800d0b4:	3001      	adds	r0, #1
 800d0b6:	d14c      	bne.n	800d152 <_printf_i+0x1fe>
 800d0b8:	f04f 30ff 	mov.w	r0, #4294967295
 800d0bc:	b004      	add	sp, #16
 800d0be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0c2:	4835      	ldr	r0, [pc, #212]	; (800d198 <_printf_i+0x244>)
 800d0c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d0c8:	6829      	ldr	r1, [r5, #0]
 800d0ca:	6823      	ldr	r3, [r4, #0]
 800d0cc:	f851 6b04 	ldr.w	r6, [r1], #4
 800d0d0:	6029      	str	r1, [r5, #0]
 800d0d2:	061d      	lsls	r5, r3, #24
 800d0d4:	d514      	bpl.n	800d100 <_printf_i+0x1ac>
 800d0d6:	07df      	lsls	r7, r3, #31
 800d0d8:	bf44      	itt	mi
 800d0da:	f043 0320 	orrmi.w	r3, r3, #32
 800d0de:	6023      	strmi	r3, [r4, #0]
 800d0e0:	b91e      	cbnz	r6, 800d0ea <_printf_i+0x196>
 800d0e2:	6823      	ldr	r3, [r4, #0]
 800d0e4:	f023 0320 	bic.w	r3, r3, #32
 800d0e8:	6023      	str	r3, [r4, #0]
 800d0ea:	2310      	movs	r3, #16
 800d0ec:	e7b0      	b.n	800d050 <_printf_i+0xfc>
 800d0ee:	6823      	ldr	r3, [r4, #0]
 800d0f0:	f043 0320 	orr.w	r3, r3, #32
 800d0f4:	6023      	str	r3, [r4, #0]
 800d0f6:	2378      	movs	r3, #120	; 0x78
 800d0f8:	4828      	ldr	r0, [pc, #160]	; (800d19c <_printf_i+0x248>)
 800d0fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d0fe:	e7e3      	b.n	800d0c8 <_printf_i+0x174>
 800d100:	0659      	lsls	r1, r3, #25
 800d102:	bf48      	it	mi
 800d104:	b2b6      	uxthmi	r6, r6
 800d106:	e7e6      	b.n	800d0d6 <_printf_i+0x182>
 800d108:	4615      	mov	r5, r2
 800d10a:	e7bb      	b.n	800d084 <_printf_i+0x130>
 800d10c:	682b      	ldr	r3, [r5, #0]
 800d10e:	6826      	ldr	r6, [r4, #0]
 800d110:	6961      	ldr	r1, [r4, #20]
 800d112:	1d18      	adds	r0, r3, #4
 800d114:	6028      	str	r0, [r5, #0]
 800d116:	0635      	lsls	r5, r6, #24
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	d501      	bpl.n	800d120 <_printf_i+0x1cc>
 800d11c:	6019      	str	r1, [r3, #0]
 800d11e:	e002      	b.n	800d126 <_printf_i+0x1d2>
 800d120:	0670      	lsls	r0, r6, #25
 800d122:	d5fb      	bpl.n	800d11c <_printf_i+0x1c8>
 800d124:	8019      	strh	r1, [r3, #0]
 800d126:	2300      	movs	r3, #0
 800d128:	6123      	str	r3, [r4, #16]
 800d12a:	4615      	mov	r5, r2
 800d12c:	e7ba      	b.n	800d0a4 <_printf_i+0x150>
 800d12e:	682b      	ldr	r3, [r5, #0]
 800d130:	1d1a      	adds	r2, r3, #4
 800d132:	602a      	str	r2, [r5, #0]
 800d134:	681d      	ldr	r5, [r3, #0]
 800d136:	6862      	ldr	r2, [r4, #4]
 800d138:	2100      	movs	r1, #0
 800d13a:	4628      	mov	r0, r5
 800d13c:	f7f3 f860 	bl	8000200 <memchr>
 800d140:	b108      	cbz	r0, 800d146 <_printf_i+0x1f2>
 800d142:	1b40      	subs	r0, r0, r5
 800d144:	6060      	str	r0, [r4, #4]
 800d146:	6863      	ldr	r3, [r4, #4]
 800d148:	6123      	str	r3, [r4, #16]
 800d14a:	2300      	movs	r3, #0
 800d14c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d150:	e7a8      	b.n	800d0a4 <_printf_i+0x150>
 800d152:	6923      	ldr	r3, [r4, #16]
 800d154:	462a      	mov	r2, r5
 800d156:	4649      	mov	r1, r9
 800d158:	4640      	mov	r0, r8
 800d15a:	47d0      	blx	sl
 800d15c:	3001      	adds	r0, #1
 800d15e:	d0ab      	beq.n	800d0b8 <_printf_i+0x164>
 800d160:	6823      	ldr	r3, [r4, #0]
 800d162:	079b      	lsls	r3, r3, #30
 800d164:	d413      	bmi.n	800d18e <_printf_i+0x23a>
 800d166:	68e0      	ldr	r0, [r4, #12]
 800d168:	9b03      	ldr	r3, [sp, #12]
 800d16a:	4298      	cmp	r0, r3
 800d16c:	bfb8      	it	lt
 800d16e:	4618      	movlt	r0, r3
 800d170:	e7a4      	b.n	800d0bc <_printf_i+0x168>
 800d172:	2301      	movs	r3, #1
 800d174:	4632      	mov	r2, r6
 800d176:	4649      	mov	r1, r9
 800d178:	4640      	mov	r0, r8
 800d17a:	47d0      	blx	sl
 800d17c:	3001      	adds	r0, #1
 800d17e:	d09b      	beq.n	800d0b8 <_printf_i+0x164>
 800d180:	3501      	adds	r5, #1
 800d182:	68e3      	ldr	r3, [r4, #12]
 800d184:	9903      	ldr	r1, [sp, #12]
 800d186:	1a5b      	subs	r3, r3, r1
 800d188:	42ab      	cmp	r3, r5
 800d18a:	dcf2      	bgt.n	800d172 <_printf_i+0x21e>
 800d18c:	e7eb      	b.n	800d166 <_printf_i+0x212>
 800d18e:	2500      	movs	r5, #0
 800d190:	f104 0619 	add.w	r6, r4, #25
 800d194:	e7f5      	b.n	800d182 <_printf_i+0x22e>
 800d196:	bf00      	nop
 800d198:	08010116 	.word	0x08010116
 800d19c:	08010127 	.word	0x08010127

0800d1a0 <iprintf>:
 800d1a0:	b40f      	push	{r0, r1, r2, r3}
 800d1a2:	4b0a      	ldr	r3, [pc, #40]	; (800d1cc <iprintf+0x2c>)
 800d1a4:	b513      	push	{r0, r1, r4, lr}
 800d1a6:	681c      	ldr	r4, [r3, #0]
 800d1a8:	b124      	cbz	r4, 800d1b4 <iprintf+0x14>
 800d1aa:	69a3      	ldr	r3, [r4, #24]
 800d1ac:	b913      	cbnz	r3, 800d1b4 <iprintf+0x14>
 800d1ae:	4620      	mov	r0, r4
 800d1b0:	f001 f916 	bl	800e3e0 <__sinit>
 800d1b4:	ab05      	add	r3, sp, #20
 800d1b6:	9a04      	ldr	r2, [sp, #16]
 800d1b8:	68a1      	ldr	r1, [r4, #8]
 800d1ba:	9301      	str	r3, [sp, #4]
 800d1bc:	4620      	mov	r0, r4
 800d1be:	f002 f821 	bl	800f204 <_vfiprintf_r>
 800d1c2:	b002      	add	sp, #8
 800d1c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d1c8:	b004      	add	sp, #16
 800d1ca:	4770      	bx	lr
 800d1cc:	200001e4 	.word	0x200001e4

0800d1d0 <_puts_r>:
 800d1d0:	b570      	push	{r4, r5, r6, lr}
 800d1d2:	460e      	mov	r6, r1
 800d1d4:	4605      	mov	r5, r0
 800d1d6:	b118      	cbz	r0, 800d1e0 <_puts_r+0x10>
 800d1d8:	6983      	ldr	r3, [r0, #24]
 800d1da:	b90b      	cbnz	r3, 800d1e0 <_puts_r+0x10>
 800d1dc:	f001 f900 	bl	800e3e0 <__sinit>
 800d1e0:	69ab      	ldr	r3, [r5, #24]
 800d1e2:	68ac      	ldr	r4, [r5, #8]
 800d1e4:	b913      	cbnz	r3, 800d1ec <_puts_r+0x1c>
 800d1e6:	4628      	mov	r0, r5
 800d1e8:	f001 f8fa 	bl	800e3e0 <__sinit>
 800d1ec:	4b2c      	ldr	r3, [pc, #176]	; (800d2a0 <_puts_r+0xd0>)
 800d1ee:	429c      	cmp	r4, r3
 800d1f0:	d120      	bne.n	800d234 <_puts_r+0x64>
 800d1f2:	686c      	ldr	r4, [r5, #4]
 800d1f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d1f6:	07db      	lsls	r3, r3, #31
 800d1f8:	d405      	bmi.n	800d206 <_puts_r+0x36>
 800d1fa:	89a3      	ldrh	r3, [r4, #12]
 800d1fc:	0598      	lsls	r0, r3, #22
 800d1fe:	d402      	bmi.n	800d206 <_puts_r+0x36>
 800d200:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d202:	f001 f990 	bl	800e526 <__retarget_lock_acquire_recursive>
 800d206:	89a3      	ldrh	r3, [r4, #12]
 800d208:	0719      	lsls	r1, r3, #28
 800d20a:	d51d      	bpl.n	800d248 <_puts_r+0x78>
 800d20c:	6923      	ldr	r3, [r4, #16]
 800d20e:	b1db      	cbz	r3, 800d248 <_puts_r+0x78>
 800d210:	3e01      	subs	r6, #1
 800d212:	68a3      	ldr	r3, [r4, #8]
 800d214:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d218:	3b01      	subs	r3, #1
 800d21a:	60a3      	str	r3, [r4, #8]
 800d21c:	bb39      	cbnz	r1, 800d26e <_puts_r+0x9e>
 800d21e:	2b00      	cmp	r3, #0
 800d220:	da38      	bge.n	800d294 <_puts_r+0xc4>
 800d222:	4622      	mov	r2, r4
 800d224:	210a      	movs	r1, #10
 800d226:	4628      	mov	r0, r5
 800d228:	f000 f884 	bl	800d334 <__swbuf_r>
 800d22c:	3001      	adds	r0, #1
 800d22e:	d011      	beq.n	800d254 <_puts_r+0x84>
 800d230:	250a      	movs	r5, #10
 800d232:	e011      	b.n	800d258 <_puts_r+0x88>
 800d234:	4b1b      	ldr	r3, [pc, #108]	; (800d2a4 <_puts_r+0xd4>)
 800d236:	429c      	cmp	r4, r3
 800d238:	d101      	bne.n	800d23e <_puts_r+0x6e>
 800d23a:	68ac      	ldr	r4, [r5, #8]
 800d23c:	e7da      	b.n	800d1f4 <_puts_r+0x24>
 800d23e:	4b1a      	ldr	r3, [pc, #104]	; (800d2a8 <_puts_r+0xd8>)
 800d240:	429c      	cmp	r4, r3
 800d242:	bf08      	it	eq
 800d244:	68ec      	ldreq	r4, [r5, #12]
 800d246:	e7d5      	b.n	800d1f4 <_puts_r+0x24>
 800d248:	4621      	mov	r1, r4
 800d24a:	4628      	mov	r0, r5
 800d24c:	f000 f8c4 	bl	800d3d8 <__swsetup_r>
 800d250:	2800      	cmp	r0, #0
 800d252:	d0dd      	beq.n	800d210 <_puts_r+0x40>
 800d254:	f04f 35ff 	mov.w	r5, #4294967295
 800d258:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d25a:	07da      	lsls	r2, r3, #31
 800d25c:	d405      	bmi.n	800d26a <_puts_r+0x9a>
 800d25e:	89a3      	ldrh	r3, [r4, #12]
 800d260:	059b      	lsls	r3, r3, #22
 800d262:	d402      	bmi.n	800d26a <_puts_r+0x9a>
 800d264:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d266:	f001 f95f 	bl	800e528 <__retarget_lock_release_recursive>
 800d26a:	4628      	mov	r0, r5
 800d26c:	bd70      	pop	{r4, r5, r6, pc}
 800d26e:	2b00      	cmp	r3, #0
 800d270:	da04      	bge.n	800d27c <_puts_r+0xac>
 800d272:	69a2      	ldr	r2, [r4, #24]
 800d274:	429a      	cmp	r2, r3
 800d276:	dc06      	bgt.n	800d286 <_puts_r+0xb6>
 800d278:	290a      	cmp	r1, #10
 800d27a:	d004      	beq.n	800d286 <_puts_r+0xb6>
 800d27c:	6823      	ldr	r3, [r4, #0]
 800d27e:	1c5a      	adds	r2, r3, #1
 800d280:	6022      	str	r2, [r4, #0]
 800d282:	7019      	strb	r1, [r3, #0]
 800d284:	e7c5      	b.n	800d212 <_puts_r+0x42>
 800d286:	4622      	mov	r2, r4
 800d288:	4628      	mov	r0, r5
 800d28a:	f000 f853 	bl	800d334 <__swbuf_r>
 800d28e:	3001      	adds	r0, #1
 800d290:	d1bf      	bne.n	800d212 <_puts_r+0x42>
 800d292:	e7df      	b.n	800d254 <_puts_r+0x84>
 800d294:	6823      	ldr	r3, [r4, #0]
 800d296:	250a      	movs	r5, #10
 800d298:	1c5a      	adds	r2, r3, #1
 800d29a:	6022      	str	r2, [r4, #0]
 800d29c:	701d      	strb	r5, [r3, #0]
 800d29e:	e7db      	b.n	800d258 <_puts_r+0x88>
 800d2a0:	080101e8 	.word	0x080101e8
 800d2a4:	08010208 	.word	0x08010208
 800d2a8:	080101c8 	.word	0x080101c8

0800d2ac <puts>:
 800d2ac:	4b02      	ldr	r3, [pc, #8]	; (800d2b8 <puts+0xc>)
 800d2ae:	4601      	mov	r1, r0
 800d2b0:	6818      	ldr	r0, [r3, #0]
 800d2b2:	f7ff bf8d 	b.w	800d1d0 <_puts_r>
 800d2b6:	bf00      	nop
 800d2b8:	200001e4 	.word	0x200001e4

0800d2bc <siprintf>:
 800d2bc:	b40e      	push	{r1, r2, r3}
 800d2be:	b500      	push	{lr}
 800d2c0:	b09c      	sub	sp, #112	; 0x70
 800d2c2:	ab1d      	add	r3, sp, #116	; 0x74
 800d2c4:	9002      	str	r0, [sp, #8]
 800d2c6:	9006      	str	r0, [sp, #24]
 800d2c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d2cc:	4809      	ldr	r0, [pc, #36]	; (800d2f4 <siprintf+0x38>)
 800d2ce:	9107      	str	r1, [sp, #28]
 800d2d0:	9104      	str	r1, [sp, #16]
 800d2d2:	4909      	ldr	r1, [pc, #36]	; (800d2f8 <siprintf+0x3c>)
 800d2d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2d8:	9105      	str	r1, [sp, #20]
 800d2da:	6800      	ldr	r0, [r0, #0]
 800d2dc:	9301      	str	r3, [sp, #4]
 800d2de:	a902      	add	r1, sp, #8
 800d2e0:	f001 fe66 	bl	800efb0 <_svfiprintf_r>
 800d2e4:	9b02      	ldr	r3, [sp, #8]
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	701a      	strb	r2, [r3, #0]
 800d2ea:	b01c      	add	sp, #112	; 0x70
 800d2ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800d2f0:	b003      	add	sp, #12
 800d2f2:	4770      	bx	lr
 800d2f4:	200001e4 	.word	0x200001e4
 800d2f8:	ffff0208 	.word	0xffff0208

0800d2fc <strcpy>:
 800d2fc:	4603      	mov	r3, r0
 800d2fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d302:	f803 2b01 	strb.w	r2, [r3], #1
 800d306:	2a00      	cmp	r2, #0
 800d308:	d1f9      	bne.n	800d2fe <strcpy+0x2>
 800d30a:	4770      	bx	lr

0800d30c <strncpy>:
 800d30c:	b510      	push	{r4, lr}
 800d30e:	3901      	subs	r1, #1
 800d310:	4603      	mov	r3, r0
 800d312:	b132      	cbz	r2, 800d322 <strncpy+0x16>
 800d314:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d318:	f803 4b01 	strb.w	r4, [r3], #1
 800d31c:	3a01      	subs	r2, #1
 800d31e:	2c00      	cmp	r4, #0
 800d320:	d1f7      	bne.n	800d312 <strncpy+0x6>
 800d322:	441a      	add	r2, r3
 800d324:	2100      	movs	r1, #0
 800d326:	4293      	cmp	r3, r2
 800d328:	d100      	bne.n	800d32c <strncpy+0x20>
 800d32a:	bd10      	pop	{r4, pc}
 800d32c:	f803 1b01 	strb.w	r1, [r3], #1
 800d330:	e7f9      	b.n	800d326 <strncpy+0x1a>
	...

0800d334 <__swbuf_r>:
 800d334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d336:	460e      	mov	r6, r1
 800d338:	4614      	mov	r4, r2
 800d33a:	4605      	mov	r5, r0
 800d33c:	b118      	cbz	r0, 800d346 <__swbuf_r+0x12>
 800d33e:	6983      	ldr	r3, [r0, #24]
 800d340:	b90b      	cbnz	r3, 800d346 <__swbuf_r+0x12>
 800d342:	f001 f84d 	bl	800e3e0 <__sinit>
 800d346:	4b21      	ldr	r3, [pc, #132]	; (800d3cc <__swbuf_r+0x98>)
 800d348:	429c      	cmp	r4, r3
 800d34a:	d12b      	bne.n	800d3a4 <__swbuf_r+0x70>
 800d34c:	686c      	ldr	r4, [r5, #4]
 800d34e:	69a3      	ldr	r3, [r4, #24]
 800d350:	60a3      	str	r3, [r4, #8]
 800d352:	89a3      	ldrh	r3, [r4, #12]
 800d354:	071a      	lsls	r2, r3, #28
 800d356:	d52f      	bpl.n	800d3b8 <__swbuf_r+0x84>
 800d358:	6923      	ldr	r3, [r4, #16]
 800d35a:	b36b      	cbz	r3, 800d3b8 <__swbuf_r+0x84>
 800d35c:	6923      	ldr	r3, [r4, #16]
 800d35e:	6820      	ldr	r0, [r4, #0]
 800d360:	1ac0      	subs	r0, r0, r3
 800d362:	6963      	ldr	r3, [r4, #20]
 800d364:	b2f6      	uxtb	r6, r6
 800d366:	4283      	cmp	r3, r0
 800d368:	4637      	mov	r7, r6
 800d36a:	dc04      	bgt.n	800d376 <__swbuf_r+0x42>
 800d36c:	4621      	mov	r1, r4
 800d36e:	4628      	mov	r0, r5
 800d370:	f000 ffa2 	bl	800e2b8 <_fflush_r>
 800d374:	bb30      	cbnz	r0, 800d3c4 <__swbuf_r+0x90>
 800d376:	68a3      	ldr	r3, [r4, #8]
 800d378:	3b01      	subs	r3, #1
 800d37a:	60a3      	str	r3, [r4, #8]
 800d37c:	6823      	ldr	r3, [r4, #0]
 800d37e:	1c5a      	adds	r2, r3, #1
 800d380:	6022      	str	r2, [r4, #0]
 800d382:	701e      	strb	r6, [r3, #0]
 800d384:	6963      	ldr	r3, [r4, #20]
 800d386:	3001      	adds	r0, #1
 800d388:	4283      	cmp	r3, r0
 800d38a:	d004      	beq.n	800d396 <__swbuf_r+0x62>
 800d38c:	89a3      	ldrh	r3, [r4, #12]
 800d38e:	07db      	lsls	r3, r3, #31
 800d390:	d506      	bpl.n	800d3a0 <__swbuf_r+0x6c>
 800d392:	2e0a      	cmp	r6, #10
 800d394:	d104      	bne.n	800d3a0 <__swbuf_r+0x6c>
 800d396:	4621      	mov	r1, r4
 800d398:	4628      	mov	r0, r5
 800d39a:	f000 ff8d 	bl	800e2b8 <_fflush_r>
 800d39e:	b988      	cbnz	r0, 800d3c4 <__swbuf_r+0x90>
 800d3a0:	4638      	mov	r0, r7
 800d3a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3a4:	4b0a      	ldr	r3, [pc, #40]	; (800d3d0 <__swbuf_r+0x9c>)
 800d3a6:	429c      	cmp	r4, r3
 800d3a8:	d101      	bne.n	800d3ae <__swbuf_r+0x7a>
 800d3aa:	68ac      	ldr	r4, [r5, #8]
 800d3ac:	e7cf      	b.n	800d34e <__swbuf_r+0x1a>
 800d3ae:	4b09      	ldr	r3, [pc, #36]	; (800d3d4 <__swbuf_r+0xa0>)
 800d3b0:	429c      	cmp	r4, r3
 800d3b2:	bf08      	it	eq
 800d3b4:	68ec      	ldreq	r4, [r5, #12]
 800d3b6:	e7ca      	b.n	800d34e <__swbuf_r+0x1a>
 800d3b8:	4621      	mov	r1, r4
 800d3ba:	4628      	mov	r0, r5
 800d3bc:	f000 f80c 	bl	800d3d8 <__swsetup_r>
 800d3c0:	2800      	cmp	r0, #0
 800d3c2:	d0cb      	beq.n	800d35c <__swbuf_r+0x28>
 800d3c4:	f04f 37ff 	mov.w	r7, #4294967295
 800d3c8:	e7ea      	b.n	800d3a0 <__swbuf_r+0x6c>
 800d3ca:	bf00      	nop
 800d3cc:	080101e8 	.word	0x080101e8
 800d3d0:	08010208 	.word	0x08010208
 800d3d4:	080101c8 	.word	0x080101c8

0800d3d8 <__swsetup_r>:
 800d3d8:	4b32      	ldr	r3, [pc, #200]	; (800d4a4 <__swsetup_r+0xcc>)
 800d3da:	b570      	push	{r4, r5, r6, lr}
 800d3dc:	681d      	ldr	r5, [r3, #0]
 800d3de:	4606      	mov	r6, r0
 800d3e0:	460c      	mov	r4, r1
 800d3e2:	b125      	cbz	r5, 800d3ee <__swsetup_r+0x16>
 800d3e4:	69ab      	ldr	r3, [r5, #24]
 800d3e6:	b913      	cbnz	r3, 800d3ee <__swsetup_r+0x16>
 800d3e8:	4628      	mov	r0, r5
 800d3ea:	f000 fff9 	bl	800e3e0 <__sinit>
 800d3ee:	4b2e      	ldr	r3, [pc, #184]	; (800d4a8 <__swsetup_r+0xd0>)
 800d3f0:	429c      	cmp	r4, r3
 800d3f2:	d10f      	bne.n	800d414 <__swsetup_r+0x3c>
 800d3f4:	686c      	ldr	r4, [r5, #4]
 800d3f6:	89a3      	ldrh	r3, [r4, #12]
 800d3f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d3fc:	0719      	lsls	r1, r3, #28
 800d3fe:	d42c      	bmi.n	800d45a <__swsetup_r+0x82>
 800d400:	06dd      	lsls	r5, r3, #27
 800d402:	d411      	bmi.n	800d428 <__swsetup_r+0x50>
 800d404:	2309      	movs	r3, #9
 800d406:	6033      	str	r3, [r6, #0]
 800d408:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d40c:	81a3      	strh	r3, [r4, #12]
 800d40e:	f04f 30ff 	mov.w	r0, #4294967295
 800d412:	e03e      	b.n	800d492 <__swsetup_r+0xba>
 800d414:	4b25      	ldr	r3, [pc, #148]	; (800d4ac <__swsetup_r+0xd4>)
 800d416:	429c      	cmp	r4, r3
 800d418:	d101      	bne.n	800d41e <__swsetup_r+0x46>
 800d41a:	68ac      	ldr	r4, [r5, #8]
 800d41c:	e7eb      	b.n	800d3f6 <__swsetup_r+0x1e>
 800d41e:	4b24      	ldr	r3, [pc, #144]	; (800d4b0 <__swsetup_r+0xd8>)
 800d420:	429c      	cmp	r4, r3
 800d422:	bf08      	it	eq
 800d424:	68ec      	ldreq	r4, [r5, #12]
 800d426:	e7e6      	b.n	800d3f6 <__swsetup_r+0x1e>
 800d428:	0758      	lsls	r0, r3, #29
 800d42a:	d512      	bpl.n	800d452 <__swsetup_r+0x7a>
 800d42c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d42e:	b141      	cbz	r1, 800d442 <__swsetup_r+0x6a>
 800d430:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d434:	4299      	cmp	r1, r3
 800d436:	d002      	beq.n	800d43e <__swsetup_r+0x66>
 800d438:	4630      	mov	r0, r6
 800d43a:	f001 fc7d 	bl	800ed38 <_free_r>
 800d43e:	2300      	movs	r3, #0
 800d440:	6363      	str	r3, [r4, #52]	; 0x34
 800d442:	89a3      	ldrh	r3, [r4, #12]
 800d444:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d448:	81a3      	strh	r3, [r4, #12]
 800d44a:	2300      	movs	r3, #0
 800d44c:	6063      	str	r3, [r4, #4]
 800d44e:	6923      	ldr	r3, [r4, #16]
 800d450:	6023      	str	r3, [r4, #0]
 800d452:	89a3      	ldrh	r3, [r4, #12]
 800d454:	f043 0308 	orr.w	r3, r3, #8
 800d458:	81a3      	strh	r3, [r4, #12]
 800d45a:	6923      	ldr	r3, [r4, #16]
 800d45c:	b94b      	cbnz	r3, 800d472 <__swsetup_r+0x9a>
 800d45e:	89a3      	ldrh	r3, [r4, #12]
 800d460:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d464:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d468:	d003      	beq.n	800d472 <__swsetup_r+0x9a>
 800d46a:	4621      	mov	r1, r4
 800d46c:	4630      	mov	r0, r6
 800d46e:	f001 f881 	bl	800e574 <__smakebuf_r>
 800d472:	89a0      	ldrh	r0, [r4, #12]
 800d474:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d478:	f010 0301 	ands.w	r3, r0, #1
 800d47c:	d00a      	beq.n	800d494 <__swsetup_r+0xbc>
 800d47e:	2300      	movs	r3, #0
 800d480:	60a3      	str	r3, [r4, #8]
 800d482:	6963      	ldr	r3, [r4, #20]
 800d484:	425b      	negs	r3, r3
 800d486:	61a3      	str	r3, [r4, #24]
 800d488:	6923      	ldr	r3, [r4, #16]
 800d48a:	b943      	cbnz	r3, 800d49e <__swsetup_r+0xc6>
 800d48c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d490:	d1ba      	bne.n	800d408 <__swsetup_r+0x30>
 800d492:	bd70      	pop	{r4, r5, r6, pc}
 800d494:	0781      	lsls	r1, r0, #30
 800d496:	bf58      	it	pl
 800d498:	6963      	ldrpl	r3, [r4, #20]
 800d49a:	60a3      	str	r3, [r4, #8]
 800d49c:	e7f4      	b.n	800d488 <__swsetup_r+0xb0>
 800d49e:	2000      	movs	r0, #0
 800d4a0:	e7f7      	b.n	800d492 <__swsetup_r+0xba>
 800d4a2:	bf00      	nop
 800d4a4:	200001e4 	.word	0x200001e4
 800d4a8:	080101e8 	.word	0x080101e8
 800d4ac:	08010208 	.word	0x08010208
 800d4b0:	080101c8 	.word	0x080101c8

0800d4b4 <quorem>:
 800d4b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4b8:	6903      	ldr	r3, [r0, #16]
 800d4ba:	690c      	ldr	r4, [r1, #16]
 800d4bc:	42a3      	cmp	r3, r4
 800d4be:	4607      	mov	r7, r0
 800d4c0:	f2c0 8081 	blt.w	800d5c6 <quorem+0x112>
 800d4c4:	3c01      	subs	r4, #1
 800d4c6:	f101 0814 	add.w	r8, r1, #20
 800d4ca:	f100 0514 	add.w	r5, r0, #20
 800d4ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d4d2:	9301      	str	r3, [sp, #4]
 800d4d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d4d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d4dc:	3301      	adds	r3, #1
 800d4de:	429a      	cmp	r2, r3
 800d4e0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d4e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d4e8:	fbb2 f6f3 	udiv	r6, r2, r3
 800d4ec:	d331      	bcc.n	800d552 <quorem+0x9e>
 800d4ee:	f04f 0e00 	mov.w	lr, #0
 800d4f2:	4640      	mov	r0, r8
 800d4f4:	46ac      	mov	ip, r5
 800d4f6:	46f2      	mov	sl, lr
 800d4f8:	f850 2b04 	ldr.w	r2, [r0], #4
 800d4fc:	b293      	uxth	r3, r2
 800d4fe:	fb06 e303 	mla	r3, r6, r3, lr
 800d502:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d506:	b29b      	uxth	r3, r3
 800d508:	ebaa 0303 	sub.w	r3, sl, r3
 800d50c:	f8dc a000 	ldr.w	sl, [ip]
 800d510:	0c12      	lsrs	r2, r2, #16
 800d512:	fa13 f38a 	uxtah	r3, r3, sl
 800d516:	fb06 e202 	mla	r2, r6, r2, lr
 800d51a:	9300      	str	r3, [sp, #0]
 800d51c:	9b00      	ldr	r3, [sp, #0]
 800d51e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d522:	b292      	uxth	r2, r2
 800d524:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d528:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d52c:	f8bd 3000 	ldrh.w	r3, [sp]
 800d530:	4581      	cmp	r9, r0
 800d532:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d536:	f84c 3b04 	str.w	r3, [ip], #4
 800d53a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d53e:	d2db      	bcs.n	800d4f8 <quorem+0x44>
 800d540:	f855 300b 	ldr.w	r3, [r5, fp]
 800d544:	b92b      	cbnz	r3, 800d552 <quorem+0x9e>
 800d546:	9b01      	ldr	r3, [sp, #4]
 800d548:	3b04      	subs	r3, #4
 800d54a:	429d      	cmp	r5, r3
 800d54c:	461a      	mov	r2, r3
 800d54e:	d32e      	bcc.n	800d5ae <quorem+0xfa>
 800d550:	613c      	str	r4, [r7, #16]
 800d552:	4638      	mov	r0, r7
 800d554:	f001 fad8 	bl	800eb08 <__mcmp>
 800d558:	2800      	cmp	r0, #0
 800d55a:	db24      	blt.n	800d5a6 <quorem+0xf2>
 800d55c:	3601      	adds	r6, #1
 800d55e:	4628      	mov	r0, r5
 800d560:	f04f 0c00 	mov.w	ip, #0
 800d564:	f858 2b04 	ldr.w	r2, [r8], #4
 800d568:	f8d0 e000 	ldr.w	lr, [r0]
 800d56c:	b293      	uxth	r3, r2
 800d56e:	ebac 0303 	sub.w	r3, ip, r3
 800d572:	0c12      	lsrs	r2, r2, #16
 800d574:	fa13 f38e 	uxtah	r3, r3, lr
 800d578:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d57c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d580:	b29b      	uxth	r3, r3
 800d582:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d586:	45c1      	cmp	r9, r8
 800d588:	f840 3b04 	str.w	r3, [r0], #4
 800d58c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d590:	d2e8      	bcs.n	800d564 <quorem+0xb0>
 800d592:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d596:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d59a:	b922      	cbnz	r2, 800d5a6 <quorem+0xf2>
 800d59c:	3b04      	subs	r3, #4
 800d59e:	429d      	cmp	r5, r3
 800d5a0:	461a      	mov	r2, r3
 800d5a2:	d30a      	bcc.n	800d5ba <quorem+0x106>
 800d5a4:	613c      	str	r4, [r7, #16]
 800d5a6:	4630      	mov	r0, r6
 800d5a8:	b003      	add	sp, #12
 800d5aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5ae:	6812      	ldr	r2, [r2, #0]
 800d5b0:	3b04      	subs	r3, #4
 800d5b2:	2a00      	cmp	r2, #0
 800d5b4:	d1cc      	bne.n	800d550 <quorem+0x9c>
 800d5b6:	3c01      	subs	r4, #1
 800d5b8:	e7c7      	b.n	800d54a <quorem+0x96>
 800d5ba:	6812      	ldr	r2, [r2, #0]
 800d5bc:	3b04      	subs	r3, #4
 800d5be:	2a00      	cmp	r2, #0
 800d5c0:	d1f0      	bne.n	800d5a4 <quorem+0xf0>
 800d5c2:	3c01      	subs	r4, #1
 800d5c4:	e7eb      	b.n	800d59e <quorem+0xea>
 800d5c6:	2000      	movs	r0, #0
 800d5c8:	e7ee      	b.n	800d5a8 <quorem+0xf4>
 800d5ca:	0000      	movs	r0, r0
 800d5cc:	0000      	movs	r0, r0
	...

0800d5d0 <_dtoa_r>:
 800d5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5d4:	ed2d 8b04 	vpush	{d8-d9}
 800d5d8:	ec57 6b10 	vmov	r6, r7, d0
 800d5dc:	b093      	sub	sp, #76	; 0x4c
 800d5de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d5e0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d5e4:	9106      	str	r1, [sp, #24]
 800d5e6:	ee10 aa10 	vmov	sl, s0
 800d5ea:	4604      	mov	r4, r0
 800d5ec:	9209      	str	r2, [sp, #36]	; 0x24
 800d5ee:	930c      	str	r3, [sp, #48]	; 0x30
 800d5f0:	46bb      	mov	fp, r7
 800d5f2:	b975      	cbnz	r5, 800d612 <_dtoa_r+0x42>
 800d5f4:	2010      	movs	r0, #16
 800d5f6:	f000 fffd 	bl	800e5f4 <malloc>
 800d5fa:	4602      	mov	r2, r0
 800d5fc:	6260      	str	r0, [r4, #36]	; 0x24
 800d5fe:	b920      	cbnz	r0, 800d60a <_dtoa_r+0x3a>
 800d600:	4ba7      	ldr	r3, [pc, #668]	; (800d8a0 <_dtoa_r+0x2d0>)
 800d602:	21ea      	movs	r1, #234	; 0xea
 800d604:	48a7      	ldr	r0, [pc, #668]	; (800d8a4 <_dtoa_r+0x2d4>)
 800d606:	f001 ff93 	bl	800f530 <__assert_func>
 800d60a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d60e:	6005      	str	r5, [r0, #0]
 800d610:	60c5      	str	r5, [r0, #12]
 800d612:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d614:	6819      	ldr	r1, [r3, #0]
 800d616:	b151      	cbz	r1, 800d62e <_dtoa_r+0x5e>
 800d618:	685a      	ldr	r2, [r3, #4]
 800d61a:	604a      	str	r2, [r1, #4]
 800d61c:	2301      	movs	r3, #1
 800d61e:	4093      	lsls	r3, r2
 800d620:	608b      	str	r3, [r1, #8]
 800d622:	4620      	mov	r0, r4
 800d624:	f001 f82e 	bl	800e684 <_Bfree>
 800d628:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d62a:	2200      	movs	r2, #0
 800d62c:	601a      	str	r2, [r3, #0]
 800d62e:	1e3b      	subs	r3, r7, #0
 800d630:	bfaa      	itet	ge
 800d632:	2300      	movge	r3, #0
 800d634:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d638:	f8c8 3000 	strge.w	r3, [r8]
 800d63c:	4b9a      	ldr	r3, [pc, #616]	; (800d8a8 <_dtoa_r+0x2d8>)
 800d63e:	bfbc      	itt	lt
 800d640:	2201      	movlt	r2, #1
 800d642:	f8c8 2000 	strlt.w	r2, [r8]
 800d646:	ea33 030b 	bics.w	r3, r3, fp
 800d64a:	d11b      	bne.n	800d684 <_dtoa_r+0xb4>
 800d64c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d64e:	f242 730f 	movw	r3, #9999	; 0x270f
 800d652:	6013      	str	r3, [r2, #0]
 800d654:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d658:	4333      	orrs	r3, r6
 800d65a:	f000 8592 	beq.w	800e182 <_dtoa_r+0xbb2>
 800d65e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d660:	b963      	cbnz	r3, 800d67c <_dtoa_r+0xac>
 800d662:	4b92      	ldr	r3, [pc, #584]	; (800d8ac <_dtoa_r+0x2dc>)
 800d664:	e022      	b.n	800d6ac <_dtoa_r+0xdc>
 800d666:	4b92      	ldr	r3, [pc, #584]	; (800d8b0 <_dtoa_r+0x2e0>)
 800d668:	9301      	str	r3, [sp, #4]
 800d66a:	3308      	adds	r3, #8
 800d66c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d66e:	6013      	str	r3, [r2, #0]
 800d670:	9801      	ldr	r0, [sp, #4]
 800d672:	b013      	add	sp, #76	; 0x4c
 800d674:	ecbd 8b04 	vpop	{d8-d9}
 800d678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d67c:	4b8b      	ldr	r3, [pc, #556]	; (800d8ac <_dtoa_r+0x2dc>)
 800d67e:	9301      	str	r3, [sp, #4]
 800d680:	3303      	adds	r3, #3
 800d682:	e7f3      	b.n	800d66c <_dtoa_r+0x9c>
 800d684:	2200      	movs	r2, #0
 800d686:	2300      	movs	r3, #0
 800d688:	4650      	mov	r0, sl
 800d68a:	4659      	mov	r1, fp
 800d68c:	f7f3 fa2c 	bl	8000ae8 <__aeabi_dcmpeq>
 800d690:	ec4b ab19 	vmov	d9, sl, fp
 800d694:	4680      	mov	r8, r0
 800d696:	b158      	cbz	r0, 800d6b0 <_dtoa_r+0xe0>
 800d698:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d69a:	2301      	movs	r3, #1
 800d69c:	6013      	str	r3, [r2, #0]
 800d69e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	f000 856b 	beq.w	800e17c <_dtoa_r+0xbac>
 800d6a6:	4883      	ldr	r0, [pc, #524]	; (800d8b4 <_dtoa_r+0x2e4>)
 800d6a8:	6018      	str	r0, [r3, #0]
 800d6aa:	1e43      	subs	r3, r0, #1
 800d6ac:	9301      	str	r3, [sp, #4]
 800d6ae:	e7df      	b.n	800d670 <_dtoa_r+0xa0>
 800d6b0:	ec4b ab10 	vmov	d0, sl, fp
 800d6b4:	aa10      	add	r2, sp, #64	; 0x40
 800d6b6:	a911      	add	r1, sp, #68	; 0x44
 800d6b8:	4620      	mov	r0, r4
 800d6ba:	f001 facb 	bl	800ec54 <__d2b>
 800d6be:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d6c2:	ee08 0a10 	vmov	s16, r0
 800d6c6:	2d00      	cmp	r5, #0
 800d6c8:	f000 8084 	beq.w	800d7d4 <_dtoa_r+0x204>
 800d6cc:	ee19 3a90 	vmov	r3, s19
 800d6d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d6d4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d6d8:	4656      	mov	r6, sl
 800d6da:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d6de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d6e2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d6e6:	4b74      	ldr	r3, [pc, #464]	; (800d8b8 <_dtoa_r+0x2e8>)
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	4630      	mov	r0, r6
 800d6ec:	4639      	mov	r1, r7
 800d6ee:	f7f2 fddb 	bl	80002a8 <__aeabi_dsub>
 800d6f2:	a365      	add	r3, pc, #404	; (adr r3, 800d888 <_dtoa_r+0x2b8>)
 800d6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6f8:	f7f2 ff8e 	bl	8000618 <__aeabi_dmul>
 800d6fc:	a364      	add	r3, pc, #400	; (adr r3, 800d890 <_dtoa_r+0x2c0>)
 800d6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d702:	f7f2 fdd3 	bl	80002ac <__adddf3>
 800d706:	4606      	mov	r6, r0
 800d708:	4628      	mov	r0, r5
 800d70a:	460f      	mov	r7, r1
 800d70c:	f7f2 ff1a 	bl	8000544 <__aeabi_i2d>
 800d710:	a361      	add	r3, pc, #388	; (adr r3, 800d898 <_dtoa_r+0x2c8>)
 800d712:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d716:	f7f2 ff7f 	bl	8000618 <__aeabi_dmul>
 800d71a:	4602      	mov	r2, r0
 800d71c:	460b      	mov	r3, r1
 800d71e:	4630      	mov	r0, r6
 800d720:	4639      	mov	r1, r7
 800d722:	f7f2 fdc3 	bl	80002ac <__adddf3>
 800d726:	4606      	mov	r6, r0
 800d728:	460f      	mov	r7, r1
 800d72a:	f7f3 fa25 	bl	8000b78 <__aeabi_d2iz>
 800d72e:	2200      	movs	r2, #0
 800d730:	9000      	str	r0, [sp, #0]
 800d732:	2300      	movs	r3, #0
 800d734:	4630      	mov	r0, r6
 800d736:	4639      	mov	r1, r7
 800d738:	f7f3 f9e0 	bl	8000afc <__aeabi_dcmplt>
 800d73c:	b150      	cbz	r0, 800d754 <_dtoa_r+0x184>
 800d73e:	9800      	ldr	r0, [sp, #0]
 800d740:	f7f2 ff00 	bl	8000544 <__aeabi_i2d>
 800d744:	4632      	mov	r2, r6
 800d746:	463b      	mov	r3, r7
 800d748:	f7f3 f9ce 	bl	8000ae8 <__aeabi_dcmpeq>
 800d74c:	b910      	cbnz	r0, 800d754 <_dtoa_r+0x184>
 800d74e:	9b00      	ldr	r3, [sp, #0]
 800d750:	3b01      	subs	r3, #1
 800d752:	9300      	str	r3, [sp, #0]
 800d754:	9b00      	ldr	r3, [sp, #0]
 800d756:	2b16      	cmp	r3, #22
 800d758:	d85a      	bhi.n	800d810 <_dtoa_r+0x240>
 800d75a:	9a00      	ldr	r2, [sp, #0]
 800d75c:	4b57      	ldr	r3, [pc, #348]	; (800d8bc <_dtoa_r+0x2ec>)
 800d75e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d766:	ec51 0b19 	vmov	r0, r1, d9
 800d76a:	f7f3 f9c7 	bl	8000afc <__aeabi_dcmplt>
 800d76e:	2800      	cmp	r0, #0
 800d770:	d050      	beq.n	800d814 <_dtoa_r+0x244>
 800d772:	9b00      	ldr	r3, [sp, #0]
 800d774:	3b01      	subs	r3, #1
 800d776:	9300      	str	r3, [sp, #0]
 800d778:	2300      	movs	r3, #0
 800d77a:	930b      	str	r3, [sp, #44]	; 0x2c
 800d77c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d77e:	1b5d      	subs	r5, r3, r5
 800d780:	1e6b      	subs	r3, r5, #1
 800d782:	9305      	str	r3, [sp, #20]
 800d784:	bf45      	ittet	mi
 800d786:	f1c5 0301 	rsbmi	r3, r5, #1
 800d78a:	9304      	strmi	r3, [sp, #16]
 800d78c:	2300      	movpl	r3, #0
 800d78e:	2300      	movmi	r3, #0
 800d790:	bf4c      	ite	mi
 800d792:	9305      	strmi	r3, [sp, #20]
 800d794:	9304      	strpl	r3, [sp, #16]
 800d796:	9b00      	ldr	r3, [sp, #0]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	db3d      	blt.n	800d818 <_dtoa_r+0x248>
 800d79c:	9b05      	ldr	r3, [sp, #20]
 800d79e:	9a00      	ldr	r2, [sp, #0]
 800d7a0:	920a      	str	r2, [sp, #40]	; 0x28
 800d7a2:	4413      	add	r3, r2
 800d7a4:	9305      	str	r3, [sp, #20]
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	9307      	str	r3, [sp, #28]
 800d7aa:	9b06      	ldr	r3, [sp, #24]
 800d7ac:	2b09      	cmp	r3, #9
 800d7ae:	f200 8089 	bhi.w	800d8c4 <_dtoa_r+0x2f4>
 800d7b2:	2b05      	cmp	r3, #5
 800d7b4:	bfc4      	itt	gt
 800d7b6:	3b04      	subgt	r3, #4
 800d7b8:	9306      	strgt	r3, [sp, #24]
 800d7ba:	9b06      	ldr	r3, [sp, #24]
 800d7bc:	f1a3 0302 	sub.w	r3, r3, #2
 800d7c0:	bfcc      	ite	gt
 800d7c2:	2500      	movgt	r5, #0
 800d7c4:	2501      	movle	r5, #1
 800d7c6:	2b03      	cmp	r3, #3
 800d7c8:	f200 8087 	bhi.w	800d8da <_dtoa_r+0x30a>
 800d7cc:	e8df f003 	tbb	[pc, r3]
 800d7d0:	59383a2d 	.word	0x59383a2d
 800d7d4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d7d8:	441d      	add	r5, r3
 800d7da:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d7de:	2b20      	cmp	r3, #32
 800d7e0:	bfc1      	itttt	gt
 800d7e2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d7e6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d7ea:	fa0b f303 	lslgt.w	r3, fp, r3
 800d7ee:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d7f2:	bfda      	itte	le
 800d7f4:	f1c3 0320 	rsble	r3, r3, #32
 800d7f8:	fa06 f003 	lslle.w	r0, r6, r3
 800d7fc:	4318      	orrgt	r0, r3
 800d7fe:	f7f2 fe91 	bl	8000524 <__aeabi_ui2d>
 800d802:	2301      	movs	r3, #1
 800d804:	4606      	mov	r6, r0
 800d806:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d80a:	3d01      	subs	r5, #1
 800d80c:	930e      	str	r3, [sp, #56]	; 0x38
 800d80e:	e76a      	b.n	800d6e6 <_dtoa_r+0x116>
 800d810:	2301      	movs	r3, #1
 800d812:	e7b2      	b.n	800d77a <_dtoa_r+0x1aa>
 800d814:	900b      	str	r0, [sp, #44]	; 0x2c
 800d816:	e7b1      	b.n	800d77c <_dtoa_r+0x1ac>
 800d818:	9b04      	ldr	r3, [sp, #16]
 800d81a:	9a00      	ldr	r2, [sp, #0]
 800d81c:	1a9b      	subs	r3, r3, r2
 800d81e:	9304      	str	r3, [sp, #16]
 800d820:	4253      	negs	r3, r2
 800d822:	9307      	str	r3, [sp, #28]
 800d824:	2300      	movs	r3, #0
 800d826:	930a      	str	r3, [sp, #40]	; 0x28
 800d828:	e7bf      	b.n	800d7aa <_dtoa_r+0x1da>
 800d82a:	2300      	movs	r3, #0
 800d82c:	9308      	str	r3, [sp, #32]
 800d82e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d830:	2b00      	cmp	r3, #0
 800d832:	dc55      	bgt.n	800d8e0 <_dtoa_r+0x310>
 800d834:	2301      	movs	r3, #1
 800d836:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d83a:	461a      	mov	r2, r3
 800d83c:	9209      	str	r2, [sp, #36]	; 0x24
 800d83e:	e00c      	b.n	800d85a <_dtoa_r+0x28a>
 800d840:	2301      	movs	r3, #1
 800d842:	e7f3      	b.n	800d82c <_dtoa_r+0x25c>
 800d844:	2300      	movs	r3, #0
 800d846:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d848:	9308      	str	r3, [sp, #32]
 800d84a:	9b00      	ldr	r3, [sp, #0]
 800d84c:	4413      	add	r3, r2
 800d84e:	9302      	str	r3, [sp, #8]
 800d850:	3301      	adds	r3, #1
 800d852:	2b01      	cmp	r3, #1
 800d854:	9303      	str	r3, [sp, #12]
 800d856:	bfb8      	it	lt
 800d858:	2301      	movlt	r3, #1
 800d85a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d85c:	2200      	movs	r2, #0
 800d85e:	6042      	str	r2, [r0, #4]
 800d860:	2204      	movs	r2, #4
 800d862:	f102 0614 	add.w	r6, r2, #20
 800d866:	429e      	cmp	r6, r3
 800d868:	6841      	ldr	r1, [r0, #4]
 800d86a:	d93d      	bls.n	800d8e8 <_dtoa_r+0x318>
 800d86c:	4620      	mov	r0, r4
 800d86e:	f000 fec9 	bl	800e604 <_Balloc>
 800d872:	9001      	str	r0, [sp, #4]
 800d874:	2800      	cmp	r0, #0
 800d876:	d13b      	bne.n	800d8f0 <_dtoa_r+0x320>
 800d878:	4b11      	ldr	r3, [pc, #68]	; (800d8c0 <_dtoa_r+0x2f0>)
 800d87a:	4602      	mov	r2, r0
 800d87c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d880:	e6c0      	b.n	800d604 <_dtoa_r+0x34>
 800d882:	2301      	movs	r3, #1
 800d884:	e7df      	b.n	800d846 <_dtoa_r+0x276>
 800d886:	bf00      	nop
 800d888:	636f4361 	.word	0x636f4361
 800d88c:	3fd287a7 	.word	0x3fd287a7
 800d890:	8b60c8b3 	.word	0x8b60c8b3
 800d894:	3fc68a28 	.word	0x3fc68a28
 800d898:	509f79fb 	.word	0x509f79fb
 800d89c:	3fd34413 	.word	0x3fd34413
 800d8a0:	08010145 	.word	0x08010145
 800d8a4:	0801015c 	.word	0x0801015c
 800d8a8:	7ff00000 	.word	0x7ff00000
 800d8ac:	08010141 	.word	0x08010141
 800d8b0:	08010138 	.word	0x08010138
 800d8b4:	08010115 	.word	0x08010115
 800d8b8:	3ff80000 	.word	0x3ff80000
 800d8bc:	080102b0 	.word	0x080102b0
 800d8c0:	080101b7 	.word	0x080101b7
 800d8c4:	2501      	movs	r5, #1
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	9306      	str	r3, [sp, #24]
 800d8ca:	9508      	str	r5, [sp, #32]
 800d8cc:	f04f 33ff 	mov.w	r3, #4294967295
 800d8d0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d8d4:	2200      	movs	r2, #0
 800d8d6:	2312      	movs	r3, #18
 800d8d8:	e7b0      	b.n	800d83c <_dtoa_r+0x26c>
 800d8da:	2301      	movs	r3, #1
 800d8dc:	9308      	str	r3, [sp, #32]
 800d8de:	e7f5      	b.n	800d8cc <_dtoa_r+0x2fc>
 800d8e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8e2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d8e6:	e7b8      	b.n	800d85a <_dtoa_r+0x28a>
 800d8e8:	3101      	adds	r1, #1
 800d8ea:	6041      	str	r1, [r0, #4]
 800d8ec:	0052      	lsls	r2, r2, #1
 800d8ee:	e7b8      	b.n	800d862 <_dtoa_r+0x292>
 800d8f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d8f2:	9a01      	ldr	r2, [sp, #4]
 800d8f4:	601a      	str	r2, [r3, #0]
 800d8f6:	9b03      	ldr	r3, [sp, #12]
 800d8f8:	2b0e      	cmp	r3, #14
 800d8fa:	f200 809d 	bhi.w	800da38 <_dtoa_r+0x468>
 800d8fe:	2d00      	cmp	r5, #0
 800d900:	f000 809a 	beq.w	800da38 <_dtoa_r+0x468>
 800d904:	9b00      	ldr	r3, [sp, #0]
 800d906:	2b00      	cmp	r3, #0
 800d908:	dd32      	ble.n	800d970 <_dtoa_r+0x3a0>
 800d90a:	4ab7      	ldr	r2, [pc, #732]	; (800dbe8 <_dtoa_r+0x618>)
 800d90c:	f003 030f 	and.w	r3, r3, #15
 800d910:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d914:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d918:	9b00      	ldr	r3, [sp, #0]
 800d91a:	05d8      	lsls	r0, r3, #23
 800d91c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d920:	d516      	bpl.n	800d950 <_dtoa_r+0x380>
 800d922:	4bb2      	ldr	r3, [pc, #712]	; (800dbec <_dtoa_r+0x61c>)
 800d924:	ec51 0b19 	vmov	r0, r1, d9
 800d928:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d92c:	f7f2 ff9e 	bl	800086c <__aeabi_ddiv>
 800d930:	f007 070f 	and.w	r7, r7, #15
 800d934:	4682      	mov	sl, r0
 800d936:	468b      	mov	fp, r1
 800d938:	2503      	movs	r5, #3
 800d93a:	4eac      	ldr	r6, [pc, #688]	; (800dbec <_dtoa_r+0x61c>)
 800d93c:	b957      	cbnz	r7, 800d954 <_dtoa_r+0x384>
 800d93e:	4642      	mov	r2, r8
 800d940:	464b      	mov	r3, r9
 800d942:	4650      	mov	r0, sl
 800d944:	4659      	mov	r1, fp
 800d946:	f7f2 ff91 	bl	800086c <__aeabi_ddiv>
 800d94a:	4682      	mov	sl, r0
 800d94c:	468b      	mov	fp, r1
 800d94e:	e028      	b.n	800d9a2 <_dtoa_r+0x3d2>
 800d950:	2502      	movs	r5, #2
 800d952:	e7f2      	b.n	800d93a <_dtoa_r+0x36a>
 800d954:	07f9      	lsls	r1, r7, #31
 800d956:	d508      	bpl.n	800d96a <_dtoa_r+0x39a>
 800d958:	4640      	mov	r0, r8
 800d95a:	4649      	mov	r1, r9
 800d95c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d960:	f7f2 fe5a 	bl	8000618 <__aeabi_dmul>
 800d964:	3501      	adds	r5, #1
 800d966:	4680      	mov	r8, r0
 800d968:	4689      	mov	r9, r1
 800d96a:	107f      	asrs	r7, r7, #1
 800d96c:	3608      	adds	r6, #8
 800d96e:	e7e5      	b.n	800d93c <_dtoa_r+0x36c>
 800d970:	f000 809b 	beq.w	800daaa <_dtoa_r+0x4da>
 800d974:	9b00      	ldr	r3, [sp, #0]
 800d976:	4f9d      	ldr	r7, [pc, #628]	; (800dbec <_dtoa_r+0x61c>)
 800d978:	425e      	negs	r6, r3
 800d97a:	4b9b      	ldr	r3, [pc, #620]	; (800dbe8 <_dtoa_r+0x618>)
 800d97c:	f006 020f 	and.w	r2, r6, #15
 800d980:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d988:	ec51 0b19 	vmov	r0, r1, d9
 800d98c:	f7f2 fe44 	bl	8000618 <__aeabi_dmul>
 800d990:	1136      	asrs	r6, r6, #4
 800d992:	4682      	mov	sl, r0
 800d994:	468b      	mov	fp, r1
 800d996:	2300      	movs	r3, #0
 800d998:	2502      	movs	r5, #2
 800d99a:	2e00      	cmp	r6, #0
 800d99c:	d17a      	bne.n	800da94 <_dtoa_r+0x4c4>
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d1d3      	bne.n	800d94a <_dtoa_r+0x37a>
 800d9a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	f000 8082 	beq.w	800daae <_dtoa_r+0x4de>
 800d9aa:	4b91      	ldr	r3, [pc, #580]	; (800dbf0 <_dtoa_r+0x620>)
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	4650      	mov	r0, sl
 800d9b0:	4659      	mov	r1, fp
 800d9b2:	f7f3 f8a3 	bl	8000afc <__aeabi_dcmplt>
 800d9b6:	2800      	cmp	r0, #0
 800d9b8:	d079      	beq.n	800daae <_dtoa_r+0x4de>
 800d9ba:	9b03      	ldr	r3, [sp, #12]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d076      	beq.n	800daae <_dtoa_r+0x4de>
 800d9c0:	9b02      	ldr	r3, [sp, #8]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	dd36      	ble.n	800da34 <_dtoa_r+0x464>
 800d9c6:	9b00      	ldr	r3, [sp, #0]
 800d9c8:	4650      	mov	r0, sl
 800d9ca:	4659      	mov	r1, fp
 800d9cc:	1e5f      	subs	r7, r3, #1
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	4b88      	ldr	r3, [pc, #544]	; (800dbf4 <_dtoa_r+0x624>)
 800d9d2:	f7f2 fe21 	bl	8000618 <__aeabi_dmul>
 800d9d6:	9e02      	ldr	r6, [sp, #8]
 800d9d8:	4682      	mov	sl, r0
 800d9da:	468b      	mov	fp, r1
 800d9dc:	3501      	adds	r5, #1
 800d9de:	4628      	mov	r0, r5
 800d9e0:	f7f2 fdb0 	bl	8000544 <__aeabi_i2d>
 800d9e4:	4652      	mov	r2, sl
 800d9e6:	465b      	mov	r3, fp
 800d9e8:	f7f2 fe16 	bl	8000618 <__aeabi_dmul>
 800d9ec:	4b82      	ldr	r3, [pc, #520]	; (800dbf8 <_dtoa_r+0x628>)
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	f7f2 fc5c 	bl	80002ac <__adddf3>
 800d9f4:	46d0      	mov	r8, sl
 800d9f6:	46d9      	mov	r9, fp
 800d9f8:	4682      	mov	sl, r0
 800d9fa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d9fe:	2e00      	cmp	r6, #0
 800da00:	d158      	bne.n	800dab4 <_dtoa_r+0x4e4>
 800da02:	4b7e      	ldr	r3, [pc, #504]	; (800dbfc <_dtoa_r+0x62c>)
 800da04:	2200      	movs	r2, #0
 800da06:	4640      	mov	r0, r8
 800da08:	4649      	mov	r1, r9
 800da0a:	f7f2 fc4d 	bl	80002a8 <__aeabi_dsub>
 800da0e:	4652      	mov	r2, sl
 800da10:	465b      	mov	r3, fp
 800da12:	4680      	mov	r8, r0
 800da14:	4689      	mov	r9, r1
 800da16:	f7f3 f88f 	bl	8000b38 <__aeabi_dcmpgt>
 800da1a:	2800      	cmp	r0, #0
 800da1c:	f040 8295 	bne.w	800df4a <_dtoa_r+0x97a>
 800da20:	4652      	mov	r2, sl
 800da22:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800da26:	4640      	mov	r0, r8
 800da28:	4649      	mov	r1, r9
 800da2a:	f7f3 f867 	bl	8000afc <__aeabi_dcmplt>
 800da2e:	2800      	cmp	r0, #0
 800da30:	f040 8289 	bne.w	800df46 <_dtoa_r+0x976>
 800da34:	ec5b ab19 	vmov	sl, fp, d9
 800da38:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	f2c0 8148 	blt.w	800dcd0 <_dtoa_r+0x700>
 800da40:	9a00      	ldr	r2, [sp, #0]
 800da42:	2a0e      	cmp	r2, #14
 800da44:	f300 8144 	bgt.w	800dcd0 <_dtoa_r+0x700>
 800da48:	4b67      	ldr	r3, [pc, #412]	; (800dbe8 <_dtoa_r+0x618>)
 800da4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800da4e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800da52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da54:	2b00      	cmp	r3, #0
 800da56:	f280 80d5 	bge.w	800dc04 <_dtoa_r+0x634>
 800da5a:	9b03      	ldr	r3, [sp, #12]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	f300 80d1 	bgt.w	800dc04 <_dtoa_r+0x634>
 800da62:	f040 826f 	bne.w	800df44 <_dtoa_r+0x974>
 800da66:	4b65      	ldr	r3, [pc, #404]	; (800dbfc <_dtoa_r+0x62c>)
 800da68:	2200      	movs	r2, #0
 800da6a:	4640      	mov	r0, r8
 800da6c:	4649      	mov	r1, r9
 800da6e:	f7f2 fdd3 	bl	8000618 <__aeabi_dmul>
 800da72:	4652      	mov	r2, sl
 800da74:	465b      	mov	r3, fp
 800da76:	f7f3 f855 	bl	8000b24 <__aeabi_dcmpge>
 800da7a:	9e03      	ldr	r6, [sp, #12]
 800da7c:	4637      	mov	r7, r6
 800da7e:	2800      	cmp	r0, #0
 800da80:	f040 8245 	bne.w	800df0e <_dtoa_r+0x93e>
 800da84:	9d01      	ldr	r5, [sp, #4]
 800da86:	2331      	movs	r3, #49	; 0x31
 800da88:	f805 3b01 	strb.w	r3, [r5], #1
 800da8c:	9b00      	ldr	r3, [sp, #0]
 800da8e:	3301      	adds	r3, #1
 800da90:	9300      	str	r3, [sp, #0]
 800da92:	e240      	b.n	800df16 <_dtoa_r+0x946>
 800da94:	07f2      	lsls	r2, r6, #31
 800da96:	d505      	bpl.n	800daa4 <_dtoa_r+0x4d4>
 800da98:	e9d7 2300 	ldrd	r2, r3, [r7]
 800da9c:	f7f2 fdbc 	bl	8000618 <__aeabi_dmul>
 800daa0:	3501      	adds	r5, #1
 800daa2:	2301      	movs	r3, #1
 800daa4:	1076      	asrs	r6, r6, #1
 800daa6:	3708      	adds	r7, #8
 800daa8:	e777      	b.n	800d99a <_dtoa_r+0x3ca>
 800daaa:	2502      	movs	r5, #2
 800daac:	e779      	b.n	800d9a2 <_dtoa_r+0x3d2>
 800daae:	9f00      	ldr	r7, [sp, #0]
 800dab0:	9e03      	ldr	r6, [sp, #12]
 800dab2:	e794      	b.n	800d9de <_dtoa_r+0x40e>
 800dab4:	9901      	ldr	r1, [sp, #4]
 800dab6:	4b4c      	ldr	r3, [pc, #304]	; (800dbe8 <_dtoa_r+0x618>)
 800dab8:	4431      	add	r1, r6
 800daba:	910d      	str	r1, [sp, #52]	; 0x34
 800dabc:	9908      	ldr	r1, [sp, #32]
 800dabe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800dac2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800dac6:	2900      	cmp	r1, #0
 800dac8:	d043      	beq.n	800db52 <_dtoa_r+0x582>
 800daca:	494d      	ldr	r1, [pc, #308]	; (800dc00 <_dtoa_r+0x630>)
 800dacc:	2000      	movs	r0, #0
 800dace:	f7f2 fecd 	bl	800086c <__aeabi_ddiv>
 800dad2:	4652      	mov	r2, sl
 800dad4:	465b      	mov	r3, fp
 800dad6:	f7f2 fbe7 	bl	80002a8 <__aeabi_dsub>
 800dada:	9d01      	ldr	r5, [sp, #4]
 800dadc:	4682      	mov	sl, r0
 800dade:	468b      	mov	fp, r1
 800dae0:	4649      	mov	r1, r9
 800dae2:	4640      	mov	r0, r8
 800dae4:	f7f3 f848 	bl	8000b78 <__aeabi_d2iz>
 800dae8:	4606      	mov	r6, r0
 800daea:	f7f2 fd2b 	bl	8000544 <__aeabi_i2d>
 800daee:	4602      	mov	r2, r0
 800daf0:	460b      	mov	r3, r1
 800daf2:	4640      	mov	r0, r8
 800daf4:	4649      	mov	r1, r9
 800daf6:	f7f2 fbd7 	bl	80002a8 <__aeabi_dsub>
 800dafa:	3630      	adds	r6, #48	; 0x30
 800dafc:	f805 6b01 	strb.w	r6, [r5], #1
 800db00:	4652      	mov	r2, sl
 800db02:	465b      	mov	r3, fp
 800db04:	4680      	mov	r8, r0
 800db06:	4689      	mov	r9, r1
 800db08:	f7f2 fff8 	bl	8000afc <__aeabi_dcmplt>
 800db0c:	2800      	cmp	r0, #0
 800db0e:	d163      	bne.n	800dbd8 <_dtoa_r+0x608>
 800db10:	4642      	mov	r2, r8
 800db12:	464b      	mov	r3, r9
 800db14:	4936      	ldr	r1, [pc, #216]	; (800dbf0 <_dtoa_r+0x620>)
 800db16:	2000      	movs	r0, #0
 800db18:	f7f2 fbc6 	bl	80002a8 <__aeabi_dsub>
 800db1c:	4652      	mov	r2, sl
 800db1e:	465b      	mov	r3, fp
 800db20:	f7f2 ffec 	bl	8000afc <__aeabi_dcmplt>
 800db24:	2800      	cmp	r0, #0
 800db26:	f040 80b5 	bne.w	800dc94 <_dtoa_r+0x6c4>
 800db2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db2c:	429d      	cmp	r5, r3
 800db2e:	d081      	beq.n	800da34 <_dtoa_r+0x464>
 800db30:	4b30      	ldr	r3, [pc, #192]	; (800dbf4 <_dtoa_r+0x624>)
 800db32:	2200      	movs	r2, #0
 800db34:	4650      	mov	r0, sl
 800db36:	4659      	mov	r1, fp
 800db38:	f7f2 fd6e 	bl	8000618 <__aeabi_dmul>
 800db3c:	4b2d      	ldr	r3, [pc, #180]	; (800dbf4 <_dtoa_r+0x624>)
 800db3e:	4682      	mov	sl, r0
 800db40:	468b      	mov	fp, r1
 800db42:	4640      	mov	r0, r8
 800db44:	4649      	mov	r1, r9
 800db46:	2200      	movs	r2, #0
 800db48:	f7f2 fd66 	bl	8000618 <__aeabi_dmul>
 800db4c:	4680      	mov	r8, r0
 800db4e:	4689      	mov	r9, r1
 800db50:	e7c6      	b.n	800dae0 <_dtoa_r+0x510>
 800db52:	4650      	mov	r0, sl
 800db54:	4659      	mov	r1, fp
 800db56:	f7f2 fd5f 	bl	8000618 <__aeabi_dmul>
 800db5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db5c:	9d01      	ldr	r5, [sp, #4]
 800db5e:	930f      	str	r3, [sp, #60]	; 0x3c
 800db60:	4682      	mov	sl, r0
 800db62:	468b      	mov	fp, r1
 800db64:	4649      	mov	r1, r9
 800db66:	4640      	mov	r0, r8
 800db68:	f7f3 f806 	bl	8000b78 <__aeabi_d2iz>
 800db6c:	4606      	mov	r6, r0
 800db6e:	f7f2 fce9 	bl	8000544 <__aeabi_i2d>
 800db72:	3630      	adds	r6, #48	; 0x30
 800db74:	4602      	mov	r2, r0
 800db76:	460b      	mov	r3, r1
 800db78:	4640      	mov	r0, r8
 800db7a:	4649      	mov	r1, r9
 800db7c:	f7f2 fb94 	bl	80002a8 <__aeabi_dsub>
 800db80:	f805 6b01 	strb.w	r6, [r5], #1
 800db84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db86:	429d      	cmp	r5, r3
 800db88:	4680      	mov	r8, r0
 800db8a:	4689      	mov	r9, r1
 800db8c:	f04f 0200 	mov.w	r2, #0
 800db90:	d124      	bne.n	800dbdc <_dtoa_r+0x60c>
 800db92:	4b1b      	ldr	r3, [pc, #108]	; (800dc00 <_dtoa_r+0x630>)
 800db94:	4650      	mov	r0, sl
 800db96:	4659      	mov	r1, fp
 800db98:	f7f2 fb88 	bl	80002ac <__adddf3>
 800db9c:	4602      	mov	r2, r0
 800db9e:	460b      	mov	r3, r1
 800dba0:	4640      	mov	r0, r8
 800dba2:	4649      	mov	r1, r9
 800dba4:	f7f2 ffc8 	bl	8000b38 <__aeabi_dcmpgt>
 800dba8:	2800      	cmp	r0, #0
 800dbaa:	d173      	bne.n	800dc94 <_dtoa_r+0x6c4>
 800dbac:	4652      	mov	r2, sl
 800dbae:	465b      	mov	r3, fp
 800dbb0:	4913      	ldr	r1, [pc, #76]	; (800dc00 <_dtoa_r+0x630>)
 800dbb2:	2000      	movs	r0, #0
 800dbb4:	f7f2 fb78 	bl	80002a8 <__aeabi_dsub>
 800dbb8:	4602      	mov	r2, r0
 800dbba:	460b      	mov	r3, r1
 800dbbc:	4640      	mov	r0, r8
 800dbbe:	4649      	mov	r1, r9
 800dbc0:	f7f2 ff9c 	bl	8000afc <__aeabi_dcmplt>
 800dbc4:	2800      	cmp	r0, #0
 800dbc6:	f43f af35 	beq.w	800da34 <_dtoa_r+0x464>
 800dbca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800dbcc:	1e6b      	subs	r3, r5, #1
 800dbce:	930f      	str	r3, [sp, #60]	; 0x3c
 800dbd0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dbd4:	2b30      	cmp	r3, #48	; 0x30
 800dbd6:	d0f8      	beq.n	800dbca <_dtoa_r+0x5fa>
 800dbd8:	9700      	str	r7, [sp, #0]
 800dbda:	e049      	b.n	800dc70 <_dtoa_r+0x6a0>
 800dbdc:	4b05      	ldr	r3, [pc, #20]	; (800dbf4 <_dtoa_r+0x624>)
 800dbde:	f7f2 fd1b 	bl	8000618 <__aeabi_dmul>
 800dbe2:	4680      	mov	r8, r0
 800dbe4:	4689      	mov	r9, r1
 800dbe6:	e7bd      	b.n	800db64 <_dtoa_r+0x594>
 800dbe8:	080102b0 	.word	0x080102b0
 800dbec:	08010288 	.word	0x08010288
 800dbf0:	3ff00000 	.word	0x3ff00000
 800dbf4:	40240000 	.word	0x40240000
 800dbf8:	401c0000 	.word	0x401c0000
 800dbfc:	40140000 	.word	0x40140000
 800dc00:	3fe00000 	.word	0x3fe00000
 800dc04:	9d01      	ldr	r5, [sp, #4]
 800dc06:	4656      	mov	r6, sl
 800dc08:	465f      	mov	r7, fp
 800dc0a:	4642      	mov	r2, r8
 800dc0c:	464b      	mov	r3, r9
 800dc0e:	4630      	mov	r0, r6
 800dc10:	4639      	mov	r1, r7
 800dc12:	f7f2 fe2b 	bl	800086c <__aeabi_ddiv>
 800dc16:	f7f2 ffaf 	bl	8000b78 <__aeabi_d2iz>
 800dc1a:	4682      	mov	sl, r0
 800dc1c:	f7f2 fc92 	bl	8000544 <__aeabi_i2d>
 800dc20:	4642      	mov	r2, r8
 800dc22:	464b      	mov	r3, r9
 800dc24:	f7f2 fcf8 	bl	8000618 <__aeabi_dmul>
 800dc28:	4602      	mov	r2, r0
 800dc2a:	460b      	mov	r3, r1
 800dc2c:	4630      	mov	r0, r6
 800dc2e:	4639      	mov	r1, r7
 800dc30:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800dc34:	f7f2 fb38 	bl	80002a8 <__aeabi_dsub>
 800dc38:	f805 6b01 	strb.w	r6, [r5], #1
 800dc3c:	9e01      	ldr	r6, [sp, #4]
 800dc3e:	9f03      	ldr	r7, [sp, #12]
 800dc40:	1bae      	subs	r6, r5, r6
 800dc42:	42b7      	cmp	r7, r6
 800dc44:	4602      	mov	r2, r0
 800dc46:	460b      	mov	r3, r1
 800dc48:	d135      	bne.n	800dcb6 <_dtoa_r+0x6e6>
 800dc4a:	f7f2 fb2f 	bl	80002ac <__adddf3>
 800dc4e:	4642      	mov	r2, r8
 800dc50:	464b      	mov	r3, r9
 800dc52:	4606      	mov	r6, r0
 800dc54:	460f      	mov	r7, r1
 800dc56:	f7f2 ff6f 	bl	8000b38 <__aeabi_dcmpgt>
 800dc5a:	b9d0      	cbnz	r0, 800dc92 <_dtoa_r+0x6c2>
 800dc5c:	4642      	mov	r2, r8
 800dc5e:	464b      	mov	r3, r9
 800dc60:	4630      	mov	r0, r6
 800dc62:	4639      	mov	r1, r7
 800dc64:	f7f2 ff40 	bl	8000ae8 <__aeabi_dcmpeq>
 800dc68:	b110      	cbz	r0, 800dc70 <_dtoa_r+0x6a0>
 800dc6a:	f01a 0f01 	tst.w	sl, #1
 800dc6e:	d110      	bne.n	800dc92 <_dtoa_r+0x6c2>
 800dc70:	4620      	mov	r0, r4
 800dc72:	ee18 1a10 	vmov	r1, s16
 800dc76:	f000 fd05 	bl	800e684 <_Bfree>
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	9800      	ldr	r0, [sp, #0]
 800dc7e:	702b      	strb	r3, [r5, #0]
 800dc80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dc82:	3001      	adds	r0, #1
 800dc84:	6018      	str	r0, [r3, #0]
 800dc86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	f43f acf1 	beq.w	800d670 <_dtoa_r+0xa0>
 800dc8e:	601d      	str	r5, [r3, #0]
 800dc90:	e4ee      	b.n	800d670 <_dtoa_r+0xa0>
 800dc92:	9f00      	ldr	r7, [sp, #0]
 800dc94:	462b      	mov	r3, r5
 800dc96:	461d      	mov	r5, r3
 800dc98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dc9c:	2a39      	cmp	r2, #57	; 0x39
 800dc9e:	d106      	bne.n	800dcae <_dtoa_r+0x6de>
 800dca0:	9a01      	ldr	r2, [sp, #4]
 800dca2:	429a      	cmp	r2, r3
 800dca4:	d1f7      	bne.n	800dc96 <_dtoa_r+0x6c6>
 800dca6:	9901      	ldr	r1, [sp, #4]
 800dca8:	2230      	movs	r2, #48	; 0x30
 800dcaa:	3701      	adds	r7, #1
 800dcac:	700a      	strb	r2, [r1, #0]
 800dcae:	781a      	ldrb	r2, [r3, #0]
 800dcb0:	3201      	adds	r2, #1
 800dcb2:	701a      	strb	r2, [r3, #0]
 800dcb4:	e790      	b.n	800dbd8 <_dtoa_r+0x608>
 800dcb6:	4ba6      	ldr	r3, [pc, #664]	; (800df50 <_dtoa_r+0x980>)
 800dcb8:	2200      	movs	r2, #0
 800dcba:	f7f2 fcad 	bl	8000618 <__aeabi_dmul>
 800dcbe:	2200      	movs	r2, #0
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	4606      	mov	r6, r0
 800dcc4:	460f      	mov	r7, r1
 800dcc6:	f7f2 ff0f 	bl	8000ae8 <__aeabi_dcmpeq>
 800dcca:	2800      	cmp	r0, #0
 800dccc:	d09d      	beq.n	800dc0a <_dtoa_r+0x63a>
 800dcce:	e7cf      	b.n	800dc70 <_dtoa_r+0x6a0>
 800dcd0:	9a08      	ldr	r2, [sp, #32]
 800dcd2:	2a00      	cmp	r2, #0
 800dcd4:	f000 80d7 	beq.w	800de86 <_dtoa_r+0x8b6>
 800dcd8:	9a06      	ldr	r2, [sp, #24]
 800dcda:	2a01      	cmp	r2, #1
 800dcdc:	f300 80ba 	bgt.w	800de54 <_dtoa_r+0x884>
 800dce0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dce2:	2a00      	cmp	r2, #0
 800dce4:	f000 80b2 	beq.w	800de4c <_dtoa_r+0x87c>
 800dce8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dcec:	9e07      	ldr	r6, [sp, #28]
 800dcee:	9d04      	ldr	r5, [sp, #16]
 800dcf0:	9a04      	ldr	r2, [sp, #16]
 800dcf2:	441a      	add	r2, r3
 800dcf4:	9204      	str	r2, [sp, #16]
 800dcf6:	9a05      	ldr	r2, [sp, #20]
 800dcf8:	2101      	movs	r1, #1
 800dcfa:	441a      	add	r2, r3
 800dcfc:	4620      	mov	r0, r4
 800dcfe:	9205      	str	r2, [sp, #20]
 800dd00:	f000 fd78 	bl	800e7f4 <__i2b>
 800dd04:	4607      	mov	r7, r0
 800dd06:	2d00      	cmp	r5, #0
 800dd08:	dd0c      	ble.n	800dd24 <_dtoa_r+0x754>
 800dd0a:	9b05      	ldr	r3, [sp, #20]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	dd09      	ble.n	800dd24 <_dtoa_r+0x754>
 800dd10:	42ab      	cmp	r3, r5
 800dd12:	9a04      	ldr	r2, [sp, #16]
 800dd14:	bfa8      	it	ge
 800dd16:	462b      	movge	r3, r5
 800dd18:	1ad2      	subs	r2, r2, r3
 800dd1a:	9204      	str	r2, [sp, #16]
 800dd1c:	9a05      	ldr	r2, [sp, #20]
 800dd1e:	1aed      	subs	r5, r5, r3
 800dd20:	1ad3      	subs	r3, r2, r3
 800dd22:	9305      	str	r3, [sp, #20]
 800dd24:	9b07      	ldr	r3, [sp, #28]
 800dd26:	b31b      	cbz	r3, 800dd70 <_dtoa_r+0x7a0>
 800dd28:	9b08      	ldr	r3, [sp, #32]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	f000 80af 	beq.w	800de8e <_dtoa_r+0x8be>
 800dd30:	2e00      	cmp	r6, #0
 800dd32:	dd13      	ble.n	800dd5c <_dtoa_r+0x78c>
 800dd34:	4639      	mov	r1, r7
 800dd36:	4632      	mov	r2, r6
 800dd38:	4620      	mov	r0, r4
 800dd3a:	f000 fe1b 	bl	800e974 <__pow5mult>
 800dd3e:	ee18 2a10 	vmov	r2, s16
 800dd42:	4601      	mov	r1, r0
 800dd44:	4607      	mov	r7, r0
 800dd46:	4620      	mov	r0, r4
 800dd48:	f000 fd6a 	bl	800e820 <__multiply>
 800dd4c:	ee18 1a10 	vmov	r1, s16
 800dd50:	4680      	mov	r8, r0
 800dd52:	4620      	mov	r0, r4
 800dd54:	f000 fc96 	bl	800e684 <_Bfree>
 800dd58:	ee08 8a10 	vmov	s16, r8
 800dd5c:	9b07      	ldr	r3, [sp, #28]
 800dd5e:	1b9a      	subs	r2, r3, r6
 800dd60:	d006      	beq.n	800dd70 <_dtoa_r+0x7a0>
 800dd62:	ee18 1a10 	vmov	r1, s16
 800dd66:	4620      	mov	r0, r4
 800dd68:	f000 fe04 	bl	800e974 <__pow5mult>
 800dd6c:	ee08 0a10 	vmov	s16, r0
 800dd70:	2101      	movs	r1, #1
 800dd72:	4620      	mov	r0, r4
 800dd74:	f000 fd3e 	bl	800e7f4 <__i2b>
 800dd78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	4606      	mov	r6, r0
 800dd7e:	f340 8088 	ble.w	800de92 <_dtoa_r+0x8c2>
 800dd82:	461a      	mov	r2, r3
 800dd84:	4601      	mov	r1, r0
 800dd86:	4620      	mov	r0, r4
 800dd88:	f000 fdf4 	bl	800e974 <__pow5mult>
 800dd8c:	9b06      	ldr	r3, [sp, #24]
 800dd8e:	2b01      	cmp	r3, #1
 800dd90:	4606      	mov	r6, r0
 800dd92:	f340 8081 	ble.w	800de98 <_dtoa_r+0x8c8>
 800dd96:	f04f 0800 	mov.w	r8, #0
 800dd9a:	6933      	ldr	r3, [r6, #16]
 800dd9c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800dda0:	6918      	ldr	r0, [r3, #16]
 800dda2:	f000 fcd7 	bl	800e754 <__hi0bits>
 800dda6:	f1c0 0020 	rsb	r0, r0, #32
 800ddaa:	9b05      	ldr	r3, [sp, #20]
 800ddac:	4418      	add	r0, r3
 800ddae:	f010 001f 	ands.w	r0, r0, #31
 800ddb2:	f000 8092 	beq.w	800deda <_dtoa_r+0x90a>
 800ddb6:	f1c0 0320 	rsb	r3, r0, #32
 800ddba:	2b04      	cmp	r3, #4
 800ddbc:	f340 808a 	ble.w	800ded4 <_dtoa_r+0x904>
 800ddc0:	f1c0 001c 	rsb	r0, r0, #28
 800ddc4:	9b04      	ldr	r3, [sp, #16]
 800ddc6:	4403      	add	r3, r0
 800ddc8:	9304      	str	r3, [sp, #16]
 800ddca:	9b05      	ldr	r3, [sp, #20]
 800ddcc:	4403      	add	r3, r0
 800ddce:	4405      	add	r5, r0
 800ddd0:	9305      	str	r3, [sp, #20]
 800ddd2:	9b04      	ldr	r3, [sp, #16]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	dd07      	ble.n	800dde8 <_dtoa_r+0x818>
 800ddd8:	ee18 1a10 	vmov	r1, s16
 800dddc:	461a      	mov	r2, r3
 800ddde:	4620      	mov	r0, r4
 800dde0:	f000 fe22 	bl	800ea28 <__lshift>
 800dde4:	ee08 0a10 	vmov	s16, r0
 800dde8:	9b05      	ldr	r3, [sp, #20]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	dd05      	ble.n	800ddfa <_dtoa_r+0x82a>
 800ddee:	4631      	mov	r1, r6
 800ddf0:	461a      	mov	r2, r3
 800ddf2:	4620      	mov	r0, r4
 800ddf4:	f000 fe18 	bl	800ea28 <__lshift>
 800ddf8:	4606      	mov	r6, r0
 800ddfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d06e      	beq.n	800dede <_dtoa_r+0x90e>
 800de00:	ee18 0a10 	vmov	r0, s16
 800de04:	4631      	mov	r1, r6
 800de06:	f000 fe7f 	bl	800eb08 <__mcmp>
 800de0a:	2800      	cmp	r0, #0
 800de0c:	da67      	bge.n	800dede <_dtoa_r+0x90e>
 800de0e:	9b00      	ldr	r3, [sp, #0]
 800de10:	3b01      	subs	r3, #1
 800de12:	ee18 1a10 	vmov	r1, s16
 800de16:	9300      	str	r3, [sp, #0]
 800de18:	220a      	movs	r2, #10
 800de1a:	2300      	movs	r3, #0
 800de1c:	4620      	mov	r0, r4
 800de1e:	f000 fc53 	bl	800e6c8 <__multadd>
 800de22:	9b08      	ldr	r3, [sp, #32]
 800de24:	ee08 0a10 	vmov	s16, r0
 800de28:	2b00      	cmp	r3, #0
 800de2a:	f000 81b1 	beq.w	800e190 <_dtoa_r+0xbc0>
 800de2e:	2300      	movs	r3, #0
 800de30:	4639      	mov	r1, r7
 800de32:	220a      	movs	r2, #10
 800de34:	4620      	mov	r0, r4
 800de36:	f000 fc47 	bl	800e6c8 <__multadd>
 800de3a:	9b02      	ldr	r3, [sp, #8]
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	4607      	mov	r7, r0
 800de40:	f300 808e 	bgt.w	800df60 <_dtoa_r+0x990>
 800de44:	9b06      	ldr	r3, [sp, #24]
 800de46:	2b02      	cmp	r3, #2
 800de48:	dc51      	bgt.n	800deee <_dtoa_r+0x91e>
 800de4a:	e089      	b.n	800df60 <_dtoa_r+0x990>
 800de4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800de4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800de52:	e74b      	b.n	800dcec <_dtoa_r+0x71c>
 800de54:	9b03      	ldr	r3, [sp, #12]
 800de56:	1e5e      	subs	r6, r3, #1
 800de58:	9b07      	ldr	r3, [sp, #28]
 800de5a:	42b3      	cmp	r3, r6
 800de5c:	bfbf      	itttt	lt
 800de5e:	9b07      	ldrlt	r3, [sp, #28]
 800de60:	9607      	strlt	r6, [sp, #28]
 800de62:	1af2      	sublt	r2, r6, r3
 800de64:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800de66:	bfb6      	itet	lt
 800de68:	189b      	addlt	r3, r3, r2
 800de6a:	1b9e      	subge	r6, r3, r6
 800de6c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800de6e:	9b03      	ldr	r3, [sp, #12]
 800de70:	bfb8      	it	lt
 800de72:	2600      	movlt	r6, #0
 800de74:	2b00      	cmp	r3, #0
 800de76:	bfb7      	itett	lt
 800de78:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800de7c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800de80:	1a9d      	sublt	r5, r3, r2
 800de82:	2300      	movlt	r3, #0
 800de84:	e734      	b.n	800dcf0 <_dtoa_r+0x720>
 800de86:	9e07      	ldr	r6, [sp, #28]
 800de88:	9d04      	ldr	r5, [sp, #16]
 800de8a:	9f08      	ldr	r7, [sp, #32]
 800de8c:	e73b      	b.n	800dd06 <_dtoa_r+0x736>
 800de8e:	9a07      	ldr	r2, [sp, #28]
 800de90:	e767      	b.n	800dd62 <_dtoa_r+0x792>
 800de92:	9b06      	ldr	r3, [sp, #24]
 800de94:	2b01      	cmp	r3, #1
 800de96:	dc18      	bgt.n	800deca <_dtoa_r+0x8fa>
 800de98:	f1ba 0f00 	cmp.w	sl, #0
 800de9c:	d115      	bne.n	800deca <_dtoa_r+0x8fa>
 800de9e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dea2:	b993      	cbnz	r3, 800deca <_dtoa_r+0x8fa>
 800dea4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dea8:	0d1b      	lsrs	r3, r3, #20
 800deaa:	051b      	lsls	r3, r3, #20
 800deac:	b183      	cbz	r3, 800ded0 <_dtoa_r+0x900>
 800deae:	9b04      	ldr	r3, [sp, #16]
 800deb0:	3301      	adds	r3, #1
 800deb2:	9304      	str	r3, [sp, #16]
 800deb4:	9b05      	ldr	r3, [sp, #20]
 800deb6:	3301      	adds	r3, #1
 800deb8:	9305      	str	r3, [sp, #20]
 800deba:	f04f 0801 	mov.w	r8, #1
 800debe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	f47f af6a 	bne.w	800dd9a <_dtoa_r+0x7ca>
 800dec6:	2001      	movs	r0, #1
 800dec8:	e76f      	b.n	800ddaa <_dtoa_r+0x7da>
 800deca:	f04f 0800 	mov.w	r8, #0
 800dece:	e7f6      	b.n	800debe <_dtoa_r+0x8ee>
 800ded0:	4698      	mov	r8, r3
 800ded2:	e7f4      	b.n	800debe <_dtoa_r+0x8ee>
 800ded4:	f43f af7d 	beq.w	800ddd2 <_dtoa_r+0x802>
 800ded8:	4618      	mov	r0, r3
 800deda:	301c      	adds	r0, #28
 800dedc:	e772      	b.n	800ddc4 <_dtoa_r+0x7f4>
 800dede:	9b03      	ldr	r3, [sp, #12]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	dc37      	bgt.n	800df54 <_dtoa_r+0x984>
 800dee4:	9b06      	ldr	r3, [sp, #24]
 800dee6:	2b02      	cmp	r3, #2
 800dee8:	dd34      	ble.n	800df54 <_dtoa_r+0x984>
 800deea:	9b03      	ldr	r3, [sp, #12]
 800deec:	9302      	str	r3, [sp, #8]
 800deee:	9b02      	ldr	r3, [sp, #8]
 800def0:	b96b      	cbnz	r3, 800df0e <_dtoa_r+0x93e>
 800def2:	4631      	mov	r1, r6
 800def4:	2205      	movs	r2, #5
 800def6:	4620      	mov	r0, r4
 800def8:	f000 fbe6 	bl	800e6c8 <__multadd>
 800defc:	4601      	mov	r1, r0
 800defe:	4606      	mov	r6, r0
 800df00:	ee18 0a10 	vmov	r0, s16
 800df04:	f000 fe00 	bl	800eb08 <__mcmp>
 800df08:	2800      	cmp	r0, #0
 800df0a:	f73f adbb 	bgt.w	800da84 <_dtoa_r+0x4b4>
 800df0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df10:	9d01      	ldr	r5, [sp, #4]
 800df12:	43db      	mvns	r3, r3
 800df14:	9300      	str	r3, [sp, #0]
 800df16:	f04f 0800 	mov.w	r8, #0
 800df1a:	4631      	mov	r1, r6
 800df1c:	4620      	mov	r0, r4
 800df1e:	f000 fbb1 	bl	800e684 <_Bfree>
 800df22:	2f00      	cmp	r7, #0
 800df24:	f43f aea4 	beq.w	800dc70 <_dtoa_r+0x6a0>
 800df28:	f1b8 0f00 	cmp.w	r8, #0
 800df2c:	d005      	beq.n	800df3a <_dtoa_r+0x96a>
 800df2e:	45b8      	cmp	r8, r7
 800df30:	d003      	beq.n	800df3a <_dtoa_r+0x96a>
 800df32:	4641      	mov	r1, r8
 800df34:	4620      	mov	r0, r4
 800df36:	f000 fba5 	bl	800e684 <_Bfree>
 800df3a:	4639      	mov	r1, r7
 800df3c:	4620      	mov	r0, r4
 800df3e:	f000 fba1 	bl	800e684 <_Bfree>
 800df42:	e695      	b.n	800dc70 <_dtoa_r+0x6a0>
 800df44:	2600      	movs	r6, #0
 800df46:	4637      	mov	r7, r6
 800df48:	e7e1      	b.n	800df0e <_dtoa_r+0x93e>
 800df4a:	9700      	str	r7, [sp, #0]
 800df4c:	4637      	mov	r7, r6
 800df4e:	e599      	b.n	800da84 <_dtoa_r+0x4b4>
 800df50:	40240000 	.word	0x40240000
 800df54:	9b08      	ldr	r3, [sp, #32]
 800df56:	2b00      	cmp	r3, #0
 800df58:	f000 80ca 	beq.w	800e0f0 <_dtoa_r+0xb20>
 800df5c:	9b03      	ldr	r3, [sp, #12]
 800df5e:	9302      	str	r3, [sp, #8]
 800df60:	2d00      	cmp	r5, #0
 800df62:	dd05      	ble.n	800df70 <_dtoa_r+0x9a0>
 800df64:	4639      	mov	r1, r7
 800df66:	462a      	mov	r2, r5
 800df68:	4620      	mov	r0, r4
 800df6a:	f000 fd5d 	bl	800ea28 <__lshift>
 800df6e:	4607      	mov	r7, r0
 800df70:	f1b8 0f00 	cmp.w	r8, #0
 800df74:	d05b      	beq.n	800e02e <_dtoa_r+0xa5e>
 800df76:	6879      	ldr	r1, [r7, #4]
 800df78:	4620      	mov	r0, r4
 800df7a:	f000 fb43 	bl	800e604 <_Balloc>
 800df7e:	4605      	mov	r5, r0
 800df80:	b928      	cbnz	r0, 800df8e <_dtoa_r+0x9be>
 800df82:	4b87      	ldr	r3, [pc, #540]	; (800e1a0 <_dtoa_r+0xbd0>)
 800df84:	4602      	mov	r2, r0
 800df86:	f240 21ea 	movw	r1, #746	; 0x2ea
 800df8a:	f7ff bb3b 	b.w	800d604 <_dtoa_r+0x34>
 800df8e:	693a      	ldr	r2, [r7, #16]
 800df90:	3202      	adds	r2, #2
 800df92:	0092      	lsls	r2, r2, #2
 800df94:	f107 010c 	add.w	r1, r7, #12
 800df98:	300c      	adds	r0, #12
 800df9a:	f7fe fc81 	bl	800c8a0 <memcpy>
 800df9e:	2201      	movs	r2, #1
 800dfa0:	4629      	mov	r1, r5
 800dfa2:	4620      	mov	r0, r4
 800dfa4:	f000 fd40 	bl	800ea28 <__lshift>
 800dfa8:	9b01      	ldr	r3, [sp, #4]
 800dfaa:	f103 0901 	add.w	r9, r3, #1
 800dfae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800dfb2:	4413      	add	r3, r2
 800dfb4:	9305      	str	r3, [sp, #20]
 800dfb6:	f00a 0301 	and.w	r3, sl, #1
 800dfba:	46b8      	mov	r8, r7
 800dfbc:	9304      	str	r3, [sp, #16]
 800dfbe:	4607      	mov	r7, r0
 800dfc0:	4631      	mov	r1, r6
 800dfc2:	ee18 0a10 	vmov	r0, s16
 800dfc6:	f7ff fa75 	bl	800d4b4 <quorem>
 800dfca:	4641      	mov	r1, r8
 800dfcc:	9002      	str	r0, [sp, #8]
 800dfce:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800dfd2:	ee18 0a10 	vmov	r0, s16
 800dfd6:	f000 fd97 	bl	800eb08 <__mcmp>
 800dfda:	463a      	mov	r2, r7
 800dfdc:	9003      	str	r0, [sp, #12]
 800dfde:	4631      	mov	r1, r6
 800dfe0:	4620      	mov	r0, r4
 800dfe2:	f000 fdad 	bl	800eb40 <__mdiff>
 800dfe6:	68c2      	ldr	r2, [r0, #12]
 800dfe8:	f109 3bff 	add.w	fp, r9, #4294967295
 800dfec:	4605      	mov	r5, r0
 800dfee:	bb02      	cbnz	r2, 800e032 <_dtoa_r+0xa62>
 800dff0:	4601      	mov	r1, r0
 800dff2:	ee18 0a10 	vmov	r0, s16
 800dff6:	f000 fd87 	bl	800eb08 <__mcmp>
 800dffa:	4602      	mov	r2, r0
 800dffc:	4629      	mov	r1, r5
 800dffe:	4620      	mov	r0, r4
 800e000:	9207      	str	r2, [sp, #28]
 800e002:	f000 fb3f 	bl	800e684 <_Bfree>
 800e006:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800e00a:	ea43 0102 	orr.w	r1, r3, r2
 800e00e:	9b04      	ldr	r3, [sp, #16]
 800e010:	430b      	orrs	r3, r1
 800e012:	464d      	mov	r5, r9
 800e014:	d10f      	bne.n	800e036 <_dtoa_r+0xa66>
 800e016:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e01a:	d02a      	beq.n	800e072 <_dtoa_r+0xaa2>
 800e01c:	9b03      	ldr	r3, [sp, #12]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	dd02      	ble.n	800e028 <_dtoa_r+0xa58>
 800e022:	9b02      	ldr	r3, [sp, #8]
 800e024:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800e028:	f88b a000 	strb.w	sl, [fp]
 800e02c:	e775      	b.n	800df1a <_dtoa_r+0x94a>
 800e02e:	4638      	mov	r0, r7
 800e030:	e7ba      	b.n	800dfa8 <_dtoa_r+0x9d8>
 800e032:	2201      	movs	r2, #1
 800e034:	e7e2      	b.n	800dffc <_dtoa_r+0xa2c>
 800e036:	9b03      	ldr	r3, [sp, #12]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	db04      	blt.n	800e046 <_dtoa_r+0xa76>
 800e03c:	9906      	ldr	r1, [sp, #24]
 800e03e:	430b      	orrs	r3, r1
 800e040:	9904      	ldr	r1, [sp, #16]
 800e042:	430b      	orrs	r3, r1
 800e044:	d122      	bne.n	800e08c <_dtoa_r+0xabc>
 800e046:	2a00      	cmp	r2, #0
 800e048:	ddee      	ble.n	800e028 <_dtoa_r+0xa58>
 800e04a:	ee18 1a10 	vmov	r1, s16
 800e04e:	2201      	movs	r2, #1
 800e050:	4620      	mov	r0, r4
 800e052:	f000 fce9 	bl	800ea28 <__lshift>
 800e056:	4631      	mov	r1, r6
 800e058:	ee08 0a10 	vmov	s16, r0
 800e05c:	f000 fd54 	bl	800eb08 <__mcmp>
 800e060:	2800      	cmp	r0, #0
 800e062:	dc03      	bgt.n	800e06c <_dtoa_r+0xa9c>
 800e064:	d1e0      	bne.n	800e028 <_dtoa_r+0xa58>
 800e066:	f01a 0f01 	tst.w	sl, #1
 800e06a:	d0dd      	beq.n	800e028 <_dtoa_r+0xa58>
 800e06c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e070:	d1d7      	bne.n	800e022 <_dtoa_r+0xa52>
 800e072:	2339      	movs	r3, #57	; 0x39
 800e074:	f88b 3000 	strb.w	r3, [fp]
 800e078:	462b      	mov	r3, r5
 800e07a:	461d      	mov	r5, r3
 800e07c:	3b01      	subs	r3, #1
 800e07e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e082:	2a39      	cmp	r2, #57	; 0x39
 800e084:	d071      	beq.n	800e16a <_dtoa_r+0xb9a>
 800e086:	3201      	adds	r2, #1
 800e088:	701a      	strb	r2, [r3, #0]
 800e08a:	e746      	b.n	800df1a <_dtoa_r+0x94a>
 800e08c:	2a00      	cmp	r2, #0
 800e08e:	dd07      	ble.n	800e0a0 <_dtoa_r+0xad0>
 800e090:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e094:	d0ed      	beq.n	800e072 <_dtoa_r+0xaa2>
 800e096:	f10a 0301 	add.w	r3, sl, #1
 800e09a:	f88b 3000 	strb.w	r3, [fp]
 800e09e:	e73c      	b.n	800df1a <_dtoa_r+0x94a>
 800e0a0:	9b05      	ldr	r3, [sp, #20]
 800e0a2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800e0a6:	4599      	cmp	r9, r3
 800e0a8:	d047      	beq.n	800e13a <_dtoa_r+0xb6a>
 800e0aa:	ee18 1a10 	vmov	r1, s16
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	220a      	movs	r2, #10
 800e0b2:	4620      	mov	r0, r4
 800e0b4:	f000 fb08 	bl	800e6c8 <__multadd>
 800e0b8:	45b8      	cmp	r8, r7
 800e0ba:	ee08 0a10 	vmov	s16, r0
 800e0be:	f04f 0300 	mov.w	r3, #0
 800e0c2:	f04f 020a 	mov.w	r2, #10
 800e0c6:	4641      	mov	r1, r8
 800e0c8:	4620      	mov	r0, r4
 800e0ca:	d106      	bne.n	800e0da <_dtoa_r+0xb0a>
 800e0cc:	f000 fafc 	bl	800e6c8 <__multadd>
 800e0d0:	4680      	mov	r8, r0
 800e0d2:	4607      	mov	r7, r0
 800e0d4:	f109 0901 	add.w	r9, r9, #1
 800e0d8:	e772      	b.n	800dfc0 <_dtoa_r+0x9f0>
 800e0da:	f000 faf5 	bl	800e6c8 <__multadd>
 800e0de:	4639      	mov	r1, r7
 800e0e0:	4680      	mov	r8, r0
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	220a      	movs	r2, #10
 800e0e6:	4620      	mov	r0, r4
 800e0e8:	f000 faee 	bl	800e6c8 <__multadd>
 800e0ec:	4607      	mov	r7, r0
 800e0ee:	e7f1      	b.n	800e0d4 <_dtoa_r+0xb04>
 800e0f0:	9b03      	ldr	r3, [sp, #12]
 800e0f2:	9302      	str	r3, [sp, #8]
 800e0f4:	9d01      	ldr	r5, [sp, #4]
 800e0f6:	ee18 0a10 	vmov	r0, s16
 800e0fa:	4631      	mov	r1, r6
 800e0fc:	f7ff f9da 	bl	800d4b4 <quorem>
 800e100:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e104:	9b01      	ldr	r3, [sp, #4]
 800e106:	f805 ab01 	strb.w	sl, [r5], #1
 800e10a:	1aea      	subs	r2, r5, r3
 800e10c:	9b02      	ldr	r3, [sp, #8]
 800e10e:	4293      	cmp	r3, r2
 800e110:	dd09      	ble.n	800e126 <_dtoa_r+0xb56>
 800e112:	ee18 1a10 	vmov	r1, s16
 800e116:	2300      	movs	r3, #0
 800e118:	220a      	movs	r2, #10
 800e11a:	4620      	mov	r0, r4
 800e11c:	f000 fad4 	bl	800e6c8 <__multadd>
 800e120:	ee08 0a10 	vmov	s16, r0
 800e124:	e7e7      	b.n	800e0f6 <_dtoa_r+0xb26>
 800e126:	9b02      	ldr	r3, [sp, #8]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	bfc8      	it	gt
 800e12c:	461d      	movgt	r5, r3
 800e12e:	9b01      	ldr	r3, [sp, #4]
 800e130:	bfd8      	it	le
 800e132:	2501      	movle	r5, #1
 800e134:	441d      	add	r5, r3
 800e136:	f04f 0800 	mov.w	r8, #0
 800e13a:	ee18 1a10 	vmov	r1, s16
 800e13e:	2201      	movs	r2, #1
 800e140:	4620      	mov	r0, r4
 800e142:	f000 fc71 	bl	800ea28 <__lshift>
 800e146:	4631      	mov	r1, r6
 800e148:	ee08 0a10 	vmov	s16, r0
 800e14c:	f000 fcdc 	bl	800eb08 <__mcmp>
 800e150:	2800      	cmp	r0, #0
 800e152:	dc91      	bgt.n	800e078 <_dtoa_r+0xaa8>
 800e154:	d102      	bne.n	800e15c <_dtoa_r+0xb8c>
 800e156:	f01a 0f01 	tst.w	sl, #1
 800e15a:	d18d      	bne.n	800e078 <_dtoa_r+0xaa8>
 800e15c:	462b      	mov	r3, r5
 800e15e:	461d      	mov	r5, r3
 800e160:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e164:	2a30      	cmp	r2, #48	; 0x30
 800e166:	d0fa      	beq.n	800e15e <_dtoa_r+0xb8e>
 800e168:	e6d7      	b.n	800df1a <_dtoa_r+0x94a>
 800e16a:	9a01      	ldr	r2, [sp, #4]
 800e16c:	429a      	cmp	r2, r3
 800e16e:	d184      	bne.n	800e07a <_dtoa_r+0xaaa>
 800e170:	9b00      	ldr	r3, [sp, #0]
 800e172:	3301      	adds	r3, #1
 800e174:	9300      	str	r3, [sp, #0]
 800e176:	2331      	movs	r3, #49	; 0x31
 800e178:	7013      	strb	r3, [r2, #0]
 800e17a:	e6ce      	b.n	800df1a <_dtoa_r+0x94a>
 800e17c:	4b09      	ldr	r3, [pc, #36]	; (800e1a4 <_dtoa_r+0xbd4>)
 800e17e:	f7ff ba95 	b.w	800d6ac <_dtoa_r+0xdc>
 800e182:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e184:	2b00      	cmp	r3, #0
 800e186:	f47f aa6e 	bne.w	800d666 <_dtoa_r+0x96>
 800e18a:	4b07      	ldr	r3, [pc, #28]	; (800e1a8 <_dtoa_r+0xbd8>)
 800e18c:	f7ff ba8e 	b.w	800d6ac <_dtoa_r+0xdc>
 800e190:	9b02      	ldr	r3, [sp, #8]
 800e192:	2b00      	cmp	r3, #0
 800e194:	dcae      	bgt.n	800e0f4 <_dtoa_r+0xb24>
 800e196:	9b06      	ldr	r3, [sp, #24]
 800e198:	2b02      	cmp	r3, #2
 800e19a:	f73f aea8 	bgt.w	800deee <_dtoa_r+0x91e>
 800e19e:	e7a9      	b.n	800e0f4 <_dtoa_r+0xb24>
 800e1a0:	080101b7 	.word	0x080101b7
 800e1a4:	08010114 	.word	0x08010114
 800e1a8:	08010138 	.word	0x08010138

0800e1ac <__sflush_r>:
 800e1ac:	898a      	ldrh	r2, [r1, #12]
 800e1ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1b2:	4605      	mov	r5, r0
 800e1b4:	0710      	lsls	r0, r2, #28
 800e1b6:	460c      	mov	r4, r1
 800e1b8:	d458      	bmi.n	800e26c <__sflush_r+0xc0>
 800e1ba:	684b      	ldr	r3, [r1, #4]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	dc05      	bgt.n	800e1cc <__sflush_r+0x20>
 800e1c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	dc02      	bgt.n	800e1cc <__sflush_r+0x20>
 800e1c6:	2000      	movs	r0, #0
 800e1c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e1ce:	2e00      	cmp	r6, #0
 800e1d0:	d0f9      	beq.n	800e1c6 <__sflush_r+0x1a>
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e1d8:	682f      	ldr	r7, [r5, #0]
 800e1da:	602b      	str	r3, [r5, #0]
 800e1dc:	d032      	beq.n	800e244 <__sflush_r+0x98>
 800e1de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e1e0:	89a3      	ldrh	r3, [r4, #12]
 800e1e2:	075a      	lsls	r2, r3, #29
 800e1e4:	d505      	bpl.n	800e1f2 <__sflush_r+0x46>
 800e1e6:	6863      	ldr	r3, [r4, #4]
 800e1e8:	1ac0      	subs	r0, r0, r3
 800e1ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e1ec:	b10b      	cbz	r3, 800e1f2 <__sflush_r+0x46>
 800e1ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e1f0:	1ac0      	subs	r0, r0, r3
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	4602      	mov	r2, r0
 800e1f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e1f8:	6a21      	ldr	r1, [r4, #32]
 800e1fa:	4628      	mov	r0, r5
 800e1fc:	47b0      	blx	r6
 800e1fe:	1c43      	adds	r3, r0, #1
 800e200:	89a3      	ldrh	r3, [r4, #12]
 800e202:	d106      	bne.n	800e212 <__sflush_r+0x66>
 800e204:	6829      	ldr	r1, [r5, #0]
 800e206:	291d      	cmp	r1, #29
 800e208:	d82c      	bhi.n	800e264 <__sflush_r+0xb8>
 800e20a:	4a2a      	ldr	r2, [pc, #168]	; (800e2b4 <__sflush_r+0x108>)
 800e20c:	40ca      	lsrs	r2, r1
 800e20e:	07d6      	lsls	r6, r2, #31
 800e210:	d528      	bpl.n	800e264 <__sflush_r+0xb8>
 800e212:	2200      	movs	r2, #0
 800e214:	6062      	str	r2, [r4, #4]
 800e216:	04d9      	lsls	r1, r3, #19
 800e218:	6922      	ldr	r2, [r4, #16]
 800e21a:	6022      	str	r2, [r4, #0]
 800e21c:	d504      	bpl.n	800e228 <__sflush_r+0x7c>
 800e21e:	1c42      	adds	r2, r0, #1
 800e220:	d101      	bne.n	800e226 <__sflush_r+0x7a>
 800e222:	682b      	ldr	r3, [r5, #0]
 800e224:	b903      	cbnz	r3, 800e228 <__sflush_r+0x7c>
 800e226:	6560      	str	r0, [r4, #84]	; 0x54
 800e228:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e22a:	602f      	str	r7, [r5, #0]
 800e22c:	2900      	cmp	r1, #0
 800e22e:	d0ca      	beq.n	800e1c6 <__sflush_r+0x1a>
 800e230:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e234:	4299      	cmp	r1, r3
 800e236:	d002      	beq.n	800e23e <__sflush_r+0x92>
 800e238:	4628      	mov	r0, r5
 800e23a:	f000 fd7d 	bl	800ed38 <_free_r>
 800e23e:	2000      	movs	r0, #0
 800e240:	6360      	str	r0, [r4, #52]	; 0x34
 800e242:	e7c1      	b.n	800e1c8 <__sflush_r+0x1c>
 800e244:	6a21      	ldr	r1, [r4, #32]
 800e246:	2301      	movs	r3, #1
 800e248:	4628      	mov	r0, r5
 800e24a:	47b0      	blx	r6
 800e24c:	1c41      	adds	r1, r0, #1
 800e24e:	d1c7      	bne.n	800e1e0 <__sflush_r+0x34>
 800e250:	682b      	ldr	r3, [r5, #0]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d0c4      	beq.n	800e1e0 <__sflush_r+0x34>
 800e256:	2b1d      	cmp	r3, #29
 800e258:	d001      	beq.n	800e25e <__sflush_r+0xb2>
 800e25a:	2b16      	cmp	r3, #22
 800e25c:	d101      	bne.n	800e262 <__sflush_r+0xb6>
 800e25e:	602f      	str	r7, [r5, #0]
 800e260:	e7b1      	b.n	800e1c6 <__sflush_r+0x1a>
 800e262:	89a3      	ldrh	r3, [r4, #12]
 800e264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e268:	81a3      	strh	r3, [r4, #12]
 800e26a:	e7ad      	b.n	800e1c8 <__sflush_r+0x1c>
 800e26c:	690f      	ldr	r7, [r1, #16]
 800e26e:	2f00      	cmp	r7, #0
 800e270:	d0a9      	beq.n	800e1c6 <__sflush_r+0x1a>
 800e272:	0793      	lsls	r3, r2, #30
 800e274:	680e      	ldr	r6, [r1, #0]
 800e276:	bf08      	it	eq
 800e278:	694b      	ldreq	r3, [r1, #20]
 800e27a:	600f      	str	r7, [r1, #0]
 800e27c:	bf18      	it	ne
 800e27e:	2300      	movne	r3, #0
 800e280:	eba6 0807 	sub.w	r8, r6, r7
 800e284:	608b      	str	r3, [r1, #8]
 800e286:	f1b8 0f00 	cmp.w	r8, #0
 800e28a:	dd9c      	ble.n	800e1c6 <__sflush_r+0x1a>
 800e28c:	6a21      	ldr	r1, [r4, #32]
 800e28e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e290:	4643      	mov	r3, r8
 800e292:	463a      	mov	r2, r7
 800e294:	4628      	mov	r0, r5
 800e296:	47b0      	blx	r6
 800e298:	2800      	cmp	r0, #0
 800e29a:	dc06      	bgt.n	800e2aa <__sflush_r+0xfe>
 800e29c:	89a3      	ldrh	r3, [r4, #12]
 800e29e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2a2:	81a3      	strh	r3, [r4, #12]
 800e2a4:	f04f 30ff 	mov.w	r0, #4294967295
 800e2a8:	e78e      	b.n	800e1c8 <__sflush_r+0x1c>
 800e2aa:	4407      	add	r7, r0
 800e2ac:	eba8 0800 	sub.w	r8, r8, r0
 800e2b0:	e7e9      	b.n	800e286 <__sflush_r+0xda>
 800e2b2:	bf00      	nop
 800e2b4:	20400001 	.word	0x20400001

0800e2b8 <_fflush_r>:
 800e2b8:	b538      	push	{r3, r4, r5, lr}
 800e2ba:	690b      	ldr	r3, [r1, #16]
 800e2bc:	4605      	mov	r5, r0
 800e2be:	460c      	mov	r4, r1
 800e2c0:	b913      	cbnz	r3, 800e2c8 <_fflush_r+0x10>
 800e2c2:	2500      	movs	r5, #0
 800e2c4:	4628      	mov	r0, r5
 800e2c6:	bd38      	pop	{r3, r4, r5, pc}
 800e2c8:	b118      	cbz	r0, 800e2d2 <_fflush_r+0x1a>
 800e2ca:	6983      	ldr	r3, [r0, #24]
 800e2cc:	b90b      	cbnz	r3, 800e2d2 <_fflush_r+0x1a>
 800e2ce:	f000 f887 	bl	800e3e0 <__sinit>
 800e2d2:	4b14      	ldr	r3, [pc, #80]	; (800e324 <_fflush_r+0x6c>)
 800e2d4:	429c      	cmp	r4, r3
 800e2d6:	d11b      	bne.n	800e310 <_fflush_r+0x58>
 800e2d8:	686c      	ldr	r4, [r5, #4]
 800e2da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d0ef      	beq.n	800e2c2 <_fflush_r+0xa>
 800e2e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e2e4:	07d0      	lsls	r0, r2, #31
 800e2e6:	d404      	bmi.n	800e2f2 <_fflush_r+0x3a>
 800e2e8:	0599      	lsls	r1, r3, #22
 800e2ea:	d402      	bmi.n	800e2f2 <_fflush_r+0x3a>
 800e2ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e2ee:	f000 f91a 	bl	800e526 <__retarget_lock_acquire_recursive>
 800e2f2:	4628      	mov	r0, r5
 800e2f4:	4621      	mov	r1, r4
 800e2f6:	f7ff ff59 	bl	800e1ac <__sflush_r>
 800e2fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e2fc:	07da      	lsls	r2, r3, #31
 800e2fe:	4605      	mov	r5, r0
 800e300:	d4e0      	bmi.n	800e2c4 <_fflush_r+0xc>
 800e302:	89a3      	ldrh	r3, [r4, #12]
 800e304:	059b      	lsls	r3, r3, #22
 800e306:	d4dd      	bmi.n	800e2c4 <_fflush_r+0xc>
 800e308:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e30a:	f000 f90d 	bl	800e528 <__retarget_lock_release_recursive>
 800e30e:	e7d9      	b.n	800e2c4 <_fflush_r+0xc>
 800e310:	4b05      	ldr	r3, [pc, #20]	; (800e328 <_fflush_r+0x70>)
 800e312:	429c      	cmp	r4, r3
 800e314:	d101      	bne.n	800e31a <_fflush_r+0x62>
 800e316:	68ac      	ldr	r4, [r5, #8]
 800e318:	e7df      	b.n	800e2da <_fflush_r+0x22>
 800e31a:	4b04      	ldr	r3, [pc, #16]	; (800e32c <_fflush_r+0x74>)
 800e31c:	429c      	cmp	r4, r3
 800e31e:	bf08      	it	eq
 800e320:	68ec      	ldreq	r4, [r5, #12]
 800e322:	e7da      	b.n	800e2da <_fflush_r+0x22>
 800e324:	080101e8 	.word	0x080101e8
 800e328:	08010208 	.word	0x08010208
 800e32c:	080101c8 	.word	0x080101c8

0800e330 <std>:
 800e330:	2300      	movs	r3, #0
 800e332:	b510      	push	{r4, lr}
 800e334:	4604      	mov	r4, r0
 800e336:	e9c0 3300 	strd	r3, r3, [r0]
 800e33a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e33e:	6083      	str	r3, [r0, #8]
 800e340:	8181      	strh	r1, [r0, #12]
 800e342:	6643      	str	r3, [r0, #100]	; 0x64
 800e344:	81c2      	strh	r2, [r0, #14]
 800e346:	6183      	str	r3, [r0, #24]
 800e348:	4619      	mov	r1, r3
 800e34a:	2208      	movs	r2, #8
 800e34c:	305c      	adds	r0, #92	; 0x5c
 800e34e:	f7fe fab5 	bl	800c8bc <memset>
 800e352:	4b05      	ldr	r3, [pc, #20]	; (800e368 <std+0x38>)
 800e354:	6263      	str	r3, [r4, #36]	; 0x24
 800e356:	4b05      	ldr	r3, [pc, #20]	; (800e36c <std+0x3c>)
 800e358:	62a3      	str	r3, [r4, #40]	; 0x28
 800e35a:	4b05      	ldr	r3, [pc, #20]	; (800e370 <std+0x40>)
 800e35c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e35e:	4b05      	ldr	r3, [pc, #20]	; (800e374 <std+0x44>)
 800e360:	6224      	str	r4, [r4, #32]
 800e362:	6323      	str	r3, [r4, #48]	; 0x30
 800e364:	bd10      	pop	{r4, pc}
 800e366:	bf00      	nop
 800e368:	0800f485 	.word	0x0800f485
 800e36c:	0800f4a7 	.word	0x0800f4a7
 800e370:	0800f4df 	.word	0x0800f4df
 800e374:	0800f503 	.word	0x0800f503

0800e378 <_cleanup_r>:
 800e378:	4901      	ldr	r1, [pc, #4]	; (800e380 <_cleanup_r+0x8>)
 800e37a:	f000 b8af 	b.w	800e4dc <_fwalk_reent>
 800e37e:	bf00      	nop
 800e380:	0800e2b9 	.word	0x0800e2b9

0800e384 <__sfmoreglue>:
 800e384:	b570      	push	{r4, r5, r6, lr}
 800e386:	2268      	movs	r2, #104	; 0x68
 800e388:	1e4d      	subs	r5, r1, #1
 800e38a:	4355      	muls	r5, r2
 800e38c:	460e      	mov	r6, r1
 800e38e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e392:	f000 fd3d 	bl	800ee10 <_malloc_r>
 800e396:	4604      	mov	r4, r0
 800e398:	b140      	cbz	r0, 800e3ac <__sfmoreglue+0x28>
 800e39a:	2100      	movs	r1, #0
 800e39c:	e9c0 1600 	strd	r1, r6, [r0]
 800e3a0:	300c      	adds	r0, #12
 800e3a2:	60a0      	str	r0, [r4, #8]
 800e3a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e3a8:	f7fe fa88 	bl	800c8bc <memset>
 800e3ac:	4620      	mov	r0, r4
 800e3ae:	bd70      	pop	{r4, r5, r6, pc}

0800e3b0 <__sfp_lock_acquire>:
 800e3b0:	4801      	ldr	r0, [pc, #4]	; (800e3b8 <__sfp_lock_acquire+0x8>)
 800e3b2:	f000 b8b8 	b.w	800e526 <__retarget_lock_acquire_recursive>
 800e3b6:	bf00      	nop
 800e3b8:	20005655 	.word	0x20005655

0800e3bc <__sfp_lock_release>:
 800e3bc:	4801      	ldr	r0, [pc, #4]	; (800e3c4 <__sfp_lock_release+0x8>)
 800e3be:	f000 b8b3 	b.w	800e528 <__retarget_lock_release_recursive>
 800e3c2:	bf00      	nop
 800e3c4:	20005655 	.word	0x20005655

0800e3c8 <__sinit_lock_acquire>:
 800e3c8:	4801      	ldr	r0, [pc, #4]	; (800e3d0 <__sinit_lock_acquire+0x8>)
 800e3ca:	f000 b8ac 	b.w	800e526 <__retarget_lock_acquire_recursive>
 800e3ce:	bf00      	nop
 800e3d0:	20005656 	.word	0x20005656

0800e3d4 <__sinit_lock_release>:
 800e3d4:	4801      	ldr	r0, [pc, #4]	; (800e3dc <__sinit_lock_release+0x8>)
 800e3d6:	f000 b8a7 	b.w	800e528 <__retarget_lock_release_recursive>
 800e3da:	bf00      	nop
 800e3dc:	20005656 	.word	0x20005656

0800e3e0 <__sinit>:
 800e3e0:	b510      	push	{r4, lr}
 800e3e2:	4604      	mov	r4, r0
 800e3e4:	f7ff fff0 	bl	800e3c8 <__sinit_lock_acquire>
 800e3e8:	69a3      	ldr	r3, [r4, #24]
 800e3ea:	b11b      	cbz	r3, 800e3f4 <__sinit+0x14>
 800e3ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e3f0:	f7ff bff0 	b.w	800e3d4 <__sinit_lock_release>
 800e3f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e3f8:	6523      	str	r3, [r4, #80]	; 0x50
 800e3fa:	4b13      	ldr	r3, [pc, #76]	; (800e448 <__sinit+0x68>)
 800e3fc:	4a13      	ldr	r2, [pc, #76]	; (800e44c <__sinit+0x6c>)
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	62a2      	str	r2, [r4, #40]	; 0x28
 800e402:	42a3      	cmp	r3, r4
 800e404:	bf04      	itt	eq
 800e406:	2301      	moveq	r3, #1
 800e408:	61a3      	streq	r3, [r4, #24]
 800e40a:	4620      	mov	r0, r4
 800e40c:	f000 f820 	bl	800e450 <__sfp>
 800e410:	6060      	str	r0, [r4, #4]
 800e412:	4620      	mov	r0, r4
 800e414:	f000 f81c 	bl	800e450 <__sfp>
 800e418:	60a0      	str	r0, [r4, #8]
 800e41a:	4620      	mov	r0, r4
 800e41c:	f000 f818 	bl	800e450 <__sfp>
 800e420:	2200      	movs	r2, #0
 800e422:	60e0      	str	r0, [r4, #12]
 800e424:	2104      	movs	r1, #4
 800e426:	6860      	ldr	r0, [r4, #4]
 800e428:	f7ff ff82 	bl	800e330 <std>
 800e42c:	68a0      	ldr	r0, [r4, #8]
 800e42e:	2201      	movs	r2, #1
 800e430:	2109      	movs	r1, #9
 800e432:	f7ff ff7d 	bl	800e330 <std>
 800e436:	68e0      	ldr	r0, [r4, #12]
 800e438:	2202      	movs	r2, #2
 800e43a:	2112      	movs	r1, #18
 800e43c:	f7ff ff78 	bl	800e330 <std>
 800e440:	2301      	movs	r3, #1
 800e442:	61a3      	str	r3, [r4, #24]
 800e444:	e7d2      	b.n	800e3ec <__sinit+0xc>
 800e446:	bf00      	nop
 800e448:	08010100 	.word	0x08010100
 800e44c:	0800e379 	.word	0x0800e379

0800e450 <__sfp>:
 800e450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e452:	4607      	mov	r7, r0
 800e454:	f7ff ffac 	bl	800e3b0 <__sfp_lock_acquire>
 800e458:	4b1e      	ldr	r3, [pc, #120]	; (800e4d4 <__sfp+0x84>)
 800e45a:	681e      	ldr	r6, [r3, #0]
 800e45c:	69b3      	ldr	r3, [r6, #24]
 800e45e:	b913      	cbnz	r3, 800e466 <__sfp+0x16>
 800e460:	4630      	mov	r0, r6
 800e462:	f7ff ffbd 	bl	800e3e0 <__sinit>
 800e466:	3648      	adds	r6, #72	; 0x48
 800e468:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e46c:	3b01      	subs	r3, #1
 800e46e:	d503      	bpl.n	800e478 <__sfp+0x28>
 800e470:	6833      	ldr	r3, [r6, #0]
 800e472:	b30b      	cbz	r3, 800e4b8 <__sfp+0x68>
 800e474:	6836      	ldr	r6, [r6, #0]
 800e476:	e7f7      	b.n	800e468 <__sfp+0x18>
 800e478:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e47c:	b9d5      	cbnz	r5, 800e4b4 <__sfp+0x64>
 800e47e:	4b16      	ldr	r3, [pc, #88]	; (800e4d8 <__sfp+0x88>)
 800e480:	60e3      	str	r3, [r4, #12]
 800e482:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e486:	6665      	str	r5, [r4, #100]	; 0x64
 800e488:	f000 f84c 	bl	800e524 <__retarget_lock_init_recursive>
 800e48c:	f7ff ff96 	bl	800e3bc <__sfp_lock_release>
 800e490:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e494:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e498:	6025      	str	r5, [r4, #0]
 800e49a:	61a5      	str	r5, [r4, #24]
 800e49c:	2208      	movs	r2, #8
 800e49e:	4629      	mov	r1, r5
 800e4a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e4a4:	f7fe fa0a 	bl	800c8bc <memset>
 800e4a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e4ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e4b0:	4620      	mov	r0, r4
 800e4b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e4b4:	3468      	adds	r4, #104	; 0x68
 800e4b6:	e7d9      	b.n	800e46c <__sfp+0x1c>
 800e4b8:	2104      	movs	r1, #4
 800e4ba:	4638      	mov	r0, r7
 800e4bc:	f7ff ff62 	bl	800e384 <__sfmoreglue>
 800e4c0:	4604      	mov	r4, r0
 800e4c2:	6030      	str	r0, [r6, #0]
 800e4c4:	2800      	cmp	r0, #0
 800e4c6:	d1d5      	bne.n	800e474 <__sfp+0x24>
 800e4c8:	f7ff ff78 	bl	800e3bc <__sfp_lock_release>
 800e4cc:	230c      	movs	r3, #12
 800e4ce:	603b      	str	r3, [r7, #0]
 800e4d0:	e7ee      	b.n	800e4b0 <__sfp+0x60>
 800e4d2:	bf00      	nop
 800e4d4:	08010100 	.word	0x08010100
 800e4d8:	ffff0001 	.word	0xffff0001

0800e4dc <_fwalk_reent>:
 800e4dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4e0:	4606      	mov	r6, r0
 800e4e2:	4688      	mov	r8, r1
 800e4e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e4e8:	2700      	movs	r7, #0
 800e4ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e4ee:	f1b9 0901 	subs.w	r9, r9, #1
 800e4f2:	d505      	bpl.n	800e500 <_fwalk_reent+0x24>
 800e4f4:	6824      	ldr	r4, [r4, #0]
 800e4f6:	2c00      	cmp	r4, #0
 800e4f8:	d1f7      	bne.n	800e4ea <_fwalk_reent+0xe>
 800e4fa:	4638      	mov	r0, r7
 800e4fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e500:	89ab      	ldrh	r3, [r5, #12]
 800e502:	2b01      	cmp	r3, #1
 800e504:	d907      	bls.n	800e516 <_fwalk_reent+0x3a>
 800e506:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e50a:	3301      	adds	r3, #1
 800e50c:	d003      	beq.n	800e516 <_fwalk_reent+0x3a>
 800e50e:	4629      	mov	r1, r5
 800e510:	4630      	mov	r0, r6
 800e512:	47c0      	blx	r8
 800e514:	4307      	orrs	r7, r0
 800e516:	3568      	adds	r5, #104	; 0x68
 800e518:	e7e9      	b.n	800e4ee <_fwalk_reent+0x12>
	...

0800e51c <_localeconv_r>:
 800e51c:	4800      	ldr	r0, [pc, #0]	; (800e520 <_localeconv_r+0x4>)
 800e51e:	4770      	bx	lr
 800e520:	20000338 	.word	0x20000338

0800e524 <__retarget_lock_init_recursive>:
 800e524:	4770      	bx	lr

0800e526 <__retarget_lock_acquire_recursive>:
 800e526:	4770      	bx	lr

0800e528 <__retarget_lock_release_recursive>:
 800e528:	4770      	bx	lr

0800e52a <__swhatbuf_r>:
 800e52a:	b570      	push	{r4, r5, r6, lr}
 800e52c:	460e      	mov	r6, r1
 800e52e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e532:	2900      	cmp	r1, #0
 800e534:	b096      	sub	sp, #88	; 0x58
 800e536:	4614      	mov	r4, r2
 800e538:	461d      	mov	r5, r3
 800e53a:	da08      	bge.n	800e54e <__swhatbuf_r+0x24>
 800e53c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e540:	2200      	movs	r2, #0
 800e542:	602a      	str	r2, [r5, #0]
 800e544:	061a      	lsls	r2, r3, #24
 800e546:	d410      	bmi.n	800e56a <__swhatbuf_r+0x40>
 800e548:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e54c:	e00e      	b.n	800e56c <__swhatbuf_r+0x42>
 800e54e:	466a      	mov	r2, sp
 800e550:	f001 f82e 	bl	800f5b0 <_fstat_r>
 800e554:	2800      	cmp	r0, #0
 800e556:	dbf1      	blt.n	800e53c <__swhatbuf_r+0x12>
 800e558:	9a01      	ldr	r2, [sp, #4]
 800e55a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e55e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e562:	425a      	negs	r2, r3
 800e564:	415a      	adcs	r2, r3
 800e566:	602a      	str	r2, [r5, #0]
 800e568:	e7ee      	b.n	800e548 <__swhatbuf_r+0x1e>
 800e56a:	2340      	movs	r3, #64	; 0x40
 800e56c:	2000      	movs	r0, #0
 800e56e:	6023      	str	r3, [r4, #0]
 800e570:	b016      	add	sp, #88	; 0x58
 800e572:	bd70      	pop	{r4, r5, r6, pc}

0800e574 <__smakebuf_r>:
 800e574:	898b      	ldrh	r3, [r1, #12]
 800e576:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e578:	079d      	lsls	r5, r3, #30
 800e57a:	4606      	mov	r6, r0
 800e57c:	460c      	mov	r4, r1
 800e57e:	d507      	bpl.n	800e590 <__smakebuf_r+0x1c>
 800e580:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e584:	6023      	str	r3, [r4, #0]
 800e586:	6123      	str	r3, [r4, #16]
 800e588:	2301      	movs	r3, #1
 800e58a:	6163      	str	r3, [r4, #20]
 800e58c:	b002      	add	sp, #8
 800e58e:	bd70      	pop	{r4, r5, r6, pc}
 800e590:	ab01      	add	r3, sp, #4
 800e592:	466a      	mov	r2, sp
 800e594:	f7ff ffc9 	bl	800e52a <__swhatbuf_r>
 800e598:	9900      	ldr	r1, [sp, #0]
 800e59a:	4605      	mov	r5, r0
 800e59c:	4630      	mov	r0, r6
 800e59e:	f000 fc37 	bl	800ee10 <_malloc_r>
 800e5a2:	b948      	cbnz	r0, 800e5b8 <__smakebuf_r+0x44>
 800e5a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5a8:	059a      	lsls	r2, r3, #22
 800e5aa:	d4ef      	bmi.n	800e58c <__smakebuf_r+0x18>
 800e5ac:	f023 0303 	bic.w	r3, r3, #3
 800e5b0:	f043 0302 	orr.w	r3, r3, #2
 800e5b4:	81a3      	strh	r3, [r4, #12]
 800e5b6:	e7e3      	b.n	800e580 <__smakebuf_r+0xc>
 800e5b8:	4b0d      	ldr	r3, [pc, #52]	; (800e5f0 <__smakebuf_r+0x7c>)
 800e5ba:	62b3      	str	r3, [r6, #40]	; 0x28
 800e5bc:	89a3      	ldrh	r3, [r4, #12]
 800e5be:	6020      	str	r0, [r4, #0]
 800e5c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e5c4:	81a3      	strh	r3, [r4, #12]
 800e5c6:	9b00      	ldr	r3, [sp, #0]
 800e5c8:	6163      	str	r3, [r4, #20]
 800e5ca:	9b01      	ldr	r3, [sp, #4]
 800e5cc:	6120      	str	r0, [r4, #16]
 800e5ce:	b15b      	cbz	r3, 800e5e8 <__smakebuf_r+0x74>
 800e5d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e5d4:	4630      	mov	r0, r6
 800e5d6:	f000 fffd 	bl	800f5d4 <_isatty_r>
 800e5da:	b128      	cbz	r0, 800e5e8 <__smakebuf_r+0x74>
 800e5dc:	89a3      	ldrh	r3, [r4, #12]
 800e5de:	f023 0303 	bic.w	r3, r3, #3
 800e5e2:	f043 0301 	orr.w	r3, r3, #1
 800e5e6:	81a3      	strh	r3, [r4, #12]
 800e5e8:	89a0      	ldrh	r0, [r4, #12]
 800e5ea:	4305      	orrs	r5, r0
 800e5ec:	81a5      	strh	r5, [r4, #12]
 800e5ee:	e7cd      	b.n	800e58c <__smakebuf_r+0x18>
 800e5f0:	0800e379 	.word	0x0800e379

0800e5f4 <malloc>:
 800e5f4:	4b02      	ldr	r3, [pc, #8]	; (800e600 <malloc+0xc>)
 800e5f6:	4601      	mov	r1, r0
 800e5f8:	6818      	ldr	r0, [r3, #0]
 800e5fa:	f000 bc09 	b.w	800ee10 <_malloc_r>
 800e5fe:	bf00      	nop
 800e600:	200001e4 	.word	0x200001e4

0800e604 <_Balloc>:
 800e604:	b570      	push	{r4, r5, r6, lr}
 800e606:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e608:	4604      	mov	r4, r0
 800e60a:	460d      	mov	r5, r1
 800e60c:	b976      	cbnz	r6, 800e62c <_Balloc+0x28>
 800e60e:	2010      	movs	r0, #16
 800e610:	f7ff fff0 	bl	800e5f4 <malloc>
 800e614:	4602      	mov	r2, r0
 800e616:	6260      	str	r0, [r4, #36]	; 0x24
 800e618:	b920      	cbnz	r0, 800e624 <_Balloc+0x20>
 800e61a:	4b18      	ldr	r3, [pc, #96]	; (800e67c <_Balloc+0x78>)
 800e61c:	4818      	ldr	r0, [pc, #96]	; (800e680 <_Balloc+0x7c>)
 800e61e:	2166      	movs	r1, #102	; 0x66
 800e620:	f000 ff86 	bl	800f530 <__assert_func>
 800e624:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e628:	6006      	str	r6, [r0, #0]
 800e62a:	60c6      	str	r6, [r0, #12]
 800e62c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e62e:	68f3      	ldr	r3, [r6, #12]
 800e630:	b183      	cbz	r3, 800e654 <_Balloc+0x50>
 800e632:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e634:	68db      	ldr	r3, [r3, #12]
 800e636:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e63a:	b9b8      	cbnz	r0, 800e66c <_Balloc+0x68>
 800e63c:	2101      	movs	r1, #1
 800e63e:	fa01 f605 	lsl.w	r6, r1, r5
 800e642:	1d72      	adds	r2, r6, #5
 800e644:	0092      	lsls	r2, r2, #2
 800e646:	4620      	mov	r0, r4
 800e648:	f000 fb60 	bl	800ed0c <_calloc_r>
 800e64c:	b160      	cbz	r0, 800e668 <_Balloc+0x64>
 800e64e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e652:	e00e      	b.n	800e672 <_Balloc+0x6e>
 800e654:	2221      	movs	r2, #33	; 0x21
 800e656:	2104      	movs	r1, #4
 800e658:	4620      	mov	r0, r4
 800e65a:	f000 fb57 	bl	800ed0c <_calloc_r>
 800e65e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e660:	60f0      	str	r0, [r6, #12]
 800e662:	68db      	ldr	r3, [r3, #12]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d1e4      	bne.n	800e632 <_Balloc+0x2e>
 800e668:	2000      	movs	r0, #0
 800e66a:	bd70      	pop	{r4, r5, r6, pc}
 800e66c:	6802      	ldr	r2, [r0, #0]
 800e66e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e672:	2300      	movs	r3, #0
 800e674:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e678:	e7f7      	b.n	800e66a <_Balloc+0x66>
 800e67a:	bf00      	nop
 800e67c:	08010145 	.word	0x08010145
 800e680:	08010228 	.word	0x08010228

0800e684 <_Bfree>:
 800e684:	b570      	push	{r4, r5, r6, lr}
 800e686:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e688:	4605      	mov	r5, r0
 800e68a:	460c      	mov	r4, r1
 800e68c:	b976      	cbnz	r6, 800e6ac <_Bfree+0x28>
 800e68e:	2010      	movs	r0, #16
 800e690:	f7ff ffb0 	bl	800e5f4 <malloc>
 800e694:	4602      	mov	r2, r0
 800e696:	6268      	str	r0, [r5, #36]	; 0x24
 800e698:	b920      	cbnz	r0, 800e6a4 <_Bfree+0x20>
 800e69a:	4b09      	ldr	r3, [pc, #36]	; (800e6c0 <_Bfree+0x3c>)
 800e69c:	4809      	ldr	r0, [pc, #36]	; (800e6c4 <_Bfree+0x40>)
 800e69e:	218a      	movs	r1, #138	; 0x8a
 800e6a0:	f000 ff46 	bl	800f530 <__assert_func>
 800e6a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e6a8:	6006      	str	r6, [r0, #0]
 800e6aa:	60c6      	str	r6, [r0, #12]
 800e6ac:	b13c      	cbz	r4, 800e6be <_Bfree+0x3a>
 800e6ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e6b0:	6862      	ldr	r2, [r4, #4]
 800e6b2:	68db      	ldr	r3, [r3, #12]
 800e6b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e6b8:	6021      	str	r1, [r4, #0]
 800e6ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e6be:	bd70      	pop	{r4, r5, r6, pc}
 800e6c0:	08010145 	.word	0x08010145
 800e6c4:	08010228 	.word	0x08010228

0800e6c8 <__multadd>:
 800e6c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6cc:	690d      	ldr	r5, [r1, #16]
 800e6ce:	4607      	mov	r7, r0
 800e6d0:	460c      	mov	r4, r1
 800e6d2:	461e      	mov	r6, r3
 800e6d4:	f101 0c14 	add.w	ip, r1, #20
 800e6d8:	2000      	movs	r0, #0
 800e6da:	f8dc 3000 	ldr.w	r3, [ip]
 800e6de:	b299      	uxth	r1, r3
 800e6e0:	fb02 6101 	mla	r1, r2, r1, r6
 800e6e4:	0c1e      	lsrs	r6, r3, #16
 800e6e6:	0c0b      	lsrs	r3, r1, #16
 800e6e8:	fb02 3306 	mla	r3, r2, r6, r3
 800e6ec:	b289      	uxth	r1, r1
 800e6ee:	3001      	adds	r0, #1
 800e6f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e6f4:	4285      	cmp	r5, r0
 800e6f6:	f84c 1b04 	str.w	r1, [ip], #4
 800e6fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e6fe:	dcec      	bgt.n	800e6da <__multadd+0x12>
 800e700:	b30e      	cbz	r6, 800e746 <__multadd+0x7e>
 800e702:	68a3      	ldr	r3, [r4, #8]
 800e704:	42ab      	cmp	r3, r5
 800e706:	dc19      	bgt.n	800e73c <__multadd+0x74>
 800e708:	6861      	ldr	r1, [r4, #4]
 800e70a:	4638      	mov	r0, r7
 800e70c:	3101      	adds	r1, #1
 800e70e:	f7ff ff79 	bl	800e604 <_Balloc>
 800e712:	4680      	mov	r8, r0
 800e714:	b928      	cbnz	r0, 800e722 <__multadd+0x5a>
 800e716:	4602      	mov	r2, r0
 800e718:	4b0c      	ldr	r3, [pc, #48]	; (800e74c <__multadd+0x84>)
 800e71a:	480d      	ldr	r0, [pc, #52]	; (800e750 <__multadd+0x88>)
 800e71c:	21b5      	movs	r1, #181	; 0xb5
 800e71e:	f000 ff07 	bl	800f530 <__assert_func>
 800e722:	6922      	ldr	r2, [r4, #16]
 800e724:	3202      	adds	r2, #2
 800e726:	f104 010c 	add.w	r1, r4, #12
 800e72a:	0092      	lsls	r2, r2, #2
 800e72c:	300c      	adds	r0, #12
 800e72e:	f7fe f8b7 	bl	800c8a0 <memcpy>
 800e732:	4621      	mov	r1, r4
 800e734:	4638      	mov	r0, r7
 800e736:	f7ff ffa5 	bl	800e684 <_Bfree>
 800e73a:	4644      	mov	r4, r8
 800e73c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e740:	3501      	adds	r5, #1
 800e742:	615e      	str	r6, [r3, #20]
 800e744:	6125      	str	r5, [r4, #16]
 800e746:	4620      	mov	r0, r4
 800e748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e74c:	080101b7 	.word	0x080101b7
 800e750:	08010228 	.word	0x08010228

0800e754 <__hi0bits>:
 800e754:	0c03      	lsrs	r3, r0, #16
 800e756:	041b      	lsls	r3, r3, #16
 800e758:	b9d3      	cbnz	r3, 800e790 <__hi0bits+0x3c>
 800e75a:	0400      	lsls	r0, r0, #16
 800e75c:	2310      	movs	r3, #16
 800e75e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e762:	bf04      	itt	eq
 800e764:	0200      	lsleq	r0, r0, #8
 800e766:	3308      	addeq	r3, #8
 800e768:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e76c:	bf04      	itt	eq
 800e76e:	0100      	lsleq	r0, r0, #4
 800e770:	3304      	addeq	r3, #4
 800e772:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e776:	bf04      	itt	eq
 800e778:	0080      	lsleq	r0, r0, #2
 800e77a:	3302      	addeq	r3, #2
 800e77c:	2800      	cmp	r0, #0
 800e77e:	db05      	blt.n	800e78c <__hi0bits+0x38>
 800e780:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e784:	f103 0301 	add.w	r3, r3, #1
 800e788:	bf08      	it	eq
 800e78a:	2320      	moveq	r3, #32
 800e78c:	4618      	mov	r0, r3
 800e78e:	4770      	bx	lr
 800e790:	2300      	movs	r3, #0
 800e792:	e7e4      	b.n	800e75e <__hi0bits+0xa>

0800e794 <__lo0bits>:
 800e794:	6803      	ldr	r3, [r0, #0]
 800e796:	f013 0207 	ands.w	r2, r3, #7
 800e79a:	4601      	mov	r1, r0
 800e79c:	d00b      	beq.n	800e7b6 <__lo0bits+0x22>
 800e79e:	07da      	lsls	r2, r3, #31
 800e7a0:	d423      	bmi.n	800e7ea <__lo0bits+0x56>
 800e7a2:	0798      	lsls	r0, r3, #30
 800e7a4:	bf49      	itett	mi
 800e7a6:	085b      	lsrmi	r3, r3, #1
 800e7a8:	089b      	lsrpl	r3, r3, #2
 800e7aa:	2001      	movmi	r0, #1
 800e7ac:	600b      	strmi	r3, [r1, #0]
 800e7ae:	bf5c      	itt	pl
 800e7b0:	600b      	strpl	r3, [r1, #0]
 800e7b2:	2002      	movpl	r0, #2
 800e7b4:	4770      	bx	lr
 800e7b6:	b298      	uxth	r0, r3
 800e7b8:	b9a8      	cbnz	r0, 800e7e6 <__lo0bits+0x52>
 800e7ba:	0c1b      	lsrs	r3, r3, #16
 800e7bc:	2010      	movs	r0, #16
 800e7be:	b2da      	uxtb	r2, r3
 800e7c0:	b90a      	cbnz	r2, 800e7c6 <__lo0bits+0x32>
 800e7c2:	3008      	adds	r0, #8
 800e7c4:	0a1b      	lsrs	r3, r3, #8
 800e7c6:	071a      	lsls	r2, r3, #28
 800e7c8:	bf04      	itt	eq
 800e7ca:	091b      	lsreq	r3, r3, #4
 800e7cc:	3004      	addeq	r0, #4
 800e7ce:	079a      	lsls	r2, r3, #30
 800e7d0:	bf04      	itt	eq
 800e7d2:	089b      	lsreq	r3, r3, #2
 800e7d4:	3002      	addeq	r0, #2
 800e7d6:	07da      	lsls	r2, r3, #31
 800e7d8:	d403      	bmi.n	800e7e2 <__lo0bits+0x4e>
 800e7da:	085b      	lsrs	r3, r3, #1
 800e7dc:	f100 0001 	add.w	r0, r0, #1
 800e7e0:	d005      	beq.n	800e7ee <__lo0bits+0x5a>
 800e7e2:	600b      	str	r3, [r1, #0]
 800e7e4:	4770      	bx	lr
 800e7e6:	4610      	mov	r0, r2
 800e7e8:	e7e9      	b.n	800e7be <__lo0bits+0x2a>
 800e7ea:	2000      	movs	r0, #0
 800e7ec:	4770      	bx	lr
 800e7ee:	2020      	movs	r0, #32
 800e7f0:	4770      	bx	lr
	...

0800e7f4 <__i2b>:
 800e7f4:	b510      	push	{r4, lr}
 800e7f6:	460c      	mov	r4, r1
 800e7f8:	2101      	movs	r1, #1
 800e7fa:	f7ff ff03 	bl	800e604 <_Balloc>
 800e7fe:	4602      	mov	r2, r0
 800e800:	b928      	cbnz	r0, 800e80e <__i2b+0x1a>
 800e802:	4b05      	ldr	r3, [pc, #20]	; (800e818 <__i2b+0x24>)
 800e804:	4805      	ldr	r0, [pc, #20]	; (800e81c <__i2b+0x28>)
 800e806:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e80a:	f000 fe91 	bl	800f530 <__assert_func>
 800e80e:	2301      	movs	r3, #1
 800e810:	6144      	str	r4, [r0, #20]
 800e812:	6103      	str	r3, [r0, #16]
 800e814:	bd10      	pop	{r4, pc}
 800e816:	bf00      	nop
 800e818:	080101b7 	.word	0x080101b7
 800e81c:	08010228 	.word	0x08010228

0800e820 <__multiply>:
 800e820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e824:	4691      	mov	r9, r2
 800e826:	690a      	ldr	r2, [r1, #16]
 800e828:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e82c:	429a      	cmp	r2, r3
 800e82e:	bfb8      	it	lt
 800e830:	460b      	movlt	r3, r1
 800e832:	460c      	mov	r4, r1
 800e834:	bfbc      	itt	lt
 800e836:	464c      	movlt	r4, r9
 800e838:	4699      	movlt	r9, r3
 800e83a:	6927      	ldr	r7, [r4, #16]
 800e83c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e840:	68a3      	ldr	r3, [r4, #8]
 800e842:	6861      	ldr	r1, [r4, #4]
 800e844:	eb07 060a 	add.w	r6, r7, sl
 800e848:	42b3      	cmp	r3, r6
 800e84a:	b085      	sub	sp, #20
 800e84c:	bfb8      	it	lt
 800e84e:	3101      	addlt	r1, #1
 800e850:	f7ff fed8 	bl	800e604 <_Balloc>
 800e854:	b930      	cbnz	r0, 800e864 <__multiply+0x44>
 800e856:	4602      	mov	r2, r0
 800e858:	4b44      	ldr	r3, [pc, #272]	; (800e96c <__multiply+0x14c>)
 800e85a:	4845      	ldr	r0, [pc, #276]	; (800e970 <__multiply+0x150>)
 800e85c:	f240 115d 	movw	r1, #349	; 0x15d
 800e860:	f000 fe66 	bl	800f530 <__assert_func>
 800e864:	f100 0514 	add.w	r5, r0, #20
 800e868:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e86c:	462b      	mov	r3, r5
 800e86e:	2200      	movs	r2, #0
 800e870:	4543      	cmp	r3, r8
 800e872:	d321      	bcc.n	800e8b8 <__multiply+0x98>
 800e874:	f104 0314 	add.w	r3, r4, #20
 800e878:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e87c:	f109 0314 	add.w	r3, r9, #20
 800e880:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e884:	9202      	str	r2, [sp, #8]
 800e886:	1b3a      	subs	r2, r7, r4
 800e888:	3a15      	subs	r2, #21
 800e88a:	f022 0203 	bic.w	r2, r2, #3
 800e88e:	3204      	adds	r2, #4
 800e890:	f104 0115 	add.w	r1, r4, #21
 800e894:	428f      	cmp	r7, r1
 800e896:	bf38      	it	cc
 800e898:	2204      	movcc	r2, #4
 800e89a:	9201      	str	r2, [sp, #4]
 800e89c:	9a02      	ldr	r2, [sp, #8]
 800e89e:	9303      	str	r3, [sp, #12]
 800e8a0:	429a      	cmp	r2, r3
 800e8a2:	d80c      	bhi.n	800e8be <__multiply+0x9e>
 800e8a4:	2e00      	cmp	r6, #0
 800e8a6:	dd03      	ble.n	800e8b0 <__multiply+0x90>
 800e8a8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d05a      	beq.n	800e966 <__multiply+0x146>
 800e8b0:	6106      	str	r6, [r0, #16]
 800e8b2:	b005      	add	sp, #20
 800e8b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8b8:	f843 2b04 	str.w	r2, [r3], #4
 800e8bc:	e7d8      	b.n	800e870 <__multiply+0x50>
 800e8be:	f8b3 a000 	ldrh.w	sl, [r3]
 800e8c2:	f1ba 0f00 	cmp.w	sl, #0
 800e8c6:	d024      	beq.n	800e912 <__multiply+0xf2>
 800e8c8:	f104 0e14 	add.w	lr, r4, #20
 800e8cc:	46a9      	mov	r9, r5
 800e8ce:	f04f 0c00 	mov.w	ip, #0
 800e8d2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e8d6:	f8d9 1000 	ldr.w	r1, [r9]
 800e8da:	fa1f fb82 	uxth.w	fp, r2
 800e8de:	b289      	uxth	r1, r1
 800e8e0:	fb0a 110b 	mla	r1, sl, fp, r1
 800e8e4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e8e8:	f8d9 2000 	ldr.w	r2, [r9]
 800e8ec:	4461      	add	r1, ip
 800e8ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e8f2:	fb0a c20b 	mla	r2, sl, fp, ip
 800e8f6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e8fa:	b289      	uxth	r1, r1
 800e8fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e900:	4577      	cmp	r7, lr
 800e902:	f849 1b04 	str.w	r1, [r9], #4
 800e906:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e90a:	d8e2      	bhi.n	800e8d2 <__multiply+0xb2>
 800e90c:	9a01      	ldr	r2, [sp, #4]
 800e90e:	f845 c002 	str.w	ip, [r5, r2]
 800e912:	9a03      	ldr	r2, [sp, #12]
 800e914:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e918:	3304      	adds	r3, #4
 800e91a:	f1b9 0f00 	cmp.w	r9, #0
 800e91e:	d020      	beq.n	800e962 <__multiply+0x142>
 800e920:	6829      	ldr	r1, [r5, #0]
 800e922:	f104 0c14 	add.w	ip, r4, #20
 800e926:	46ae      	mov	lr, r5
 800e928:	f04f 0a00 	mov.w	sl, #0
 800e92c:	f8bc b000 	ldrh.w	fp, [ip]
 800e930:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e934:	fb09 220b 	mla	r2, r9, fp, r2
 800e938:	4492      	add	sl, r2
 800e93a:	b289      	uxth	r1, r1
 800e93c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e940:	f84e 1b04 	str.w	r1, [lr], #4
 800e944:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e948:	f8be 1000 	ldrh.w	r1, [lr]
 800e94c:	0c12      	lsrs	r2, r2, #16
 800e94e:	fb09 1102 	mla	r1, r9, r2, r1
 800e952:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e956:	4567      	cmp	r7, ip
 800e958:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e95c:	d8e6      	bhi.n	800e92c <__multiply+0x10c>
 800e95e:	9a01      	ldr	r2, [sp, #4]
 800e960:	50a9      	str	r1, [r5, r2]
 800e962:	3504      	adds	r5, #4
 800e964:	e79a      	b.n	800e89c <__multiply+0x7c>
 800e966:	3e01      	subs	r6, #1
 800e968:	e79c      	b.n	800e8a4 <__multiply+0x84>
 800e96a:	bf00      	nop
 800e96c:	080101b7 	.word	0x080101b7
 800e970:	08010228 	.word	0x08010228

0800e974 <__pow5mult>:
 800e974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e978:	4615      	mov	r5, r2
 800e97a:	f012 0203 	ands.w	r2, r2, #3
 800e97e:	4606      	mov	r6, r0
 800e980:	460f      	mov	r7, r1
 800e982:	d007      	beq.n	800e994 <__pow5mult+0x20>
 800e984:	4c25      	ldr	r4, [pc, #148]	; (800ea1c <__pow5mult+0xa8>)
 800e986:	3a01      	subs	r2, #1
 800e988:	2300      	movs	r3, #0
 800e98a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e98e:	f7ff fe9b 	bl	800e6c8 <__multadd>
 800e992:	4607      	mov	r7, r0
 800e994:	10ad      	asrs	r5, r5, #2
 800e996:	d03d      	beq.n	800ea14 <__pow5mult+0xa0>
 800e998:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e99a:	b97c      	cbnz	r4, 800e9bc <__pow5mult+0x48>
 800e99c:	2010      	movs	r0, #16
 800e99e:	f7ff fe29 	bl	800e5f4 <malloc>
 800e9a2:	4602      	mov	r2, r0
 800e9a4:	6270      	str	r0, [r6, #36]	; 0x24
 800e9a6:	b928      	cbnz	r0, 800e9b4 <__pow5mult+0x40>
 800e9a8:	4b1d      	ldr	r3, [pc, #116]	; (800ea20 <__pow5mult+0xac>)
 800e9aa:	481e      	ldr	r0, [pc, #120]	; (800ea24 <__pow5mult+0xb0>)
 800e9ac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e9b0:	f000 fdbe 	bl	800f530 <__assert_func>
 800e9b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e9b8:	6004      	str	r4, [r0, #0]
 800e9ba:	60c4      	str	r4, [r0, #12]
 800e9bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e9c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e9c4:	b94c      	cbnz	r4, 800e9da <__pow5mult+0x66>
 800e9c6:	f240 2171 	movw	r1, #625	; 0x271
 800e9ca:	4630      	mov	r0, r6
 800e9cc:	f7ff ff12 	bl	800e7f4 <__i2b>
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	f8c8 0008 	str.w	r0, [r8, #8]
 800e9d6:	4604      	mov	r4, r0
 800e9d8:	6003      	str	r3, [r0, #0]
 800e9da:	f04f 0900 	mov.w	r9, #0
 800e9de:	07eb      	lsls	r3, r5, #31
 800e9e0:	d50a      	bpl.n	800e9f8 <__pow5mult+0x84>
 800e9e2:	4639      	mov	r1, r7
 800e9e4:	4622      	mov	r2, r4
 800e9e6:	4630      	mov	r0, r6
 800e9e8:	f7ff ff1a 	bl	800e820 <__multiply>
 800e9ec:	4639      	mov	r1, r7
 800e9ee:	4680      	mov	r8, r0
 800e9f0:	4630      	mov	r0, r6
 800e9f2:	f7ff fe47 	bl	800e684 <_Bfree>
 800e9f6:	4647      	mov	r7, r8
 800e9f8:	106d      	asrs	r5, r5, #1
 800e9fa:	d00b      	beq.n	800ea14 <__pow5mult+0xa0>
 800e9fc:	6820      	ldr	r0, [r4, #0]
 800e9fe:	b938      	cbnz	r0, 800ea10 <__pow5mult+0x9c>
 800ea00:	4622      	mov	r2, r4
 800ea02:	4621      	mov	r1, r4
 800ea04:	4630      	mov	r0, r6
 800ea06:	f7ff ff0b 	bl	800e820 <__multiply>
 800ea0a:	6020      	str	r0, [r4, #0]
 800ea0c:	f8c0 9000 	str.w	r9, [r0]
 800ea10:	4604      	mov	r4, r0
 800ea12:	e7e4      	b.n	800e9de <__pow5mult+0x6a>
 800ea14:	4638      	mov	r0, r7
 800ea16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea1a:	bf00      	nop
 800ea1c:	08010378 	.word	0x08010378
 800ea20:	08010145 	.word	0x08010145
 800ea24:	08010228 	.word	0x08010228

0800ea28 <__lshift>:
 800ea28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea2c:	460c      	mov	r4, r1
 800ea2e:	6849      	ldr	r1, [r1, #4]
 800ea30:	6923      	ldr	r3, [r4, #16]
 800ea32:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ea36:	68a3      	ldr	r3, [r4, #8]
 800ea38:	4607      	mov	r7, r0
 800ea3a:	4691      	mov	r9, r2
 800ea3c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ea40:	f108 0601 	add.w	r6, r8, #1
 800ea44:	42b3      	cmp	r3, r6
 800ea46:	db0b      	blt.n	800ea60 <__lshift+0x38>
 800ea48:	4638      	mov	r0, r7
 800ea4a:	f7ff fddb 	bl	800e604 <_Balloc>
 800ea4e:	4605      	mov	r5, r0
 800ea50:	b948      	cbnz	r0, 800ea66 <__lshift+0x3e>
 800ea52:	4602      	mov	r2, r0
 800ea54:	4b2a      	ldr	r3, [pc, #168]	; (800eb00 <__lshift+0xd8>)
 800ea56:	482b      	ldr	r0, [pc, #172]	; (800eb04 <__lshift+0xdc>)
 800ea58:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ea5c:	f000 fd68 	bl	800f530 <__assert_func>
 800ea60:	3101      	adds	r1, #1
 800ea62:	005b      	lsls	r3, r3, #1
 800ea64:	e7ee      	b.n	800ea44 <__lshift+0x1c>
 800ea66:	2300      	movs	r3, #0
 800ea68:	f100 0114 	add.w	r1, r0, #20
 800ea6c:	f100 0210 	add.w	r2, r0, #16
 800ea70:	4618      	mov	r0, r3
 800ea72:	4553      	cmp	r3, sl
 800ea74:	db37      	blt.n	800eae6 <__lshift+0xbe>
 800ea76:	6920      	ldr	r0, [r4, #16]
 800ea78:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ea7c:	f104 0314 	add.w	r3, r4, #20
 800ea80:	f019 091f 	ands.w	r9, r9, #31
 800ea84:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ea88:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ea8c:	d02f      	beq.n	800eaee <__lshift+0xc6>
 800ea8e:	f1c9 0e20 	rsb	lr, r9, #32
 800ea92:	468a      	mov	sl, r1
 800ea94:	f04f 0c00 	mov.w	ip, #0
 800ea98:	681a      	ldr	r2, [r3, #0]
 800ea9a:	fa02 f209 	lsl.w	r2, r2, r9
 800ea9e:	ea42 020c 	orr.w	r2, r2, ip
 800eaa2:	f84a 2b04 	str.w	r2, [sl], #4
 800eaa6:	f853 2b04 	ldr.w	r2, [r3], #4
 800eaaa:	4298      	cmp	r0, r3
 800eaac:	fa22 fc0e 	lsr.w	ip, r2, lr
 800eab0:	d8f2      	bhi.n	800ea98 <__lshift+0x70>
 800eab2:	1b03      	subs	r3, r0, r4
 800eab4:	3b15      	subs	r3, #21
 800eab6:	f023 0303 	bic.w	r3, r3, #3
 800eaba:	3304      	adds	r3, #4
 800eabc:	f104 0215 	add.w	r2, r4, #21
 800eac0:	4290      	cmp	r0, r2
 800eac2:	bf38      	it	cc
 800eac4:	2304      	movcc	r3, #4
 800eac6:	f841 c003 	str.w	ip, [r1, r3]
 800eaca:	f1bc 0f00 	cmp.w	ip, #0
 800eace:	d001      	beq.n	800ead4 <__lshift+0xac>
 800ead0:	f108 0602 	add.w	r6, r8, #2
 800ead4:	3e01      	subs	r6, #1
 800ead6:	4638      	mov	r0, r7
 800ead8:	612e      	str	r6, [r5, #16]
 800eada:	4621      	mov	r1, r4
 800eadc:	f7ff fdd2 	bl	800e684 <_Bfree>
 800eae0:	4628      	mov	r0, r5
 800eae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eae6:	f842 0f04 	str.w	r0, [r2, #4]!
 800eaea:	3301      	adds	r3, #1
 800eaec:	e7c1      	b.n	800ea72 <__lshift+0x4a>
 800eaee:	3904      	subs	r1, #4
 800eaf0:	f853 2b04 	ldr.w	r2, [r3], #4
 800eaf4:	f841 2f04 	str.w	r2, [r1, #4]!
 800eaf8:	4298      	cmp	r0, r3
 800eafa:	d8f9      	bhi.n	800eaf0 <__lshift+0xc8>
 800eafc:	e7ea      	b.n	800ead4 <__lshift+0xac>
 800eafe:	bf00      	nop
 800eb00:	080101b7 	.word	0x080101b7
 800eb04:	08010228 	.word	0x08010228

0800eb08 <__mcmp>:
 800eb08:	b530      	push	{r4, r5, lr}
 800eb0a:	6902      	ldr	r2, [r0, #16]
 800eb0c:	690c      	ldr	r4, [r1, #16]
 800eb0e:	1b12      	subs	r2, r2, r4
 800eb10:	d10e      	bne.n	800eb30 <__mcmp+0x28>
 800eb12:	f100 0314 	add.w	r3, r0, #20
 800eb16:	3114      	adds	r1, #20
 800eb18:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800eb1c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800eb20:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800eb24:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800eb28:	42a5      	cmp	r5, r4
 800eb2a:	d003      	beq.n	800eb34 <__mcmp+0x2c>
 800eb2c:	d305      	bcc.n	800eb3a <__mcmp+0x32>
 800eb2e:	2201      	movs	r2, #1
 800eb30:	4610      	mov	r0, r2
 800eb32:	bd30      	pop	{r4, r5, pc}
 800eb34:	4283      	cmp	r3, r0
 800eb36:	d3f3      	bcc.n	800eb20 <__mcmp+0x18>
 800eb38:	e7fa      	b.n	800eb30 <__mcmp+0x28>
 800eb3a:	f04f 32ff 	mov.w	r2, #4294967295
 800eb3e:	e7f7      	b.n	800eb30 <__mcmp+0x28>

0800eb40 <__mdiff>:
 800eb40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb44:	460c      	mov	r4, r1
 800eb46:	4606      	mov	r6, r0
 800eb48:	4611      	mov	r1, r2
 800eb4a:	4620      	mov	r0, r4
 800eb4c:	4690      	mov	r8, r2
 800eb4e:	f7ff ffdb 	bl	800eb08 <__mcmp>
 800eb52:	1e05      	subs	r5, r0, #0
 800eb54:	d110      	bne.n	800eb78 <__mdiff+0x38>
 800eb56:	4629      	mov	r1, r5
 800eb58:	4630      	mov	r0, r6
 800eb5a:	f7ff fd53 	bl	800e604 <_Balloc>
 800eb5e:	b930      	cbnz	r0, 800eb6e <__mdiff+0x2e>
 800eb60:	4b3a      	ldr	r3, [pc, #232]	; (800ec4c <__mdiff+0x10c>)
 800eb62:	4602      	mov	r2, r0
 800eb64:	f240 2132 	movw	r1, #562	; 0x232
 800eb68:	4839      	ldr	r0, [pc, #228]	; (800ec50 <__mdiff+0x110>)
 800eb6a:	f000 fce1 	bl	800f530 <__assert_func>
 800eb6e:	2301      	movs	r3, #1
 800eb70:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800eb74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb78:	bfa4      	itt	ge
 800eb7a:	4643      	movge	r3, r8
 800eb7c:	46a0      	movge	r8, r4
 800eb7e:	4630      	mov	r0, r6
 800eb80:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800eb84:	bfa6      	itte	ge
 800eb86:	461c      	movge	r4, r3
 800eb88:	2500      	movge	r5, #0
 800eb8a:	2501      	movlt	r5, #1
 800eb8c:	f7ff fd3a 	bl	800e604 <_Balloc>
 800eb90:	b920      	cbnz	r0, 800eb9c <__mdiff+0x5c>
 800eb92:	4b2e      	ldr	r3, [pc, #184]	; (800ec4c <__mdiff+0x10c>)
 800eb94:	4602      	mov	r2, r0
 800eb96:	f44f 7110 	mov.w	r1, #576	; 0x240
 800eb9a:	e7e5      	b.n	800eb68 <__mdiff+0x28>
 800eb9c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800eba0:	6926      	ldr	r6, [r4, #16]
 800eba2:	60c5      	str	r5, [r0, #12]
 800eba4:	f104 0914 	add.w	r9, r4, #20
 800eba8:	f108 0514 	add.w	r5, r8, #20
 800ebac:	f100 0e14 	add.w	lr, r0, #20
 800ebb0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ebb4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ebb8:	f108 0210 	add.w	r2, r8, #16
 800ebbc:	46f2      	mov	sl, lr
 800ebbe:	2100      	movs	r1, #0
 800ebc0:	f859 3b04 	ldr.w	r3, [r9], #4
 800ebc4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ebc8:	fa1f f883 	uxth.w	r8, r3
 800ebcc:	fa11 f18b 	uxtah	r1, r1, fp
 800ebd0:	0c1b      	lsrs	r3, r3, #16
 800ebd2:	eba1 0808 	sub.w	r8, r1, r8
 800ebd6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ebda:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ebde:	fa1f f888 	uxth.w	r8, r8
 800ebe2:	1419      	asrs	r1, r3, #16
 800ebe4:	454e      	cmp	r6, r9
 800ebe6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ebea:	f84a 3b04 	str.w	r3, [sl], #4
 800ebee:	d8e7      	bhi.n	800ebc0 <__mdiff+0x80>
 800ebf0:	1b33      	subs	r3, r6, r4
 800ebf2:	3b15      	subs	r3, #21
 800ebf4:	f023 0303 	bic.w	r3, r3, #3
 800ebf8:	3304      	adds	r3, #4
 800ebfa:	3415      	adds	r4, #21
 800ebfc:	42a6      	cmp	r6, r4
 800ebfe:	bf38      	it	cc
 800ec00:	2304      	movcc	r3, #4
 800ec02:	441d      	add	r5, r3
 800ec04:	4473      	add	r3, lr
 800ec06:	469e      	mov	lr, r3
 800ec08:	462e      	mov	r6, r5
 800ec0a:	4566      	cmp	r6, ip
 800ec0c:	d30e      	bcc.n	800ec2c <__mdiff+0xec>
 800ec0e:	f10c 0203 	add.w	r2, ip, #3
 800ec12:	1b52      	subs	r2, r2, r5
 800ec14:	f022 0203 	bic.w	r2, r2, #3
 800ec18:	3d03      	subs	r5, #3
 800ec1a:	45ac      	cmp	ip, r5
 800ec1c:	bf38      	it	cc
 800ec1e:	2200      	movcc	r2, #0
 800ec20:	441a      	add	r2, r3
 800ec22:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ec26:	b17b      	cbz	r3, 800ec48 <__mdiff+0x108>
 800ec28:	6107      	str	r7, [r0, #16]
 800ec2a:	e7a3      	b.n	800eb74 <__mdiff+0x34>
 800ec2c:	f856 8b04 	ldr.w	r8, [r6], #4
 800ec30:	fa11 f288 	uxtah	r2, r1, r8
 800ec34:	1414      	asrs	r4, r2, #16
 800ec36:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ec3a:	b292      	uxth	r2, r2
 800ec3c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ec40:	f84e 2b04 	str.w	r2, [lr], #4
 800ec44:	1421      	asrs	r1, r4, #16
 800ec46:	e7e0      	b.n	800ec0a <__mdiff+0xca>
 800ec48:	3f01      	subs	r7, #1
 800ec4a:	e7ea      	b.n	800ec22 <__mdiff+0xe2>
 800ec4c:	080101b7 	.word	0x080101b7
 800ec50:	08010228 	.word	0x08010228

0800ec54 <__d2b>:
 800ec54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ec58:	4689      	mov	r9, r1
 800ec5a:	2101      	movs	r1, #1
 800ec5c:	ec57 6b10 	vmov	r6, r7, d0
 800ec60:	4690      	mov	r8, r2
 800ec62:	f7ff fccf 	bl	800e604 <_Balloc>
 800ec66:	4604      	mov	r4, r0
 800ec68:	b930      	cbnz	r0, 800ec78 <__d2b+0x24>
 800ec6a:	4602      	mov	r2, r0
 800ec6c:	4b25      	ldr	r3, [pc, #148]	; (800ed04 <__d2b+0xb0>)
 800ec6e:	4826      	ldr	r0, [pc, #152]	; (800ed08 <__d2b+0xb4>)
 800ec70:	f240 310a 	movw	r1, #778	; 0x30a
 800ec74:	f000 fc5c 	bl	800f530 <__assert_func>
 800ec78:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ec7c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ec80:	bb35      	cbnz	r5, 800ecd0 <__d2b+0x7c>
 800ec82:	2e00      	cmp	r6, #0
 800ec84:	9301      	str	r3, [sp, #4]
 800ec86:	d028      	beq.n	800ecda <__d2b+0x86>
 800ec88:	4668      	mov	r0, sp
 800ec8a:	9600      	str	r6, [sp, #0]
 800ec8c:	f7ff fd82 	bl	800e794 <__lo0bits>
 800ec90:	9900      	ldr	r1, [sp, #0]
 800ec92:	b300      	cbz	r0, 800ecd6 <__d2b+0x82>
 800ec94:	9a01      	ldr	r2, [sp, #4]
 800ec96:	f1c0 0320 	rsb	r3, r0, #32
 800ec9a:	fa02 f303 	lsl.w	r3, r2, r3
 800ec9e:	430b      	orrs	r3, r1
 800eca0:	40c2      	lsrs	r2, r0
 800eca2:	6163      	str	r3, [r4, #20]
 800eca4:	9201      	str	r2, [sp, #4]
 800eca6:	9b01      	ldr	r3, [sp, #4]
 800eca8:	61a3      	str	r3, [r4, #24]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	bf14      	ite	ne
 800ecae:	2202      	movne	r2, #2
 800ecb0:	2201      	moveq	r2, #1
 800ecb2:	6122      	str	r2, [r4, #16]
 800ecb4:	b1d5      	cbz	r5, 800ecec <__d2b+0x98>
 800ecb6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ecba:	4405      	add	r5, r0
 800ecbc:	f8c9 5000 	str.w	r5, [r9]
 800ecc0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ecc4:	f8c8 0000 	str.w	r0, [r8]
 800ecc8:	4620      	mov	r0, r4
 800ecca:	b003      	add	sp, #12
 800eccc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ecd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ecd4:	e7d5      	b.n	800ec82 <__d2b+0x2e>
 800ecd6:	6161      	str	r1, [r4, #20]
 800ecd8:	e7e5      	b.n	800eca6 <__d2b+0x52>
 800ecda:	a801      	add	r0, sp, #4
 800ecdc:	f7ff fd5a 	bl	800e794 <__lo0bits>
 800ece0:	9b01      	ldr	r3, [sp, #4]
 800ece2:	6163      	str	r3, [r4, #20]
 800ece4:	2201      	movs	r2, #1
 800ece6:	6122      	str	r2, [r4, #16]
 800ece8:	3020      	adds	r0, #32
 800ecea:	e7e3      	b.n	800ecb4 <__d2b+0x60>
 800ecec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ecf0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ecf4:	f8c9 0000 	str.w	r0, [r9]
 800ecf8:	6918      	ldr	r0, [r3, #16]
 800ecfa:	f7ff fd2b 	bl	800e754 <__hi0bits>
 800ecfe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ed02:	e7df      	b.n	800ecc4 <__d2b+0x70>
 800ed04:	080101b7 	.word	0x080101b7
 800ed08:	08010228 	.word	0x08010228

0800ed0c <_calloc_r>:
 800ed0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ed0e:	fba1 2402 	umull	r2, r4, r1, r2
 800ed12:	b94c      	cbnz	r4, 800ed28 <_calloc_r+0x1c>
 800ed14:	4611      	mov	r1, r2
 800ed16:	9201      	str	r2, [sp, #4]
 800ed18:	f000 f87a 	bl	800ee10 <_malloc_r>
 800ed1c:	9a01      	ldr	r2, [sp, #4]
 800ed1e:	4605      	mov	r5, r0
 800ed20:	b930      	cbnz	r0, 800ed30 <_calloc_r+0x24>
 800ed22:	4628      	mov	r0, r5
 800ed24:	b003      	add	sp, #12
 800ed26:	bd30      	pop	{r4, r5, pc}
 800ed28:	220c      	movs	r2, #12
 800ed2a:	6002      	str	r2, [r0, #0]
 800ed2c:	2500      	movs	r5, #0
 800ed2e:	e7f8      	b.n	800ed22 <_calloc_r+0x16>
 800ed30:	4621      	mov	r1, r4
 800ed32:	f7fd fdc3 	bl	800c8bc <memset>
 800ed36:	e7f4      	b.n	800ed22 <_calloc_r+0x16>

0800ed38 <_free_r>:
 800ed38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ed3a:	2900      	cmp	r1, #0
 800ed3c:	d044      	beq.n	800edc8 <_free_r+0x90>
 800ed3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed42:	9001      	str	r0, [sp, #4]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	f1a1 0404 	sub.w	r4, r1, #4
 800ed4a:	bfb8      	it	lt
 800ed4c:	18e4      	addlt	r4, r4, r3
 800ed4e:	f000 fc8f 	bl	800f670 <__malloc_lock>
 800ed52:	4a1e      	ldr	r2, [pc, #120]	; (800edcc <_free_r+0x94>)
 800ed54:	9801      	ldr	r0, [sp, #4]
 800ed56:	6813      	ldr	r3, [r2, #0]
 800ed58:	b933      	cbnz	r3, 800ed68 <_free_r+0x30>
 800ed5a:	6063      	str	r3, [r4, #4]
 800ed5c:	6014      	str	r4, [r2, #0]
 800ed5e:	b003      	add	sp, #12
 800ed60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ed64:	f000 bc8a 	b.w	800f67c <__malloc_unlock>
 800ed68:	42a3      	cmp	r3, r4
 800ed6a:	d908      	bls.n	800ed7e <_free_r+0x46>
 800ed6c:	6825      	ldr	r5, [r4, #0]
 800ed6e:	1961      	adds	r1, r4, r5
 800ed70:	428b      	cmp	r3, r1
 800ed72:	bf01      	itttt	eq
 800ed74:	6819      	ldreq	r1, [r3, #0]
 800ed76:	685b      	ldreq	r3, [r3, #4]
 800ed78:	1949      	addeq	r1, r1, r5
 800ed7a:	6021      	streq	r1, [r4, #0]
 800ed7c:	e7ed      	b.n	800ed5a <_free_r+0x22>
 800ed7e:	461a      	mov	r2, r3
 800ed80:	685b      	ldr	r3, [r3, #4]
 800ed82:	b10b      	cbz	r3, 800ed88 <_free_r+0x50>
 800ed84:	42a3      	cmp	r3, r4
 800ed86:	d9fa      	bls.n	800ed7e <_free_r+0x46>
 800ed88:	6811      	ldr	r1, [r2, #0]
 800ed8a:	1855      	adds	r5, r2, r1
 800ed8c:	42a5      	cmp	r5, r4
 800ed8e:	d10b      	bne.n	800eda8 <_free_r+0x70>
 800ed90:	6824      	ldr	r4, [r4, #0]
 800ed92:	4421      	add	r1, r4
 800ed94:	1854      	adds	r4, r2, r1
 800ed96:	42a3      	cmp	r3, r4
 800ed98:	6011      	str	r1, [r2, #0]
 800ed9a:	d1e0      	bne.n	800ed5e <_free_r+0x26>
 800ed9c:	681c      	ldr	r4, [r3, #0]
 800ed9e:	685b      	ldr	r3, [r3, #4]
 800eda0:	6053      	str	r3, [r2, #4]
 800eda2:	4421      	add	r1, r4
 800eda4:	6011      	str	r1, [r2, #0]
 800eda6:	e7da      	b.n	800ed5e <_free_r+0x26>
 800eda8:	d902      	bls.n	800edb0 <_free_r+0x78>
 800edaa:	230c      	movs	r3, #12
 800edac:	6003      	str	r3, [r0, #0]
 800edae:	e7d6      	b.n	800ed5e <_free_r+0x26>
 800edb0:	6825      	ldr	r5, [r4, #0]
 800edb2:	1961      	adds	r1, r4, r5
 800edb4:	428b      	cmp	r3, r1
 800edb6:	bf04      	itt	eq
 800edb8:	6819      	ldreq	r1, [r3, #0]
 800edba:	685b      	ldreq	r3, [r3, #4]
 800edbc:	6063      	str	r3, [r4, #4]
 800edbe:	bf04      	itt	eq
 800edc0:	1949      	addeq	r1, r1, r5
 800edc2:	6021      	streq	r1, [r4, #0]
 800edc4:	6054      	str	r4, [r2, #4]
 800edc6:	e7ca      	b.n	800ed5e <_free_r+0x26>
 800edc8:	b003      	add	sp, #12
 800edca:	bd30      	pop	{r4, r5, pc}
 800edcc:	20005658 	.word	0x20005658

0800edd0 <sbrk_aligned>:
 800edd0:	b570      	push	{r4, r5, r6, lr}
 800edd2:	4e0e      	ldr	r6, [pc, #56]	; (800ee0c <sbrk_aligned+0x3c>)
 800edd4:	460c      	mov	r4, r1
 800edd6:	6831      	ldr	r1, [r6, #0]
 800edd8:	4605      	mov	r5, r0
 800edda:	b911      	cbnz	r1, 800ede2 <sbrk_aligned+0x12>
 800eddc:	f000 fb42 	bl	800f464 <_sbrk_r>
 800ede0:	6030      	str	r0, [r6, #0]
 800ede2:	4621      	mov	r1, r4
 800ede4:	4628      	mov	r0, r5
 800ede6:	f000 fb3d 	bl	800f464 <_sbrk_r>
 800edea:	1c43      	adds	r3, r0, #1
 800edec:	d00a      	beq.n	800ee04 <sbrk_aligned+0x34>
 800edee:	1cc4      	adds	r4, r0, #3
 800edf0:	f024 0403 	bic.w	r4, r4, #3
 800edf4:	42a0      	cmp	r0, r4
 800edf6:	d007      	beq.n	800ee08 <sbrk_aligned+0x38>
 800edf8:	1a21      	subs	r1, r4, r0
 800edfa:	4628      	mov	r0, r5
 800edfc:	f000 fb32 	bl	800f464 <_sbrk_r>
 800ee00:	3001      	adds	r0, #1
 800ee02:	d101      	bne.n	800ee08 <sbrk_aligned+0x38>
 800ee04:	f04f 34ff 	mov.w	r4, #4294967295
 800ee08:	4620      	mov	r0, r4
 800ee0a:	bd70      	pop	{r4, r5, r6, pc}
 800ee0c:	2000565c 	.word	0x2000565c

0800ee10 <_malloc_r>:
 800ee10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee14:	1ccd      	adds	r5, r1, #3
 800ee16:	f025 0503 	bic.w	r5, r5, #3
 800ee1a:	3508      	adds	r5, #8
 800ee1c:	2d0c      	cmp	r5, #12
 800ee1e:	bf38      	it	cc
 800ee20:	250c      	movcc	r5, #12
 800ee22:	2d00      	cmp	r5, #0
 800ee24:	4607      	mov	r7, r0
 800ee26:	db01      	blt.n	800ee2c <_malloc_r+0x1c>
 800ee28:	42a9      	cmp	r1, r5
 800ee2a:	d905      	bls.n	800ee38 <_malloc_r+0x28>
 800ee2c:	230c      	movs	r3, #12
 800ee2e:	603b      	str	r3, [r7, #0]
 800ee30:	2600      	movs	r6, #0
 800ee32:	4630      	mov	r0, r6
 800ee34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee38:	4e2e      	ldr	r6, [pc, #184]	; (800eef4 <_malloc_r+0xe4>)
 800ee3a:	f000 fc19 	bl	800f670 <__malloc_lock>
 800ee3e:	6833      	ldr	r3, [r6, #0]
 800ee40:	461c      	mov	r4, r3
 800ee42:	bb34      	cbnz	r4, 800ee92 <_malloc_r+0x82>
 800ee44:	4629      	mov	r1, r5
 800ee46:	4638      	mov	r0, r7
 800ee48:	f7ff ffc2 	bl	800edd0 <sbrk_aligned>
 800ee4c:	1c43      	adds	r3, r0, #1
 800ee4e:	4604      	mov	r4, r0
 800ee50:	d14d      	bne.n	800eeee <_malloc_r+0xde>
 800ee52:	6834      	ldr	r4, [r6, #0]
 800ee54:	4626      	mov	r6, r4
 800ee56:	2e00      	cmp	r6, #0
 800ee58:	d140      	bne.n	800eedc <_malloc_r+0xcc>
 800ee5a:	6823      	ldr	r3, [r4, #0]
 800ee5c:	4631      	mov	r1, r6
 800ee5e:	4638      	mov	r0, r7
 800ee60:	eb04 0803 	add.w	r8, r4, r3
 800ee64:	f000 fafe 	bl	800f464 <_sbrk_r>
 800ee68:	4580      	cmp	r8, r0
 800ee6a:	d13a      	bne.n	800eee2 <_malloc_r+0xd2>
 800ee6c:	6821      	ldr	r1, [r4, #0]
 800ee6e:	3503      	adds	r5, #3
 800ee70:	1a6d      	subs	r5, r5, r1
 800ee72:	f025 0503 	bic.w	r5, r5, #3
 800ee76:	3508      	adds	r5, #8
 800ee78:	2d0c      	cmp	r5, #12
 800ee7a:	bf38      	it	cc
 800ee7c:	250c      	movcc	r5, #12
 800ee7e:	4629      	mov	r1, r5
 800ee80:	4638      	mov	r0, r7
 800ee82:	f7ff ffa5 	bl	800edd0 <sbrk_aligned>
 800ee86:	3001      	adds	r0, #1
 800ee88:	d02b      	beq.n	800eee2 <_malloc_r+0xd2>
 800ee8a:	6823      	ldr	r3, [r4, #0]
 800ee8c:	442b      	add	r3, r5
 800ee8e:	6023      	str	r3, [r4, #0]
 800ee90:	e00e      	b.n	800eeb0 <_malloc_r+0xa0>
 800ee92:	6822      	ldr	r2, [r4, #0]
 800ee94:	1b52      	subs	r2, r2, r5
 800ee96:	d41e      	bmi.n	800eed6 <_malloc_r+0xc6>
 800ee98:	2a0b      	cmp	r2, #11
 800ee9a:	d916      	bls.n	800eeca <_malloc_r+0xba>
 800ee9c:	1961      	adds	r1, r4, r5
 800ee9e:	42a3      	cmp	r3, r4
 800eea0:	6025      	str	r5, [r4, #0]
 800eea2:	bf18      	it	ne
 800eea4:	6059      	strne	r1, [r3, #4]
 800eea6:	6863      	ldr	r3, [r4, #4]
 800eea8:	bf08      	it	eq
 800eeaa:	6031      	streq	r1, [r6, #0]
 800eeac:	5162      	str	r2, [r4, r5]
 800eeae:	604b      	str	r3, [r1, #4]
 800eeb0:	4638      	mov	r0, r7
 800eeb2:	f104 060b 	add.w	r6, r4, #11
 800eeb6:	f000 fbe1 	bl	800f67c <__malloc_unlock>
 800eeba:	f026 0607 	bic.w	r6, r6, #7
 800eebe:	1d23      	adds	r3, r4, #4
 800eec0:	1af2      	subs	r2, r6, r3
 800eec2:	d0b6      	beq.n	800ee32 <_malloc_r+0x22>
 800eec4:	1b9b      	subs	r3, r3, r6
 800eec6:	50a3      	str	r3, [r4, r2]
 800eec8:	e7b3      	b.n	800ee32 <_malloc_r+0x22>
 800eeca:	6862      	ldr	r2, [r4, #4]
 800eecc:	42a3      	cmp	r3, r4
 800eece:	bf0c      	ite	eq
 800eed0:	6032      	streq	r2, [r6, #0]
 800eed2:	605a      	strne	r2, [r3, #4]
 800eed4:	e7ec      	b.n	800eeb0 <_malloc_r+0xa0>
 800eed6:	4623      	mov	r3, r4
 800eed8:	6864      	ldr	r4, [r4, #4]
 800eeda:	e7b2      	b.n	800ee42 <_malloc_r+0x32>
 800eedc:	4634      	mov	r4, r6
 800eede:	6876      	ldr	r6, [r6, #4]
 800eee0:	e7b9      	b.n	800ee56 <_malloc_r+0x46>
 800eee2:	230c      	movs	r3, #12
 800eee4:	603b      	str	r3, [r7, #0]
 800eee6:	4638      	mov	r0, r7
 800eee8:	f000 fbc8 	bl	800f67c <__malloc_unlock>
 800eeec:	e7a1      	b.n	800ee32 <_malloc_r+0x22>
 800eeee:	6025      	str	r5, [r4, #0]
 800eef0:	e7de      	b.n	800eeb0 <_malloc_r+0xa0>
 800eef2:	bf00      	nop
 800eef4:	20005658 	.word	0x20005658

0800eef8 <__ssputs_r>:
 800eef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eefc:	688e      	ldr	r6, [r1, #8]
 800eefe:	429e      	cmp	r6, r3
 800ef00:	4682      	mov	sl, r0
 800ef02:	460c      	mov	r4, r1
 800ef04:	4690      	mov	r8, r2
 800ef06:	461f      	mov	r7, r3
 800ef08:	d838      	bhi.n	800ef7c <__ssputs_r+0x84>
 800ef0a:	898a      	ldrh	r2, [r1, #12]
 800ef0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ef10:	d032      	beq.n	800ef78 <__ssputs_r+0x80>
 800ef12:	6825      	ldr	r5, [r4, #0]
 800ef14:	6909      	ldr	r1, [r1, #16]
 800ef16:	eba5 0901 	sub.w	r9, r5, r1
 800ef1a:	6965      	ldr	r5, [r4, #20]
 800ef1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ef20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ef24:	3301      	adds	r3, #1
 800ef26:	444b      	add	r3, r9
 800ef28:	106d      	asrs	r5, r5, #1
 800ef2a:	429d      	cmp	r5, r3
 800ef2c:	bf38      	it	cc
 800ef2e:	461d      	movcc	r5, r3
 800ef30:	0553      	lsls	r3, r2, #21
 800ef32:	d531      	bpl.n	800ef98 <__ssputs_r+0xa0>
 800ef34:	4629      	mov	r1, r5
 800ef36:	f7ff ff6b 	bl	800ee10 <_malloc_r>
 800ef3a:	4606      	mov	r6, r0
 800ef3c:	b950      	cbnz	r0, 800ef54 <__ssputs_r+0x5c>
 800ef3e:	230c      	movs	r3, #12
 800ef40:	f8ca 3000 	str.w	r3, [sl]
 800ef44:	89a3      	ldrh	r3, [r4, #12]
 800ef46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef4a:	81a3      	strh	r3, [r4, #12]
 800ef4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ef50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef54:	6921      	ldr	r1, [r4, #16]
 800ef56:	464a      	mov	r2, r9
 800ef58:	f7fd fca2 	bl	800c8a0 <memcpy>
 800ef5c:	89a3      	ldrh	r3, [r4, #12]
 800ef5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ef62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef66:	81a3      	strh	r3, [r4, #12]
 800ef68:	6126      	str	r6, [r4, #16]
 800ef6a:	6165      	str	r5, [r4, #20]
 800ef6c:	444e      	add	r6, r9
 800ef6e:	eba5 0509 	sub.w	r5, r5, r9
 800ef72:	6026      	str	r6, [r4, #0]
 800ef74:	60a5      	str	r5, [r4, #8]
 800ef76:	463e      	mov	r6, r7
 800ef78:	42be      	cmp	r6, r7
 800ef7a:	d900      	bls.n	800ef7e <__ssputs_r+0x86>
 800ef7c:	463e      	mov	r6, r7
 800ef7e:	6820      	ldr	r0, [r4, #0]
 800ef80:	4632      	mov	r2, r6
 800ef82:	4641      	mov	r1, r8
 800ef84:	f000 fb5a 	bl	800f63c <memmove>
 800ef88:	68a3      	ldr	r3, [r4, #8]
 800ef8a:	1b9b      	subs	r3, r3, r6
 800ef8c:	60a3      	str	r3, [r4, #8]
 800ef8e:	6823      	ldr	r3, [r4, #0]
 800ef90:	4433      	add	r3, r6
 800ef92:	6023      	str	r3, [r4, #0]
 800ef94:	2000      	movs	r0, #0
 800ef96:	e7db      	b.n	800ef50 <__ssputs_r+0x58>
 800ef98:	462a      	mov	r2, r5
 800ef9a:	f000 fb75 	bl	800f688 <_realloc_r>
 800ef9e:	4606      	mov	r6, r0
 800efa0:	2800      	cmp	r0, #0
 800efa2:	d1e1      	bne.n	800ef68 <__ssputs_r+0x70>
 800efa4:	6921      	ldr	r1, [r4, #16]
 800efa6:	4650      	mov	r0, sl
 800efa8:	f7ff fec6 	bl	800ed38 <_free_r>
 800efac:	e7c7      	b.n	800ef3e <__ssputs_r+0x46>
	...

0800efb0 <_svfiprintf_r>:
 800efb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efb4:	4698      	mov	r8, r3
 800efb6:	898b      	ldrh	r3, [r1, #12]
 800efb8:	061b      	lsls	r3, r3, #24
 800efba:	b09d      	sub	sp, #116	; 0x74
 800efbc:	4607      	mov	r7, r0
 800efbe:	460d      	mov	r5, r1
 800efc0:	4614      	mov	r4, r2
 800efc2:	d50e      	bpl.n	800efe2 <_svfiprintf_r+0x32>
 800efc4:	690b      	ldr	r3, [r1, #16]
 800efc6:	b963      	cbnz	r3, 800efe2 <_svfiprintf_r+0x32>
 800efc8:	2140      	movs	r1, #64	; 0x40
 800efca:	f7ff ff21 	bl	800ee10 <_malloc_r>
 800efce:	6028      	str	r0, [r5, #0]
 800efd0:	6128      	str	r0, [r5, #16]
 800efd2:	b920      	cbnz	r0, 800efde <_svfiprintf_r+0x2e>
 800efd4:	230c      	movs	r3, #12
 800efd6:	603b      	str	r3, [r7, #0]
 800efd8:	f04f 30ff 	mov.w	r0, #4294967295
 800efdc:	e0d1      	b.n	800f182 <_svfiprintf_r+0x1d2>
 800efde:	2340      	movs	r3, #64	; 0x40
 800efe0:	616b      	str	r3, [r5, #20]
 800efe2:	2300      	movs	r3, #0
 800efe4:	9309      	str	r3, [sp, #36]	; 0x24
 800efe6:	2320      	movs	r3, #32
 800efe8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800efec:	f8cd 800c 	str.w	r8, [sp, #12]
 800eff0:	2330      	movs	r3, #48	; 0x30
 800eff2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f19c <_svfiprintf_r+0x1ec>
 800eff6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800effa:	f04f 0901 	mov.w	r9, #1
 800effe:	4623      	mov	r3, r4
 800f000:	469a      	mov	sl, r3
 800f002:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f006:	b10a      	cbz	r2, 800f00c <_svfiprintf_r+0x5c>
 800f008:	2a25      	cmp	r2, #37	; 0x25
 800f00a:	d1f9      	bne.n	800f000 <_svfiprintf_r+0x50>
 800f00c:	ebba 0b04 	subs.w	fp, sl, r4
 800f010:	d00b      	beq.n	800f02a <_svfiprintf_r+0x7a>
 800f012:	465b      	mov	r3, fp
 800f014:	4622      	mov	r2, r4
 800f016:	4629      	mov	r1, r5
 800f018:	4638      	mov	r0, r7
 800f01a:	f7ff ff6d 	bl	800eef8 <__ssputs_r>
 800f01e:	3001      	adds	r0, #1
 800f020:	f000 80aa 	beq.w	800f178 <_svfiprintf_r+0x1c8>
 800f024:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f026:	445a      	add	r2, fp
 800f028:	9209      	str	r2, [sp, #36]	; 0x24
 800f02a:	f89a 3000 	ldrb.w	r3, [sl]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	f000 80a2 	beq.w	800f178 <_svfiprintf_r+0x1c8>
 800f034:	2300      	movs	r3, #0
 800f036:	f04f 32ff 	mov.w	r2, #4294967295
 800f03a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f03e:	f10a 0a01 	add.w	sl, sl, #1
 800f042:	9304      	str	r3, [sp, #16]
 800f044:	9307      	str	r3, [sp, #28]
 800f046:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f04a:	931a      	str	r3, [sp, #104]	; 0x68
 800f04c:	4654      	mov	r4, sl
 800f04e:	2205      	movs	r2, #5
 800f050:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f054:	4851      	ldr	r0, [pc, #324]	; (800f19c <_svfiprintf_r+0x1ec>)
 800f056:	f7f1 f8d3 	bl	8000200 <memchr>
 800f05a:	9a04      	ldr	r2, [sp, #16]
 800f05c:	b9d8      	cbnz	r0, 800f096 <_svfiprintf_r+0xe6>
 800f05e:	06d0      	lsls	r0, r2, #27
 800f060:	bf44      	itt	mi
 800f062:	2320      	movmi	r3, #32
 800f064:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f068:	0711      	lsls	r1, r2, #28
 800f06a:	bf44      	itt	mi
 800f06c:	232b      	movmi	r3, #43	; 0x2b
 800f06e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f072:	f89a 3000 	ldrb.w	r3, [sl]
 800f076:	2b2a      	cmp	r3, #42	; 0x2a
 800f078:	d015      	beq.n	800f0a6 <_svfiprintf_r+0xf6>
 800f07a:	9a07      	ldr	r2, [sp, #28]
 800f07c:	4654      	mov	r4, sl
 800f07e:	2000      	movs	r0, #0
 800f080:	f04f 0c0a 	mov.w	ip, #10
 800f084:	4621      	mov	r1, r4
 800f086:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f08a:	3b30      	subs	r3, #48	; 0x30
 800f08c:	2b09      	cmp	r3, #9
 800f08e:	d94e      	bls.n	800f12e <_svfiprintf_r+0x17e>
 800f090:	b1b0      	cbz	r0, 800f0c0 <_svfiprintf_r+0x110>
 800f092:	9207      	str	r2, [sp, #28]
 800f094:	e014      	b.n	800f0c0 <_svfiprintf_r+0x110>
 800f096:	eba0 0308 	sub.w	r3, r0, r8
 800f09a:	fa09 f303 	lsl.w	r3, r9, r3
 800f09e:	4313      	orrs	r3, r2
 800f0a0:	9304      	str	r3, [sp, #16]
 800f0a2:	46a2      	mov	sl, r4
 800f0a4:	e7d2      	b.n	800f04c <_svfiprintf_r+0x9c>
 800f0a6:	9b03      	ldr	r3, [sp, #12]
 800f0a8:	1d19      	adds	r1, r3, #4
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	9103      	str	r1, [sp, #12]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	bfbb      	ittet	lt
 800f0b2:	425b      	neglt	r3, r3
 800f0b4:	f042 0202 	orrlt.w	r2, r2, #2
 800f0b8:	9307      	strge	r3, [sp, #28]
 800f0ba:	9307      	strlt	r3, [sp, #28]
 800f0bc:	bfb8      	it	lt
 800f0be:	9204      	strlt	r2, [sp, #16]
 800f0c0:	7823      	ldrb	r3, [r4, #0]
 800f0c2:	2b2e      	cmp	r3, #46	; 0x2e
 800f0c4:	d10c      	bne.n	800f0e0 <_svfiprintf_r+0x130>
 800f0c6:	7863      	ldrb	r3, [r4, #1]
 800f0c8:	2b2a      	cmp	r3, #42	; 0x2a
 800f0ca:	d135      	bne.n	800f138 <_svfiprintf_r+0x188>
 800f0cc:	9b03      	ldr	r3, [sp, #12]
 800f0ce:	1d1a      	adds	r2, r3, #4
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	9203      	str	r2, [sp, #12]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	bfb8      	it	lt
 800f0d8:	f04f 33ff 	movlt.w	r3, #4294967295
 800f0dc:	3402      	adds	r4, #2
 800f0de:	9305      	str	r3, [sp, #20]
 800f0e0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f1ac <_svfiprintf_r+0x1fc>
 800f0e4:	7821      	ldrb	r1, [r4, #0]
 800f0e6:	2203      	movs	r2, #3
 800f0e8:	4650      	mov	r0, sl
 800f0ea:	f7f1 f889 	bl	8000200 <memchr>
 800f0ee:	b140      	cbz	r0, 800f102 <_svfiprintf_r+0x152>
 800f0f0:	2340      	movs	r3, #64	; 0x40
 800f0f2:	eba0 000a 	sub.w	r0, r0, sl
 800f0f6:	fa03 f000 	lsl.w	r0, r3, r0
 800f0fa:	9b04      	ldr	r3, [sp, #16]
 800f0fc:	4303      	orrs	r3, r0
 800f0fe:	3401      	adds	r4, #1
 800f100:	9304      	str	r3, [sp, #16]
 800f102:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f106:	4826      	ldr	r0, [pc, #152]	; (800f1a0 <_svfiprintf_r+0x1f0>)
 800f108:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f10c:	2206      	movs	r2, #6
 800f10e:	f7f1 f877 	bl	8000200 <memchr>
 800f112:	2800      	cmp	r0, #0
 800f114:	d038      	beq.n	800f188 <_svfiprintf_r+0x1d8>
 800f116:	4b23      	ldr	r3, [pc, #140]	; (800f1a4 <_svfiprintf_r+0x1f4>)
 800f118:	bb1b      	cbnz	r3, 800f162 <_svfiprintf_r+0x1b2>
 800f11a:	9b03      	ldr	r3, [sp, #12]
 800f11c:	3307      	adds	r3, #7
 800f11e:	f023 0307 	bic.w	r3, r3, #7
 800f122:	3308      	adds	r3, #8
 800f124:	9303      	str	r3, [sp, #12]
 800f126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f128:	4433      	add	r3, r6
 800f12a:	9309      	str	r3, [sp, #36]	; 0x24
 800f12c:	e767      	b.n	800effe <_svfiprintf_r+0x4e>
 800f12e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f132:	460c      	mov	r4, r1
 800f134:	2001      	movs	r0, #1
 800f136:	e7a5      	b.n	800f084 <_svfiprintf_r+0xd4>
 800f138:	2300      	movs	r3, #0
 800f13a:	3401      	adds	r4, #1
 800f13c:	9305      	str	r3, [sp, #20]
 800f13e:	4619      	mov	r1, r3
 800f140:	f04f 0c0a 	mov.w	ip, #10
 800f144:	4620      	mov	r0, r4
 800f146:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f14a:	3a30      	subs	r2, #48	; 0x30
 800f14c:	2a09      	cmp	r2, #9
 800f14e:	d903      	bls.n	800f158 <_svfiprintf_r+0x1a8>
 800f150:	2b00      	cmp	r3, #0
 800f152:	d0c5      	beq.n	800f0e0 <_svfiprintf_r+0x130>
 800f154:	9105      	str	r1, [sp, #20]
 800f156:	e7c3      	b.n	800f0e0 <_svfiprintf_r+0x130>
 800f158:	fb0c 2101 	mla	r1, ip, r1, r2
 800f15c:	4604      	mov	r4, r0
 800f15e:	2301      	movs	r3, #1
 800f160:	e7f0      	b.n	800f144 <_svfiprintf_r+0x194>
 800f162:	ab03      	add	r3, sp, #12
 800f164:	9300      	str	r3, [sp, #0]
 800f166:	462a      	mov	r2, r5
 800f168:	4b0f      	ldr	r3, [pc, #60]	; (800f1a8 <_svfiprintf_r+0x1f8>)
 800f16a:	a904      	add	r1, sp, #16
 800f16c:	4638      	mov	r0, r7
 800f16e:	f7fd fc4d 	bl	800ca0c <_printf_float>
 800f172:	1c42      	adds	r2, r0, #1
 800f174:	4606      	mov	r6, r0
 800f176:	d1d6      	bne.n	800f126 <_svfiprintf_r+0x176>
 800f178:	89ab      	ldrh	r3, [r5, #12]
 800f17a:	065b      	lsls	r3, r3, #25
 800f17c:	f53f af2c 	bmi.w	800efd8 <_svfiprintf_r+0x28>
 800f180:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f182:	b01d      	add	sp, #116	; 0x74
 800f184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f188:	ab03      	add	r3, sp, #12
 800f18a:	9300      	str	r3, [sp, #0]
 800f18c:	462a      	mov	r2, r5
 800f18e:	4b06      	ldr	r3, [pc, #24]	; (800f1a8 <_svfiprintf_r+0x1f8>)
 800f190:	a904      	add	r1, sp, #16
 800f192:	4638      	mov	r0, r7
 800f194:	f7fd fede 	bl	800cf54 <_printf_i>
 800f198:	e7eb      	b.n	800f172 <_svfiprintf_r+0x1c2>
 800f19a:	bf00      	nop
 800f19c:	08010384 	.word	0x08010384
 800f1a0:	0801038e 	.word	0x0801038e
 800f1a4:	0800ca0d 	.word	0x0800ca0d
 800f1a8:	0800eef9 	.word	0x0800eef9
 800f1ac:	0801038a 	.word	0x0801038a

0800f1b0 <__sfputc_r>:
 800f1b0:	6893      	ldr	r3, [r2, #8]
 800f1b2:	3b01      	subs	r3, #1
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	b410      	push	{r4}
 800f1b8:	6093      	str	r3, [r2, #8]
 800f1ba:	da08      	bge.n	800f1ce <__sfputc_r+0x1e>
 800f1bc:	6994      	ldr	r4, [r2, #24]
 800f1be:	42a3      	cmp	r3, r4
 800f1c0:	db01      	blt.n	800f1c6 <__sfputc_r+0x16>
 800f1c2:	290a      	cmp	r1, #10
 800f1c4:	d103      	bne.n	800f1ce <__sfputc_r+0x1e>
 800f1c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f1ca:	f7fe b8b3 	b.w	800d334 <__swbuf_r>
 800f1ce:	6813      	ldr	r3, [r2, #0]
 800f1d0:	1c58      	adds	r0, r3, #1
 800f1d2:	6010      	str	r0, [r2, #0]
 800f1d4:	7019      	strb	r1, [r3, #0]
 800f1d6:	4608      	mov	r0, r1
 800f1d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f1dc:	4770      	bx	lr

0800f1de <__sfputs_r>:
 800f1de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1e0:	4606      	mov	r6, r0
 800f1e2:	460f      	mov	r7, r1
 800f1e4:	4614      	mov	r4, r2
 800f1e6:	18d5      	adds	r5, r2, r3
 800f1e8:	42ac      	cmp	r4, r5
 800f1ea:	d101      	bne.n	800f1f0 <__sfputs_r+0x12>
 800f1ec:	2000      	movs	r0, #0
 800f1ee:	e007      	b.n	800f200 <__sfputs_r+0x22>
 800f1f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1f4:	463a      	mov	r2, r7
 800f1f6:	4630      	mov	r0, r6
 800f1f8:	f7ff ffda 	bl	800f1b0 <__sfputc_r>
 800f1fc:	1c43      	adds	r3, r0, #1
 800f1fe:	d1f3      	bne.n	800f1e8 <__sfputs_r+0xa>
 800f200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f204 <_vfiprintf_r>:
 800f204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f208:	460d      	mov	r5, r1
 800f20a:	b09d      	sub	sp, #116	; 0x74
 800f20c:	4614      	mov	r4, r2
 800f20e:	4698      	mov	r8, r3
 800f210:	4606      	mov	r6, r0
 800f212:	b118      	cbz	r0, 800f21c <_vfiprintf_r+0x18>
 800f214:	6983      	ldr	r3, [r0, #24]
 800f216:	b90b      	cbnz	r3, 800f21c <_vfiprintf_r+0x18>
 800f218:	f7ff f8e2 	bl	800e3e0 <__sinit>
 800f21c:	4b89      	ldr	r3, [pc, #548]	; (800f444 <_vfiprintf_r+0x240>)
 800f21e:	429d      	cmp	r5, r3
 800f220:	d11b      	bne.n	800f25a <_vfiprintf_r+0x56>
 800f222:	6875      	ldr	r5, [r6, #4]
 800f224:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f226:	07d9      	lsls	r1, r3, #31
 800f228:	d405      	bmi.n	800f236 <_vfiprintf_r+0x32>
 800f22a:	89ab      	ldrh	r3, [r5, #12]
 800f22c:	059a      	lsls	r2, r3, #22
 800f22e:	d402      	bmi.n	800f236 <_vfiprintf_r+0x32>
 800f230:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f232:	f7ff f978 	bl	800e526 <__retarget_lock_acquire_recursive>
 800f236:	89ab      	ldrh	r3, [r5, #12]
 800f238:	071b      	lsls	r3, r3, #28
 800f23a:	d501      	bpl.n	800f240 <_vfiprintf_r+0x3c>
 800f23c:	692b      	ldr	r3, [r5, #16]
 800f23e:	b9eb      	cbnz	r3, 800f27c <_vfiprintf_r+0x78>
 800f240:	4629      	mov	r1, r5
 800f242:	4630      	mov	r0, r6
 800f244:	f7fe f8c8 	bl	800d3d8 <__swsetup_r>
 800f248:	b1c0      	cbz	r0, 800f27c <_vfiprintf_r+0x78>
 800f24a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f24c:	07dc      	lsls	r4, r3, #31
 800f24e:	d50e      	bpl.n	800f26e <_vfiprintf_r+0x6a>
 800f250:	f04f 30ff 	mov.w	r0, #4294967295
 800f254:	b01d      	add	sp, #116	; 0x74
 800f256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f25a:	4b7b      	ldr	r3, [pc, #492]	; (800f448 <_vfiprintf_r+0x244>)
 800f25c:	429d      	cmp	r5, r3
 800f25e:	d101      	bne.n	800f264 <_vfiprintf_r+0x60>
 800f260:	68b5      	ldr	r5, [r6, #8]
 800f262:	e7df      	b.n	800f224 <_vfiprintf_r+0x20>
 800f264:	4b79      	ldr	r3, [pc, #484]	; (800f44c <_vfiprintf_r+0x248>)
 800f266:	429d      	cmp	r5, r3
 800f268:	bf08      	it	eq
 800f26a:	68f5      	ldreq	r5, [r6, #12]
 800f26c:	e7da      	b.n	800f224 <_vfiprintf_r+0x20>
 800f26e:	89ab      	ldrh	r3, [r5, #12]
 800f270:	0598      	lsls	r0, r3, #22
 800f272:	d4ed      	bmi.n	800f250 <_vfiprintf_r+0x4c>
 800f274:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f276:	f7ff f957 	bl	800e528 <__retarget_lock_release_recursive>
 800f27a:	e7e9      	b.n	800f250 <_vfiprintf_r+0x4c>
 800f27c:	2300      	movs	r3, #0
 800f27e:	9309      	str	r3, [sp, #36]	; 0x24
 800f280:	2320      	movs	r3, #32
 800f282:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f286:	f8cd 800c 	str.w	r8, [sp, #12]
 800f28a:	2330      	movs	r3, #48	; 0x30
 800f28c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f450 <_vfiprintf_r+0x24c>
 800f290:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f294:	f04f 0901 	mov.w	r9, #1
 800f298:	4623      	mov	r3, r4
 800f29a:	469a      	mov	sl, r3
 800f29c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f2a0:	b10a      	cbz	r2, 800f2a6 <_vfiprintf_r+0xa2>
 800f2a2:	2a25      	cmp	r2, #37	; 0x25
 800f2a4:	d1f9      	bne.n	800f29a <_vfiprintf_r+0x96>
 800f2a6:	ebba 0b04 	subs.w	fp, sl, r4
 800f2aa:	d00b      	beq.n	800f2c4 <_vfiprintf_r+0xc0>
 800f2ac:	465b      	mov	r3, fp
 800f2ae:	4622      	mov	r2, r4
 800f2b0:	4629      	mov	r1, r5
 800f2b2:	4630      	mov	r0, r6
 800f2b4:	f7ff ff93 	bl	800f1de <__sfputs_r>
 800f2b8:	3001      	adds	r0, #1
 800f2ba:	f000 80aa 	beq.w	800f412 <_vfiprintf_r+0x20e>
 800f2be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f2c0:	445a      	add	r2, fp
 800f2c2:	9209      	str	r2, [sp, #36]	; 0x24
 800f2c4:	f89a 3000 	ldrb.w	r3, [sl]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	f000 80a2 	beq.w	800f412 <_vfiprintf_r+0x20e>
 800f2ce:	2300      	movs	r3, #0
 800f2d0:	f04f 32ff 	mov.w	r2, #4294967295
 800f2d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f2d8:	f10a 0a01 	add.w	sl, sl, #1
 800f2dc:	9304      	str	r3, [sp, #16]
 800f2de:	9307      	str	r3, [sp, #28]
 800f2e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f2e4:	931a      	str	r3, [sp, #104]	; 0x68
 800f2e6:	4654      	mov	r4, sl
 800f2e8:	2205      	movs	r2, #5
 800f2ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2ee:	4858      	ldr	r0, [pc, #352]	; (800f450 <_vfiprintf_r+0x24c>)
 800f2f0:	f7f0 ff86 	bl	8000200 <memchr>
 800f2f4:	9a04      	ldr	r2, [sp, #16]
 800f2f6:	b9d8      	cbnz	r0, 800f330 <_vfiprintf_r+0x12c>
 800f2f8:	06d1      	lsls	r1, r2, #27
 800f2fa:	bf44      	itt	mi
 800f2fc:	2320      	movmi	r3, #32
 800f2fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f302:	0713      	lsls	r3, r2, #28
 800f304:	bf44      	itt	mi
 800f306:	232b      	movmi	r3, #43	; 0x2b
 800f308:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f30c:	f89a 3000 	ldrb.w	r3, [sl]
 800f310:	2b2a      	cmp	r3, #42	; 0x2a
 800f312:	d015      	beq.n	800f340 <_vfiprintf_r+0x13c>
 800f314:	9a07      	ldr	r2, [sp, #28]
 800f316:	4654      	mov	r4, sl
 800f318:	2000      	movs	r0, #0
 800f31a:	f04f 0c0a 	mov.w	ip, #10
 800f31e:	4621      	mov	r1, r4
 800f320:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f324:	3b30      	subs	r3, #48	; 0x30
 800f326:	2b09      	cmp	r3, #9
 800f328:	d94e      	bls.n	800f3c8 <_vfiprintf_r+0x1c4>
 800f32a:	b1b0      	cbz	r0, 800f35a <_vfiprintf_r+0x156>
 800f32c:	9207      	str	r2, [sp, #28]
 800f32e:	e014      	b.n	800f35a <_vfiprintf_r+0x156>
 800f330:	eba0 0308 	sub.w	r3, r0, r8
 800f334:	fa09 f303 	lsl.w	r3, r9, r3
 800f338:	4313      	orrs	r3, r2
 800f33a:	9304      	str	r3, [sp, #16]
 800f33c:	46a2      	mov	sl, r4
 800f33e:	e7d2      	b.n	800f2e6 <_vfiprintf_r+0xe2>
 800f340:	9b03      	ldr	r3, [sp, #12]
 800f342:	1d19      	adds	r1, r3, #4
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	9103      	str	r1, [sp, #12]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	bfbb      	ittet	lt
 800f34c:	425b      	neglt	r3, r3
 800f34e:	f042 0202 	orrlt.w	r2, r2, #2
 800f352:	9307      	strge	r3, [sp, #28]
 800f354:	9307      	strlt	r3, [sp, #28]
 800f356:	bfb8      	it	lt
 800f358:	9204      	strlt	r2, [sp, #16]
 800f35a:	7823      	ldrb	r3, [r4, #0]
 800f35c:	2b2e      	cmp	r3, #46	; 0x2e
 800f35e:	d10c      	bne.n	800f37a <_vfiprintf_r+0x176>
 800f360:	7863      	ldrb	r3, [r4, #1]
 800f362:	2b2a      	cmp	r3, #42	; 0x2a
 800f364:	d135      	bne.n	800f3d2 <_vfiprintf_r+0x1ce>
 800f366:	9b03      	ldr	r3, [sp, #12]
 800f368:	1d1a      	adds	r2, r3, #4
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	9203      	str	r2, [sp, #12]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	bfb8      	it	lt
 800f372:	f04f 33ff 	movlt.w	r3, #4294967295
 800f376:	3402      	adds	r4, #2
 800f378:	9305      	str	r3, [sp, #20]
 800f37a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f460 <_vfiprintf_r+0x25c>
 800f37e:	7821      	ldrb	r1, [r4, #0]
 800f380:	2203      	movs	r2, #3
 800f382:	4650      	mov	r0, sl
 800f384:	f7f0 ff3c 	bl	8000200 <memchr>
 800f388:	b140      	cbz	r0, 800f39c <_vfiprintf_r+0x198>
 800f38a:	2340      	movs	r3, #64	; 0x40
 800f38c:	eba0 000a 	sub.w	r0, r0, sl
 800f390:	fa03 f000 	lsl.w	r0, r3, r0
 800f394:	9b04      	ldr	r3, [sp, #16]
 800f396:	4303      	orrs	r3, r0
 800f398:	3401      	adds	r4, #1
 800f39a:	9304      	str	r3, [sp, #16]
 800f39c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3a0:	482c      	ldr	r0, [pc, #176]	; (800f454 <_vfiprintf_r+0x250>)
 800f3a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f3a6:	2206      	movs	r2, #6
 800f3a8:	f7f0 ff2a 	bl	8000200 <memchr>
 800f3ac:	2800      	cmp	r0, #0
 800f3ae:	d03f      	beq.n	800f430 <_vfiprintf_r+0x22c>
 800f3b0:	4b29      	ldr	r3, [pc, #164]	; (800f458 <_vfiprintf_r+0x254>)
 800f3b2:	bb1b      	cbnz	r3, 800f3fc <_vfiprintf_r+0x1f8>
 800f3b4:	9b03      	ldr	r3, [sp, #12]
 800f3b6:	3307      	adds	r3, #7
 800f3b8:	f023 0307 	bic.w	r3, r3, #7
 800f3bc:	3308      	adds	r3, #8
 800f3be:	9303      	str	r3, [sp, #12]
 800f3c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3c2:	443b      	add	r3, r7
 800f3c4:	9309      	str	r3, [sp, #36]	; 0x24
 800f3c6:	e767      	b.n	800f298 <_vfiprintf_r+0x94>
 800f3c8:	fb0c 3202 	mla	r2, ip, r2, r3
 800f3cc:	460c      	mov	r4, r1
 800f3ce:	2001      	movs	r0, #1
 800f3d0:	e7a5      	b.n	800f31e <_vfiprintf_r+0x11a>
 800f3d2:	2300      	movs	r3, #0
 800f3d4:	3401      	adds	r4, #1
 800f3d6:	9305      	str	r3, [sp, #20]
 800f3d8:	4619      	mov	r1, r3
 800f3da:	f04f 0c0a 	mov.w	ip, #10
 800f3de:	4620      	mov	r0, r4
 800f3e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f3e4:	3a30      	subs	r2, #48	; 0x30
 800f3e6:	2a09      	cmp	r2, #9
 800f3e8:	d903      	bls.n	800f3f2 <_vfiprintf_r+0x1ee>
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d0c5      	beq.n	800f37a <_vfiprintf_r+0x176>
 800f3ee:	9105      	str	r1, [sp, #20]
 800f3f0:	e7c3      	b.n	800f37a <_vfiprintf_r+0x176>
 800f3f2:	fb0c 2101 	mla	r1, ip, r1, r2
 800f3f6:	4604      	mov	r4, r0
 800f3f8:	2301      	movs	r3, #1
 800f3fa:	e7f0      	b.n	800f3de <_vfiprintf_r+0x1da>
 800f3fc:	ab03      	add	r3, sp, #12
 800f3fe:	9300      	str	r3, [sp, #0]
 800f400:	462a      	mov	r2, r5
 800f402:	4b16      	ldr	r3, [pc, #88]	; (800f45c <_vfiprintf_r+0x258>)
 800f404:	a904      	add	r1, sp, #16
 800f406:	4630      	mov	r0, r6
 800f408:	f7fd fb00 	bl	800ca0c <_printf_float>
 800f40c:	4607      	mov	r7, r0
 800f40e:	1c78      	adds	r0, r7, #1
 800f410:	d1d6      	bne.n	800f3c0 <_vfiprintf_r+0x1bc>
 800f412:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f414:	07d9      	lsls	r1, r3, #31
 800f416:	d405      	bmi.n	800f424 <_vfiprintf_r+0x220>
 800f418:	89ab      	ldrh	r3, [r5, #12]
 800f41a:	059a      	lsls	r2, r3, #22
 800f41c:	d402      	bmi.n	800f424 <_vfiprintf_r+0x220>
 800f41e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f420:	f7ff f882 	bl	800e528 <__retarget_lock_release_recursive>
 800f424:	89ab      	ldrh	r3, [r5, #12]
 800f426:	065b      	lsls	r3, r3, #25
 800f428:	f53f af12 	bmi.w	800f250 <_vfiprintf_r+0x4c>
 800f42c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f42e:	e711      	b.n	800f254 <_vfiprintf_r+0x50>
 800f430:	ab03      	add	r3, sp, #12
 800f432:	9300      	str	r3, [sp, #0]
 800f434:	462a      	mov	r2, r5
 800f436:	4b09      	ldr	r3, [pc, #36]	; (800f45c <_vfiprintf_r+0x258>)
 800f438:	a904      	add	r1, sp, #16
 800f43a:	4630      	mov	r0, r6
 800f43c:	f7fd fd8a 	bl	800cf54 <_printf_i>
 800f440:	e7e4      	b.n	800f40c <_vfiprintf_r+0x208>
 800f442:	bf00      	nop
 800f444:	080101e8 	.word	0x080101e8
 800f448:	08010208 	.word	0x08010208
 800f44c:	080101c8 	.word	0x080101c8
 800f450:	08010384 	.word	0x08010384
 800f454:	0801038e 	.word	0x0801038e
 800f458:	0800ca0d 	.word	0x0800ca0d
 800f45c:	0800f1df 	.word	0x0800f1df
 800f460:	0801038a 	.word	0x0801038a

0800f464 <_sbrk_r>:
 800f464:	b538      	push	{r3, r4, r5, lr}
 800f466:	4d06      	ldr	r5, [pc, #24]	; (800f480 <_sbrk_r+0x1c>)
 800f468:	2300      	movs	r3, #0
 800f46a:	4604      	mov	r4, r0
 800f46c:	4608      	mov	r0, r1
 800f46e:	602b      	str	r3, [r5, #0]
 800f470:	f7f2 ff98 	bl	80023a4 <_sbrk>
 800f474:	1c43      	adds	r3, r0, #1
 800f476:	d102      	bne.n	800f47e <_sbrk_r+0x1a>
 800f478:	682b      	ldr	r3, [r5, #0]
 800f47a:	b103      	cbz	r3, 800f47e <_sbrk_r+0x1a>
 800f47c:	6023      	str	r3, [r4, #0]
 800f47e:	bd38      	pop	{r3, r4, r5, pc}
 800f480:	20005660 	.word	0x20005660

0800f484 <__sread>:
 800f484:	b510      	push	{r4, lr}
 800f486:	460c      	mov	r4, r1
 800f488:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f48c:	f000 f92c 	bl	800f6e8 <_read_r>
 800f490:	2800      	cmp	r0, #0
 800f492:	bfab      	itete	ge
 800f494:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f496:	89a3      	ldrhlt	r3, [r4, #12]
 800f498:	181b      	addge	r3, r3, r0
 800f49a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f49e:	bfac      	ite	ge
 800f4a0:	6563      	strge	r3, [r4, #84]	; 0x54
 800f4a2:	81a3      	strhlt	r3, [r4, #12]
 800f4a4:	bd10      	pop	{r4, pc}

0800f4a6 <__swrite>:
 800f4a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4aa:	461f      	mov	r7, r3
 800f4ac:	898b      	ldrh	r3, [r1, #12]
 800f4ae:	05db      	lsls	r3, r3, #23
 800f4b0:	4605      	mov	r5, r0
 800f4b2:	460c      	mov	r4, r1
 800f4b4:	4616      	mov	r6, r2
 800f4b6:	d505      	bpl.n	800f4c4 <__swrite+0x1e>
 800f4b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4bc:	2302      	movs	r3, #2
 800f4be:	2200      	movs	r2, #0
 800f4c0:	f000 f898 	bl	800f5f4 <_lseek_r>
 800f4c4:	89a3      	ldrh	r3, [r4, #12]
 800f4c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f4ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f4ce:	81a3      	strh	r3, [r4, #12]
 800f4d0:	4632      	mov	r2, r6
 800f4d2:	463b      	mov	r3, r7
 800f4d4:	4628      	mov	r0, r5
 800f4d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f4da:	f000 b817 	b.w	800f50c <_write_r>

0800f4de <__sseek>:
 800f4de:	b510      	push	{r4, lr}
 800f4e0:	460c      	mov	r4, r1
 800f4e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4e6:	f000 f885 	bl	800f5f4 <_lseek_r>
 800f4ea:	1c43      	adds	r3, r0, #1
 800f4ec:	89a3      	ldrh	r3, [r4, #12]
 800f4ee:	bf15      	itete	ne
 800f4f0:	6560      	strne	r0, [r4, #84]	; 0x54
 800f4f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f4f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f4fa:	81a3      	strheq	r3, [r4, #12]
 800f4fc:	bf18      	it	ne
 800f4fe:	81a3      	strhne	r3, [r4, #12]
 800f500:	bd10      	pop	{r4, pc}

0800f502 <__sclose>:
 800f502:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f506:	f000 b831 	b.w	800f56c <_close_r>
	...

0800f50c <_write_r>:
 800f50c:	b538      	push	{r3, r4, r5, lr}
 800f50e:	4d07      	ldr	r5, [pc, #28]	; (800f52c <_write_r+0x20>)
 800f510:	4604      	mov	r4, r0
 800f512:	4608      	mov	r0, r1
 800f514:	4611      	mov	r1, r2
 800f516:	2200      	movs	r2, #0
 800f518:	602a      	str	r2, [r5, #0]
 800f51a:	461a      	mov	r2, r3
 800f51c:	f7f2 fef1 	bl	8002302 <_write>
 800f520:	1c43      	adds	r3, r0, #1
 800f522:	d102      	bne.n	800f52a <_write_r+0x1e>
 800f524:	682b      	ldr	r3, [r5, #0]
 800f526:	b103      	cbz	r3, 800f52a <_write_r+0x1e>
 800f528:	6023      	str	r3, [r4, #0]
 800f52a:	bd38      	pop	{r3, r4, r5, pc}
 800f52c:	20005660 	.word	0x20005660

0800f530 <__assert_func>:
 800f530:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f532:	4614      	mov	r4, r2
 800f534:	461a      	mov	r2, r3
 800f536:	4b09      	ldr	r3, [pc, #36]	; (800f55c <__assert_func+0x2c>)
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	4605      	mov	r5, r0
 800f53c:	68d8      	ldr	r0, [r3, #12]
 800f53e:	b14c      	cbz	r4, 800f554 <__assert_func+0x24>
 800f540:	4b07      	ldr	r3, [pc, #28]	; (800f560 <__assert_func+0x30>)
 800f542:	9100      	str	r1, [sp, #0]
 800f544:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f548:	4906      	ldr	r1, [pc, #24]	; (800f564 <__assert_func+0x34>)
 800f54a:	462b      	mov	r3, r5
 800f54c:	f000 f81e 	bl	800f58c <fiprintf>
 800f550:	f000 f8e9 	bl	800f726 <abort>
 800f554:	4b04      	ldr	r3, [pc, #16]	; (800f568 <__assert_func+0x38>)
 800f556:	461c      	mov	r4, r3
 800f558:	e7f3      	b.n	800f542 <__assert_func+0x12>
 800f55a:	bf00      	nop
 800f55c:	200001e4 	.word	0x200001e4
 800f560:	08010395 	.word	0x08010395
 800f564:	080103a2 	.word	0x080103a2
 800f568:	080103d0 	.word	0x080103d0

0800f56c <_close_r>:
 800f56c:	b538      	push	{r3, r4, r5, lr}
 800f56e:	4d06      	ldr	r5, [pc, #24]	; (800f588 <_close_r+0x1c>)
 800f570:	2300      	movs	r3, #0
 800f572:	4604      	mov	r4, r0
 800f574:	4608      	mov	r0, r1
 800f576:	602b      	str	r3, [r5, #0]
 800f578:	f7f2 fedf 	bl	800233a <_close>
 800f57c:	1c43      	adds	r3, r0, #1
 800f57e:	d102      	bne.n	800f586 <_close_r+0x1a>
 800f580:	682b      	ldr	r3, [r5, #0]
 800f582:	b103      	cbz	r3, 800f586 <_close_r+0x1a>
 800f584:	6023      	str	r3, [r4, #0]
 800f586:	bd38      	pop	{r3, r4, r5, pc}
 800f588:	20005660 	.word	0x20005660

0800f58c <fiprintf>:
 800f58c:	b40e      	push	{r1, r2, r3}
 800f58e:	b503      	push	{r0, r1, lr}
 800f590:	4601      	mov	r1, r0
 800f592:	ab03      	add	r3, sp, #12
 800f594:	4805      	ldr	r0, [pc, #20]	; (800f5ac <fiprintf+0x20>)
 800f596:	f853 2b04 	ldr.w	r2, [r3], #4
 800f59a:	6800      	ldr	r0, [r0, #0]
 800f59c:	9301      	str	r3, [sp, #4]
 800f59e:	f7ff fe31 	bl	800f204 <_vfiprintf_r>
 800f5a2:	b002      	add	sp, #8
 800f5a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f5a8:	b003      	add	sp, #12
 800f5aa:	4770      	bx	lr
 800f5ac:	200001e4 	.word	0x200001e4

0800f5b0 <_fstat_r>:
 800f5b0:	b538      	push	{r3, r4, r5, lr}
 800f5b2:	4d07      	ldr	r5, [pc, #28]	; (800f5d0 <_fstat_r+0x20>)
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	4604      	mov	r4, r0
 800f5b8:	4608      	mov	r0, r1
 800f5ba:	4611      	mov	r1, r2
 800f5bc:	602b      	str	r3, [r5, #0]
 800f5be:	f7f2 fec8 	bl	8002352 <_fstat>
 800f5c2:	1c43      	adds	r3, r0, #1
 800f5c4:	d102      	bne.n	800f5cc <_fstat_r+0x1c>
 800f5c6:	682b      	ldr	r3, [r5, #0]
 800f5c8:	b103      	cbz	r3, 800f5cc <_fstat_r+0x1c>
 800f5ca:	6023      	str	r3, [r4, #0]
 800f5cc:	bd38      	pop	{r3, r4, r5, pc}
 800f5ce:	bf00      	nop
 800f5d0:	20005660 	.word	0x20005660

0800f5d4 <_isatty_r>:
 800f5d4:	b538      	push	{r3, r4, r5, lr}
 800f5d6:	4d06      	ldr	r5, [pc, #24]	; (800f5f0 <_isatty_r+0x1c>)
 800f5d8:	2300      	movs	r3, #0
 800f5da:	4604      	mov	r4, r0
 800f5dc:	4608      	mov	r0, r1
 800f5de:	602b      	str	r3, [r5, #0]
 800f5e0:	f7f2 fec7 	bl	8002372 <_isatty>
 800f5e4:	1c43      	adds	r3, r0, #1
 800f5e6:	d102      	bne.n	800f5ee <_isatty_r+0x1a>
 800f5e8:	682b      	ldr	r3, [r5, #0]
 800f5ea:	b103      	cbz	r3, 800f5ee <_isatty_r+0x1a>
 800f5ec:	6023      	str	r3, [r4, #0]
 800f5ee:	bd38      	pop	{r3, r4, r5, pc}
 800f5f0:	20005660 	.word	0x20005660

0800f5f4 <_lseek_r>:
 800f5f4:	b538      	push	{r3, r4, r5, lr}
 800f5f6:	4d07      	ldr	r5, [pc, #28]	; (800f614 <_lseek_r+0x20>)
 800f5f8:	4604      	mov	r4, r0
 800f5fa:	4608      	mov	r0, r1
 800f5fc:	4611      	mov	r1, r2
 800f5fe:	2200      	movs	r2, #0
 800f600:	602a      	str	r2, [r5, #0]
 800f602:	461a      	mov	r2, r3
 800f604:	f7f2 fec0 	bl	8002388 <_lseek>
 800f608:	1c43      	adds	r3, r0, #1
 800f60a:	d102      	bne.n	800f612 <_lseek_r+0x1e>
 800f60c:	682b      	ldr	r3, [r5, #0]
 800f60e:	b103      	cbz	r3, 800f612 <_lseek_r+0x1e>
 800f610:	6023      	str	r3, [r4, #0]
 800f612:	bd38      	pop	{r3, r4, r5, pc}
 800f614:	20005660 	.word	0x20005660

0800f618 <__ascii_mbtowc>:
 800f618:	b082      	sub	sp, #8
 800f61a:	b901      	cbnz	r1, 800f61e <__ascii_mbtowc+0x6>
 800f61c:	a901      	add	r1, sp, #4
 800f61e:	b142      	cbz	r2, 800f632 <__ascii_mbtowc+0x1a>
 800f620:	b14b      	cbz	r3, 800f636 <__ascii_mbtowc+0x1e>
 800f622:	7813      	ldrb	r3, [r2, #0]
 800f624:	600b      	str	r3, [r1, #0]
 800f626:	7812      	ldrb	r2, [r2, #0]
 800f628:	1e10      	subs	r0, r2, #0
 800f62a:	bf18      	it	ne
 800f62c:	2001      	movne	r0, #1
 800f62e:	b002      	add	sp, #8
 800f630:	4770      	bx	lr
 800f632:	4610      	mov	r0, r2
 800f634:	e7fb      	b.n	800f62e <__ascii_mbtowc+0x16>
 800f636:	f06f 0001 	mvn.w	r0, #1
 800f63a:	e7f8      	b.n	800f62e <__ascii_mbtowc+0x16>

0800f63c <memmove>:
 800f63c:	4288      	cmp	r0, r1
 800f63e:	b510      	push	{r4, lr}
 800f640:	eb01 0402 	add.w	r4, r1, r2
 800f644:	d902      	bls.n	800f64c <memmove+0x10>
 800f646:	4284      	cmp	r4, r0
 800f648:	4623      	mov	r3, r4
 800f64a:	d807      	bhi.n	800f65c <memmove+0x20>
 800f64c:	1e43      	subs	r3, r0, #1
 800f64e:	42a1      	cmp	r1, r4
 800f650:	d008      	beq.n	800f664 <memmove+0x28>
 800f652:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f656:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f65a:	e7f8      	b.n	800f64e <memmove+0x12>
 800f65c:	4402      	add	r2, r0
 800f65e:	4601      	mov	r1, r0
 800f660:	428a      	cmp	r2, r1
 800f662:	d100      	bne.n	800f666 <memmove+0x2a>
 800f664:	bd10      	pop	{r4, pc}
 800f666:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f66a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f66e:	e7f7      	b.n	800f660 <memmove+0x24>

0800f670 <__malloc_lock>:
 800f670:	4801      	ldr	r0, [pc, #4]	; (800f678 <__malloc_lock+0x8>)
 800f672:	f7fe bf58 	b.w	800e526 <__retarget_lock_acquire_recursive>
 800f676:	bf00      	nop
 800f678:	20005654 	.word	0x20005654

0800f67c <__malloc_unlock>:
 800f67c:	4801      	ldr	r0, [pc, #4]	; (800f684 <__malloc_unlock+0x8>)
 800f67e:	f7fe bf53 	b.w	800e528 <__retarget_lock_release_recursive>
 800f682:	bf00      	nop
 800f684:	20005654 	.word	0x20005654

0800f688 <_realloc_r>:
 800f688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f68c:	4680      	mov	r8, r0
 800f68e:	4614      	mov	r4, r2
 800f690:	460e      	mov	r6, r1
 800f692:	b921      	cbnz	r1, 800f69e <_realloc_r+0x16>
 800f694:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f698:	4611      	mov	r1, r2
 800f69a:	f7ff bbb9 	b.w	800ee10 <_malloc_r>
 800f69e:	b92a      	cbnz	r2, 800f6ac <_realloc_r+0x24>
 800f6a0:	f7ff fb4a 	bl	800ed38 <_free_r>
 800f6a4:	4625      	mov	r5, r4
 800f6a6:	4628      	mov	r0, r5
 800f6a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6ac:	f000 f842 	bl	800f734 <_malloc_usable_size_r>
 800f6b0:	4284      	cmp	r4, r0
 800f6b2:	4607      	mov	r7, r0
 800f6b4:	d802      	bhi.n	800f6bc <_realloc_r+0x34>
 800f6b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f6ba:	d812      	bhi.n	800f6e2 <_realloc_r+0x5a>
 800f6bc:	4621      	mov	r1, r4
 800f6be:	4640      	mov	r0, r8
 800f6c0:	f7ff fba6 	bl	800ee10 <_malloc_r>
 800f6c4:	4605      	mov	r5, r0
 800f6c6:	2800      	cmp	r0, #0
 800f6c8:	d0ed      	beq.n	800f6a6 <_realloc_r+0x1e>
 800f6ca:	42bc      	cmp	r4, r7
 800f6cc:	4622      	mov	r2, r4
 800f6ce:	4631      	mov	r1, r6
 800f6d0:	bf28      	it	cs
 800f6d2:	463a      	movcs	r2, r7
 800f6d4:	f7fd f8e4 	bl	800c8a0 <memcpy>
 800f6d8:	4631      	mov	r1, r6
 800f6da:	4640      	mov	r0, r8
 800f6dc:	f7ff fb2c 	bl	800ed38 <_free_r>
 800f6e0:	e7e1      	b.n	800f6a6 <_realloc_r+0x1e>
 800f6e2:	4635      	mov	r5, r6
 800f6e4:	e7df      	b.n	800f6a6 <_realloc_r+0x1e>
	...

0800f6e8 <_read_r>:
 800f6e8:	b538      	push	{r3, r4, r5, lr}
 800f6ea:	4d07      	ldr	r5, [pc, #28]	; (800f708 <_read_r+0x20>)
 800f6ec:	4604      	mov	r4, r0
 800f6ee:	4608      	mov	r0, r1
 800f6f0:	4611      	mov	r1, r2
 800f6f2:	2200      	movs	r2, #0
 800f6f4:	602a      	str	r2, [r5, #0]
 800f6f6:	461a      	mov	r2, r3
 800f6f8:	f7f2 fde6 	bl	80022c8 <_read>
 800f6fc:	1c43      	adds	r3, r0, #1
 800f6fe:	d102      	bne.n	800f706 <_read_r+0x1e>
 800f700:	682b      	ldr	r3, [r5, #0]
 800f702:	b103      	cbz	r3, 800f706 <_read_r+0x1e>
 800f704:	6023      	str	r3, [r4, #0]
 800f706:	bd38      	pop	{r3, r4, r5, pc}
 800f708:	20005660 	.word	0x20005660

0800f70c <__ascii_wctomb>:
 800f70c:	b149      	cbz	r1, 800f722 <__ascii_wctomb+0x16>
 800f70e:	2aff      	cmp	r2, #255	; 0xff
 800f710:	bf85      	ittet	hi
 800f712:	238a      	movhi	r3, #138	; 0x8a
 800f714:	6003      	strhi	r3, [r0, #0]
 800f716:	700a      	strbls	r2, [r1, #0]
 800f718:	f04f 30ff 	movhi.w	r0, #4294967295
 800f71c:	bf98      	it	ls
 800f71e:	2001      	movls	r0, #1
 800f720:	4770      	bx	lr
 800f722:	4608      	mov	r0, r1
 800f724:	4770      	bx	lr

0800f726 <abort>:
 800f726:	b508      	push	{r3, lr}
 800f728:	2006      	movs	r0, #6
 800f72a:	f000 f833 	bl	800f794 <raise>
 800f72e:	2001      	movs	r0, #1
 800f730:	f7f2 fdc0 	bl	80022b4 <_exit>

0800f734 <_malloc_usable_size_r>:
 800f734:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f738:	1f18      	subs	r0, r3, #4
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	bfbc      	itt	lt
 800f73e:	580b      	ldrlt	r3, [r1, r0]
 800f740:	18c0      	addlt	r0, r0, r3
 800f742:	4770      	bx	lr

0800f744 <_raise_r>:
 800f744:	291f      	cmp	r1, #31
 800f746:	b538      	push	{r3, r4, r5, lr}
 800f748:	4604      	mov	r4, r0
 800f74a:	460d      	mov	r5, r1
 800f74c:	d904      	bls.n	800f758 <_raise_r+0x14>
 800f74e:	2316      	movs	r3, #22
 800f750:	6003      	str	r3, [r0, #0]
 800f752:	f04f 30ff 	mov.w	r0, #4294967295
 800f756:	bd38      	pop	{r3, r4, r5, pc}
 800f758:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f75a:	b112      	cbz	r2, 800f762 <_raise_r+0x1e>
 800f75c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f760:	b94b      	cbnz	r3, 800f776 <_raise_r+0x32>
 800f762:	4620      	mov	r0, r4
 800f764:	f000 f830 	bl	800f7c8 <_getpid_r>
 800f768:	462a      	mov	r2, r5
 800f76a:	4601      	mov	r1, r0
 800f76c:	4620      	mov	r0, r4
 800f76e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f772:	f000 b817 	b.w	800f7a4 <_kill_r>
 800f776:	2b01      	cmp	r3, #1
 800f778:	d00a      	beq.n	800f790 <_raise_r+0x4c>
 800f77a:	1c59      	adds	r1, r3, #1
 800f77c:	d103      	bne.n	800f786 <_raise_r+0x42>
 800f77e:	2316      	movs	r3, #22
 800f780:	6003      	str	r3, [r0, #0]
 800f782:	2001      	movs	r0, #1
 800f784:	e7e7      	b.n	800f756 <_raise_r+0x12>
 800f786:	2400      	movs	r4, #0
 800f788:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f78c:	4628      	mov	r0, r5
 800f78e:	4798      	blx	r3
 800f790:	2000      	movs	r0, #0
 800f792:	e7e0      	b.n	800f756 <_raise_r+0x12>

0800f794 <raise>:
 800f794:	4b02      	ldr	r3, [pc, #8]	; (800f7a0 <raise+0xc>)
 800f796:	4601      	mov	r1, r0
 800f798:	6818      	ldr	r0, [r3, #0]
 800f79a:	f7ff bfd3 	b.w	800f744 <_raise_r>
 800f79e:	bf00      	nop
 800f7a0:	200001e4 	.word	0x200001e4

0800f7a4 <_kill_r>:
 800f7a4:	b538      	push	{r3, r4, r5, lr}
 800f7a6:	4d07      	ldr	r5, [pc, #28]	; (800f7c4 <_kill_r+0x20>)
 800f7a8:	2300      	movs	r3, #0
 800f7aa:	4604      	mov	r4, r0
 800f7ac:	4608      	mov	r0, r1
 800f7ae:	4611      	mov	r1, r2
 800f7b0:	602b      	str	r3, [r5, #0]
 800f7b2:	f7f2 fd6f 	bl	8002294 <_kill>
 800f7b6:	1c43      	adds	r3, r0, #1
 800f7b8:	d102      	bne.n	800f7c0 <_kill_r+0x1c>
 800f7ba:	682b      	ldr	r3, [r5, #0]
 800f7bc:	b103      	cbz	r3, 800f7c0 <_kill_r+0x1c>
 800f7be:	6023      	str	r3, [r4, #0]
 800f7c0:	bd38      	pop	{r3, r4, r5, pc}
 800f7c2:	bf00      	nop
 800f7c4:	20005660 	.word	0x20005660

0800f7c8 <_getpid_r>:
 800f7c8:	f7f2 bd5c 	b.w	8002284 <_getpid>

0800f7cc <_init>:
 800f7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7ce:	bf00      	nop
 800f7d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7d2:	bc08      	pop	{r3}
 800f7d4:	469e      	mov	lr, r3
 800f7d6:	4770      	bx	lr

0800f7d8 <_fini>:
 800f7d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7da:	bf00      	nop
 800f7dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7de:	bc08      	pop	{r3}
 800f7e0:	469e      	mov	lr, r3
 800f7e2:	4770      	bx	lr
